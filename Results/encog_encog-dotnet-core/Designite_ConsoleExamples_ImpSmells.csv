Implementation smell,Namespace,Class,File,Method,Description
Long Method,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The method has 114 lines of code.
Long Method,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The method has 110 lines of code.
Complex Method,ConsoleExamples,ConsoleExamples,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\ConsoleExamples.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,Encog.Examples.Indicator.Avg,IndicatorExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\IndicatorExample.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,Encog.Examples.Indicator.ImportData,MyInd,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,WriteCollectedFile,Cyclomatic complexity of the method is 8
Complex Method,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,SaveOutNeuronCentersAndWeights,Cyclomatic complexity of the method is 8
Complex Method,Encog.Examples.XOR,XORFactory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,Run,Cyclomatic complexity of the method is 17
Complex Method,Encog.Examples.SVMPredictCSV,SVMPredictCSV,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\mytests.cs,Execute,Cyclomatic complexity of the method is 12
Complex Method,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CalculateWeights,Cyclomatic complexity of the method is 8
Long Parameter List,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The method has 5 parameters.
Long Parameter List,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,GenerateATemporalSet,The method has 5 parameters.
Long Parameter List,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Copy,The method has 5 parameters.
Long Parameter List,Encog.Examples.XOR,XORFactory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,Process,The method has 5 parameters.
Long Parameter List,Encog.Examples.SVM_Predict,CreateSVMNetWork,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Process,The method has 5 parameters.
Long Statement,Encog.Examples.Benchmark,ElliottBenchmark,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\ElliottBenchmark.cs,evaluateNetwork,The length of the statement  "	Console.WriteLine (network.GetActivation (1).GetType ().Name + ": time=" + Format.FormatInteger ((int)sw.ElapsedMilliseconds) + "ms' Avg Iterations: " + Format.FormatInteger ((int)(total / SAMPLE_SIZE))); " is 204.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "	TemporalMLDataSet superTemportal = TrainerHelper.GenerateTrainingWithPercentChangeOnSerie (100' 1' Opens.ToArray ()' Close.ToArray ()' High.ToArray ()' Low.ToArray ()' Volume.ToArray ()); " is 187.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "	IMLDataPair aPairInput = TrainerHelper.ProcessPairs (NetworkUtility.CalculatePercents (Opens.ToArray ())' NetworkUtility.CalculatePercents (Opens.ToArray ())' 100' 1); " is 167.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "	IMLDataPair aPairInput3 = TrainerHelper.ProcessPairs (NetworkUtility.CalculatePercents (Close.ToArray ())' NetworkUtility.CalculatePercents (Close.ToArray ())' 100' 1); " is 168.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "	IMLDataPair aPairInput2 = TrainerHelper.ProcessPairs (NetworkUtility.CalculatePercents (High.ToArray ())' NetworkUtility.CalculatePercents (High.ToArray ())' 100' 1); " is 166.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "	IMLDataPair aPairInput4 = TrainerHelper.ProcessPairs (NetworkUtility.CalculatePercents (Volume.ToArray ())' NetworkUtility.CalculatePercents (Volume.ToArray ())' 100' 1); " is 170.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "	IMLDataPair aPairInput5 = TrainerHelper.ProcessPairs (NetworkUtility.CalculatePercents (Ranges.ToArray ())' NetworkUtility.CalculatePercents (Ranges.ToArray ())' 100' 1); " is 170.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSet,The length of the statement  "	Console.WriteLine (@"Percent Correct with normal Data Set:" + normalCorrectRate + @" Percent Correct with temporal Dataset:" + temporalErrorRate); " is 146.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,EvaluateNetworks,The length of the statement  "		Console.WriteLine (@"Number" + @"count" + @": actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff); " is 224.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The length of the statement  "		Console.WriteLine (@"Iteration #:" + trainMain.IterationNumber + @" Error:" + trainMain.Error + @" Genetic Iteration:" + trainAlt.IterationNumber); " is 147.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The length of the statement  "	IMLDataPair aPairInput = TrainerHelper.ProcessPairs (NetworkUtility.CalculatePercents (Opens.ToArray ())' NetworkUtility.CalculatePercents (Opens.ToArray ())' WindowSize' outputsize); " is 183.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The length of the statement  "	IMLDataPair aPairInput3 = TrainerHelper.ProcessPairs (NetworkUtility.CalculatePercents (Close.ToArray ())' NetworkUtility.CalculatePercents (Close.ToArray ())' WindowSize' outputsize); " is 184.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The length of the statement  "	IMLDataPair aPairInput2 = TrainerHelper.ProcessPairs (NetworkUtility.CalculatePercents (High.ToArray ())' NetworkUtility.CalculatePercents (High.ToArray ())' WindowSize' outputsize); " is 182.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The length of the statement  "	IMLDataPair aPairInput4 = TrainerHelper.ProcessPairs (NetworkUtility.CalculatePercents (Volume.ToArray ())' NetworkUtility.CalculatePercents (Volume.ToArray ())' WindowSize' outputsize); " is 186.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,CreateEvaluationSetAndLoad,The length of the statement  "	IMLDataPair aPairInput5 = TrainerHelper.ProcessPairs (NetworkUtility.CalculatePercents (Ranges.ToArray ())' NetworkUtility.CalculatePercents (Ranges.ToArray ())' WindowSize' outputsize); " is 186.
Long Statement,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,GenerateATemporalSet,The length of the statement  "	return TrainerHelper.GenerateTrainingWithPercentChangeOnSerie (WindowSize' outputsize' Opens.ToArray ()' Close.ToArray ()' High.ToArray ()' Low.ToArray ()' Volume.ToArray ()); " is 175.
Long Statement,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The length of the statement  "			Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size"); " is 122.
Long Statement,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The length of the statement  "				BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad (app.Args [1]' CONFIG.EvalHowMany' CONFIG.EvalStartFrom' CONFIG.Inputs' CONFIG.Outputs); " is 147.
Long Statement,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The length of the statement  "				BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad (app.Args [1]' CONFIG.HowMany' CONFIG.StartFrom' CONFIG.Inputs' CONFIG.Outputs); " is 139.
Long Statement,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The length of the statement  "	IMLDataSet trainingData = GenerationUtil.GenerateSingleDataRange (x => (3 * Math.Pow (x' 2) + (12 * x) + 4)' 0' 100' 1); " is 120.
Long Statement,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The length of the statement  "			Console.Out.WriteLine (genetic.IterationNumber + "' Error: " + best.Score + "'Best Genome Size:" + best.Size + "'Species Count:" + pop.Species.Count + "'best: " + best.DumpAsCommonExpression ()); " is 195.
Long Statement,Encog.Examples.Forest,Evaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\Evaluate.cs,EvaluateNetwork,The length of the statement  "		Console.WriteLine (@"Tree Type #" + i + @" - Correct/total: " + _treeCorrect [i] + @"/" + _treeCount [i] + @"(" + Format.FormatPercentWhole (p) + @")"); " is 152.
Long Statement,Encog.Examples.Forest,ForestCover,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Generate,The length of the statement  "	BasicNetwork network = EncogUtility.SimpleFeedForward (norm.GetNetworkInputLayerSize ()' config.HiddenCount' 0' norm.GetNetworkOutputLayerSize ()' true); " is 153.
Long Statement,Encog.Examples.Forest,TrainNetwork,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\TrainNetwork.cs,Train,The length of the statement  "	EncogUtility.ConvertCSV2Binary (_config.NormalizedDataFile.ToString ()' CSVFormat.English' _config.BinaryFile.ToString ()' network.InputCount' network.OutputCount' false' false); " is 178.
Long Statement,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,GetForexPairData,The length of the statement  "	ForexPair = Encog.Util.NetworkUtil.QuickCSVUtils.QuickParseCSV ("DB!EURUSD.Bar.Time.600.csv"' "Close"' 2500).ToArray (); " is 120.
Long Statement,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The length of the statement  "		Console.WriteLine ("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"' (StartingYear + year)' Format.FormatDouble (_normalizedForexPair [year]' 5)' Format.FormatDouble (prediction' 5)' Format.FormatDouble (closedLoopPrediction' 5)' Format.FormatDouble (_normalizedForexPair [year] - prediction' 5)' array.Stats.DeNormalize (prediction)' ForexPair [year]); " is 370.
Long Statement,Encog.Examples.Freeform,ElmanFreeform,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,Execute,The length of the statement  "	Console.WriteLine (@"Elman should be able to get into the 10% range'\nfeedforward should not go below 25%.\nThe recurrent Elment net can learn better in this case."); " is 166.
Long Statement,Encog.Examples.Indicator.Avg,IndicatorExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\IndicatorExample.cs,Run,The length of the statement  "		method = (IMLRegression)EncogDirectoryPersistence.LoadObject (FileUtil.CombinePath (new FileInfo (_path)' Config.MethodName)); " is 126.
Long Statement,Encog.Examples.JordanNetwork,JordanExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,Execute,The length of the statement  "	app.WriteLine ("Jordan will perform only marginally better than feedforward.\nThe more output neurons' the better performance a Jordan will give."); " is 148.
Long Statement,Encog.Examples.LiveSimul,LiveSimul,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The length of the statement  "	Console.WriteLine ("Network computed denormalized : " + computes.Item2.Stats.DeNormalize (network.Compute (new BasicMLData (computes.Item1.ToArray ())) [0])); " is 158.
Long Statement,Encog.Examples.Lunar,LanderSimulator,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LanderSimulator.cs,Telemetry,The length of the statement  "	return string.Format ("Elapsed: {0} s' Fuel: {1} l' Velocity: {2} m/s' {3} m"' Seconds' Fuel' Format.FormatDouble (Velocity' 4)' (int)Altitude); " is 144.
Long Statement,Encog.Examples.Market,MarketBuildTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketBuildTraining.cs,Generate,The length of the statement  "	BasicNetwork network = EncogUtility.SimpleFeedForward (market.InputSize' Config.HIDDEN1_COUNT' Config.HIDDEN2_COUNT' market.IdealSize' true); " is 141.
Long Statement,Encog.Examples.Market,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketEvaluate.cs,Evaluate,The length of the statement  "		Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff); " is 218.
Long Statement,Encog.Examples.CSVMarketExample,MarketBuildTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketbuildtraining.cs,Generate,The length of the statement  "	BasicNetwork network = EncogUtility.SimpleFeedForward (market.InputSize' Config.HIDDEN1_COUNT' Config.HIDDEN2_COUNT' market.IdealSize' true); " is 141.
Long Statement,Encog.Examples.CSVMarketExample,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketevaluate.cs,Evaluate,The length of the statement  "		Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff); " is 218.
Long Statement,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The length of the statement  "	//Degenerate training data only provides outputs as 1 or 0 (averaging over all outputs for a given set of inputs would produce something approaching the smooth training data). " is 175.
Long Statement,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The length of the statement  "			sw.WriteLine (InverseScale (pair.Input [0]) + "' " + InverseScale (pair.Input [1]) + "' " + Chop (InverseScale (output [0]))); " is 126.
Long Statement,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The length of the statement  "			//3D//sw.WriteLine(InverseScale(pair.Input[0]) + "' " + InverseScale(pair.Input[1]) + "' " + InverseScale(pair.Input[2]) + "' " + Chop(InverseScale(output[0])));// + "' " + pair.Ideal[0]);// + "'ideal=" + pair.Ideal[0]); " is 220.
Long Statement,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The length of the statement  "				IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0; " is 151.
Long Statement,Encog.Examples.Predict,PredictSunspot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Predict,The length of the statement  "		Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2)); " is 206.
Long Statement,Encog.Examples.Predict,SunspotWindow,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Predict,The length of the statement  "		Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2)); " is 206.
Long Statement,Encog.Examples.RateSP500,PredictSP500,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\RateSP500\PredictSP500.cs,trainNetworkBackprop,The length of the statement  "                Console.WriteLine(@"Training " + @"Epoch #" + epoch + @" Error:" + trainMain.Error+ @" Genetic iteration:"+trainAlt.IterationNumber+ @"neat iteration:"+train.IterationNumber );" is 176.
Long Statement,Encog.Examples.SVM_Predict,CreateSVMNetWork,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Create,The length of the statement  "	SupportVectorMachine result = new SupportVectorMachine (inputs' SVMType.EpsilonSupportVectorRegression' KernelType.Sigmoid); " is 124.
Long Statement,Encog.Examples.SVM_Predict,SVMExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMExample.cs,Execute,The length of the statement  "			Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size"); " is 122.
Long Statement,Encog.Examples.SVMPredictCSV,MarketBuildTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketbuildtraining.cs,TrainNetworks,The length of the statement  "	Console.WriteLine ("SVM Trained in :" + sw.ElapsedMilliseconds + "For error:" + trainMain.Error + " Iterated:" + trainMain.IterationNumber); " is 140.
Long Statement,Encog.Examples.SVMPredictCSV,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketevaluate.cs,Evaluate,The length of the statement  "		Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff); " is 218.
Long Statement,Encog.Examples.SVMPredictCSV,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainElmhanNetwork,The length of the statement  "	BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad (app.Args [1]' CONFIG.STARTING_YEAR' CONFIG.TRAIN_END' CONFIG.INPUT_WINDOW' CONFIG.PREDICT_WINDOW); " is 158.
Long Statement,Encog.Examples.SVMPredictCSV,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainNetworks,The length of the statement  "	Console.WriteLine ("SVM Trained in :" + sw.ElapsedMilliseconds + "For error:" + trainMain.Error + " Iterated:" + trainMain.IterationNumber); " is 140.
Long Statement,Encog.Examples.SVMPredictCSV,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainSVMNetwork,The length of the statement  "	//BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad(app.Args[1]'1000'500'CONFIG.INPUT_WINDOW'CONFIG.PREDICT_WINDOW); " is 125.
Long Statement,Encog.Examples.SVMPredictCSV,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketpredict.cs,TrainSVMNetwork,The length of the statement  "	TemporalMLDataSet Tempo = CreateEval.GenerateATemporalSet (app.Args [1]' 1000' 500' CONFIG.INPUT_WINDOW' CONFIG.PREDICT_WINDOW); " is 128.
Long Statement,Encog.Examples.AnnealTSP,TSPSimulatedAnnealing,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\AnnealTSP\TSPSimulatedAnnealing.cs,Randomize,The length of the statement  "		double d = Distance (index1' index1 + 1) + Distance (index2' index2 + 1) - Distance (index1' index2) - Distance (index1 + 1' index2 + 1); " is 137.
Magic Number,ConsoleExamples,ConsoleExamples,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\ConsoleExamples.cs,ListCommands,The following statement contains a magic number: foreach (ExampleInfo info in examples) {  	commands.Add (info.Command.PadRight (20) + ": " + info.Title);  }  
Magic Number,ConsoleExamples,ConsoleExamples,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\ConsoleExamples.cs,ListCommands,The following statement contains a magic number: commands.Add (info.Command.PadRight (20) + ": " + info.Title);  
Magic Number,Encog.Examples.Adaline,AdalineDigits,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Adaline\AdalineDigits.cs,Execute,The following statement contains a magic number: (new RangeRandomizer (-0.5' 0.5)).Randomize (network);  
Magic Number,Encog.Examples.Adaline,AdalineDigits,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Adaline\AdalineDigits.cs,Execute,The following statement contains a magic number: (new RangeRandomizer (-0.5' 0.5)).Randomize (network);  
Magic Number,Encog.Examples.Adaline,AdalineDigits,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Adaline\AdalineDigits.cs,Execute,The following statement contains a magic number: do {  	train.Iteration ();  	app.WriteLine ("Epoch #" + epoch + " Error:" + train.Error);  	epoch++;  } while (train.Error > 0.01);  
Magic Number,Encog.Examples.Analyst,AnalystExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyst\AnalystExample.cs,Execute,The following statement contains a magic number: if (app.Args.Length != 2) {  	Console.WriteLine ("Usage: AnalystExample [iris/forest] [data directory]");  	Console.WriteLine ("Data directory can be any empty directory.  Raw files will be downloaded to here.");  	return;  }  
Magic Number,Encog.Examples.Analyst,AnalystExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyst\AnalystExample.cs,ForestExample,The following statement contains a magic number: encog.MaxIteration = 300;  
Magic Number,Encog.Examples.Bayesian,BayesianTaxi,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Bayesian\BayesianTaxi.cs,Execute,The following statement contains a magic number: BlueTaxi.Table.AddLine (0.85' true);  
Magic Number,Encog.Examples.Bayesian,BayesianTaxi,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Bayesian\BayesianTaxi.cs,Execute,The following statement contains a magic number: WitnessSawBlue.Table.AddLine (0.80' true' true);  
Magic Number,Encog.Examples.Bayesian,BayesianTaxi,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Bayesian\BayesianTaxi.cs,Execute,The following statement contains a magic number: WitnessSawBlue.Table.AddLine (0.20' true' false);  
Magic Number,Encog.Examples.Benchmark,ElliottBenchmark,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\ElliottBenchmark.cs,Evaluate,The following statement contains a magic number: for (; ;) {  	rprop.Iteration ();  	iterations++;  	if (rprop.Error < TARGET_ERROR) {  		return iterations;  	}  	if (iterations > 1000) {  		iterations = 0;  		return -1;  	}  }  
Magic Number,Encog.Examples.Benchmark,ElliottBenchmark,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\ElliottBenchmark.cs,Evaluate,The following statement contains a magic number: if (iterations > 1000) {  	iterations = 0;  	return -1;  }  
Magic Number,Encog.Examples.Benchmark,FahlmanEncoder,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\FahlmanEncoder.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError (train' 0.01);  
Magic Number,Encog.Examples.Benchmark,SimpleBenchmark,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\SimpleBenchmark.cs,Execute,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	long time = BenchmarkEncog (input' output);  	Console.WriteLine ("Regular: {0}ms"' time);  }  
Magic Number,Encog.Examples.Benchmark,SimpleBenchmark,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\SimpleBenchmark.cs,BenchmarkEncog,The following statement contains a magic number: network.Reset (23);  
Magic Number,Encog.Examples.Benchmark,ThreadCount,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\ThreadCount.cs,Execute,The following statement contains a magic number: for (int i = 1; i < 16; i++) {  	Perform (i);  }  
Magic Number,Encog.Examples.Benchmark,ThreadCount,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\ThreadCount.cs,Perform,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	rprop.Iteration ();  }  
Magic Number,Encog.Examples.Benchmark,MultiThreadBenchmark,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\MultiThreadBenchmark.cs,EvaluateRPROP,The following statement contains a magic number: for (int i = 1; i <= 20; i++) {  	train.Iteration ();  	Console.WriteLine ("Iteration #" + i + " Error:" + train.Error);  }  
Magic Number,Encog.Examples.Benchmark,MultiThreadBenchmark,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Benchmark\MultiThreadBenchmark.cs,EvaluateMPROP,The following statement contains a magic number: for (int i = 1; i <= 20; i++) {  	train.Iteration ();  	Console.WriteLine ("Iteration #" + i + " Error:" + train.Error);  }  
Magic Number,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,EvaluateNetworks,The following statement contains a magic number: foreach (IMLDataPair pair in set) {  	IMLData input = pair.Input;  	IMLData actualData = pair.Ideal;  	IMLData predictData = network.Compute (input);  	double actual = actualData [0];  	double predict = predictData [0];  	double diff = Math.Abs (predict - actual);  	Direction actualDirection = DetermineDirection (actual);  	Direction predictDirection = DetermineDirection (predict);  	if (actualDirection == predictDirection)  		correct++;  	count++;  	Console.WriteLine (@"Number" + @"count" + @": actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  }  
Magic Number,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,EvaluateNetworks,The following statement contains a magic number: foreach (IMLDataPair pair in set) {  	IMLData input = pair.Input;  	IMLData actualData = pair.Ideal;  	IMLData predictData = network.Compute (input);  	double actual = actualData [0];  	double predict = predictData [0];  	double diff = Math.Abs (predict - actual);  	Direction actualDirection = DetermineDirection (actual);  	Direction predictDirection = DetermineDirection (predict);  	if (actualDirection == predictDirection)  		correct++;  	count++;  	Console.WriteLine (@"Number" + @"count" + @": actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  }  
Magic Number,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,EvaluateNetworks,The following statement contains a magic number: Console.WriteLine (@"Number" + @"count" + @": actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  
Magic Number,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,EvaluateNetworks,The following statement contains a magic number: Console.WriteLine (@"Number" + @"count" + @": actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  
Magic Number,Encog.Examples.Analyzer,CreateEval,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\CreateEval.cs,TrainNetworks,The following statement contains a magic number: EncogUtility.TrainConsole (trainMain' network' minis' 15.2);  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [0]' "randomtrainer"' true) == 0) {  	if (app.Args.Length > 1) {  		RandomTrainer.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  		MakeAPause ();  		app.Exit ();  	} else {  		Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");  		Console.WriteLine (@"Error % " + RandomTrainer.RandomTrainerMethod (3000' 50));  	}  	Console.ReadKey ();  	return;  }  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [0]' "randomtrainer"' true) == 0) {  	if (app.Args.Length > 1) {  		RandomTrainer.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  		MakeAPause ();  		app.Exit ();  	} else {  		Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");  		Console.WriteLine (@"Error % " + RandomTrainer.RandomTrainerMethod (3000' 50));  	}  	Console.ReadKey ();  	return;  }  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [0]' "randomtrainer"' true) == 0) {  	if (app.Args.Length > 1) {  		RandomTrainer.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  		MakeAPause ();  		app.Exit ();  	} else {  		Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");  		Console.WriteLine (@"Error % " + RandomTrainer.RandomTrainerMethod (3000' 50));  	}  	Console.ReadKey ();  	return;  }  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 1) {  	RandomTrainer.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  	MakeAPause ();  	app.Exit ();  } else {  	Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");  	Console.WriteLine (@"Error % " + RandomTrainer.RandomTrainerMethod (3000' 50));  }  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 1) {  	RandomTrainer.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  	MakeAPause ();  	app.Exit ();  } else {  	Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");  	Console.WriteLine (@"Error % " + RandomTrainer.RandomTrainerMethod (3000' 50));  }  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 1) {  	RandomTrainer.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  	MakeAPause ();  	app.Exit ();  } else {  	Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");  	Console.WriteLine (@"Error % " + RandomTrainer.RandomTrainerMethod (3000' 50));  }  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: RandomTrainer.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: Console.WriteLine (@"Error % " + RandomTrainer.RandomTrainerMethod (3000' 50));  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: Console.WriteLine (@"Error % " + RandomTrainer.RandomTrainerMethod (3000' 50));  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [0]' "train"' true) == 0) {  	if (app.Args.Length > 0) {  		//We have enough arguments' lets test them.  		if (File.Exists (app.Args [1])) {  			//the file exits lets build the training.  			//create our basic ml dataset.  			BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad (app.Args [1]' CONFIG.HowMany' CONFIG.StartFrom' CONFIG.Inputs' CONFIG.Outputs);  			//create our network.  			BasicNetwork network = (BasicNetwork)CreateEval.CreateElmanNetwork (CONFIG.Inputs' CONFIG.Outputs);  			//Train it..  			double LastError = CreateEval.TrainNetworks (network' set);  			Console.WriteLine ("NetWork Trained to :" + LastError);  			NetworkUtility.SaveTraining (CONFIG.DIRECTORY' CONFIG.TrainingFile' set);  			NetworkUtility.SaveNetwork (CONFIG.DIRECTORY' CONFIG.NetWorkFile' network);  			Console.WriteLine ("Network Saved to :" + CONFIG.DIRECTORY + " File Named :" + CONFIG.NetWorkFile);  			Console.WriteLine ("Training Saved to :" + CONFIG.DIRECTORY + " File Named :" + CONFIG.TrainingFile);  			MakeAPause ();  			app.Exit ();  			return;  		} else {  			Console.WriteLine ("Couldnt find the file :" + app.Args [2].ToString ());  			Console.WriteLine ("Exiting");  			MakeAPause ();  			app.Exit ();  			return;  		}  	}  } else {  	Console.WriteLine ("Couldnt understand your command..");  	Console.WriteLine ("Valid commands are : RandomTrainer or Randomtrainer [inputs] [output] ' or Train [File]");  	Console.WriteLine ("Valid commands are : Range Prune' to prune your network.");  	Console.WriteLine ("Valid commands are : Range eval ' to evaluate your network.");  	MakeAPause ();  	app.Exit ();  }  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 0) {  	//We have enough arguments' lets test them.  	if (File.Exists (app.Args [1])) {  		//the file exits lets build the training.  		//create our basic ml dataset.  		BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad (app.Args [1]' CONFIG.HowMany' CONFIG.StartFrom' CONFIG.Inputs' CONFIG.Outputs);  		//create our network.  		BasicNetwork network = (BasicNetwork)CreateEval.CreateElmanNetwork (CONFIG.Inputs' CONFIG.Outputs);  		//Train it..  		double LastError = CreateEval.TrainNetworks (network' set);  		Console.WriteLine ("NetWork Trained to :" + LastError);  		NetworkUtility.SaveTraining (CONFIG.DIRECTORY' CONFIG.TrainingFile' set);  		NetworkUtility.SaveNetwork (CONFIG.DIRECTORY' CONFIG.NetWorkFile' network);  		Console.WriteLine ("Network Saved to :" + CONFIG.DIRECTORY + " File Named :" + CONFIG.NetWorkFile);  		Console.WriteLine ("Training Saved to :" + CONFIG.DIRECTORY + " File Named :" + CONFIG.TrainingFile);  		MakeAPause ();  		app.Exit ();  		return;  	} else {  		Console.WriteLine ("Couldnt find the file :" + app.Args [2].ToString ());  		Console.WriteLine ("Exiting");  		MakeAPause ();  		app.Exit ();  		return;  	}  }  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: if (File.Exists (app.Args [1])) {  	//the file exits lets build the training.  	//create our basic ml dataset.  	BasicMLDataSet set = CreateEval.CreateEvaluationSetAndLoad (app.Args [1]' CONFIG.HowMany' CONFIG.StartFrom' CONFIG.Inputs' CONFIG.Outputs);  	//create our network.  	BasicNetwork network = (BasicNetwork)CreateEval.CreateElmanNetwork (CONFIG.Inputs' CONFIG.Outputs);  	//Train it..  	double LastError = CreateEval.TrainNetworks (network' set);  	Console.WriteLine ("NetWork Trained to :" + LastError);  	NetworkUtility.SaveTraining (CONFIG.DIRECTORY' CONFIG.TrainingFile' set);  	NetworkUtility.SaveNetwork (CONFIG.DIRECTORY' CONFIG.NetWorkFile' network);  	Console.WriteLine ("Network Saved to :" + CONFIG.DIRECTORY + " File Named :" + CONFIG.NetWorkFile);  	Console.WriteLine ("Training Saved to :" + CONFIG.DIRECTORY + " File Named :" + CONFIG.TrainingFile);  	MakeAPause ();  	app.Exit ();  	return;  } else {  	Console.WriteLine ("Couldnt find the file :" + app.Args [2].ToString ());  	Console.WriteLine ("Exiting");  	MakeAPause ();  	app.Exit ();  	return;  }  
Magic Number,Encog.Examples.Analyzer,MarketAnalyzer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\MarketAnalyzer.cs,Execute,The following statement contains a magic number: Console.WriteLine ("Couldnt find the file :" + app.Args [2].ToString ());  
Magic Number,Encog.Examples.Analyzer,RandomTrainer,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\RandomTrainer.cs,RandomTrainerMethod,The following statement contains a magic number: network.AddLayer (new BasicLayer (new ActivationTANH ()' false' 20));  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddOperation (0.5' new SubtreeCrossover ());  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddOperation (0.25' new ConstMutation (context' 0.5' 1.0));  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddOperation (0.25' new ConstMutation (context' 0.5' 1.0));  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddOperation (0.25' new SubtreeMutation (context' 4));  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddOperation (0.25' new SubtreeMutation (context' 4));  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddScoreAdjuster (new ComplexityAdjustedScore (10' 20' 10' 20.0));  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddScoreAdjuster (new ComplexityAdjustedScore (10' 20' 10' 20.0));  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddScoreAdjuster (new ComplexityAdjustedScore (10' 20' 10' 20.0));  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: genetic.AddScoreAdjuster (new ComplexityAdjustedScore (10' 20' 10' 20.0));  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: (new RampedHalfAndHalf (context' 1' 6)).Generate (new EncogRandom ()' pop);  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: try {  	for (int i = 0; i < 1000; i++) {  		genetic.Iteration ();  		best = (EncogProgram)genetic.BestGenome;  		Console.Out.WriteLine (genetic.IterationNumber + "' Error: " + best.Score + "'Best Genome Size:" + best.Size + "'Species Count:" + pop.Species.Count + "'best: " + best.DumpAsCommonExpression ());  	}  	//EncogUtility.evaluate(best' trainingData);  	Console.Out.WriteLine ("Final score:" + best.Score + "' effective score:" + best.AdjustedScore);  	Console.Out.WriteLine (best.DumpAsCommonExpression ());  	//pop.dumpMembers(Integer.MAX_VALUE);  	//pop.dumpMembers(10);  } catch (Exception t) {  	Console.Out.WriteLine (t.ToString ());  } finally {  	genetic.FinishTraining ();  	EncogFramework.Instance.Shutdown ();  }  
Magic Number,Encog.Examples.EPL,SimpleEPL,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\EPL\SimpleEPL.cs,Execute,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	genetic.Iteration ();  	best = (EncogProgram)genetic.BestGenome;  	Console.Out.WriteLine (genetic.IterationNumber + "' Error: " + best.Score + "'Best Genome Size:" + best.Size + "'Species Count:" + pop.Species.Count + "'best: " + best.DumpAsCommonExpression ());  }  
Magic Number,Encog.Examples.Forest,Evaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\Evaluate.cs,EvaluateNetwork,The following statement contains a magic number: while (csv.Next ()) {  	total++;  	for (int i = 0; i < input.Length; i++) {  		input [i] = csv.GetDouble (i);  	}  	IMLData inputData = norm.BuildForNetworkInput (input);  	IMLData output = network.Compute (inputData);  	int coverTypeActual = DetermineTreeType (eqField' output);  	int coverTypeIdeal = (int)csv.GetDouble (54) - 1;  	KeepScore (coverTypeActual' coverTypeIdeal);  	if (coverTypeActual == coverTypeIdeal) {  		correct++;  	}  }  
Magic Number,Encog.Examples.Forest,Evaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\Evaluate.cs,EvaluateNetwork,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	double p = (_treeCorrect [i] / (double)_treeCount [i]);  	Console.WriteLine (@"Tree Type #" + i + @" - Correct/total: " + _treeCorrect [i] + @"/" + _treeCount [i] + @"(" + Format.FormatPercentWhole (p) + @")");  }  
Magic Number,Encog.Examples.Forest,ForestConfig,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestConfig.cs,ForestConfig,The following statement contains a magic number: TrainingMinutes = 10;  
Magic Number,Encog.Examples.Forest,ForestConfig,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestConfig.cs,ForestConfig,The following statement contains a magic number: HiddenCount = 100;  
Magic Number,Encog.Examples.Forest,ForestCover,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 1) {  	Console.WriteLine (@"Usage: ForestCover [data directory] [generate/train/traingui/evaluate] [e/o]");  } else {  	try {  		var config = new ForestConfig (new FileInfo (app.Args [0]));  		if (String.Compare (app.Args [1]' "generate"' true) == 0) {  			if (app.Args.Length < 3) {  				Console.WriteLine (@"When using generate' you must specify an 'e' or an 'o' as the second parameter.");  			} else {  				bool useOneOf = !app.Args [2].ToLower ().Equals ("e");  				Generate (config' useOneOf);  			}  		} else if (String.Compare (app.Args [1]' "train"' true) == 0) {  			Train (config' false);  		} else if (String.Compare (app.Args [1]' "traingui"' true) == 0) {  			Train (config' true);  		} else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  			Evaluate (config);  		}  	} /*catch (Exception e)                 {                     Console.WriteLine(e.StackTrace);                 }*/finally {  		EncogFramework.Instance.Shutdown ();  	}  }  
Magic Number,Encog.Examples.Forest,ForestCover,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 1) {  	Console.WriteLine (@"Usage: ForestCover [data directory] [generate/train/traingui/evaluate] [e/o]");  } else {  	try {  		var config = new ForestConfig (new FileInfo (app.Args [0]));  		if (String.Compare (app.Args [1]' "generate"' true) == 0) {  			if (app.Args.Length < 3) {  				Console.WriteLine (@"When using generate' you must specify an 'e' or an 'o' as the second parameter.");  			} else {  				bool useOneOf = !app.Args [2].ToLower ().Equals ("e");  				Generate (config' useOneOf);  			}  		} else if (String.Compare (app.Args [1]' "train"' true) == 0) {  			Train (config' false);  		} else if (String.Compare (app.Args [1]' "traingui"' true) == 0) {  			Train (config' true);  		} else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  			Evaluate (config);  		}  	} /*catch (Exception e)                 {                     Console.WriteLine(e.StackTrace);                 }*/finally {  		EncogFramework.Instance.Shutdown ();  	}  }  
Magic Number,Encog.Examples.Forest,ForestCover,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Execute,The following statement contains a magic number: try {  	var config = new ForestConfig (new FileInfo (app.Args [0]));  	if (String.Compare (app.Args [1]' "generate"' true) == 0) {  		if (app.Args.Length < 3) {  			Console.WriteLine (@"When using generate' you must specify an 'e' or an 'o' as the second parameter.");  		} else {  			bool useOneOf = !app.Args [2].ToLower ().Equals ("e");  			Generate (config' useOneOf);  		}  	} else if (String.Compare (app.Args [1]' "train"' true) == 0) {  		Train (config' false);  	} else if (String.Compare (app.Args [1]' "traingui"' true) == 0) {  		Train (config' true);  	} else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  		Evaluate (config);  	}  } /*catch (Exception e)                 {                     Console.WriteLine(e.StackTrace);                 }*/finally {  	EncogFramework.Instance.Shutdown ();  }  
Magic Number,Encog.Examples.Forest,ForestCover,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Execute,The following statement contains a magic number: try {  	var config = new ForestConfig (new FileInfo (app.Args [0]));  	if (String.Compare (app.Args [1]' "generate"' true) == 0) {  		if (app.Args.Length < 3) {  			Console.WriteLine (@"When using generate' you must specify an 'e' or an 'o' as the second parameter.");  		} else {  			bool useOneOf = !app.Args [2].ToLower ().Equals ("e");  			Generate (config' useOneOf);  		}  	} else if (String.Compare (app.Args [1]' "train"' true) == 0) {  		Train (config' false);  	} else if (String.Compare (app.Args [1]' "traingui"' true) == 0) {  		Train (config' true);  	} else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  		Evaluate (config);  	}  } /*catch (Exception e)                 {                     Console.WriteLine(e.StackTrace);                 }*/finally {  	EncogFramework.Instance.Shutdown ();  }  
Magic Number,Encog.Examples.Forest,ForestCover,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [1]' "generate"' true) == 0) {  	if (app.Args.Length < 3) {  		Console.WriteLine (@"When using generate' you must specify an 'e' or an 'o' as the second parameter.");  	} else {  		bool useOneOf = !app.Args [2].ToLower ().Equals ("e");  		Generate (config' useOneOf);  	}  } else if (String.Compare (app.Args [1]' "train"' true) == 0) {  	Train (config' false);  } else if (String.Compare (app.Args [1]' "traingui"' true) == 0) {  	Train (config' true);  } else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  	Evaluate (config);  }  
Magic Number,Encog.Examples.Forest,ForestCover,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [1]' "generate"' true) == 0) {  	if (app.Args.Length < 3) {  		Console.WriteLine (@"When using generate' you must specify an 'e' or an 'o' as the second parameter.");  	} else {  		bool useOneOf = !app.Args [2].ToLower ().Equals ("e");  		Generate (config' useOneOf);  	}  } else if (String.Compare (app.Args [1]' "train"' true) == 0) {  	Train (config' false);  } else if (String.Compare (app.Args [1]' "traingui"' true) == 0) {  	Train (config' true);  } else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  	Evaluate (config);  }  
Magic Number,Encog.Examples.Forest,ForestCover,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3) {  	Console.WriteLine (@"When using generate' you must specify an 'e' or an 'o' as the second parameter.");  } else {  	bool useOneOf = !app.Args [2].ToLower ().Equals ("e");  	Generate (config' useOneOf);  }  
Magic Number,Encog.Examples.Forest,ForestCover,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\ForestCover.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3) {  	Console.WriteLine (@"When using generate' you must specify an 'e' or an 'o' as the second parameter.");  } else {  	bool useOneOf = !app.Args [2].ToLower ().Equals ("e");  	Generate (config' useOneOf);  }  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem (coverType' 2);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem (coverType' 3);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem (coverType' 4);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem (coverType' 5);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem (coverType' 6);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputOneOf,The following statement contains a magic number: outType.AddItem (coverType' 7);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem (coverType' 2);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem (coverType' 3);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem (coverType' 4);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem (coverType' 5);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem (coverType' 6);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,BuildOutputEquilateral,The following statement contains a magic number: outType.AddItem (coverType' 7);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Copy,The following statement contains a magic number: for (int i = 0; i < 55; i++) {  	inputField [i] = new InputFieldCSV (true' source.ToString ()' i);  	norm.AddInputField (inputField [i]);  	IOutputField outputField = new OutputFieldDirect (inputField [i]);  	norm.AddOutputField (outputField);  }  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Narrow,The following statement contains a magic number: for (int i = 0; i < 55; i++) {  	inputField [i] = new InputFieldCSV (true' source.ToString ()' i);  	norm.AddInputField (inputField [i]);  	IOutputField outputField = new OutputFieldDirect (inputField [i]);  	norm.AddOutputField (outputField);  }  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step1,The following statement contains a magic number: Copy (_config.CoverTypeFile' _config.TrainingFile' 0' 2' 4);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step1,The following statement contains a magic number: Copy (_config.CoverTypeFile' _config.TrainingFile' 0' 2' 4);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step1,The following statement contains a magic number: Copy (_config.CoverTypeFile' _config.EvaluateFile' 3' 3' 4);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step1,The following statement contains a magic number: Copy (_config.CoverTypeFile' _config.EvaluateFile' 3' 3' 4);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step1,The following statement contains a magic number: Copy (_config.CoverTypeFile' _config.EvaluateFile' 3' 3' 4);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step2,The following statement contains a magic number: Narrow (_config.TrainingFile' _config.BalanceFile' 54' 3000);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step2,The following statement contains a magic number: Narrow (_config.TrainingFile' _config.BalanceFile' 54' 3000);  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (inputSlope = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 2));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (hWater = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 3));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (vWater = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 4));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (roadway = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 5));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (shade9 = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 6));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (shade12 = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 7));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (shade3 = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 8));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (firepoint = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 9));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	norm.AddInputField (wilderness [i] = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 10 + i));  }  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	norm.AddInputField (wilderness [i] = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 10 + i));  }  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (wilderness [i] = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 10 + i));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: for (int i = 0; i < 40; i++) {  	norm.AddInputField (soilType [i] = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 14 + i));  }  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: for (int i = 0; i < 40; i++) {  	norm.AddInputField (soilType [i] = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 14 + i));  }  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (soilType [i] = new InputFieldCSV (true' _config.BalanceFile.ToString ()' 14 + i));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: norm.AddInputField (coverType = new InputFieldCSV (false' _config.BalanceFile.ToString ()' 54));  
Magic Number,Encog.Examples.Forest,GenerateData,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Forest\GenerateData.cs,Step3,The following statement contains a magic number: for (int i = 0; i < 40; i++) {  	norm.AddOutputField (new OutputFieldDirect (soilType [i]));  }  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,GetForexPairData,The following statement contains a magic number: ForexPair = Encog.Util.NetworkUtil.QuickCSVUtils.QuickParseCSV ("DB!EURUSD.Bar.Time.600.csv"' "Close"' 2500).ToArray ();  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Execute,The following statement contains a magic number: EvaluateEnd = EvaluateStart + 100;  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,CreateElmanNetwork,The following statement contains a magic number: pattern.AddHiddenLayer (2);  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Train,The following statement contains a magic number: while (!stop.ShouldStop () && trainMain.IterationNumber < 1500) {  	trainMain.Iteration ();  	Console.WriteLine ("Training " + "' Epoch #" + epoch + " Error:" + trainMain.Error);  	epoch++;  }  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: for (var year = EvaluateStart; year < EvaluateEnd; year++) {  	// calculate based on actual data  	var input = new BasicMLData (WindowSize);  	for (var i = 0; i < input.Count; i++) {  		input [i] = _normalizedForexPair [(year - WindowSize) + i];  	}  	IMLData output = network.Compute (input);  	var prediction = output [0];  	_closedLoopForexPair [year] = prediction;  	// calculate "closed loop"' based on predicted data  	for (var i = 0; i < input.Count; i++) {  		input [i] = _closedLoopForexPair [(year - WindowSize) + i];  	}  	output = network.Compute (input);  	var closedLoopPrediction = output [0];  	// display  	Console.WriteLine ("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"' (StartingYear + year)' Format.FormatDouble (_normalizedForexPair [year]' 5)' Format.FormatDouble (prediction' 5)' Format.FormatDouble (closedLoopPrediction' 5)' Format.FormatDouble (_normalizedForexPair [year] - prediction' 5)' array.Stats.DeNormalize (prediction)' ForexPair [year]);  }  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: for (var year = EvaluateStart; year < EvaluateEnd; year++) {  	// calculate based on actual data  	var input = new BasicMLData (WindowSize);  	for (var i = 0; i < input.Count; i++) {  		input [i] = _normalizedForexPair [(year - WindowSize) + i];  	}  	IMLData output = network.Compute (input);  	var prediction = output [0];  	_closedLoopForexPair [year] = prediction;  	// calculate "closed loop"' based on predicted data  	for (var i = 0; i < input.Count; i++) {  		input [i] = _closedLoopForexPair [(year - WindowSize) + i];  	}  	output = network.Compute (input);  	var closedLoopPrediction = output [0];  	// display  	Console.WriteLine ("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"' (StartingYear + year)' Format.FormatDouble (_normalizedForexPair [year]' 5)' Format.FormatDouble (prediction' 5)' Format.FormatDouble (closedLoopPrediction' 5)' Format.FormatDouble (_normalizedForexPair [year] - prediction' 5)' array.Stats.DeNormalize (prediction)' ForexPair [year]);  }  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: for (var year = EvaluateStart; year < EvaluateEnd; year++) {  	// calculate based on actual data  	var input = new BasicMLData (WindowSize);  	for (var i = 0; i < input.Count; i++) {  		input [i] = _normalizedForexPair [(year - WindowSize) + i];  	}  	IMLData output = network.Compute (input);  	var prediction = output [0];  	_closedLoopForexPair [year] = prediction;  	// calculate "closed loop"' based on predicted data  	for (var i = 0; i < input.Count; i++) {  		input [i] = _closedLoopForexPair [(year - WindowSize) + i];  	}  	output = network.Compute (input);  	var closedLoopPrediction = output [0];  	// display  	Console.WriteLine ("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"' (StartingYear + year)' Format.FormatDouble (_normalizedForexPair [year]' 5)' Format.FormatDouble (prediction' 5)' Format.FormatDouble (closedLoopPrediction' 5)' Format.FormatDouble (_normalizedForexPair [year] - prediction' 5)' array.Stats.DeNormalize (prediction)' ForexPair [year]);  }  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: for (var year = EvaluateStart; year < EvaluateEnd; year++) {  	// calculate based on actual data  	var input = new BasicMLData (WindowSize);  	for (var i = 0; i < input.Count; i++) {  		input [i] = _normalizedForexPair [(year - WindowSize) + i];  	}  	IMLData output = network.Compute (input);  	var prediction = output [0];  	_closedLoopForexPair [year] = prediction;  	// calculate "closed loop"' based on predicted data  	for (var i = 0; i < input.Count; i++) {  		input [i] = _closedLoopForexPair [(year - WindowSize) + i];  	}  	output = network.Compute (input);  	var closedLoopPrediction = output [0];  	// display  	Console.WriteLine ("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"' (StartingYear + year)' Format.FormatDouble (_normalizedForexPair [year]' 5)' Format.FormatDouble (prediction' 5)' Format.FormatDouble (closedLoopPrediction' 5)' Format.FormatDouble (_normalizedForexPair [year] - prediction' 5)' array.Stats.DeNormalize (prediction)' ForexPair [year]);  }  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: Console.WriteLine ("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"' (StartingYear + year)' Format.FormatDouble (_normalizedForexPair [year]' 5)' Format.FormatDouble (prediction' 5)' Format.FormatDouble (closedLoopPrediction' 5)' Format.FormatDouble (_normalizedForexPair [year] - prediction' 5)' array.Stats.DeNormalize (prediction)' ForexPair [year]);  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: Console.WriteLine ("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"' (StartingYear + year)' Format.FormatDouble (_normalizedForexPair [year]' 5)' Format.FormatDouble (prediction' 5)' Format.FormatDouble (closedLoopPrediction' 5)' Format.FormatDouble (_normalizedForexPair [year] - prediction' 5)' array.Stats.DeNormalize (prediction)' ForexPair [year]);  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: Console.WriteLine ("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"' (StartingYear + year)' Format.FormatDouble (_normalizedForexPair [year]' 5)' Format.FormatDouble (prediction' 5)' Format.FormatDouble (closedLoopPrediction' 5)' Format.FormatDouble (_normalizedForexPair [year] - prediction' 5)' array.Stats.DeNormalize (prediction)' ForexPair [year]);  
Magic Number,Encog.Examples.ForexExample,ForexMarketTrain,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ForexExample\ForexMarketTrain.cs,Predict,The following statement contains a magic number: Console.WriteLine ("{0}  {1}  {2}  {3} Accuracy:{4} Denormalized:{5} Real value:{6}"' (StartingYear + year)' Format.FormatDouble (_normalizedForexPair [year]' 5)' Format.FormatDouble (prediction' 5)' Format.FormatDouble (closedLoopPrediction' 5)' Format.FormatDouble (_normalizedForexPair [year] - prediction' 5)' array.Stats.DeNormalize (prediction)' ForexPair [year]);  
Magic Number,Encog.Examples.Freeform,ConvertToFreeform,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ConvertToFreeform.cs,Execute,The following statement contains a magic number: network.AddLayer (new BasicLayer (null' true' 2));  
Magic Number,Encog.Examples.Freeform,ConvertToFreeform,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ConvertToFreeform.cs,Execute,The following statement contains a magic number: network.AddLayer (new BasicLayer (new ActivationSigmoid ()' true' 3));  
Magic Number,Encog.Examples.Freeform,ConvertToFreeform,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ConvertToFreeform.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError (network' trainingSet' 0.01);  
Magic Number,Encog.Examples.Freeform,ElmanFreeform,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\ElmanFreeform.cs,TrainNetwork,The following statement contains a magic number: EncogUtility.TrainToError (trainMain' 0.01);  
Magic Number,Encog.Examples.Freeform,FreeformOnlineXOR,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\FreeformOnlineXOR.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError (train' 0.01);  
Magic Number,Encog.Examples.Freeform,FreeformXOR,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\FreeformXOR.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError (network' trainingSet' 0.01);  
Magic Number,Encog.Examples.Freeform,SkipNeuralNetwork,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Freeform\SkipNeuralNetwork.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError (network' trainingSet' 0.01);  
Magic Number,Encog.Examples.GeneticTSP,GeneticSolveTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\GeneticTSP\GeneticSolveTSP.cs,Execute,The following statement contains a magic number: genetic.AddOperation (0.9' new SpliceNoRepeat (CITIES / 3));  
Magic Number,Encog.Examples.GeneticTSP,GeneticSolveTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\GeneticTSP\GeneticSolveTSP.cs,Execute,The following statement contains a magic number: genetic.AddOperation (0.9' new SpliceNoRepeat (CITIES / 3));  
Magic Number,Encog.Examples.GeneticTSP,GeneticSolveTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\GeneticTSP\GeneticSolveTSP.cs,Execute,The following statement contains a magic number: genetic.AddOperation (0.1' new MutateShuffle ());  
Magic Number,Encog.Examples.GeneticTSP,GeneticSolveTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\GeneticTSP\GeneticSolveTSP.cs,RandomGenome,The following statement contains a magic number: for (int i = 0; i < organism.Length - 1; i++) {  	int icandidate;  	do {  		icandidate = (int)(rnd.NextDouble () * organism.Length);  	} while (taken [icandidate]);  	organism [i] = icandidate;  	taken [icandidate] = true;  	if (i == organism.Length - 2) {  		icandidate = 0;  		while (taken [icandidate]) {  			icandidate++;  		}  		organism [i + 1] = icandidate;  	}  }  
Magic Number,Encog.Examples.GeneticTSP,GeneticSolveTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\GeneticTSP\GeneticSolveTSP.cs,RandomGenome,The following statement contains a magic number: if (i == organism.Length - 2) {  	icandidate = 0;  	while (taken [icandidate]) {  		icandidate++;  	}  	organism [i + 1] = icandidate;  }  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn ("petal-length"' 2' ColumnType.Continuous);  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn ("petal-width"' 3' ColumnType.Continuous);  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: model.HoldBackValidation (0.3' true' 1001);  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: model.HoldBackValidation (0.3' true' 1001);  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (0);  	line [1] = csv.Get (1);  	line [2] = csv.Get (2);  	line [3] = csv.Get (3);  	String correct = csv.Get (4);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (0);  	line [1] = csv.Get (1);  	line [2] = csv.Get (2);  	line [3] = csv.Get (3);  	String correct = csv.Get (4);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (0);  	line [1] = csv.Get (1);  	line [2] = csv.Get (2);  	line [3] = csv.Get (3);  	String correct = csv.Get (4);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (0);  	line [1] = csv.Get (1);  	line [2] = csv.Get (2);  	line [3] = csv.Get (3);  	String correct = csv.Get (4);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (0);  	line [1] = csv.Get (1);  	line [2] = csv.Get (2);  	line [3] = csv.Get (3);  	String correct = csv.Get (4);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: line [2] = csv.Get (2);  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: line [2] = csv.Get (2);  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: line [3] = csv.Get (3);  
Magic Number,Encog.Examples.Guide.Classification,IrisClassification,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Classification\IrisClassification.cs,Execute,The following statement contains a magic number: line [3] = csv.Get (3);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn ("displacement"' 2' ColumnType.Continuous);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn ("weight"' 4' ColumnType.Continuous);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn ("acceleration"' 5' ColumnType.Continuous);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: data.DefineSourceColumn ("origin"' 7' ColumnType.Nominal);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: model.HoldBackValidation (0.3' true' 1001);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: model.HoldBackValidation (0.3' true' 1001);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: while (csv.Next ()) {  	var result = new StringBuilder ();  	line [0] = csv.Get (1);  	line [1] = csv.Get (2);  	line [2] = csv.Get (3);  	line [3] = csv.Get (4);  	line [4] = csv.Get (5);  	line [5] = csv.Get (6);  	line [6] = csv.Get (7);  	String correct = csv.Get (0);  	helper.NormalizeInputVector (line' ((BasicMLData)input).Data' false);  	IMLData output = bestMethod.Compute (input);  	String irisChosen = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (irisChosen);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [1] = csv.Get (2);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [2] = csv.Get (3);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [2] = csv.Get (3);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [3] = csv.Get (4);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [3] = csv.Get (4);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [4] = csv.Get (5);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [4] = csv.Get (5);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [5] = csv.Get (6);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [5] = csv.Get (6);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [6] = csv.Get (7);  
Magic Number,Encog.Examples.Guide.Regression,AutoMPGRegression,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Regression\AutoMPGRegression.cs,Execute,The following statement contains a magic number: line [6] = csv.Get (7);  
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: model.HoldBackValidation (0.3' false' 1001);  
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: model.HoldBackValidation (0.3' false' 1001);  
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: while (csv.Next () && stopAfter > 0) {  	var result = new StringBuilder ();  	line [0] = csv.Get (2);  	// ssn  	line [1] = csv.Get (3);  	// dev  	helper.NormalizeInputVector (line' slice' false);  	// enough data to build a full window?  	if (window.IsReady ()) {  		window.CopyWindow (((BasicMLData)input).Data' 0);  		String correct = csv.Get (2);  		// trying to predict SSN.  		IMLData output = bestMethod.Compute (input);  		String predicted = helper.DenormalizeOutputVectorToString (output) [0];  		result.Append (line);  		result.Append (" -> predicted: ");  		result.Append (predicted);  		result.Append ("(correct: ");  		result.Append (correct);  		result.Append (")");  		Console.WriteLine (result.ToString ());  	}  	// Add the normalized slice to the window. We do this just after  	// the after checking to see if the window is ready so that the  	// window is always one behind the current row. This is because  	// we are trying to predict next row.  	window.Add (slice);  	stopAfter--;  }  
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: while (csv.Next () && stopAfter > 0) {  	var result = new StringBuilder ();  	line [0] = csv.Get (2);  	// ssn  	line [1] = csv.Get (3);  	// dev  	helper.NormalizeInputVector (line' slice' false);  	// enough data to build a full window?  	if (window.IsReady ()) {  		window.CopyWindow (((BasicMLData)input).Data' 0);  		String correct = csv.Get (2);  		// trying to predict SSN.  		IMLData output = bestMethod.Compute (input);  		String predicted = helper.DenormalizeOutputVectorToString (output) [0];  		result.Append (line);  		result.Append (" -> predicted: ");  		result.Append (predicted);  		result.Append ("(correct: ");  		result.Append (correct);  		result.Append (")");  		Console.WriteLine (result.ToString ());  	}  	// Add the normalized slice to the window. We do this just after  	// the after checking to see if the window is ready so that the  	// window is always one behind the current row. This is because  	// we are trying to predict next row.  	window.Add (slice);  	stopAfter--;  }  
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: while (csv.Next () && stopAfter > 0) {  	var result = new StringBuilder ();  	line [0] = csv.Get (2);  	// ssn  	line [1] = csv.Get (3);  	// dev  	helper.NormalizeInputVector (line' slice' false);  	// enough data to build a full window?  	if (window.IsReady ()) {  		window.CopyWindow (((BasicMLData)input).Data' 0);  		String correct = csv.Get (2);  		// trying to predict SSN.  		IMLData output = bestMethod.Compute (input);  		String predicted = helper.DenormalizeOutputVectorToString (output) [0];  		result.Append (line);  		result.Append (" -> predicted: ");  		result.Append (predicted);  		result.Append ("(correct: ");  		result.Append (correct);  		result.Append (")");  		Console.WriteLine (result.ToString ());  	}  	// Add the normalized slice to the window. We do this just after  	// the after checking to see if the window is ready so that the  	// window is always one behind the current row. This is because  	// we are trying to predict next row.  	window.Add (slice);  	stopAfter--;  }  
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: line [0] = csv.Get (2);  
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: line [1] = csv.Get (3);  
Magic Number,Encog.Examples.Guide.Timeseries,SunSpotTimeseries,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Guide\Timeseries\SunSpotTimeseries.cs,Execute,The following statement contains a magic number: if (window.IsReady ()) {  	window.CopyWindow (((BasicMLData)input).Data' 0);  	String correct = csv.Get (2);  	// trying to predict SSN.  	IMLData output = bestMethod.Compute (input);  	String predicted = helper.DenormalizeOutputVectorToString (output) [0];  	result.Append (line);  	result.Append (" -> predicted: ");  	result.Append (predicted);  	result.Append ("(correct: ");  	result.Append (correct);  	result.Append (")");  	Console.WriteLine (result.ToString ());  }  
Magic Number,Encog.Examples.Hopfield.Associate,HopfieldAssociate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Hopfield\Associate\HopfieldAssociate.cs,Evaluate,The following statement contains a magic number: for (int i = 0; i < pattern.Length; i++) {  	BiPolarMLData pattern1 = ConvertPattern (pattern' i);  	hopfield.CurrentState = pattern1;  	int cycles = hopfield.RunUntilStable (100);  	BiPolarMLData pattern2 = hopfield.CurrentState;  	Console.WriteLine ("Cycles until stable(max 100): " + cycles + "' result=");  	Display (pattern1' pattern2);  	Console.WriteLine (@"----------------------");  }  
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (string.Compare (packet.Command' IndicatorLink.PacketBar' true) == 0) {  	double dataClose = CSVFormat.EgFormat.Parse (packet.Args [2]);  	double lastValue = CSVFormat.EgFormat.Parse (packet.Args [4]);  	const double period = 14;  	double result;  	if (double.IsNaN (lastValue))  		result = dataClose;  	else  		result = dataClose * (2.0 / (1 + period)) + (1 - (2.0 / (1 + period))) * lastValue;  	String[] args =  {  		CSVFormat.EgFormat.Format (result' EncogFramework.DefaultPrecision)'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"  	};  	Link.WritePacket (IndicatorLink.PacketInd' args);  }  
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (string.Compare (packet.Command' IndicatorLink.PacketBar' true) == 0) {  	double dataClose = CSVFormat.EgFormat.Parse (packet.Args [2]);  	double lastValue = CSVFormat.EgFormat.Parse (packet.Args [4]);  	const double period = 14;  	double result;  	if (double.IsNaN (lastValue))  		result = dataClose;  	else  		result = dataClose * (2.0 / (1 + period)) + (1 - (2.0 / (1 + period))) * lastValue;  	String[] args =  {  		CSVFormat.EgFormat.Format (result' EncogFramework.DefaultPrecision)'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"  	};  	Link.WritePacket (IndicatorLink.PacketInd' args);  }  
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (string.Compare (packet.Command' IndicatorLink.PacketBar' true) == 0) {  	double dataClose = CSVFormat.EgFormat.Parse (packet.Args [2]);  	double lastValue = CSVFormat.EgFormat.Parse (packet.Args [4]);  	const double period = 14;  	double result;  	if (double.IsNaN (lastValue))  		result = dataClose;  	else  		result = dataClose * (2.0 / (1 + period)) + (1 - (2.0 / (1 + period))) * lastValue;  	String[] args =  {  		CSVFormat.EgFormat.Format (result' EncogFramework.DefaultPrecision)'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"  	};  	Link.WritePacket (IndicatorLink.PacketInd' args);  }  
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (string.Compare (packet.Command' IndicatorLink.PacketBar' true) == 0) {  	double dataClose = CSVFormat.EgFormat.Parse (packet.Args [2]);  	double lastValue = CSVFormat.EgFormat.Parse (packet.Args [4]);  	const double period = 14;  	double result;  	if (double.IsNaN (lastValue))  		result = dataClose;  	else  		result = dataClose * (2.0 / (1 + period)) + (1 - (2.0 / (1 + period))) * lastValue;  	String[] args =  {  		CSVFormat.EgFormat.Format (result' EncogFramework.DefaultPrecision)'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"  	};  	Link.WritePacket (IndicatorLink.PacketInd' args);  }  
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (string.Compare (packet.Command' IndicatorLink.PacketBar' true) == 0) {  	double dataClose = CSVFormat.EgFormat.Parse (packet.Args [2]);  	double lastValue = CSVFormat.EgFormat.Parse (packet.Args [4]);  	const double period = 14;  	double result;  	if (double.IsNaN (lastValue))  		result = dataClose;  	else  		result = dataClose * (2.0 / (1 + period)) + (1 - (2.0 / (1 + period))) * lastValue;  	String[] args =  {  		CSVFormat.EgFormat.Format (result' EncogFramework.DefaultPrecision)'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"'  		"?"  	};  	Link.WritePacket (IndicatorLink.PacketInd' args);  }  
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (double.IsNaN (lastValue))  	result = dataClose;  else  	result = dataClose * (2.0 / (1 + period)) + (1 - (2.0 / (1 + period))) * lastValue;  
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: if (double.IsNaN (lastValue))  	result = dataClose;  else  	result = dataClose * (2.0 / (1 + period)) + (1 - (2.0 / (1 + period))) * lastValue;  
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: result = dataClose * (2.0 / (1 + period)) + (1 - (2.0 / (1 + period))) * lastValue;  
Magic Number,Encog.Examples.Indicator.CustomInd,EMA,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\CustomInd\EMA.cs,NotifyPacket,The following statement contains a magic number: result = dataClose * (2.0 / (1 + period)) + (1 - (2.0 / (1 + period))) * lastValue;  
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,ProcessFile,The following statement contains a magic number: while (csv.Next ()) {  	var a = new double[Config.InputWindow + 1];  	double close = csv.GetDouble (1);  	const int fastIndex = 2;  	const int slowIndex = fastIndex + Config.InputWindow;  	a [0] = close;  	for (int i = 0; i < 3; i++) {  		double fast = csv.GetDouble (fastIndex + i);  		double slow = csv.GetDouble (slowIndex + i);  		double diff = _fieldDifference.Normalize ((fast - slow) / Config.PipSize);  		a [i + 1] = diff;  	}  	_window.Add (a);  	if (_window.IsFull ()) {  		double max = (_window.CalculateMax (0' Config.InputWindow) - close) / Config.PipSize;  		double min = (_window.CalculateMin (0' Config.InputWindow) - close) / Config.PipSize;  		double o = Math.Abs (max) > Math.Abs (min) ? max : min;  		a = _window.GetLast ();  		for (int i = 0; i < 3; i++) {  			inputData [i] = a [i + 1];  		}  		o = _fieldOutcome.Normalize (o);  		idealData [0] = o;  		output.Add (inputData' idealData);  	}  }  
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,ProcessFile,The following statement contains a magic number: while (csv.Next ()) {  	var a = new double[Config.InputWindow + 1];  	double close = csv.GetDouble (1);  	const int fastIndex = 2;  	const int slowIndex = fastIndex + Config.InputWindow;  	a [0] = close;  	for (int i = 0; i < 3; i++) {  		double fast = csv.GetDouble (fastIndex + i);  		double slow = csv.GetDouble (slowIndex + i);  		double diff = _fieldDifference.Normalize ((fast - slow) / Config.PipSize);  		a [i + 1] = diff;  	}  	_window.Add (a);  	if (_window.IsFull ()) {  		double max = (_window.CalculateMax (0' Config.InputWindow) - close) / Config.PipSize;  		double min = (_window.CalculateMin (0' Config.InputWindow) - close) / Config.PipSize;  		double o = Math.Abs (max) > Math.Abs (min) ? max : min;  		a = _window.GetLast ();  		for (int i = 0; i < 3; i++) {  			inputData [i] = a [i + 1];  		}  		o = _fieldOutcome.Normalize (o);  		idealData [0] = o;  		output.Add (inputData' idealData);  	}  }  
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,ProcessFile,The following statement contains a magic number: while (csv.Next ()) {  	var a = new double[Config.InputWindow + 1];  	double close = csv.GetDouble (1);  	const int fastIndex = 2;  	const int slowIndex = fastIndex + Config.InputWindow;  	a [0] = close;  	for (int i = 0; i < 3; i++) {  		double fast = csv.GetDouble (fastIndex + i);  		double slow = csv.GetDouble (slowIndex + i);  		double diff = _fieldDifference.Normalize ((fast - slow) / Config.PipSize);  		a [i + 1] = diff;  	}  	_window.Add (a);  	if (_window.IsFull ()) {  		double max = (_window.CalculateMax (0' Config.InputWindow) - close) / Config.PipSize;  		double min = (_window.CalculateMin (0' Config.InputWindow) - close) / Config.PipSize;  		double o = Math.Abs (max) > Math.Abs (min) ? max : min;  		a = _window.GetLast ();  		for (int i = 0; i < 3; i++) {  			inputData [i] = a [i + 1];  		}  		o = _fieldOutcome.Normalize (o);  		idealData [0] = o;  		output.Add (inputData' idealData);  	}  }  
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,ProcessFile,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	double fast = csv.GetDouble (fastIndex + i);  	double slow = csv.GetDouble (slowIndex + i);  	double diff = _fieldDifference.Normalize ((fast - slow) / Config.PipSize);  	a [i + 1] = diff;  }  
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,ProcessFile,The following statement contains a magic number: if (_window.IsFull ()) {  	double max = (_window.CalculateMax (0' Config.InputWindow) - close) / Config.PipSize;  	double min = (_window.CalculateMin (0' Config.InputWindow) - close) / Config.PipSize;  	double o = Math.Abs (max) > Math.Abs (min) ? max : min;  	a = _window.GetLast ();  	for (int i = 0; i < 3; i++) {  		inputData [i] = a [i + 1];  	}  	o = _fieldOutcome.Normalize (o);  	idealData [0] = o;  	output.Add (inputData' idealData);  }  
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,ProcessFile,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	inputData [i] = a [i + 1];  }  
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,CalibrateFile,The following statement contains a magic number: while (csv.Next ()) {  	var a = new double[1];  	double close = csv.GetDouble (1);  	const int fastIndex = 2;  	const int slowIndex = fastIndex + Config.InputWindow;  	a [0] = close;  	for (int i = 0; i < Config.InputWindow; i++) {  		double fast = csv.GetDouble (fastIndex + i);  		double slow = csv.GetDouble (slowIndex + i);  		if (!double.IsNaN (fast) && !double.IsNaN (slow)) {  			double diff = (fast - slow) / Config.PipSize;  			_minDifference = Math.Min (_minDifference' diff);  			_maxDifference = Math.Max (_maxDifference' diff);  		}  	}  	_window.Add (a);  	if (_window.IsFull ()) {  		double max = (_window.CalculateMax (0' Config.InputWindow) - close) / Config.PipSize;  		double min = (_window.CalculateMin (0' Config.InputWindow) - close) / Config.PipSize;  		double o = Math.Abs (max) > Math.Abs (min) ? max : min;  		_maxPiPs = Math.Max (_maxPiPs' (int)o);  		_minPiPs = Math.Min (_minPiPs' (int)o);  	}  }  
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,Calibrate,The following statement contains a magic number: Console.WriteLine (@"DIFF_RANGE = " + (int)(Math.Max (_maxDifference' Math.Abs (_minDifference)) * 1.2));  
Magic Number,Encog.Examples.Indicator.Avg,GenerateTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\GenerateTraining.cs,Calibrate,The following statement contains a magic number: Console.WriteLine (@"PIP_RANGE = " + (int)(Math.Max (_maxPiPs' Math.Abs (_minPiPs)) * 1.2));  
Magic Number,Encog.Examples.Indicator.Avg,IndicatorExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\IndicatorExample.cs,Execute,The following statement contains a magic number: if (args.Length != 2) {  	Console.WriteLine (@"Usage: IndicatorExample [clear/collect/generate/train/run] [work path]");  } else {  	_path = args [1];  	if (string.Compare (args [0]' "collect"' true) == 0) {  		Run (true);  	} else if (string.Compare (args [0]' "train"' true) == 0) {  		Train ();  	} else if (string.Compare (args [0]' "run"' true) == 0) {  		Run (false);  	} else if (string.Compare (args [0]' "clear"' true) == 0) {  		Clear ();  	} else if (string.Compare (args [0]' "generate"' true) == 0) {  		Generate ();  	} else if (string.Compare (args [0]' "calibrate"' true) == 0) {  		Calibrate ();  	}  }  
Magic Number,Encog.Examples.Indicator.Avg,IndicatorExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\IndicatorExample.cs,Train,The following statement contains a magic number: if (method is IMLResettable && !(train is ManhattanPropagation)) {  	train.AddStrategy (new RequiredImprovementStrategy (500));  }  
Magic Number,Encog.Examples.Indicator.Avg,IndicatorExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\Avg\IndicatorExample.cs,Train,The following statement contains a magic number: train.AddStrategy (new RequiredImprovementStrategy (500));  
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NotifyPacket,The following statement contains a magic number: if (_method == null) {  	if (_holder.Record (when' 2' packet.Args)) {  		_rowsDownloaded++;  	}  } else {  	var input = new BasicMLData (Config.PredictWindow);  	const int fastIndex = 2;  	const int slowIndex = fastIndex + Config.InputWindow;  	for (int i = 0; i < 3; i++) {  		double fast = CSVFormat.EgFormat.Parse (packet.Args [fastIndex + i]);  		double slow = CSVFormat.EgFormat.Parse (packet.Args [slowIndex + i]);  		double diff = _fieldDifference.Normalize ((fast - slow) / Config.PipSize);  		input [i] = _fieldDifference.Normalize (diff);  	}  	IMLData result = _method.Compute (input);  	double d = result [0];  	d = _fieldOutcome.DeNormalize (d);  	String[] args =  {  		"?"'  		// line 1  		"?"'  		// line 2  		CSVFormat.EgFormat.Format (d' EncogFramework.DefaultPrecision)'  	// bar 1  	};  	// arrow 2  	Link.WritePacket (IndicatorLink.PacketInd' args);  }  
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NotifyPacket,The following statement contains a magic number: if (_method == null) {  	if (_holder.Record (when' 2' packet.Args)) {  		_rowsDownloaded++;  	}  } else {  	var input = new BasicMLData (Config.PredictWindow);  	const int fastIndex = 2;  	const int slowIndex = fastIndex + Config.InputWindow;  	for (int i = 0; i < 3; i++) {  		double fast = CSVFormat.EgFormat.Parse (packet.Args [fastIndex + i]);  		double slow = CSVFormat.EgFormat.Parse (packet.Args [slowIndex + i]);  		double diff = _fieldDifference.Normalize ((fast - slow) / Config.PipSize);  		input [i] = _fieldDifference.Normalize (diff);  	}  	IMLData result = _method.Compute (input);  	double d = result [0];  	d = _fieldOutcome.DeNormalize (d);  	String[] args =  {  		"?"'  		// line 1  		"?"'  		// line 2  		CSVFormat.EgFormat.Format (d' EncogFramework.DefaultPrecision)'  	// bar 1  	};  	// arrow 2  	Link.WritePacket (IndicatorLink.PacketInd' args);  }  
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NotifyPacket,The following statement contains a magic number: if (_method == null) {  	if (_holder.Record (when' 2' packet.Args)) {  		_rowsDownloaded++;  	}  } else {  	var input = new BasicMLData (Config.PredictWindow);  	const int fastIndex = 2;  	const int slowIndex = fastIndex + Config.InputWindow;  	for (int i = 0; i < 3; i++) {  		double fast = CSVFormat.EgFormat.Parse (packet.Args [fastIndex + i]);  		double slow = CSVFormat.EgFormat.Parse (packet.Args [slowIndex + i]);  		double diff = _fieldDifference.Normalize ((fast - slow) / Config.PipSize);  		input [i] = _fieldDifference.Normalize (diff);  	}  	IMLData result = _method.Compute (input);  	double d = result [0];  	d = _fieldOutcome.DeNormalize (d);  	String[] args =  {  		"?"'  		// line 1  		"?"'  		// line 2  		CSVFormat.EgFormat.Format (d' EncogFramework.DefaultPrecision)'  	// bar 1  	};  	// arrow 2  	Link.WritePacket (IndicatorLink.PacketInd' args);  }  
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NotifyPacket,The following statement contains a magic number: if (_holder.Record (when' 2' packet.Args)) {  	_rowsDownloaded++;  }  
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NotifyPacket,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	double fast = CSVFormat.EgFormat.Parse (packet.Args [fastIndex + i]);  	double slow = CSVFormat.EgFormat.Parse (packet.Args [slowIndex + i]);  	double diff = _fieldDifference.Normalize ((fast - slow) / Config.PipSize);  	input [i] = _fieldDifference.Normalize (diff);  }  
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NextFile,The following statement contains a magic number: foreach (string file in list) {  	var fn = new FileInfo (file);  	if (fn.Name.StartsWith ("collected") && fn.Name.EndsWith (".csv")) {  		int idx = fn.Name.IndexOf (".csv");  		String str = fn.Name.Substring (9' idx - 9);  		int n = int.Parse (str);  		mx = Math.Max (n' mx);  	}  }  
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NextFile,The following statement contains a magic number: foreach (string file in list) {  	var fn = new FileInfo (file);  	if (fn.Name.StartsWith ("collected") && fn.Name.EndsWith (".csv")) {  		int idx = fn.Name.IndexOf (".csv");  		String str = fn.Name.Substring (9' idx - 9);  		int n = int.Parse (str);  		mx = Math.Max (n' mx);  	}  }  
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NextFile,The following statement contains a magic number: if (fn.Name.StartsWith ("collected") && fn.Name.EndsWith (".csv")) {  	int idx = fn.Name.IndexOf (".csv");  	String str = fn.Name.Substring (9' idx - 9);  	int n = int.Parse (str);  	mx = Math.Max (n' mx);  }  
Magic Number,Encog.Examples.Indicator.ImportData,MyInd,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Indicator\ImportData\MyInd.cs,NextFile,The following statement contains a magic number: if (fn.Name.StartsWith ("collected") && fn.Name.EndsWith (".csv")) {  	int idx = fn.Name.IndexOf (".csv");  	String str = fn.Name.Substring (9' idx - 9);  	int n = int.Parse (str);  	mx = Math.Max (n' mx);  }  
Magic Number,Encog.Examples.JordanNetwork,JordanExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,CreateJordanNetwork,The following statement contains a magic number: pattern.AddHiddenLayer (2);  
Magic Number,Encog.Examples.JordanNetwork,JordanExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\JordanNetwork\JordanExample.cs,CreateFeedforwardNetwork,The following statement contains a magic number: pattern.AddHiddenLayer (2);  
Magic Number,Encog.Examples.LiveSimul,LiveSimul,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\LiveSimul\LiveSimul.cs,Execute,The following statement contains a magic number: EncogUtility.TrainConsole (network' set.Item1' 22.1);  
Magic Number,Encog.Examples.Lunar,LanderSimulator,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LanderSimulator.cs,LanderSimulator,The following statement contains a magic number: Fuel = 200;  
Magic Number,Encog.Examples.Lunar,LanderSimulator,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LanderSimulator.cs,LanderSimulator,The following statement contains a magic number: Altitude = 10000;  
Magic Number,Encog.Examples.Lunar,LanderSimulator,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LanderSimulator.cs,Telemetry,The following statement contains a magic number: return string.Format ("Elapsed: {0} s' Fuel: {1} l' Velocity: {2} m/s' {3} m"' Seconds' Fuel' Format.FormatDouble (Velocity' 4)' (int)Altitude);  
Magic Number,Encog.Examples.Lunar,LunarLander,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 0 && String.Compare (app.Args [0]' "anneal"' true) == 0) {  	train = new NeuralSimulatedAnnealing (network' new PilotScore ()' 10' 2' 100);  } else {  	train = new MLMethodGeneticAlgorithm (() => {  		BasicNetwork result = CreateNetwork ();  		((IMLResettable)result).Reset ();  		return result;  	}' new PilotScore ()' 500);  }  
Magic Number,Encog.Examples.Lunar,LunarLander,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 0 && String.Compare (app.Args [0]' "anneal"' true) == 0) {  	train = new NeuralSimulatedAnnealing (network' new PilotScore ()' 10' 2' 100);  } else {  	train = new MLMethodGeneticAlgorithm (() => {  		BasicNetwork result = CreateNetwork ();  		((IMLResettable)result).Reset ();  		return result;  	}' new PilotScore ()' 500);  }  
Magic Number,Encog.Examples.Lunar,LunarLander,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 0 && String.Compare (app.Args [0]' "anneal"' true) == 0) {  	train = new NeuralSimulatedAnnealing (network' new PilotScore ()' 10' 2' 100);  } else {  	train = new MLMethodGeneticAlgorithm (() => {  		BasicNetwork result = CreateNetwork ();  		((IMLResettable)result).Reset ();  		return result;  	}' new PilotScore ()' 500);  }  
Magic Number,Encog.Examples.Lunar,LunarLander,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 0 && String.Compare (app.Args [0]' "anneal"' true) == 0) {  	train = new NeuralSimulatedAnnealing (network' new PilotScore ()' 10' 2' 100);  } else {  	train = new MLMethodGeneticAlgorithm (() => {  		BasicNetwork result = CreateNetwork ();  		((IMLResettable)result).Reset ();  		return result;  	}' new PilotScore ()' 500);  }  
Magic Number,Encog.Examples.Lunar,LunarLander,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: train = new NeuralSimulatedAnnealing (network' new PilotScore ()' 10' 2' 100);  
Magic Number,Encog.Examples.Lunar,LunarLander,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: train = new NeuralSimulatedAnnealing (network' new PilotScore ()' 10' 2' 100);  
Magic Number,Encog.Examples.Lunar,LunarLander,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: train = new NeuralSimulatedAnnealing (network' new PilotScore ()' 10' 2' 100);  
Magic Number,Encog.Examples.Lunar,LunarLander,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: train = new MLMethodGeneticAlgorithm (() => {  	BasicNetwork result = CreateNetwork ();  	((IMLResettable)result).Reset ();  	return result;  }' new PilotScore ()' 500);  
Magic Number,Encog.Examples.Lunar,LunarLander,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,Execute,The following statement contains a magic number: for (int i = 0; i < 50; i++) {  	train.Iteration ();  	Console.WriteLine (@"Epoch #" + epoch + @" Score:" + train.Error);  	epoch++;  }  
Magic Number,Encog.Examples.Lunar,LunarLander,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\LunarLander.cs,CreateNetwork,The following statement contains a magic number: pattern.AddHiddenLayer (50);  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _fuelStats = new NormalizedField (NormalizationAction.Normalize' "fuel"' 200' 0' -0.9' 0.9);  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _fuelStats = new NormalizedField (NormalizationAction.Normalize' "fuel"' 200' 0' -0.9' 0.9);  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _fuelStats = new NormalizedField (NormalizationAction.Normalize' "fuel"' 200' 0' -0.9' 0.9);  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _altitudeStats = new NormalizedField (NormalizationAction.Normalize' "altitude"' 10000' 0' -0.9' 0.9);  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _altitudeStats = new NormalizedField (NormalizationAction.Normalize' "altitude"' 10000' 0' -0.9' 0.9);  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _altitudeStats = new NormalizedField (NormalizationAction.Normalize' "altitude"' 10000' 0' -0.9' 0.9);  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _velocityStats = new NormalizedField (NormalizationAction.Normalize' "velocity"' LanderSimulator.TerminalVelocity' -LanderSimulator.TerminalVelocity' -0.9' 0.9);  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,NeuralPilot,The following statement contains a magic number: _velocityStats = new NormalizedField (NormalizationAction.Normalize' "velocity"' LanderSimulator.TerminalVelocity' -LanderSimulator.TerminalVelocity' -0.9' 0.9);  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,ScorePilot,The following statement contains a magic number: while (sim.Flying) {  	var input = new BasicMLData (3);  	input [0] = _fuelStats.Normalize (sim.Fuel);  	input [1] = _altitudeStats.Normalize (sim.Altitude);  	input [2] = _velocityStats.Normalize (sim.Velocity);  	IMLData output = _network.Compute (input);  	double value = output [0];  	bool thrust;  	if (value > 0) {  		thrust = true;  		if (_track)  			Console.WriteLine (@"THRUST");  	} else  		thrust = false;  	sim.Turn (thrust);  	if (_track)  		Console.WriteLine (sim.Telemetry ());  }  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,ScorePilot,The following statement contains a magic number: while (sim.Flying) {  	var input = new BasicMLData (3);  	input [0] = _fuelStats.Normalize (sim.Fuel);  	input [1] = _altitudeStats.Normalize (sim.Altitude);  	input [2] = _velocityStats.Normalize (sim.Velocity);  	IMLData output = _network.Compute (input);  	double value = output [0];  	bool thrust;  	if (value > 0) {  		thrust = true;  		if (_track)  			Console.WriteLine (@"THRUST");  	} else  		thrust = false;  	sim.Turn (thrust);  	if (_track)  		Console.WriteLine (sim.Telemetry ());  }  
Magic Number,Encog.Examples.Lunar,NeuralPilot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Lunar\NeuralPilot.cs,ScorePilot,The following statement contains a magic number: input [2] = _velocityStats.Normalize (sim.Velocity);  
Magic Number,Encog.Examples.Market,MarketBuildTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketBuildTraining.cs,Generate,The following statement contains a magic number: begin = begin.AddDays (-60);  
Magic Number,Encog.Examples.Market,MarketBuildTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketBuildTraining.cs,Generate,The following statement contains a magic number: end = end.AddDays (-60);  
Magic Number,Encog.Examples.Market,MarketBuildTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketBuildTraining.cs,Generate,The following statement contains a magic number: begin = begin.AddYears (-2);  
Magic Number,Encog.Examples.Market,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketEvaluate.cs,GrabData,The following statement contains a magic number: begin = begin.AddDays (-60);  
Magic Number,Encog.Examples.Market,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketEvaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data) {  	IMLData input = pair.Input;  	IMLData actualData = pair.Ideal;  	IMLData predictData = network.Compute (input);  	double actual = actualData [0];  	double predict = predictData [0];  	double diff = Math.Abs (predict - actual);  	Direction actualDirection = DetermineDirection (actual);  	Direction predictDirection = DetermineDirection (predict);  	if (actualDirection == predictDirection)  		correct++;  	count++;  	Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  }  
Magic Number,Encog.Examples.Market,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketEvaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data) {  	IMLData input = pair.Input;  	IMLData actualData = pair.Ideal;  	IMLData predictData = network.Compute (input);  	double actual = actualData [0];  	double predict = predictData [0];  	double diff = Math.Abs (predict - actual);  	Direction actualDirection = DetermineDirection (actual);  	Direction predictDirection = DetermineDirection (predict);  	if (actualDirection == predictDirection)  		correct++;  	count++;  	Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  }  
Magic Number,Encog.Examples.Market,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketEvaluate.cs,Evaluate,The following statement contains a magic number: Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  
Magic Number,Encog.Examples.Market,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketEvaluate.cs,Evaluate,The following statement contains a magic number: Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  
Magic Number,Encog.Examples.Market,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketPredict.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 2) {  	Console.WriteLine (@"MarketPredict [data dir] [generate/train/prune/evaluate]");  } else {  	var dataDir = new FileInfo (app.Args [0]);  	if (String.Compare (app.Args [1]' "generate"' true) == 0) {  		MarketBuildTraining.Generate (dataDir);  	} else if (String.Compare (app.Args [1]' "train"' true) == 0) {  		MarketTrain.Train (dataDir);  	} else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  		MarketEvaluate.Evaluate (dataDir);  	} else if (String.Compare (app.Args [1]' "prune"' true) == 0) {  		{  			MarketPrune.Incremental (dataDir);  		}  	}  }  
Magic Number,Encog.Examples.Market,MarketPrune,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketPrune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (5' 50);  
Magic Number,Encog.Examples.Market,MarketPrune,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketPrune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (5' 50);  
Magic Number,Encog.Examples.Market,MarketPrune,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Market\MarketPrune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (0' 50);  
Magic Number,Encog.Examples.CSVMarketExample,MarketBuildTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketbuildtraining.cs,Generate,The following statement contains a magic number: begin = begin.AddDays (-200);  
Magic Number,Encog.Examples.CSVMarketExample,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketevaluate.cs,GrabData,The following statement contains a magic number: begin = begin.AddDays (-150);  
Magic Number,Encog.Examples.CSVMarketExample,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketevaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data) {  	IMLData input = pair.Input;  	IMLData actualData = pair.Ideal;  	IMLData predictData = network.Compute (input);  	double actual = actualData [0];  	double predict = predictData [0];  	double diff = Math.Abs (predict - actual);  	Direction actualDirection = DetermineDirection (actual);  	Direction predictDirection = DetermineDirection (predict);  	if (actualDirection == predictDirection)  		correct++;  	count++;  	Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  }  
Magic Number,Encog.Examples.CSVMarketExample,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketevaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data) {  	IMLData input = pair.Input;  	IMLData actualData = pair.Ideal;  	IMLData predictData = network.Compute (input);  	double actual = actualData [0];  	double predict = predictData [0];  	double diff = Math.Abs (predict - actual);  	Direction actualDirection = DetermineDirection (actual);  	Direction predictDirection = DetermineDirection (predict);  	if (actualDirection == predictDirection)  		correct++;  	count++;  	Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  }  
Magic Number,Encog.Examples.CSVMarketExample,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketevaluate.cs,Evaluate,The following statement contains a magic number: Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  
Magic Number,Encog.Examples.CSVMarketExample,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketevaluate.cs,Evaluate,The following statement contains a magic number: Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3) {  	Console.WriteLine (@"MarketPredict [data dir] [generate/train/prune/evaluate] PathToFile");  	Console.WriteLine (@"e.g csvMarketPredict [data dir] [generate/train/prune/evaluate] c:\\EURUSD.csv");  } else {  	var dataDir = new FileInfo (app.Args [0]);  	if (String.Compare (app.Args [1]' "generate"' true) == 0) {  		MarketBuildTraining.Generate (app.Args [2]);  	} else if (String.Compare (app.Args [1]' "train"' true) == 0) {  		MarketTrain.Train (dataDir);  	} else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  		MarketEvaluate.Evaluate (dataDir' app.Args [2]);  	} else if (String.Compare (app.Args [1]' "prune"' true) == 0) {  		{  			MarketPrune.Incremental (dataDir);  		}  	}  }  
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3) {  	Console.WriteLine (@"MarketPredict [data dir] [generate/train/prune/evaluate] PathToFile");  	Console.WriteLine (@"e.g csvMarketPredict [data dir] [generate/train/prune/evaluate] c:\\EURUSD.csv");  } else {  	var dataDir = new FileInfo (app.Args [0]);  	if (String.Compare (app.Args [1]' "generate"' true) == 0) {  		MarketBuildTraining.Generate (app.Args [2]);  	} else if (String.Compare (app.Args [1]' "train"' true) == 0) {  		MarketTrain.Train (dataDir);  	} else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  		MarketEvaluate.Evaluate (dataDir' app.Args [2]);  	} else if (String.Compare (app.Args [1]' "prune"' true) == 0) {  		{  			MarketPrune.Incremental (dataDir);  		}  	}  }  
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3) {  	Console.WriteLine (@"MarketPredict [data dir] [generate/train/prune/evaluate] PathToFile");  	Console.WriteLine (@"e.g csvMarketPredict [data dir] [generate/train/prune/evaluate] c:\\EURUSD.csv");  } else {  	var dataDir = new FileInfo (app.Args [0]);  	if (String.Compare (app.Args [1]' "generate"' true) == 0) {  		MarketBuildTraining.Generate (app.Args [2]);  	} else if (String.Compare (app.Args [1]' "train"' true) == 0) {  		MarketTrain.Train (dataDir);  	} else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  		MarketEvaluate.Evaluate (dataDir' app.Args [2]);  	} else if (String.Compare (app.Args [1]' "prune"' true) == 0) {  		{  			MarketPrune.Incremental (dataDir);  		}  	}  }  
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [1]' "generate"' true) == 0) {  	MarketBuildTraining.Generate (app.Args [2]);  } else if (String.Compare (app.Args [1]' "train"' true) == 0) {  	MarketTrain.Train (dataDir);  } else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  	MarketEvaluate.Evaluate (dataDir' app.Args [2]);  } else if (String.Compare (app.Args [1]' "prune"' true) == 0) {  	{  		MarketPrune.Incremental (dataDir);  	}  }  
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [1]' "generate"' true) == 0) {  	MarketBuildTraining.Generate (app.Args [2]);  } else if (String.Compare (app.Args [1]' "train"' true) == 0) {  	MarketTrain.Train (dataDir);  } else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  	MarketEvaluate.Evaluate (dataDir' app.Args [2]);  } else if (String.Compare (app.Args [1]' "prune"' true) == 0) {  	{  		MarketPrune.Incremental (dataDir);  	}  }  
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: MarketBuildTraining.Generate (app.Args [2]);  
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [1]' "train"' true) == 0) {  	MarketTrain.Train (dataDir);  } else if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  	MarketEvaluate.Evaluate (dataDir' app.Args [2]);  } else if (String.Compare (app.Args [1]' "prune"' true) == 0) {  	{  		MarketPrune.Incremental (dataDir);  	}  }  
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [1]' "evaluate"' true) == 0) {  	MarketEvaluate.Evaluate (dataDir' app.Args [2]);  } else if (String.Compare (app.Args [1]' "prune"' true) == 0) {  	{  		MarketPrune.Incremental (dataDir);  	}  }  
Magic Number,Encog.Examples.CSVMarketExample,MarketPredict,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketpredict.cs,Execute,The following statement contains a magic number: MarketEvaluate.Evaluate (dataDir' app.Args [2]);  
Magic Number,Encog.Examples.CSVMarketExample,MarketPrune,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (5' 50);  
Magic Number,Encog.Examples.CSVMarketExample,MarketPrune,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (5' 50);  
Magic Number,Encog.Examples.CSVMarketExample,MarketPrune,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CSVPredict\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (0' 50);  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The following statement contains a magic number: do {  	train.Iteration ();  	Console.WriteLine (@"Epoch #" + epoch + @" Error:" + train.Error);  	epoch++;  } while ((epoch < 1) && (train.Error > 0.001));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Execute,The following statement contains a magic number: Set2DTestingArrays (100);  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Scale,The following statement contains a magic number: return (x * 0.7) + 0.15;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Scale,The following statement contains a magic number: return (x * 0.7) + 0.15;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,InverseScale,The following statement contains a magic number: return (x - 0.15) / 0.7;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,InverseScale,The following statement contains a magic number: return (x - 0.15) / 0.7;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Chop,The following statement contains a magic number: if (x > 0.99)  	return 0.99;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Chop,The following statement contains a magic number: if (x > 0.99)  	return 0.99;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Chop,The following statement contains a magic number: return 0.99;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,ConvertColumnsTo2DSurface,The following statement contains a magic number: foreach (double[] t in cols) {  	//[0] is x  	//[1] is y  	//Boundary bottom   	//int rowIndex = (int)Math.Round(((cols[i][0]) * (sideLength-1))' 6);  	//int columnIndex = (int)Math.Round(((cols[i][1]) * (sideLength-1))' 6);  	//Boundary middle  	int rowIndex = (int)Math.Round (((t [0] - 0.05) * (sideLength))' 6);  	int columnIndex = (int)Math.Round (((t [1] - 0.05) * (sideLength))' 6);  	surface [0] [rowIndex + 1] = t [0];  	surface [columnIndex + 1] [0] = t [1];  	surface [columnIndex + 1] [rowIndex + 1] = t [valueCol];  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,ConvertColumnsTo2DSurface,The following statement contains a magic number: foreach (double[] t in cols) {  	//[0] is x  	//[1] is y  	//Boundary bottom   	//int rowIndex = (int)Math.Round(((cols[i][0]) * (sideLength-1))' 6);  	//int columnIndex = (int)Math.Round(((cols[i][1]) * (sideLength-1))' 6);  	//Boundary middle  	int rowIndex = (int)Math.Round (((t [0] - 0.05) * (sideLength))' 6);  	int columnIndex = (int)Math.Round (((t [1] - 0.05) * (sideLength))' 6);  	surface [0] [rowIndex + 1] = t [0];  	surface [columnIndex + 1] [0] = t [1];  	surface [columnIndex + 1] [rowIndex + 1] = t [valueCol];  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,ConvertColumnsTo2DSurface,The following statement contains a magic number: foreach (double[] t in cols) {  	//[0] is x  	//[1] is y  	//Boundary bottom   	//int rowIndex = (int)Math.Round(((cols[i][0]) * (sideLength-1))' 6);  	//int columnIndex = (int)Math.Round(((cols[i][1]) * (sideLength-1))' 6);  	//Boundary middle  	int rowIndex = (int)Math.Round (((t [0] - 0.05) * (sideLength))' 6);  	int columnIndex = (int)Math.Round (((t [1] - 0.05) * (sideLength))' 6);  	surface [0] [rowIndex + 1] = t [0];  	surface [columnIndex + 1] [0] = t [1];  	surface [columnIndex + 1] [rowIndex + 1] = t [valueCol];  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,ConvertColumnsTo2DSurface,The following statement contains a magic number: foreach (double[] t in cols) {  	//[0] is x  	//[1] is y  	//Boundary bottom   	//int rowIndex = (int)Math.Round(((cols[i][0]) * (sideLength-1))' 6);  	//int columnIndex = (int)Math.Round(((cols[i][1]) * (sideLength-1))' 6);  	//Boundary middle  	int rowIndex = (int)Math.Round (((t [0] - 0.05) * (sideLength))' 6);  	int columnIndex = (int)Math.Round (((t [1] - 0.05) * (sideLength))' 6);  	surface [0] [rowIndex + 1] = t [0];  	surface [columnIndex + 1] [0] = t [1];  	surface [columnIndex + 1] [rowIndex + 1] = t [valueCol];  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: for (int i = 1; i < surface.Count; i++) {  	for (int j = 1; j < surface [i].Length; j++) {  		double cellWidth = (1.0 / (2.0 * (surface.Count - 1)));  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] = new double[3];  		//For midpoints  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] [0] = ((i - 1) / (double)(surface.Count - 1)) + cellWidth;  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] [1] = ((j - 1) / (double)(surface.Count - 1)) + cellWidth;  		//For actual value  		//cols[(i - 1) * (surface.Length - 1) + (j - 1)][0] = ((double)(i - 1) / (double)(surface.Length - 1));  		//cols[(i - 1) * (surface.Length - 1) + (j - 1)][1] = ((double)(j - 1) / (double)(surface.Length - 1));  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] [2] = surface [j] [i];  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: for (int i = 1; i < surface.Count; i++) {  	for (int j = 1; j < surface [i].Length; j++) {  		double cellWidth = (1.0 / (2.0 * (surface.Count - 1)));  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] = new double[3];  		//For midpoints  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] [0] = ((i - 1) / (double)(surface.Count - 1)) + cellWidth;  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] [1] = ((j - 1) / (double)(surface.Count - 1)) + cellWidth;  		//For actual value  		//cols[(i - 1) * (surface.Length - 1) + (j - 1)][0] = ((double)(i - 1) / (double)(surface.Length - 1));  		//cols[(i - 1) * (surface.Length - 1) + (j - 1)][1] = ((double)(j - 1) / (double)(surface.Length - 1));  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] [2] = surface [j] [i];  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: for (int i = 1; i < surface.Count; i++) {  	for (int j = 1; j < surface [i].Length; j++) {  		double cellWidth = (1.0 / (2.0 * (surface.Count - 1)));  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] = new double[3];  		//For midpoints  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] [0] = ((i - 1) / (double)(surface.Count - 1)) + cellWidth;  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] [1] = ((j - 1) / (double)(surface.Count - 1)) + cellWidth;  		//For actual value  		//cols[(i - 1) * (surface.Length - 1) + (j - 1)][0] = ((double)(i - 1) / (double)(surface.Length - 1));  		//cols[(i - 1) * (surface.Length - 1) + (j - 1)][1] = ((double)(j - 1) / (double)(surface.Length - 1));  		cols [(i - 1) * (surface.Count - 1) + (j - 1)] [2] = surface [j] [i];  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: for (int j = 1; j < surface [i].Length; j++) {  	double cellWidth = (1.0 / (2.0 * (surface.Count - 1)));  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] = new double[3];  	//For midpoints  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] [0] = ((i - 1) / (double)(surface.Count - 1)) + cellWidth;  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] [1] = ((j - 1) / (double)(surface.Count - 1)) + cellWidth;  	//For actual value  	//cols[(i - 1) * (surface.Length - 1) + (j - 1)][0] = ((double)(i - 1) / (double)(surface.Length - 1));  	//cols[(i - 1) * (surface.Length - 1) + (j - 1)][1] = ((double)(j - 1) / (double)(surface.Length - 1));  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] [2] = surface [j] [i];  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: for (int j = 1; j < surface [i].Length; j++) {  	double cellWidth = (1.0 / (2.0 * (surface.Count - 1)));  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] = new double[3];  	//For midpoints  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] [0] = ((i - 1) / (double)(surface.Count - 1)) + cellWidth;  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] [1] = ((j - 1) / (double)(surface.Count - 1)) + cellWidth;  	//For actual value  	//cols[(i - 1) * (surface.Length - 1) + (j - 1)][0] = ((double)(i - 1) / (double)(surface.Length - 1));  	//cols[(i - 1) * (surface.Length - 1) + (j - 1)][1] = ((double)(j - 1) / (double)(surface.Length - 1));  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] [2] = surface [j] [i];  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: for (int j = 1; j < surface [i].Length; j++) {  	double cellWidth = (1.0 / (2.0 * (surface.Count - 1)));  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] = new double[3];  	//For midpoints  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] [0] = ((i - 1) / (double)(surface.Count - 1)) + cellWidth;  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] [1] = ((j - 1) / (double)(surface.Count - 1)) + cellWidth;  	//For actual value  	//cols[(i - 1) * (surface.Length - 1) + (j - 1)][0] = ((double)(i - 1) / (double)(surface.Length - 1));  	//cols[(i - 1) * (surface.Length - 1) + (j - 1)][1] = ((double)(j - 1) / (double)(surface.Length - 1));  	cols [(i - 1) * (surface.Count - 1) + (j - 1)] [2] = surface [j] [i];  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: cols [(i - 1) * (surface.Count - 1) + (j - 1)] = new double[3];  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Convert2DSurfaceToColumns,The following statement contains a magic number: cols [(i - 1) * (surface.Count - 1) + (j - 1)] [2] = surface [j] [i];  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal1DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [1]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal1DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [1]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal1DTrainingData,The following statement contains a magic number: INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal1DTrainingData,The following statement contains a magic number: INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[2];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  	INPUT [i] [1] = Scale ((Convert.ToDouble (values [1]) - 0.05) * (1.0 / 0.9));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [2]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[2];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  	INPUT [i] [1] = Scale ((Convert.ToDouble (values [1]) - 0.05) * (1.0 / 0.9));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [2]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[2];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  	INPUT [i] [1] = Scale ((Convert.ToDouble (values [1]) - 0.05) * (1.0 / 0.9));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [2]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[2];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  	INPUT [i] [1] = Scale ((Convert.ToDouble (values [1]) - 0.05) * (1.0 / 0.9));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [2]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[2];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  	INPUT [i] [1] = Scale ((Convert.ToDouble (values [1]) - 0.05) * (1.0 / 0.9));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [2]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[2];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  	INPUT [i] [1] = Scale ((Convert.ToDouble (values [1]) - 0.05) * (1.0 / 0.9));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [2]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: INPUT [i] = new double[2];  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: INPUT [i] [0] = Scale ((Convert.ToDouble (values [0]) - 0.05) * (1.0 / 0.9));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: INPUT [i] [1] = Scale ((Convert.ToDouble (values [1]) - 0.05) * (1.0 / 0.9));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: INPUT [i] [1] = Scale ((Convert.ToDouble (values [1]) - 0.05) * (1.0 / 0.9));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal2DTrainingData,The following statement contains a magic number: IDEAL [i] [0] = Scale (Convert.ToDouble (values [2]));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[3];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale (Convert.ToDouble (values [0]));  	INPUT [i] [1] = Scale (Convert.ToDouble (values [1]));  	INPUT [i] [2] = Scale (Convert.ToDouble (values [2]));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [3]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[3];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale (Convert.ToDouble (values [0]));  	INPUT [i] [1] = Scale (Convert.ToDouble (values [1]));  	INPUT [i] [2] = Scale (Convert.ToDouble (values [2]));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [3]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[3];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale (Convert.ToDouble (values [0]));  	INPUT [i] [1] = Scale (Convert.ToDouble (values [1]));  	INPUT [i] [2] = Scale (Convert.ToDouble (values [2]));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [3]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: for (int i = 0; i < allLines.Length; i++) {  	INPUT [i] = new double[3];  	IDEAL [i] = new double[1];  	var values = allLines [i].Split (''');  	INPUT [i] [0] = Scale (Convert.ToDouble (values [0]));  	INPUT [i] [1] = Scale (Convert.ToDouble (values [1]));  	INPUT [i] [2] = Scale (Convert.ToDouble (values [2]));  	IDEAL [i] [0] = Scale (Convert.ToDouble (values [3]));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: INPUT [i] = new double[3];  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: INPUT [i] [2] = Scale (Convert.ToDouble (values [2]));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: INPUT [i] [2] = Scale (Convert.ToDouble (values [2]));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,LoadReal3DTrainingData,The following statement contains a magic number: IDEAL [i] [0] = Scale (Convert.ToDouble (values [3]));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set2DTestingArrays,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		//double x = i/(double) iLimit;  		//double y = k/(double) kLimit;  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set2DTestingArrays,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	//double x = i/(double) iLimit;  	//double y = k/(double) kLimit;  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set2DTestingArrays,The following statement contains a magic number: INPUT [i * (kLimit + 1) + k] = new double[2];  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set3DTestingArrays,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		for (int j = 0; j <= jLimit; j++) {  			int index = (i * (kLimit + 1) * (jLimit + 1)) + (j * (kLimit + 1)) + k;  			INPUT [index] = new double[3];  			IDEAL [index] = new double[1];  			//double x = (double)i / (double)iLimit;  			//double y = (double)k / (double)kLimit;  			//double z = (double)j / (double)jLimit;  			INPUT [index] [0] = Scale ((i / ((double)iLimit)));  			INPUT [index] [1] = Scale ((k / ((double)kLimit)));  			INPUT [index] [2] = Scale ((j / ((double)jLimit)));  			IDEAL [index] [0] = 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set3DTestingArrays,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		for (int j = 0; j <= jLimit; j++) {  			int index = (i * (kLimit + 1) * (jLimit + 1)) + (j * (kLimit + 1)) + k;  			INPUT [index] = new double[3];  			IDEAL [index] = new double[1];  			//double x = (double)i / (double)iLimit;  			//double y = (double)k / (double)kLimit;  			//double z = (double)j / (double)jLimit;  			INPUT [index] [0] = Scale ((i / ((double)iLimit)));  			INPUT [index] [1] = Scale ((k / ((double)kLimit)));  			INPUT [index] [2] = Scale ((j / ((double)jLimit)));  			IDEAL [index] [0] = 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set3DTestingArrays,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	for (int j = 0; j <= jLimit; j++) {  		int index = (i * (kLimit + 1) * (jLimit + 1)) + (j * (kLimit + 1)) + k;  		INPUT [index] = new double[3];  		IDEAL [index] = new double[1];  		//double x = (double)i / (double)iLimit;  		//double y = (double)k / (double)kLimit;  		//double z = (double)j / (double)jLimit;  		INPUT [index] [0] = Scale ((i / ((double)iLimit)));  		INPUT [index] [1] = Scale ((k / ((double)kLimit)));  		INPUT [index] [2] = Scale ((j / ((double)jLimit)));  		IDEAL [index] [0] = 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set3DTestingArrays,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	for (int j = 0; j <= jLimit; j++) {  		int index = (i * (kLimit + 1) * (jLimit + 1)) + (j * (kLimit + 1)) + k;  		INPUT [index] = new double[3];  		IDEAL [index] = new double[1];  		//double x = (double)i / (double)iLimit;  		//double y = (double)k / (double)kLimit;  		//double z = (double)j / (double)jLimit;  		INPUT [index] [0] = Scale ((i / ((double)iLimit)));  		INPUT [index] [1] = Scale ((k / ((double)kLimit)));  		INPUT [index] [2] = Scale ((j / ((double)jLimit)));  		IDEAL [index] [0] = 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set3DTestingArrays,The following statement contains a magic number: for (int j = 0; j <= jLimit; j++) {  	int index = (i * (kLimit + 1) * (jLimit + 1)) + (j * (kLimit + 1)) + k;  	INPUT [index] = new double[3];  	IDEAL [index] = new double[1];  	//double x = (double)i / (double)iLimit;  	//double y = (double)k / (double)kLimit;  	//double z = (double)j / (double)jLimit;  	INPUT [index] [0] = Scale ((i / ((double)iLimit)));  	INPUT [index] [1] = Scale ((k / ((double)kLimit)));  	INPUT [index] [2] = Scale ((j / ((double)jLimit)));  	IDEAL [index] [0] = 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set3DTestingArrays,The following statement contains a magic number: for (int j = 0; j <= jLimit; j++) {  	int index = (i * (kLimit + 1) * (jLimit + 1)) + (j * (kLimit + 1)) + k;  	INPUT [index] = new double[3];  	IDEAL [index] = new double[1];  	//double x = (double)i / (double)iLimit;  	//double y = (double)k / (double)kLimit;  	//double z = (double)j / (double)jLimit;  	INPUT [index] [0] = Scale ((i / ((double)iLimit)));  	INPUT [index] [1] = Scale ((k / ((double)kLimit)));  	INPUT [index] [2] = Scale ((j / ((double)jLimit)));  	IDEAL [index] [0] = 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set3DTestingArrays,The following statement contains a magic number: INPUT [index] = new double[3];  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Set3DTestingArrays,The following statement contains a magic number: INPUT [index] [2] = Scale ((j / ((double)jLimit)));  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double x = i / (double)iLimit;  			double y = k / (double)kLimit;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double x = i / (double)iLimit;  			double y = k / (double)kLimit;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double x = i / (double)iLimit;  			double y = k / (double)kLimit;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double x = i / (double)iLimit;  			double y = k / (double)kLimit;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double x = i / (double)iLimit;  			double y = k / (double)kLimit;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double x = i / (double)iLimit;  			double y = k / (double)kLimit;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double x = i / (double)iLimit;  			double y = k / (double)kLimit;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataHill,The following statement contains a magic number: IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < (Math.Exp (-((x - 0.6) * (x - 0.6) + (y - 0.5) * (y - 0.5)) * 3) - 0.1)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double average = 0;  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  		//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  		for (int j = 0; j < jLimit; j++) {  			average += (r.NextDouble () < expression) ? 1 : 0;  		}  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double average = 0;  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  		//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  		for (int j = 0; j < jLimit; j++) {  			average += (r.NextDouble () < expression) ? 1 : 0;  		}  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double average = 0;  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  		//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  		for (int j = 0; j < jLimit; j++) {  			average += (r.NextDouble () < expression) ? 1 : 0;  		}  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double average = 0;  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  		//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  		for (int j = 0; j < jLimit; j++) {  			average += (r.NextDouble () < expression) ? 1 : 0;  		}  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double average = 0;  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  		//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  		for (int j = 0; j < jLimit; j++) {  			average += (r.NextDouble () < expression) ? 1 : 0;  		}  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double average = 0;  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  		//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  		for (int j = 0; j < jLimit; j++) {  			average += (r.NextDouble () < expression) ? 1 : 0;  		}  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double average = 0;  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  		//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  		for (int j = 0; j < jLimit; j++) {  			average += (r.NextDouble () < expression) ? 1 : 0;  		}  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  	//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < expression) ? 1 : 0;  	}  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  	//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < expression) ? 1 : 0;  	}  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  	//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < expression) ? 1 : 0;  	}  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  	//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < expression) ? 1 : 0;  	}  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  	//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < expression) ? 1 : 0;  	}  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  	//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < expression) ? 1 : 0;  	}  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = (Math.Exp (-((x - 0.5) * (x - 0.5) + (y - 0.6) * (y - 0.6)) * 3) - 0.1);  	//if (r.NextDouble() < 0.4) jLimit = 5; else jLimit = 10;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < expression) ? 1 : 0;  	}  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale ((average / jLimit));  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataHill,The following statement contains a magic number: INPUT [i * (kLimit + 1) + k] = new double[2];  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int i = 0; i <= iLimit; i++) {  	for (int k = 0; k <= kLimit; k++) {  		INPUT [i * (kLimit + 1) + k] = new double[2];  		IDEAL [i * (kLimit + 1) + k] = new double[1];  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  		INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  		IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: for (int k = 0; k <= kLimit; k++) {  	INPUT [i * (kLimit + 1) + k] = new double[2];  	IDEAL [i * (kLimit + 1) + k] = new double[1];  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * (kLimit + 1) + k] [0] = Scale ((i / ((double)iLimit)));  	INPUT [i * (kLimit + 1) + k] [1] = Scale ((k / ((double)kLimit)));  	IDEAL [i * (kLimit + 1) + k] [0] = Scale (expression);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DSmoothTainingDataGit,The following statement contains a magic number: INPUT [i * (kLimit + 1) + k] = new double[2];  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	for (int k = 0; k < kLimit; k++) {  		double x = i / (double)iLimit;  		double y = k / (double)kLimit;  		for (int j = 0; j < jLimit; j++) {  			INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  			IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  			double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  			INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  			INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  			IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  		}  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int k = 0; k < kLimit; k++) {  	double x = i / (double)iLimit;  	double y = k / (double)kLimit;  	for (int j = 0; j < jLimit; j++) {  		INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  		IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  		double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  		INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  		INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  		IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  	}  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: for (int j = 0; j < jLimit; j++) {  	INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  	IDEAL [i * jLimit * kLimit + k * jLimit + j] = new double[1];  	double expression = ((x + 1.0 / 3.0) * (2 + Math.Log10 ((y / (x + 0.1)) + 0.1))) / 3;  	INPUT [i * jLimit * kLimit + k * jLimit + j] [0] = (i / ((double)iLimit));  	INPUT [i * jLimit * kLimit + k * jLimit + j] [1] = (k / ((double)iLimit));  	IDEAL [i * jLimit * kLimit + k * jLimit + j] [0] = (r.NextDouble () < expression) ? 1 : 0;  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create2DDegenerateTainingDataGit,The following statement contains a magic number: INPUT [i * jLimit * kLimit + k * jLimit + j] = new double[2];  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	for (int j = 0; j < jLimit; j++)  		average += (r.NextDouble () < (-4 * Math.Pow (x' 2) + 4 * x)) ? 1 : 0;  	INPUT [i] [0] = Scale (x);  	IDEAL [i] [0] = Scale (average / jLimit);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	for (int j = 0; j < jLimit; j++)  		average += (r.NextDouble () < (-4 * Math.Pow (x' 2) + 4 * x)) ? 1 : 0;  	INPUT [i] [0] = Scale (x);  	IDEAL [i] [0] = Scale (average / jLimit);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	for (int j = 0; j < jLimit; j++)  		average += (r.NextDouble () < (-4 * Math.Pow (x' 2) + 4 * x)) ? 1 : 0;  	INPUT [i] [0] = Scale (x);  	IDEAL [i] [0] = Scale (average / jLimit);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: for (int j = 0; j < jLimit; j++)  	average += (r.NextDouble () < (-4 * Math.Pow (x' 2) + 4 * x)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: for (int j = 0; j < jLimit; j++)  	average += (r.NextDouble () < (-4 * Math.Pow (x' 2) + 4 * x)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: for (int j = 0; j < jLimit; j++)  	average += (r.NextDouble () < (-4 * Math.Pow (x' 2) + 4 * x)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: average += (r.NextDouble () < (-4 * Math.Pow (x' 2) + 4 * x)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: average += (r.NextDouble () < (-4 * Math.Pow (x' 2) + 4 * x)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveSimple,The following statement contains a magic number: average += (r.NextDouble () < (-4 * Math.Pow (x' 2) + 4 * x)) ? 1 : 0;  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	//double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;  	double y = ((Math.Exp (2.0 * (x * 4.0 - 1)) - 1.0) / (Math.Exp (2.0 * (x * 4.0 - 1)) + 1.0)) / 2 + 0.5;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < y) ? 1 : 0;  	}  	INPUT [i] [0] = Scale (x);  	IDEAL [i] [0] = Scale (average / jLimit);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	//double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;  	double y = ((Math.Exp (2.0 * (x * 4.0 - 1)) - 1.0) / (Math.Exp (2.0 * (x * 4.0 - 1)) + 1.0)) / 2 + 0.5;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < y) ? 1 : 0;  	}  	INPUT [i] [0] = Scale (x);  	IDEAL [i] [0] = Scale (average / jLimit);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	//double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;  	double y = ((Math.Exp (2.0 * (x * 4.0 - 1)) - 1.0) / (Math.Exp (2.0 * (x * 4.0 - 1)) + 1.0)) / 2 + 0.5;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < y) ? 1 : 0;  	}  	INPUT [i] [0] = Scale (x);  	IDEAL [i] [0] = Scale (average / jLimit);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	//double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;  	double y = ((Math.Exp (2.0 * (x * 4.0 - 1)) - 1.0) / (Math.Exp (2.0 * (x * 4.0 - 1)) + 1.0)) / 2 + 0.5;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < y) ? 1 : 0;  	}  	INPUT [i] [0] = Scale (x);  	IDEAL [i] [0] = Scale (average / jLimit);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	//double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;  	double y = ((Math.Exp (2.0 * (x * 4.0 - 1)) - 1.0) / (Math.Exp (2.0 * (x * 4.0 - 1)) + 1.0)) / 2 + 0.5;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < y) ? 1 : 0;  	}  	INPUT [i] [0] = Scale (x);  	IDEAL [i] [0] = Scale (average / jLimit);  }  
Magic Number,Encog.Examples.MultiRadial,MultiRadial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\MultiRadial\MultiRadial.cs,Create1DSmoothTrainingDataCurveAdv,The following statement contains a magic number: for (int i = 0; i < iLimit; i++) {  	INPUT [i] = new double[1];  	IDEAL [i] = new double[1];  	double average = 0;  	double x = i / (double)iLimit;  	//double y = (-7.5 * Math.Pow(x' 4)) + (21.3 * Math.Pow(x' 3)) + (-22.3 * Math.Pow(x' 2)) + (10.4 * x) - 0.8;  	double y = ((Math.Exp (2.0 * (x * 4.0 - 1)) - 1.0) / (Math.Exp (2.0 * (x * 4.0 - 1)) + 1.0)) / 2 + 0.5;  	for (int j = 0; j < jLimit; j++) {  		average += (r.NextDouble () < y) ? 1 : 0;  	}  	INPUT [i] [0] = Scale (x);  	IDEAL [i] [0] = Scale (average / jLimit);  }  
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (5' 50);  
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (5' 50);  
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (0' 50);  
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3) {  	Console.WriteLine (@" [prunator ]  [data dir]  [trainingfile] [networkfile]");  } else {  	var dataDir = new FileInfo (app.Args [1]);  	if (String.Compare (app.Args [0]' "prune"' true) == 0) {  		PrunerLoader.Incremental (dataDir' app.Args [2]' app.Args [3]);  	}  }  
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3) {  	Console.WriteLine (@" [prunator ]  [data dir]  [trainingfile] [networkfile]");  } else {  	var dataDir = new FileInfo (app.Args [1]);  	if (String.Compare (app.Args [0]' "prune"' true) == 0) {  		PrunerLoader.Incremental (dataDir' app.Args [2]' app.Args [3]);  	}  }  
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Execute,The following statement contains a magic number: if (app.Args.Length < 3) {  	Console.WriteLine (@" [prunator ]  [data dir]  [trainingfile] [networkfile]");  } else {  	var dataDir = new FileInfo (app.Args [1]);  	if (String.Compare (app.Args [0]' "prune"' true) == 0) {  		PrunerLoader.Incremental (dataDir' app.Args [2]' app.Args [3]);  	}  }  
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [0]' "prune"' true) == 0) {  	PrunerLoader.Incremental (dataDir' app.Args [2]' app.Args [3]);  }  
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [0]' "prune"' true) == 0) {  	PrunerLoader.Incremental (dataDir' app.Args [2]' app.Args [3]);  }  
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Execute,The following statement contains a magic number: PrunerLoader.Incremental (dataDir' app.Args [2]' app.Args [3]);  
Magic Number,Encog.Examples.NetWorkPruner,PrunerLoader,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\NetWorkPruner\PrunerLoader.cs,Execute,The following statement contains a magic number: PrunerLoader.Incremental (dataDir' app.Args [2]' app.Args [3]);  
Magic Number,Encog.Examples.Normalize,NormalizeFile,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Normalize\NormalizeFile.cs,Execute,The following statement contains a magic number: if (app.Args.Length != 2) {  	Console.WriteLine (@"Note: This example assumes that headers are present in the CSV files.");  	Console.WriteLine (@"NormalizeFile [input file] [target file]");  } else {  	var sourceFile = new FileInfo (app.Args [0]);  	var targetFile = new FileInfo (app.Args [1]);  	var analyst = new EncogAnalyst ();  	var wizard = new AnalystWizard (analyst);  	wizard.Wizard (sourceFile' true' AnalystFileFormat.DecpntComma);  	DumpFieldInfo (analyst);  	var norm = new AnalystNormalizeCSV ();  	norm.Analyze (sourceFile' true' CSVFormat.English' analyst);  	norm.ProduceOutputHeaders = true;  	norm.Normalize (targetFile);  	EncogFramework.Instance.Shutdown ();  }  
Magic Number,Encog.Examples.SVM,RegressionSVM,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM\RegressionSVM.cs,Execute,The following statement contains a magic number: do {  	train.Iteration ();  	Console.WriteLine (@"Epoch #" + epoch + @" Error:" + train.Error);  	epoch++;  } while (train.Error > 0.01);  
Magic Number,Encog.Examples.XOR,XOROnline,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XOROnline.cs,Execute,The following statement contains a magic number: network.AddLayer (new BasicLayer (null' true' 2));  
Magic Number,Encog.Examples.XOR,XOROnline,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XOROnline.cs,Execute,The following statement contains a magic number: network.AddLayer (new BasicLayer (new ActivationSigmoid ()' true' 3));  
Magic Number,Encog.Examples.XOR,XOROnline,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XOROnline.cs,Execute,The following statement contains a magic number: do {  	train.Iteration ();  	Console.WriteLine (@"Epoch #" + epoch + @" Error:" + train.Error);  	epoch++;  } while (train.Error > 0.01);  
Magic Number,Encog.Examples.XOR,XORFactory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,xorPNNC,The following statement contains a magic number: Process (MLMethodFactory.TypePNN' METHOD_PNNC_A' MLTrainFactory.TypePNN' ""' 2);  
Magic Number,Encog.Examples.XOR,XORFactory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,Process,The following statement contains a magic number: if (method is IMLResettable && !(train is ManhattanPropagation)) {  	train.AddStrategy (new RequiredImprovementStrategy (500));  }  
Magic Number,Encog.Examples.XOR,XORFactory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,Process,The following statement contains a magic number: train.AddStrategy (new RequiredImprovementStrategy (500));  
Magic Number,Encog.Examples.XOR,XORFactory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORFactory.cs,Process,The following statement contains a magic number: EncogUtility.TrainToError (train' 0.01);  
Magic Number,Encog.Examples.XOR,XORHelloWorld,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORHelloWorld.cs,Execute,The following statement contains a magic number: network.AddLayer (new BasicLayer (null' true' 2));  
Magic Number,Encog.Examples.XOR,XORHelloWorld,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORHelloWorld.cs,Execute,The following statement contains a magic number: network.AddLayer (new BasicLayer (new ActivationSigmoid ()' true' 3));  
Magic Number,Encog.Examples.XOR,XORHelloWorld,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORHelloWorld.cs,Execute,The following statement contains a magic number: do {  	train.Iteration ();  	Console.WriteLine (@"Epoch #" + epoch + @" Error:" + train.Error);  	epoch++;  } while (train.Error > 0.01);  
Magic Number,Encog.Examples.XOR,XORNEAT,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORNEAT.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError (train' 0.01);  
Magic Number,Encog.Examples.XOR,XORPSO,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\XOR\XORPSO.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError (train' 0.01);  
Magic Number,Encog.Examples.Persist,PersistEncog,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Persist\PersistEncog.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError (network' trainingSet' 0.01);  
Magic Number,Encog.Examples.Persist,PersistSerial,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Persist\PersistSerial.cs,Execute,The following statement contains a magic number: EncogUtility.TrainToError (network' trainingSet' 0.01);  
Magic Number,Encog.Examples.RangeandMarket,Prunes,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\Prunes.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (5' 50);  
Magic Number,Encog.Examples.RangeandMarket,Prunes,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\Prunes.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (5' 50);  
Magic Number,Encog.Examples.RangeandMarket,Prunes,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Analyzer\Prunes.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (0' 50);  
Magic Number,Encog.Examples.Predict,PredictSunspot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Execute,The following statement contains a magic number: NormalizeSunspots (0.1' 0.9);  
Magic Number,Encog.Examples.Predict,PredictSunspot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Execute,The following statement contains a magic number: NormalizeSunspots (0.1' 0.9);  
Magic Number,Encog.Examples.Predict,PredictSunspot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,CreateNetwork,The following statement contains a magic number: network.AddLayer (new BasicLayer (10));  
Magic Number,Encog.Examples.Predict,PredictSunspot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++) {  	// calculate based on actual data  	var input = new BasicMLData (WindowSize);  	for (var i = 0; i < input.Count; i++) {  		input [i] = _normalizedSunspots [(year - WindowSize) + i];  	}  	IMLData output = network.Compute (input);  	double prediction = output [0];  	_closedLoopSunspots [year] = prediction;  	// calculate "closed loop"' based on predicted data  	for (var i = 0; i < input.Count; i++) {  		input [i] = _closedLoopSunspots [(year - WindowSize) + i];  	}  	output = network.Compute (input);  	double closedLoopPrediction = output [0];  	// display  	Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  }  
Magic Number,Encog.Examples.Predict,PredictSunspot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++) {  	// calculate based on actual data  	var input = new BasicMLData (WindowSize);  	for (var i = 0; i < input.Count; i++) {  		input [i] = _normalizedSunspots [(year - WindowSize) + i];  	}  	IMLData output = network.Compute (input);  	double prediction = output [0];  	_closedLoopSunspots [year] = prediction;  	// calculate "closed loop"' based on predicted data  	for (var i = 0; i < input.Count; i++) {  		input [i] = _closedLoopSunspots [(year - WindowSize) + i];  	}  	output = network.Compute (input);  	double closedLoopPrediction = output [0];  	// display  	Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  }  
Magic Number,Encog.Examples.Predict,PredictSunspot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++) {  	// calculate based on actual data  	var input = new BasicMLData (WindowSize);  	for (var i = 0; i < input.Count; i++) {  		input [i] = _normalizedSunspots [(year - WindowSize) + i];  	}  	IMLData output = network.Compute (input);  	double prediction = output [0];  	_closedLoopSunspots [year] = prediction;  	// calculate "closed loop"' based on predicted data  	for (var i = 0; i < input.Count; i++) {  		input [i] = _closedLoopSunspots [(year - WindowSize) + i];  	}  	output = network.Compute (input);  	double closedLoopPrediction = output [0];  	// display  	Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  }  
Magic Number,Encog.Examples.Predict,PredictSunspot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Predict,The following statement contains a magic number: Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  
Magic Number,Encog.Examples.Predict,PredictSunspot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Predict,The following statement contains a magic number: Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  
Magic Number,Encog.Examples.Predict,PredictSunspot,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\PredictSunspot.cs,Predict,The following statement contains a magic number: Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  
Magic Number,Encog.Examples.Predict,SunspotWindow,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Execute,The following statement contains a magic number: NormalizeSunspots (0.1' 0.9);  
Magic Number,Encog.Examples.Predict,SunspotWindow,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Execute,The following statement contains a magic number: NormalizeSunspots (0.1' 0.9);  
Magic Number,Encog.Examples.Predict,SunspotWindow,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,CreateNetwork,The following statement contains a magic number: network.AddLayer (new BasicLayer (10));  
Magic Number,Encog.Examples.Predict,SunspotWindow,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++) {  	// calculate based on actual data  	var input = new BasicMLData (WindowSize);  	for (var i = 0; i < input.Count; i++) {  		input [i] = _normalizedSunspots [(year - WindowSize) + i];  	}  	IMLData output = network.Compute (input);  	double prediction = output [0];  	_closedLoopSunspots [year] = prediction;  	// calculate "closed loop"' based on predicted data  	for (var i = 0; i < input.Count; i++) {  		input [i] = _closedLoopSunspots [(year - WindowSize) + i];  	}  	output = network.Compute (input);  	double closedLoopPrediction = output [0];  	// display  	Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  }  
Magic Number,Encog.Examples.Predict,SunspotWindow,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++) {  	// calculate based on actual data  	var input = new BasicMLData (WindowSize);  	for (var i = 0; i < input.Count; i++) {  		input [i] = _normalizedSunspots [(year - WindowSize) + i];  	}  	IMLData output = network.Compute (input);  	double prediction = output [0];  	_closedLoopSunspots [year] = prediction;  	// calculate "closed loop"' based on predicted data  	for (var i = 0; i < input.Count; i++) {  		input [i] = _closedLoopSunspots [(year - WindowSize) + i];  	}  	output = network.Compute (input);  	double closedLoopPrediction = output [0];  	// display  	Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  }  
Magic Number,Encog.Examples.Predict,SunspotWindow,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Predict,The following statement contains a magic number: for (int year = EvaluateStart; year < EvaluateEnd; year++) {  	// calculate based on actual data  	var input = new BasicMLData (WindowSize);  	for (var i = 0; i < input.Count; i++) {  		input [i] = _normalizedSunspots [(year - WindowSize) + i];  	}  	IMLData output = network.Compute (input);  	double prediction = output [0];  	_closedLoopSunspots [year] = prediction;  	// calculate "closed loop"' based on predicted data  	for (var i = 0; i < input.Count; i++) {  		input [i] = _closedLoopSunspots [(year - WindowSize) + i];  	}  	output = network.Compute (input);  	double closedLoopPrediction = output [0];  	// display  	Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  }  
Magic Number,Encog.Examples.Predict,SunspotWindow,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Predict,The following statement contains a magic number: Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  
Magic Number,Encog.Examples.Predict,SunspotWindow,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Predict,The following statement contains a magic number: Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  
Magic Number,Encog.Examples.Predict,SunspotWindow,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Predict\SunspotWindow.cs,Predict,The following statement contains a magic number: Console.WriteLine ((StartingYear + year) + @"  " + Format.FormatDouble (_normalizedSunspots [year]' 2) + @"  " + Format.FormatDouble (prediction' 2) + @"  " + Format.FormatDouble (closedLoopPrediction' 2));  
Magic Number,Encog.Examples.RateSP500,PredictSP500,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\RateSP500\PredictSP500.cs,generateTrainingSets,The following statement contains a magic number: for (int i = 0; i < TRAINING_SIZE; i++) {  	input [i] = new double[INPUT_SIZE * 2];  	ideal [i] = new double[OUTPUT_SIZE];  	actual.getInputData (startIndex + (i * factor)' input [i]);  	actual.getOutputData (startIndex + (i * factor)' ideal [i]);  }  
Magic Number,Encog.Examples.RateSP500,PredictSP500,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\RateSP500\PredictSP500.cs,generateTrainingSets,The following statement contains a magic number: input [i] = new double[INPUT_SIZE * 2];  
Magic Number,Encog.Examples.SVM_Predict,CreateSVMNetWork,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Process,The following statement contains a magic number: if (method is IMLResettable && !(train is ManhattanPropagation)) {  	train.AddStrategy (new RequiredImprovementStrategy (500));  }  
Magic Number,Encog.Examples.SVM_Predict,CreateSVMNetWork,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Process,The following statement contains a magic number: train.AddStrategy (new RequiredImprovementStrategy (500));  
Magic Number,Encog.Examples.SVM_Predict,CreateSVMNetWork,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\CreateSVMNetWork.cs,Process,The following statement contains a magic number: EncogUtility.TrainToError (train' 0.01);  
Magic Number,Encog.Examples.SVM_Predict,SVMExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMExample.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [0]' "random"' true) == 0) {  	if (app.Args.Length > 1) {  		SVM_Predict.CreateSVMNetWork.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  		MakeAPause ();  		app.Exit ();  	} else {  		Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");  		SVM_Predict.CreateSVMNetWork.RandomTrainerMethod (3000' 1);  		MakeAPause ();  		app.Exit ();  	}  }  
Magic Number,Encog.Examples.SVM_Predict,SVMExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMExample.cs,Execute,The following statement contains a magic number: if (String.Compare (app.Args [0]' "random"' true) == 0) {  	if (app.Args.Length > 1) {  		SVM_Predict.CreateSVMNetWork.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  		MakeAPause ();  		app.Exit ();  	} else {  		Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");  		SVM_Predict.CreateSVMNetWork.RandomTrainerMethod (3000' 1);  		MakeAPause ();  		app.Exit ();  	}  }  
Magic Number,Encog.Examples.SVM_Predict,SVMExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMExample.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 1) {  	SVM_Predict.CreateSVMNetWork.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  	MakeAPause ();  	app.Exit ();  } else {  	Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");  	SVM_Predict.CreateSVMNetWork.RandomTrainerMethod (3000' 1);  	MakeAPause ();  	app.Exit ();  }  
Magic Number,Encog.Examples.SVM_Predict,SVMExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMExample.cs,Execute,The following statement contains a magic number: if (app.Args.Length > 1) {  	SVM_Predict.CreateSVMNetWork.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  	MakeAPause ();  	app.Exit ();  } else {  	Console.WriteLine (@"You didn't input enough args in your request' will default to 3000 inputs ' and 50 prediction size");  	SVM_Predict.CreateSVMNetWork.RandomTrainerMethod (3000' 1);  	MakeAPause ();  	app.Exit ();  }  
Magic Number,Encog.Examples.SVM_Predict,SVMExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMExample.cs,Execute,The following statement contains a magic number: SVM_Predict.CreateSVMNetWork.RandomTrainerMethod (Convert.ToInt16 (app.Args [1])' Convert.ToInt16 (app.Args [2]));  
Magic Number,Encog.Examples.SVM_Predict,SVMExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVM Predict\SVMExample.cs,Execute,The following statement contains a magic number: SVM_Predict.CreateSVMNetWork.RandomTrainerMethod (3000' 1);  
Magic Number,Encog.Examples.SVMPredictCSV,MarketBuildTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketbuildtraining.cs,Generate,The following statement contains a magic number: begin = begin.AddDays (-600);  
Magic Number,Encog.Examples.SVMPredictCSV,MarketBuildTraining,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketbuildtraining.cs,Generate,The following statement contains a magic number: end = begin.AddDays (200);  
Magic Number,Encog.Examples.SVMPredictCSV,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketevaluate.cs,GrabData,The following statement contains a magic number: begin = begin.AddDays (-950);  
Magic Number,Encog.Examples.SVMPredictCSV,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketevaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data) {  	IMLData input = pair.Input;  	IMLData actualData = pair.Ideal;  	IMLData predictData = network.Compute (input);  	double actual = actualData [0];  	double predict = predictData [0];  	double diff = Math.Abs (predict - actual);  	Direction actualDirection = DetermineDirection (actual);  	Direction predictDirection = DetermineDirection (predict);  	if (actualDirection == predictDirection)  		correct++;  	count++;  	Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  }  
Magic Number,Encog.Examples.SVMPredictCSV,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketevaluate.cs,Evaluate,The following statement contains a magic number: foreach (IMLDataPair pair in data) {  	IMLData input = pair.Input;  	IMLData actualData = pair.Ideal;  	IMLData predictData = network.Compute (input);  	double actual = actualData [0];  	double predict = predictData [0];  	double diff = Math.Abs (predict - actual);  	Direction actualDirection = DetermineDirection (actual);  	Direction predictDirection = DetermineDirection (predict);  	if (actualDirection == predictDirection)  		correct++;  	count++;  	Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  }  
Magic Number,Encog.Examples.SVMPredictCSV,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketevaluate.cs,Evaluate,The following statement contains a magic number: Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  
Magic Number,Encog.Examples.SVMPredictCSV,MarketEvaluate,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketevaluate.cs,Evaluate,The following statement contains a magic number: Console.WriteLine (@"Day " + count + @":actual=" + Format.FormatDouble (actual' 4) + @"(" + actualDirection + @")" + @"'predict=" + Format.FormatDouble (predict' 4) + @"(" + predictDirection + @")" + @"'diff=" + diff);  
Magic Number,Encog.Examples.SVMPredictCSV,MarketPrune,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (5' 50);  
Magic Number,Encog.Examples.SVMPredictCSV,MarketPrune,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (5' 50);  
Magic Number,Encog.Examples.SVMPredictCSV,MarketPrune,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\SVMPredict CSV\marketprune.cs,Incremental,The following statement contains a magic number: prune.AddHiddenLayer (0' 50);  
Magic Number,Encog.Examples.AnnealTSP,SolveTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\AnnealTSP\SolveTSP.cs,InitPath,The following statement contains a magic number: for (int i = 0; i < path.Length - 1; i++) {  	int icandidate;  	do {  		icandidate = (int)(rand.NextDouble () * path.Length);  	} while (taken [icandidate]);  	path [i] = icandidate;  	taken [icandidate] = true;  	if (i == path.Length - 2) {  		icandidate = 0;  		while (taken [icandidate]) {  			icandidate++;  		}  		path [i + 1] = icandidate;  	}  }  
Magic Number,Encog.Examples.AnnealTSP,SolveTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\AnnealTSP\SolveTSP.cs,InitPath,The following statement contains a magic number: if (i == path.Length - 2) {  	icandidate = 0;  	while (taken [icandidate]) {  		icandidate++;  	}  	path [i + 1] = icandidate;  }  
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,StringToBipolar,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	char ch = char.ToUpper (str [i]);  	int idx = ch - FIRST_CHAR;  	int place = 1;  	for (int j = 0; j < BITS_PER_CHAR; j++) {  		bool value = (idx & place) > 0;  		result.SetBoolean (currentIndex++' value);  		place *= 2;  	}  }  
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,StringToBipolar,The following statement contains a magic number: for (int j = 0; j < BITS_PER_CHAR; j++) {  	bool value = (idx & place) > 0;  	result.SetBoolean (currentIndex++' value);  	place *= 2;  }  
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,StringToBipolar,The following statement contains a magic number: place *= 2;  
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,BipolalToString,The following statement contains a magic number: for (int i = 0; i < (data.Count / BITS_PER_CHAR); i++) {  	a = 0;  	p = 1;  	for (j = 0; j < BITS_PER_CHAR; j++) {  		if (data.GetBoolean (i * BITS_PER_CHAR + j))  			a += p;  		p *= 2;  	}  	result.Append ((char)(a + FIRST_CHAR));  }  
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,BipolalToString,The following statement contains a magic number: for (j = 0; j < BITS_PER_CHAR; j++) {  	if (data.GetBoolean (i * BITS_PER_CHAR + j))  		a += p;  	p *= 2;  }  
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,BipolalToString,The following statement contains a magic number: p *= 2;  
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,RandomBiPolar,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	if (ThreadSafeRandom.NextDouble () > 0.5)  		result [i] = -1;  	else  		result [i] = 1;  }  
Magic Number,Encog.Examples.BAM,BidirectionalAssociativeMemory,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\BAM\BidirectionalAssociativeMemory.cs,RandomBiPolar,The following statement contains a magic number: if (ThreadSafeRandom.NextDouble () > 0.5)  	result [i] = -1;  else  	result [i] = 1;  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,Execute,The following statement contains a magic number: network.Temperature = 100;  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,Execute,The following statement contains a magic number: do {  	network.EstablishEquilibrium ();  	app.WriteLine (network.Temperature + " : " + DisplayTour (network.CurrentState));  	network.DecreaseTemperature (0.99);  } while (!IsValidTour (network.CurrentState));  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,Execute,The following statement contains a magic number: network.DecreaseTemperature (0.99);  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CreateCities,The following statement contains a magic number: for (int n1 = 0; n1 < NUM_CITIES; n1++) {  	distance [n1] = new double[NUM_CITIES];  	for (int n2 = 0; n2 < NUM_CITIES; n2++) {  		alpha1 = ((double)n1 / NUM_CITIES) * 2 * Math.PI;  		alpha2 = ((double)n2 / NUM_CITIES) * 2 * Math.PI;  		x1 = Math.Cos (alpha1);  		y1 = Math.Sin (alpha1);  		x2 = Math.Cos (alpha2);  		y2 = Math.Sin (alpha2);  		distance [n1] [n2] = Math.Sqrt (Sqr (x1 - x2) + Sqr (y1 - y2));  	}  }  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CreateCities,The following statement contains a magic number: for (int n1 = 0; n1 < NUM_CITIES; n1++) {  	distance [n1] = new double[NUM_CITIES];  	for (int n2 = 0; n2 < NUM_CITIES; n2++) {  		alpha1 = ((double)n1 / NUM_CITIES) * 2 * Math.PI;  		alpha2 = ((double)n2 / NUM_CITIES) * 2 * Math.PI;  		x1 = Math.Cos (alpha1);  		y1 = Math.Sin (alpha1);  		x2 = Math.Cos (alpha2);  		y2 = Math.Sin (alpha2);  		distance [n1] [n2] = Math.Sqrt (Sqr (x1 - x2) + Sqr (y1 - y2));  	}  }  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CreateCities,The following statement contains a magic number: for (int n2 = 0; n2 < NUM_CITIES; n2++) {  	alpha1 = ((double)n1 / NUM_CITIES) * 2 * Math.PI;  	alpha2 = ((double)n2 / NUM_CITIES) * 2 * Math.PI;  	x1 = Math.Cos (alpha1);  	y1 = Math.Sin (alpha1);  	x2 = Math.Cos (alpha2);  	y2 = Math.Sin (alpha2);  	distance [n1] [n2] = Math.Sqrt (Sqr (x1 - x2) + Sqr (y1 - y2));  }  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CreateCities,The following statement contains a magic number: for (int n2 = 0; n2 < NUM_CITIES; n2++) {  	alpha1 = ((double)n1 / NUM_CITIES) * 2 * Math.PI;  	alpha2 = ((double)n2 / NUM_CITIES) * 2 * Math.PI;  	x1 = Math.Cos (alpha1);  	y1 = Math.Sin (alpha1);  	x2 = Math.Cos (alpha2);  	y2 = Math.Sin (alpha2);  	distance [n1] [n2] = Math.Sqrt (Sqr (x1 - x2) + Sqr (y1 - y2));  }  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CreateCities,The following statement contains a magic number: alpha1 = ((double)n1 / NUM_CITIES) * 2 * Math.PI;  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CreateCities,The following statement contains a magic number: alpha2 = ((double)n2 / NUM_CITIES) * 2 * Math.PI;  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CalculateWeights,The following statement contains a magic number: for (n1 = 0; n1 < NUM_CITIES; n1++) {  	for (n2 = 0; n2 < NUM_CITIES; n2++) {  		i = n1 * NUM_CITIES + n2;  		for (n3 = 0; n3 < NUM_CITIES; n3++) {  			for (n4 = 0; n4 < NUM_CITIES; n4++) {  				j = n3 * NUM_CITIES + n4;  				weight = 0;  				if (i != j) {  					predN3 = (n3 == 0 ? NUM_CITIES - 1 : n3 - 1);  					succN3 = (n3 == NUM_CITIES - 1 ? 0 : n3 + 1);  					if ((n1 == n3) || (n2 == n4))  						weight = -gamma;  					else if ((n1 == predN3) || (n1 == succN3))  						weight = -distance [n2] [n4];  				}  				network.SetWeight (i' j' weight);  			}  		}  		network.Threshold [i] = (-gamma / 2);  	}  }  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CalculateWeights,The following statement contains a magic number: for (n2 = 0; n2 < NUM_CITIES; n2++) {  	i = n1 * NUM_CITIES + n2;  	for (n3 = 0; n3 < NUM_CITIES; n3++) {  		for (n4 = 0; n4 < NUM_CITIES; n4++) {  			j = n3 * NUM_CITIES + n4;  			weight = 0;  			if (i != j) {  				predN3 = (n3 == 0 ? NUM_CITIES - 1 : n3 - 1);  				succN3 = (n3 == NUM_CITIES - 1 ? 0 : n3 + 1);  				if ((n1 == n3) || (n2 == n4))  					weight = -gamma;  				else if ((n1 == predN3) || (n1 == succN3))  					weight = -distance [n2] [n4];  			}  			network.SetWeight (i' j' weight);  		}  	}  	network.Threshold [i] = (-gamma / 2);  }  
Magic Number,Encog.Examples.Boltzmann,BoltzTSP,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\Boltzmann\BoltzTSP.cs,CalculateWeights,The following statement contains a magic number: network.Threshold [i] = (-gamma / 2);  
Magic Number,Encog.Examples.CPN,RocketCPN,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,PrepareInput,The following statement contains a magic number: outstarNeurons = 2;  
Magic Number,Encog.Examples.CPN,RocketCPN,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,PrepareInput,The following statement contains a magic number: for (n = 0; n < PATTERN1.Length; n++) {  	ideal1 [n] [0] = Math.Sin (n * 0.25 * Math.PI);  	ideal1 [n] [1] = Math.Cos (n * 0.25 * Math.PI);  }  
Magic Number,Encog.Examples.CPN,RocketCPN,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,PrepareInput,The following statement contains a magic number: for (n = 0; n < PATTERN1.Length; n++) {  	ideal1 [n] [0] = Math.Sin (n * 0.25 * Math.PI);  	ideal1 [n] [1] = Math.Cos (n * 0.25 * Math.PI);  }  
Magic Number,Encog.Examples.CPN,RocketCPN,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,PrepareInput,The following statement contains a magic number: ideal1 [n] [0] = Math.Sin (n * 0.25 * Math.PI);  
Magic Number,Encog.Examples.CPN,RocketCPN,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,PrepareInput,The following statement contains a magic number: ideal1 [n] [1] = Math.Cos (n * 0.25 * Math.PI);  
Magic Number,Encog.Examples.CPN,RocketCPN,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,TrainInstar,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	train.Iteration ();  	app.WriteLine ("Training instar' Epoch #" + epoch);  	epoch++;  }  
Magic Number,Encog.Examples.CPN,RocketCPN,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,TrainOutstar,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	train.Iteration ();  	app.WriteLine ("Training outstar' Epoch #" + epoch);  	epoch++;  }  
Magic Number,Encog.Examples.CPN,RocketCPN,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,DetermineAngle,The following statement contains a magic number: if (result < 0)  	result += 360;  
Magic Number,Encog.Examples.CPN,RocketCPN,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\CPN\RocketCPN.cs,DetermineAngle,The following statement contains a magic number: result += 360;  
Magic Number,Encog.Examples.ElmanNetwork,ElmanExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ElmanNetwork\ElmanExample.cs,CreateElmanNetwork,The following statement contains a magic number: pattern.AddHiddenLayer (5);  
Magic Number,Encog.Examples.ElmanNetwork,ElmanExample,F:\newReposMay17\encog_encog-dotnet-core\ConsoleExamples\Examples\ElmanNetwork\ElmanExample.cs,CreateFeedforwardNetwork,The following statement contains a magic number: pattern.AddHiddenLayer (5);  
