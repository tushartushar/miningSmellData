Implementation smell,Namespace,Class,File,Method,Description
Long Method,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The method has 104 lines of code.
Complex Method,BoxedIce.ServerDensity.Agent,AgentConfiguration,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\AgentConfiguration.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,BoxedIce.ServerDensity.Agent.Checks,PerformanceCounterBasedProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PerformanceCounterBasedProcessCheck.cs,DoCheck,Cyclomatic complexity of the method is 9
Long Parameter List,BoxedIce.ServerDensity.Agent,AgentConfiguration,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\AgentConfiguration.cs,AgentConfiguration,The method has 10 parameters. Parameters: url' agentKey' iisChecks' pluginDirectory' mongoDBConnectionString' mongoDBDBStats' mongoDBReplSet' sqlServerChecks' customPrefix' eventViewer
Long Statement,BoxedIce.ServerDensity.Agent,AgentConfiguration,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\AgentConfiguration.cs,Load,The length of the statement  "            return new AgentConfiguration("http://example.serverdensity.com"' string.Empty' false' null' null' false' false' false' null' true); " is 132.
Long Statement,BoxedIce.ServerDensity.Agent,PayloadPoster,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\PayloadPoster.cs,Post,The length of the statement  "                var url = string.Format("{0}{1}postback/"' _config.ServerDensityUrl' _config.ServerDensityUrl.EndsWith("/") ? "" : "/"); " is 120.
Long Statement,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The length of the statement  "                IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"]; " is 142.
Long Statement,BoxedIce.ServerDensity.Agent.Checks,DriveInfoBasedDiskUsageCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\DriveInfoBasedDiskUsageCheck.cs,DoCheck,The length of the statement  "                        results.Add(new object[] { fileSystem' ""' Gigabytes(used)' Gigabytes(totalSize)' (int)(((float)used / (float)totalSize) * 100)' mountedOn }); " is 142.
Long Statement,BoxedIce.ServerDensity.Agent.Checks,PerformanceCounterBasedProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PerformanceCounterBasedProcessCheck.cs,DoCheck,The length of the statement  "                    Log.Error("Process Check: '" + Agent.Flags["ProcessCheck"] + "' process is running as Perf Counter (" + perf.ToString() + ") and WMI (" + wmi.ToString() + ")."); " is 161.
Long Statement,BoxedIce.ServerDensity.Agent.Checks,PerformanceCounterBasedProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PerformanceCounterBasedProcessCheck.cs,GetProcessOwner,The length of the statement  "                using (ManagementObjectSearcher query = new ManagementObjectSearcher(string.Format("SELECT * FROM Win32_Process WHERE ProcessID = {0}"' processId))) " is 148.
Long Statement,BoxedIce.ServerDensity.Agent.Checks,PhysicalMemoryUsedCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PhysicalMemoryUsedCheck.cs,DoCheck,The length of the statement  "            using (var query = new ManagementObjectSearcher("SELECT TotalVisibleMemorySize' FreePhysicalMemory FROM Win32_OperatingSystem")) " is 128.
Long Statement,BoxedIce.ServerDensity.Agent.Checks,ProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ProcessCheck.cs,ProcessStats,The length of the statement  "            using (var query = new ManagementObjectSearcher("SELECT IDProcess' PercentProcessorTime' WorkingSet FROM Win32_PerfFormattedData_PerfProc_Process")) " is 148.
Long Statement,BoxedIce.ServerDensity.Agent.Checks,ProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ProcessCheck.cs,ProcessStats,The length of the statement  "                        processStats[key] = new ulong[] { (ulong)obj.GetPropertyValue("PercentProcessorTime")' (ulong)obj.GetPropertyValue("WorkingSet") }; " is 131.
Long Statement,BoxedIce.ServerDensity.Agent.Checks,SystemStatsCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\SystemStatsCheck.cs,LookupNetVersion,The length of the statement  "                    key = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\5.0\User Agent\Post Platform"); " is 148.
Complex Conditional,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillDatabaseStatistics,The conditional expression  "dbName == "config" || dbName == "local" || dbName == "admin" || dbName == "test""  is complex.
Virtual Method Call from Constructor,BoxedIce.ServerDensity.Agent.Checks,ProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ProcessCheck.cs,ProcessCheck,The constructor "ProcessCheck" calls a virtual method "TotalMemory".
Empty Catch Block,BoxedIce.ServerDensity.Agent,Agent,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Agent.cs,Stop,The method has an empty catch block.
Empty Catch Block,BoxedIce.ServerDensity.Agent,AgentConfiguration,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\AgentConfiguration.cs,Load,The method has an empty catch block.
Empty Catch Block,BoxedIce.ServerDensity.Agent,PayloadPoster,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\PayloadPoster.cs,PayloadPoster,The method has an empty catch block.
Empty Catch Block,BoxedIce.ServerDensity.Agent.Checks,SystemStatsCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\SystemStatsCheck.cs,LookupNetVersion,The method has an empty catch block.
Empty Catch Block,BoxedIce.ServerDensity.Agent.Tasks,StopServiceTask,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Tasks\StopServiceTask.cs,Run,The method has an empty catch block.
Magic Number,BoxedIce.ServerDensity.Agent,Agent,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Agent.cs,Start,The following statement contains a magic number: while (!_isStopped)              {                  DoChecks();                  RemoveSystemStatsCheck();                  Log.InfoFormat("Checks complete.  Sleeping for {0} seconds"' _config.CheckInterval / 1000);                  Thread.Sleep(_config.CheckInterval);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillGlobalLockStatistics,The following statement contains a magic number: if (statusOutput.Contains("globalLock"))              {                  BsonDocument globalLockOutput = (BsonDocument)statusOutput["globalLock"];                  IDictionary<string' object> globalLock = new Dictionary<string' object>();                  status.Add("globalLock"' globalLock);                    var version = this.GetVersion(statusOutput);                  // mongodb over 2.2.0 doesn't have a global lock' so we can't report on it                  if (version != null && version[0] >= 2 && version[1] >= 2)                  {                      globalLock.Add("ratio"' 0);                  }                  else                  {                      globalLock.Add("ratio"' globalLockOutput["ratio"]);                  }                    BsonDocument currentQueueOutput = (BsonDocument)globalLockOutput["currentQueue"];                  IDictionary<string' object> currentQueue = new Dictionary<string' object>();                  globalLock.Add("currentQueue"' currentQueue);                  currentQueue.Add("total"' currentQueueOutput["total"]);                  currentQueue.Add("readers"' currentQueueOutput["readers"]);                  currentQueue.Add("writers"' currentQueueOutput["writers"]);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillGlobalLockStatistics,The following statement contains a magic number: if (statusOutput.Contains("globalLock"))              {                  BsonDocument globalLockOutput = (BsonDocument)statusOutput["globalLock"];                  IDictionary<string' object> globalLock = new Dictionary<string' object>();                  status.Add("globalLock"' globalLock);                    var version = this.GetVersion(statusOutput);                  // mongodb over 2.2.0 doesn't have a global lock' so we can't report on it                  if (version != null && version[0] >= 2 && version[1] >= 2)                  {                      globalLock.Add("ratio"' 0);                  }                  else                  {                      globalLock.Add("ratio"' globalLockOutput["ratio"]);                  }                    BsonDocument currentQueueOutput = (BsonDocument)globalLockOutput["currentQueue"];                  IDictionary<string' object> currentQueue = new Dictionary<string' object>();                  globalLock.Add("currentQueue"' currentQueue);                  currentQueue.Add("total"' currentQueueOutput["total"]);                  currentQueue.Add("readers"' currentQueueOutput["readers"]);                  currentQueue.Add("writers"' currentQueueOutput["writers"]);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (!indexCountersOutput.Contains("note") || indexCountersOutput["note"] == null)              {                  var version = this.GetVersion(statusOutput);                  // mongodb over 2.2.0 doesn't have a global lock' so we can't report on it                  if (version != null && version[0] <= 2 && version[1] <= 2)                  {                      btreeOutput = (BsonDocument)indexCountersOutput["btree"];                  }                  else                  {                      this.AddBlankBTree(btreeOutput);                  }              }              else              {                  this.AddBlankBTree(btreeOutput);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (!indexCountersOutput.Contains("note") || indexCountersOutput["note"] == null)              {                  var version = this.GetVersion(statusOutput);                  // mongodb over 2.2.0 doesn't have a global lock' so we can't report on it                  if (version != null && version[0] <= 2 && version[1] <= 2)                  {                      btreeOutput = (BsonDocument)indexCountersOutput["btree"];                  }                  else                  {                      this.AddBlankBTree(btreeOutput);                  }              }              else              {                  this.AddBlankBTree(btreeOutput);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ExtendedMongoDBCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ExtendedMongoDBCheck.cs,FillBaseStatistics,The following statement contains a magic number: if (_mongoDBStore == null)              {                  Log.Debug("No cached data' so storing for the first time.");                    btree.Add("accessesPS"' 0);                  btree.Add("accesses"' 0);                  btree.Add("hitsPS"' 0);                  btree.Add("hits"' 0);                  btree.Add("missesPS"' 0);                  btree.Add("misses"' 0);                  btree.Add("missRatioPS"' 0);                  btree.Add("missRatio"' 0D);                    opCounters.Add("insertPS"' 0);                  opCounters.Add("insert"' 0);                  opCounters.Add("queryPS"' 0);                  opCounters.Add("query"' 0);                  opCounters.Add("updatePS"' 0);                  opCounters.Add("update"' 0);                  opCounters.Add("deletePS"' 0);                  opCounters.Add("delete"' 0);                  opCounters.Add("getmorePS"' 0);                  opCounters.Add("getmore"' 0);                  opCounters.Add("commandPS"' 0);                  opCounters.Add("command"' 0);                    asserts.Add("regularPS"' 0);                  asserts.Add("regular"' 0);                  asserts.Add("warningPS"' 0);                  asserts.Add("warning"' 0);                  asserts.Add("msgPS"' 0);                  asserts.Add("msg"' 0);                  asserts.Add("userPS"' 0);                  asserts.Add("user"' 0);                  asserts.Add("rolloversPS"' 0);                  asserts.Add("rollovers"' 0);              }              else              {                  Log.Debug("Cached data exists' so calculating per sec metrics.");                    IDictionary<string' object> cachedBtree = (IDictionary<string' object>)((IDictionary<string' object>)_mongoDBStore["indexCounters"])["btree"];                  IDictionary<string' object> cachedOpCounters = (IDictionary<string' object>)_mongoDBStore["opcounters"];                  IDictionary<string' object> cachedAsserts = (IDictionary<string' object>)_mongoDBStore["asserts"];                    btree.Add("accessesPS"' (float)(((int)btreeOutput["accesses"] - (int)cachedBtree["accesses"]) / 60));                  btree.Add("accesses"' btreeOutput["accesses"].RawValue);                  btree.Add("hitsPS"' (float)(((int)btreeOutput["hits"] - (int)cachedBtree["hits"]) / 60));                  btree.Add("hits"' btreeOutput["hits"].RawValue);                  btree.Add("missesPS"' (float)(((int)btreeOutput["misses"] - (int)cachedBtree["misses"]) / 60));                  btree.Add("misses"' btreeOutput["misses"].RawValue);                  btree.Add("missRatioPS"' (float)(((double)btreeOutput["missRatio"] - (double)cachedBtree["missRatio"]) / 60));                  btree.Add("missRatio"' btreeOutput["missRatio"].RawValue);                    opCounters.Add("insertPS"' (float)(((int)opCountersOutput["insert"] - (int)cachedOpCounters["insert"]) / 60));                  opCounters.Add("insert"' opCountersOutput["insert"].RawValue);                  opCounters.Add("queryPS"' (float)(((int)opCountersOutput["query"] - (int)cachedOpCounters["query"]) / 60));                  opCounters.Add("query"' opCountersOutput["query"].RawValue);                  opCounters.Add("updatePS"' (float)(((int)opCountersOutput["update"] - (int)cachedOpCounters["update"]) / 60));                  opCounters.Add("update"' opCountersOutput["update"].RawValue);                  opCounters.Add("deletePS"' (float)(((int)opCountersOutput["delete"] - (int)cachedOpCounters["delete"]) / 60));                  opCounters.Add("delete"' opCountersOutput["delete"].RawValue);                  opCounters.Add("getmorePS"' (float)(((int)opCountersOutput["getmore"] - (int)cachedOpCounters["getmore"]) / 60));                  opCounters.Add("getmore"' opCountersOutput["getmore"].RawValue);                  opCounters.Add("commandPS"' (float)(((int)opCountersOutput["command"] - (int)cachedOpCounters["command"]) / 60));                  opCounters.Add("command"' opCountersOutput["command"].RawValue);                    asserts.Add("regularPS"' (float)(((int)assertsOutput["regular"] - (int)cachedAsserts["regular"]) / 60));                  asserts.Add("regular"' assertsOutput["regular"].RawValue);                  asserts.Add("warningPS"' (float)(((int)assertsOutput["warning"] - (int)cachedAsserts["warning"]) / 60));                  asserts.Add("warning"' assertsOutput["warning"].RawValue);                  asserts.Add("msgPS"' (float)(((int)assertsOutput["msg"] - (int)cachedAsserts["msg"]) / 60));                  asserts.Add("msg"' assertsOutput["msg"].RawValue);                  asserts.Add("userPS"' (float)(((int)assertsOutput["user"] - (int)cachedAsserts["user"]) / 60));                  asserts.Add("user"' assertsOutput["user"].RawValue);                  asserts.Add("rolloversPS"' (float)(((int)assertsOutput["rollovers"] - (int)cachedAsserts["rollovers"]) / 60));                  asserts.Add("rollovers"' assertsOutput["rollovers"].RawValue);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,DriveInfoBasedDiskUsageCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\DriveInfoBasedDiskUsageCheck.cs,DoCheck,The following statement contains a magic number: Thread t = new Thread(new ThreadStart(delegate()              {                    DriveInfo[] drives = DriveInfo.GetDrives();                    foreach (DriveInfo info in drives)                  {                      if (!info.IsReady)                          continue;                        try                      {                          string fileSystem = info.DriveFormat;                          ulong available = (ulong)info.TotalFreeSpace;                          ulong totalSize = (ulong)info.TotalSize;                          string mountedOn = info.Name.TrimEnd('\\');                          ulong used = totalSize - available;                            results.Add(new object[] { fileSystem' ""' Gigabytes(used)' Gigabytes(totalSize)' (int)(((float)used / (float)totalSize) * 100)' mountedOn });                      }                      catch (Exception ex)                      {                          Log.Error(ex);                      }                  }              }));
Magic Number,BoxedIce.ServerDensity.Agent.Checks,DriveInfoBasedDiskUsageCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\DriveInfoBasedDiskUsageCheck.cs,DoCheck,The following statement contains a magic number: bool completed = t.Join(10000);
Magic Number,BoxedIce.ServerDensity.Agent.Checks,DriveInfoBasedDiskUsageCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\DriveInfoBasedDiskUsageCheck.cs,Gigabytes,The following statement contains a magic number: return value / 1024 / 1024 / 1024;
Magic Number,BoxedIce.ServerDensity.Agent.Checks,DriveInfoBasedDiskUsageCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\DriveInfoBasedDiskUsageCheck.cs,Gigabytes,The following statement contains a magic number: return value / 1024 / 1024 / 1024;
Magic Number,BoxedIce.ServerDensity.Agent.Checks,DriveInfoBasedDiskUsageCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\DriveInfoBasedDiskUsageCheck.cs,Gigabytes,The following statement contains a magic number: return value / 1024 / 1024 / 1024;
Magic Number,BoxedIce.ServerDensity.Agent.Checks,IOCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\IOCheck.cs,IOCheck,The following statement contains a magic number: foreach (var instance in instanceNames)              {                       // ignore _Total and other system categories                  if (instance.StartsWith("_"' StringComparison.Ordinal))                  {                      continue;                  }                    var drive = new Drive();                  drive.DriveName = instance.Split(new char[1] { ' ' }' 2)[1];                  drive.InstanceName = instance;                  drive.Metrics = new List<DriveMetric>();                    drive.Metrics.Add(new DriveMetric() { MetricName = "rkB/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' instance)' Divisor = 1024 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "wkB/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' instance)' Divisor = 1024 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "%util"' Counter = new PerformanceCounter("PhysicalDisk"' "% Disk Time"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "avgqu-sz"' Counter = new PerformanceCounter("PhysicalDisk"' "Avg. Disk Queue Length"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "r/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "w/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "svctm"' Counter = new PerformanceCounter("PhysicalDisk"' "Avg. Disk sec/Transfer"' instance)' Divisor = 1 });                    // take the first readings                  foreach (var c in drive.Metrics)                  {                      c.Counter.NextValue();                  }                    this.drivesToCheck.Add(drive);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,IOCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\IOCheck.cs,IOCheck,The following statement contains a magic number: foreach (var instance in instanceNames)              {                       // ignore _Total and other system categories                  if (instance.StartsWith("_"' StringComparison.Ordinal))                  {                      continue;                  }                    var drive = new Drive();                  drive.DriveName = instance.Split(new char[1] { ' ' }' 2)[1];                  drive.InstanceName = instance;                  drive.Metrics = new List<DriveMetric>();                    drive.Metrics.Add(new DriveMetric() { MetricName = "rkB/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' instance)' Divisor = 1024 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "wkB/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' instance)' Divisor = 1024 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "%util"' Counter = new PerformanceCounter("PhysicalDisk"' "% Disk Time"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "avgqu-sz"' Counter = new PerformanceCounter("PhysicalDisk"' "Avg. Disk Queue Length"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "r/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "w/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "svctm"' Counter = new PerformanceCounter("PhysicalDisk"' "Avg. Disk sec/Transfer"' instance)' Divisor = 1 });                    // take the first readings                  foreach (var c in drive.Metrics)                  {                      c.Counter.NextValue();                  }                    this.drivesToCheck.Add(drive);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,IOCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\IOCheck.cs,IOCheck,The following statement contains a magic number: foreach (var instance in instanceNames)              {                       // ignore _Total and other system categories                  if (instance.StartsWith("_"' StringComparison.Ordinal))                  {                      continue;                  }                    var drive = new Drive();                  drive.DriveName = instance.Split(new char[1] { ' ' }' 2)[1];                  drive.InstanceName = instance;                  drive.Metrics = new List<DriveMetric>();                    drive.Metrics.Add(new DriveMetric() { MetricName = "rkB/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' instance)' Divisor = 1024 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "wkB/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' instance)' Divisor = 1024 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "%util"' Counter = new PerformanceCounter("PhysicalDisk"' "% Disk Time"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "avgqu-sz"' Counter = new PerformanceCounter("PhysicalDisk"' "Avg. Disk Queue Length"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "r/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "w/s"' Counter = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' instance)' Divisor = 1 });                  drive.Metrics.Add(new DriveMetric() { MetricName = "svctm"' Counter = new PerformanceCounter("PhysicalDisk"' "Avg. Disk sec/Transfer"' instance)' Divisor = 1 });                    // take the first readings                  foreach (var c in drive.Metrics)                  {                      c.Counter.NextValue();                  }                    this.drivesToCheck.Add(drive);              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,IOCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\IOCheck.cs,DoCheck,The following statement contains a magic number: foreach (var drive in this.drivesToCheck)              {                  var driveResults = new Dictionary<string' object>();                    foreach (var metric in drive.Metrics)                  {                      driveResults[metric.MetricName] = metric.Counter.NextValue() / metric.Divisor;                  }                      var read = (float)driveResults["r/s"];                  var write = (float)driveResults["w/s"];                    var total = read + write;                  float ratio = (read / total) * 100;                    if (!float.IsNaN(ratio))                  {                      driveResults["rwratio"] = ratio;                  }                  else                  {                      driveResults["rwratio"] = 0.0;                  }                      results[drive.DriveName] = driveResults;              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,PerformanceCounterBasedProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PerformanceCounterBasedProcessCheck.cs,DoCheck,The following statement contains a magic number: ArrayList sysProcesses = new ArrayList(3) { "System"' "Idle"' "_Total"' "logon.scr" };
Magic Number,BoxedIce.ServerDensity.Agent.Checks,PerformanceCounterBasedProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PerformanceCounterBasedProcessCheck.cs,DoCheck,The following statement contains a magic number: foreach (string name in names)              {                  string processName = (sysProcesses.Contains(name)) ? name : name + ".exe";                  float pid = new PerformanceCounter(effectiveKey' _names[effectiveKey][0]' name).NextValue();                  float cpuPercentage = new PerformanceCounter(effectiveKey' _names[effectiveKey][1]' name).NextValue();                  float workingSet = new PerformanceCounter(effectiveKey' _names[effectiveKey][2]' name).NextValue();                  decimal memoryPercentage = Decimal.Round(((decimal)workingSet / (decimal)_totalMemory * 100)' 2);                  string fullUserName = GetProcessOwner(pid);                    results.Add(new object[] { pid' processName' fullUserName' cpuPercentage' memoryPercentage' workingSet });                }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,PerformanceCounterBasedProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PerformanceCounterBasedProcessCheck.cs,DoCheck,The following statement contains a magic number: foreach (string name in names)              {                  string processName = (sysProcesses.Contains(name)) ? name : name + ".exe";                  float pid = new PerformanceCounter(effectiveKey' _names[effectiveKey][0]' name).NextValue();                  float cpuPercentage = new PerformanceCounter(effectiveKey' _names[effectiveKey][1]' name).NextValue();                  float workingSet = new PerformanceCounter(effectiveKey' _names[effectiveKey][2]' name).NextValue();                  decimal memoryPercentage = Decimal.Round(((decimal)workingSet / (decimal)_totalMemory * 100)' 2);                  string fullUserName = GetProcessOwner(pid);                    results.Add(new object[] { pid' processName' fullUserName' cpuPercentage' memoryPercentage' workingSet });                }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,PerformanceCounterBasedProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PerformanceCounterBasedProcessCheck.cs,DoCheck,The following statement contains a magic number: foreach (string name in names)              {                  string processName = (sysProcesses.Contains(name)) ? name : name + ".exe";                  float pid = new PerformanceCounter(effectiveKey' _names[effectiveKey][0]' name).NextValue();                  float cpuPercentage = new PerformanceCounter(effectiveKey' _names[effectiveKey][1]' name).NextValue();                  float workingSet = new PerformanceCounter(effectiveKey' _names[effectiveKey][2]' name).NextValue();                  decimal memoryPercentage = Decimal.Round(((decimal)workingSet / (decimal)_totalMemory * 100)' 2);                  string fullUserName = GetProcessOwner(pid);                    results.Add(new object[] { pid' processName' fullUserName' cpuPercentage' memoryPercentage' workingSet });                }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,PhysicalMemoryCachedCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PhysicalMemoryCachedCheck.cs,DoCheck,The following statement contains a magic number: using (var query = new ManagementObjectSearcher("SELECT CacheBytes FROM Win32_PerfFormattedData_PerfOS_Memory"))              {                  foreach (var obj in query.Get())                  {                      using (obj)                      {                          cached = (ulong)obj.GetPropertyValue("CacheBytes") / 1024 / 1024;                      }                  }              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,PhysicalMemoryCachedCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PhysicalMemoryCachedCheck.cs,DoCheck,The following statement contains a magic number: using (var query = new ManagementObjectSearcher("SELECT CacheBytes FROM Win32_PerfFormattedData_PerfOS_Memory"))              {                  foreach (var obj in query.Get())                  {                      using (obj)                      {                          cached = (ulong)obj.GetPropertyValue("CacheBytes") / 1024 / 1024;                      }                  }              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,DiskUsageCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\DiskUsageCheck.cs,DoCheck,The following statement contains a magic number: using (var query = new ManagementObjectSearcher("SELECT * FROM Win32_LogicalDisk WHERE DriveType = 3"))              {                  var list = query.Get();                  using (list)                  {                      foreach (var drive in list)                      {                          object fileSystemValue = drive.GetPropertyValue("FileSystem");                          object availableValue = drive.GetPropertyValue("FreeSpace");                          object totalSizeValue = drive.GetPropertyValue("Size");                          object mountedOnValue = drive.GetPropertyValue("DeviceID");                            string fileSystem = fileSystemValue == null ? string.Empty : (string)fileSystemValue;                          ulong available = availableValue == null ? 0 : (ulong)availableValue;                          ulong totalSize = totalSizeValue == null ? 0 : (ulong)totalSizeValue;                          ulong used = totalSize - available;                          var mountedOn = mountedOnValue == null ? string.Empty : (string)mountedOnValue;                          int percentUsed = 0;                          if (totalSize > 0)                          {                              percentUsed = (int)(((float)used / (float)totalSize) * 100);                          }                          results.Add(new object[] { fileSystem' ""' Gigabytes(used)' Gigabytes(totalSize)' percentUsed' mountedOn });                      }                      return results;                  }              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,DiskUsageCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\DiskUsageCheck.cs,Gigabytes,The following statement contains a magic number: return value / 1024 / 1024 / 1024;
Magic Number,BoxedIce.ServerDensity.Agent.Checks,DiskUsageCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\DiskUsageCheck.cs,Gigabytes,The following statement contains a magic number: return value / 1024 / 1024 / 1024;
Magic Number,BoxedIce.ServerDensity.Agent.Checks,DiskUsageCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\DiskUsageCheck.cs,Gigabytes,The following statement contains a magic number: return value / 1024 / 1024 / 1024;
Magic Number,BoxedIce.ServerDensity.Agent.Checks,PhysicalMemoryFreeCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PhysicalMemoryFreeCheck.cs,DoCheck,The following statement contains a magic number: using (var query = new ManagementObjectSearcher("SELECT FreePhysicalMemory FROM Win32_OperatingSystem"))              {                  var list = query.Get();                  using (list)                  {                      foreach (var memory in list)                      {                          total = (ulong)memory.GetPropertyValue("FreePhysicalMemory") / 1024;                      }                      return total;                  }              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,PhysicalMemoryUsedCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\PhysicalMemoryUsedCheck.cs,DoCheck,The following statement contains a magic number: using (var query = new ManagementObjectSearcher("SELECT TotalVisibleMemorySize' FreePhysicalMemory FROM Win32_OperatingSystem"))              {                  var list = query.Get();                  using (list)                  {                      foreach (var memory in list)                      {                          ulong total = (ulong)memory.GetPropertyValue("TotalVisibleMemorySize");                          ulong free = (ulong)memory.GetPropertyValue("FreePhysicalMemory");                          used = (total - free) / 1024;                      }                      return used;                  }              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ProcessCheck.cs,DoCheck,The following statement contains a magic number: using (var query = new ManagementObjectSearcher("SELECT * FROM Win32_Process"))              {                  foreach (ManagementObject process in query.Get())                  {                      try                      {                          var processId = (uint)process.GetPropertyValue("ProcessId");                          var imageName = (string)process.GetPropertyValue("Name");                            // Ignore System Idle Process for now                          if (imageName.ToString().ToLower() == "system idle process")                          {                              continue;                          }                            var fullUserName = string.Empty;                          var outParameters = process.InvokeMethod("GetOwner"' null' null);                          if (outParameters["User"] != null)                          {                              fullUserName = string.Format(@"{0}\{1}"' outParameters["Domain"]' outParameters["User"]);                          }                            ulong[] stats = null;                          try                          {                              stats = processStats[processId];                          }                          catch                          {                              Log.InfoFormat("ProcessID {0} appears to have gone missing' proceeding without it"' processId.ToString());                              continue;                          }                          var cpuPercentage = stats[0];                          ulong workingSet = stats[1];                          decimal totalMemory = (decimal)_totalMemory;                            decimal memoryPercentage = 0;                          if (totalMemory > 0)                          {                              memoryPercentage = Decimal.Round(((decimal)workingSet / totalMemory * 100)' 2);                          }                            results.Add(new object[] { processId' imageName' fullUserName' cpuPercentage' memoryPercentage' workingSet });                            // flag check                          if (Agent.Flags.ContainsKey("ProcessCheck"))                          {                              if (imageName == Agent.Flags["ProcessCheck"])                              {                                  bool perf = PerformanceCounterBasedProcessCheck.IsProcessRunning(imageName);                                  if (!perf)                                  {                                      Log.Error("Process Check: '" + Agent.Flags["ProcessCheck"] + "' process does not show in Perf Counters.");                                  }                              }                          }                        }                      catch (ManagementException ex)                      {                          // Process could have ended before reaching this point in the loop                          if (ex.Message.ToLower() == "not found")                          {                              continue;                          }                      }                  }                    return results;              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ProcessCheck.cs,DoCheck,The following statement contains a magic number: using (var query = new ManagementObjectSearcher("SELECT * FROM Win32_Process"))              {                  foreach (ManagementObject process in query.Get())                  {                      try                      {                          var processId = (uint)process.GetPropertyValue("ProcessId");                          var imageName = (string)process.GetPropertyValue("Name");                            // Ignore System Idle Process for now                          if (imageName.ToString().ToLower() == "system idle process")                          {                              continue;                          }                            var fullUserName = string.Empty;                          var outParameters = process.InvokeMethod("GetOwner"' null' null);                          if (outParameters["User"] != null)                          {                              fullUserName = string.Format(@"{0}\{1}"' outParameters["Domain"]' outParameters["User"]);                          }                            ulong[] stats = null;                          try                          {                              stats = processStats[processId];                          }                          catch                          {                              Log.InfoFormat("ProcessID {0} appears to have gone missing' proceeding without it"' processId.ToString());                              continue;                          }                          var cpuPercentage = stats[0];                          ulong workingSet = stats[1];                          decimal totalMemory = (decimal)_totalMemory;                            decimal memoryPercentage = 0;                          if (totalMemory > 0)                          {                              memoryPercentage = Decimal.Round(((decimal)workingSet / totalMemory * 100)' 2);                          }                            results.Add(new object[] { processId' imageName' fullUserName' cpuPercentage' memoryPercentage' workingSet });                            // flag check                          if (Agent.Flags.ContainsKey("ProcessCheck"))                          {                              if (imageName == Agent.Flags["ProcessCheck"])                              {                                  bool perf = PerformanceCounterBasedProcessCheck.IsProcessRunning(imageName);                                  if (!perf)                                  {                                      Log.Error("Process Check: '" + Agent.Flags["ProcessCheck"] + "' process does not show in Perf Counters.");                                  }                              }                          }                        }                      catch (ManagementException ex)                      {                          // Process could have ended before reaching this point in the loop                          if (ex.Message.ToLower() == "not found")                          {                              continue;                          }                      }                  }                    return results;              }
Magic Number,BoxedIce.ServerDensity.Agent.Checks,ProcessCheck,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Checks\ProcessCheck.cs,TotalMemory,The following statement contains a magic number: try              {                  using (var query = new ManagementObjectSearcher("SELECT TotalVisibleMemorySize FROM Win32_OperatingSystem"))                  {                      foreach (var obj in query.Get())                      {                          using (obj)                          {                              return (ulong)obj.GetPropertyValue("TotalVisibleMemorySize") * 1024;                          }                      }                      return 0;                  }              }              catch (Exception ex)              {                  Log.Error(ex);              }
Magic Number,BoxedIce.ServerDensity.Agent.Tasks,StartServiceTask,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Tasks\StartServiceTask.cs,Run,The following statement contains a magic number: service.WaitForStatus(ServiceControllerStatus.Running' new TimeSpan(0' 0' 30));
Magic Number,BoxedIce.ServerDensity.Agent.Tasks,StopServiceTask,C:\repos\serverdensity_sd-agent-windows\BoxedIce.ServerDensity.Agent\Tasks\StopServiceTask.cs,Run,The following statement contains a magic number: try              {                  ServiceController service = new ServiceController("Server Density Monitoring Agent");                  service.Stop();                  service.WaitForStatus(ServiceControllerStatus.Stopped' new TimeSpan(0' 0' 30));              }              catch (InvalidOperationException)              {              }
