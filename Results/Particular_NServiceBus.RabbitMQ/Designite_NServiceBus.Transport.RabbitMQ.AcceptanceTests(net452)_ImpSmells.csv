Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NServiceBus.Transport.RabbitMQ.AcceptanceTests,When_publishing_message_implementing_interface_in_direct_topology,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\When_publishing_message_implementing_interface_in_direct_topology.cs,Should_log_a_warning,The length of the statement  "            Assert.True(context.Logs.Any(l => l.Level == LogLevel.Warn && l.Message.Contains("The direct routing topology cannot properly publish a message type that implements"))); " is 169.
Long Statement,NServiceBus.Transport.RabbitMQ.AcceptanceTests,When_receiving_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\When_receiving_a_message.cs,Should_have_access_to_BasicDeliverEventArgs,The length of the statement  "            Assert.True(scenario.HandlerHasAccessToBasicDeliverEventArgs' "The handler should have access to BasicDeliverEventArgs"); " is 121.
Long Statement,NServiceBus.Transport.RabbitMQ.AcceptanceTests,RequestHandler,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\When_receiving_a_reply_that_contains_a_legacy_callback_header.cs,Handle,The length of the statement  "                    options.SetHeader("NServiceBus.RabbitMQ.CallbackQueue"' Conventions.EndpointNamingConvention(typeof(ReceivingEndpoint))); " is 121.
Long Statement,NServiceBus.Transport.RabbitMQ.AcceptanceTests,ConnectionKiller,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\When_the_broker_connection_is_lost.cs,BreakConnectionBySendingInvalidMessage,The length of the statement  "                            var operation = new TransportOperation(outgoingMessage' new UnicastAddressTag(settings.EndpointName())' deliveryConstraints: new List<DeliveryConstraint> { new DiscardIfNotReceivedBefore(TimeSpan.FromMilliseconds(-1)) }); " is 221.
Long Statement,NServiceBus.Transport.RabbitMQ.AcceptanceTests,Starter,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\When_using_a_custom_message_id_strategy.cs,OnStart,The length of the statement  "                        return dispatchMessages.Dispatch(new TransportOperations(transportOperation)' new TransportTransaction()' new ContextBag()); " is 124.
Empty Catch Block,NServiceBus.Transport.RabbitMQ.AcceptanceTests,ConnectionKiller,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\When_the_broker_connection_is_lost.cs,BreakConnectionBySendingInvalidMessage,The method has an empty catch block.
Magic Number,NServiceBus.Transport.RabbitMQ.AcceptanceTests.DelayedDelivery,When_deferring_a_message_longer_than_allowed_maximum,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\DelayedDelivery\When_deferring_a_message_longer_than_allowed_maximum.cs,Should_throw,The following statement contains a magic number: var delay = TimeSpan.FromDays(365 * 1000);
Magic Number,NServiceBus.Transport.RabbitMQ.AcceptanceTests.DelayedDelivery,When_deferring_a_message_longer_than_allowed_maximum,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\DelayedDelivery\When_deferring_a_message_longer_than_allowed_maximum.cs,Should_throw,The following statement contains a magic number: var delay = TimeSpan.FromDays(365 * 1000);
Magic Number,NServiceBus.Transport.RabbitMQ.AcceptanceTests,When_scaling_out_senders_that_uses_callbacks,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\When_scaling_out_senders_that_uses_callbacks.cs,Should_only_deliver_response_to_one_of_the_instances,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<ServerThatRespondsToCallbacks>()                  .WithEndpoint<ScaledOutClient>(b =>                  {                      b.CustomConfig(c =>                      {                          c.MakeInstanceUniquelyAddressable("A");                          c.GetSettings().Set("Client"' "A");                      });                      b.When(async (bus' c) =>                      {                          for (var i = 0; i < numMessagesToSend; i++)                          {                              var sendOptions = new SendOptions();                              sendOptions.RouteReplyToThisInstance();                                var myRequest = new MyRequest { Client = "A" };                                await bus.Send(myRequest' sendOptions);                          }                      });                  })                  .WithEndpoint<ScaledOutClient>(b =>                  {                      b.CustomConfig(c =>                      {                          c.MakeInstanceUniquelyAddressable("B");                          c.GetSettings().Set("Client"' "B");                      });                      b.When(async (bus' c) =>                      {                          for (var i = 0; i < numMessagesToSend; i++)                          {                              var sendOptions = new SendOptions();                              sendOptions.RouteReplyToThisInstance();                                var myRequest = new MyRequest { Client = "B" };                                await bus.Send(myRequest' sendOptions);                          }                      });                  })                  .Done(c => c.RepliesReceived >= numMessagesToSend * 2)                  .Run();
Magic Number,NServiceBus.Transport.RabbitMQ.AcceptanceTests,When_scaling_out_senders_that_uses_callbacks,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\When_scaling_out_senders_that_uses_callbacks.cs,Should_only_deliver_response_to_one_of_the_instances,The following statement contains a magic number: Assert.AreEqual(2 * numMessagesToSend' context.RepliesReceived);
Magic Number,NServiceBus.Transport.RabbitMQ.AcceptanceTests,When_scaling_out_subscribers,C:\research\architectureSmells\repos\Particular_NServiceBus.RabbitMQ\src\NServiceBus.Transport.RabbitMQ.AcceptanceTests\When_scaling_out_subscribers.cs,Should_only_deliver_event_to_one_of_the_instances,The following statement contains a magic number: var context = await Scenario.Define<MyContext>()                     .WithEndpoint<Publisher>(b => b.When(c => c.ServerASubscribed && c.ServerBSubscribed' bus => bus.Publish<MyEvent>()))                     .WithEndpoint<ScaledOutSubscriber>(b =>                     {                         b.CustomConfig(c => c.MakeInstanceUniquelyAddressable("A"));                         b.When(async (bus' c) =>                         {                             await bus.Subscribe<MyEvent>();                             c.ServerASubscribed = true;                         });                     })                     .WithEndpoint<ScaledOutSubscriber>(b =>                     {                         b.CustomConfig(c => c.MakeInstanceUniquelyAddressable("B"));                         b.When(async (bus' c) =>                         {                             await bus.Subscribe<MyEvent>();                             c.ServerBSubscribed = true;                         });                     })                     .Run(TimeSpan.FromSeconds(10));
