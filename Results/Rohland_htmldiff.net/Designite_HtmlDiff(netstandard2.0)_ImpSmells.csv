Implementation smell,Namespace,Class,File,Method,Description
Long Method,HtmlDiff,WordSplitter,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\WordSplitter.cs,ConvertHtmlToListOfWords,The method has 223 lines of code.
Complex Method,HtmlDiff,HtmlDiff,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\Diff.cs,InsertTag,Cyclomatic complexity of the method is 13
Complex Method,HtmlDiff,WordSplitter,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\WordSplitter.cs,ConvertHtmlToListOfWords,Cyclomatic complexity of the method is 35
Long Parameter List,HtmlDiff,HtmlDiff,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\Diff.cs,FindMatchingBlocks,The method has 5 parameters. Parameters: startInOld' endInOld' startInNew' endInNew' matchingBlocks
Long Parameter List,HtmlDiff,MatchFinder,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\MatchFinder.cs,MatchFinder,The method has 7 parameters. Parameters: oldWords' newWords' startInOld' endInOld' startInNew' endInNew' options
Long Parameter List,HtmlDiff,Operation,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\Operation.cs,Operation,The method has 5 parameters. Parameters: action' startInOld' endInOld' startInNew' endInNew
Long Identifier,HtmlDiff,HtmlDiff,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\Diff.cs,InsertTag,The length of the parameter specialCaseTagInjectionIsBefore is 31.
Long Identifier,HtmlDiff,HtmlDiff,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\Diff.cs,Operations,The length of the parameter matchStartsAtCurrentPositionInOld is 33.
Long Identifier,HtmlDiff,HtmlDiff,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\Diff.cs,Operations,The length of the parameter matchStartsAtCurrentPositionInNew is 33.
Long Statement,HtmlDiff,HtmlDiff,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\Diff.cs,Operations,The length of the statement  "            //If distance between left and right matches is 4 times longer than length of current match then it is considered as orphan" is 123.
Long Statement,HtmlDiff,Operation,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\Operation.cs,PrintDebugInfo,The length of the statement  "            Debug.WriteLine(string.Format(@"Operation: {0}' Old Text: '{1}'' New Text: '{2}'"' Action.ToString()' oldText' newText));" is 121.
Complex Conditional,HtmlDiff,HtmlDiff,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\Diff.cs,RemoveOrphans,The conditional expression  "prev.EndInOld == curr.StartInOld && prev.EndInNew == curr.StartInNew                     || curr.EndInOld == next.StartInOld && curr.EndInNew == next.StartInNew"  is complex.
Magic Number,HtmlDiff,WordSplitter,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\WordSplitter.cs,ConvertHtmlToListOfWords,The following statement contains a magic number: switch (mode)                 {                     case Mode.Character:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add('<');                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsWord(character)                             && (currentWord.Count == 0 || Utils.IsWord(currentWord.Last())))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                         }                          break;                     case Mode.Tag:                          if (Utils.IsEndOfTag(character))                         {                             currentWord.Add(character);                             words.Add(new string(currentWord.ToArray()));                             currentWord.Clear();                              mode = Utils.IsWhiteSpace(character) ? Mode.Whitespace : Mode.Character;                         }                         else                         {                             currentWord.Add(character);                         }                          break;                     case Mode.Whitespace:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                          break;                     case Mode.Entity:                         if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (char.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsEndOfEntity(character))                         {                             var switchToNextMode = true;                             if (currentWord.Count != 0)                             {                                 currentWord.Add(character);                                 words.Add(new string(currentWord.ToArray()));                                  //join &nbsp; entity with last whitespace                                 if (words.Count > 2                                     && Utils.IsWhiteSpace(words[words.Count - 2])                                     && Utils.IsWhiteSpace(words[words.Count - 1]))                                 {                                     var w1 = words[words.Count - 2];                                     var w2 = words[words.Count - 1];                                     words.RemoveRange(words.Count - 2' 2);                                     currentWord.Clear();                                     currentWord.AddRange(w1);                                     currentWord.AddRange(w2);                                     mode = Mode.Whitespace;                                     switchToNextMode = false;                                 }                             }                             if (switchToNextMode)                             {                                 currentWord.Clear();                                 mode = Mode.Character;                             }                         }                         else if (Utils.IsWord(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                         break;                 }
Magic Number,HtmlDiff,WordSplitter,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\WordSplitter.cs,ConvertHtmlToListOfWords,The following statement contains a magic number: switch (mode)                 {                     case Mode.Character:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add('<');                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsWord(character)                             && (currentWord.Count == 0 || Utils.IsWord(currentWord.Last())))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                         }                          break;                     case Mode.Tag:                          if (Utils.IsEndOfTag(character))                         {                             currentWord.Add(character);                             words.Add(new string(currentWord.ToArray()));                             currentWord.Clear();                              mode = Utils.IsWhiteSpace(character) ? Mode.Whitespace : Mode.Character;                         }                         else                         {                             currentWord.Add(character);                         }                          break;                     case Mode.Whitespace:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                          break;                     case Mode.Entity:                         if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (char.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsEndOfEntity(character))                         {                             var switchToNextMode = true;                             if (currentWord.Count != 0)                             {                                 currentWord.Add(character);                                 words.Add(new string(currentWord.ToArray()));                                  //join &nbsp; entity with last whitespace                                 if (words.Count > 2                                     && Utils.IsWhiteSpace(words[words.Count - 2])                                     && Utils.IsWhiteSpace(words[words.Count - 1]))                                 {                                     var w1 = words[words.Count - 2];                                     var w2 = words[words.Count - 1];                                     words.RemoveRange(words.Count - 2' 2);                                     currentWord.Clear();                                     currentWord.AddRange(w1);                                     currentWord.AddRange(w2);                                     mode = Mode.Whitespace;                                     switchToNextMode = false;                                 }                             }                             if (switchToNextMode)                             {                                 currentWord.Clear();                                 mode = Mode.Character;                             }                         }                         else if (Utils.IsWord(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                         break;                 }
Magic Number,HtmlDiff,WordSplitter,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\WordSplitter.cs,ConvertHtmlToListOfWords,The following statement contains a magic number: switch (mode)                 {                     case Mode.Character:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add('<');                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsWord(character)                             && (currentWord.Count == 0 || Utils.IsWord(currentWord.Last())))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                         }                          break;                     case Mode.Tag:                          if (Utils.IsEndOfTag(character))                         {                             currentWord.Add(character);                             words.Add(new string(currentWord.ToArray()));                             currentWord.Clear();                              mode = Utils.IsWhiteSpace(character) ? Mode.Whitespace : Mode.Character;                         }                         else                         {                             currentWord.Add(character);                         }                          break;                     case Mode.Whitespace:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                          break;                     case Mode.Entity:                         if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (char.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsEndOfEntity(character))                         {                             var switchToNextMode = true;                             if (currentWord.Count != 0)                             {                                 currentWord.Add(character);                                 words.Add(new string(currentWord.ToArray()));                                  //join &nbsp; entity with last whitespace                                 if (words.Count > 2                                     && Utils.IsWhiteSpace(words[words.Count - 2])                                     && Utils.IsWhiteSpace(words[words.Count - 1]))                                 {                                     var w1 = words[words.Count - 2];                                     var w2 = words[words.Count - 1];                                     words.RemoveRange(words.Count - 2' 2);                                     currentWord.Clear();                                     currentWord.AddRange(w1);                                     currentWord.AddRange(w2);                                     mode = Mode.Whitespace;                                     switchToNextMode = false;                                 }                             }                             if (switchToNextMode)                             {                                 currentWord.Clear();                                 mode = Mode.Character;                             }                         }                         else if (Utils.IsWord(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                         break;                 }
Magic Number,HtmlDiff,WordSplitter,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\WordSplitter.cs,ConvertHtmlToListOfWords,The following statement contains a magic number: switch (mode)                 {                     case Mode.Character:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add('<');                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsWord(character)                             && (currentWord.Count == 0 || Utils.IsWord(currentWord.Last())))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                         }                          break;                     case Mode.Tag:                          if (Utils.IsEndOfTag(character))                         {                             currentWord.Add(character);                             words.Add(new string(currentWord.ToArray()));                             currentWord.Clear();                              mode = Utils.IsWhiteSpace(character) ? Mode.Whitespace : Mode.Character;                         }                         else                         {                             currentWord.Add(character);                         }                          break;                     case Mode.Whitespace:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                          break;                     case Mode.Entity:                         if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (char.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsEndOfEntity(character))                         {                             var switchToNextMode = true;                             if (currentWord.Count != 0)                             {                                 currentWord.Add(character);                                 words.Add(new string(currentWord.ToArray()));                                  //join &nbsp; entity with last whitespace                                 if (words.Count > 2                                     && Utils.IsWhiteSpace(words[words.Count - 2])                                     && Utils.IsWhiteSpace(words[words.Count - 1]))                                 {                                     var w1 = words[words.Count - 2];                                     var w2 = words[words.Count - 1];                                     words.RemoveRange(words.Count - 2' 2);                                     currentWord.Clear();                                     currentWord.AddRange(w1);                                     currentWord.AddRange(w2);                                     mode = Mode.Whitespace;                                     switchToNextMode = false;                                 }                             }                             if (switchToNextMode)                             {                                 currentWord.Clear();                                 mode = Mode.Character;                             }                         }                         else if (Utils.IsWord(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                         break;                 }
Magic Number,HtmlDiff,WordSplitter,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\WordSplitter.cs,ConvertHtmlToListOfWords,The following statement contains a magic number: switch (mode)                 {                     case Mode.Character:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add('<');                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsWord(character)                             && (currentWord.Count == 0 || Utils.IsWord(currentWord.Last())))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                         }                          break;                     case Mode.Tag:                          if (Utils.IsEndOfTag(character))                         {                             currentWord.Add(character);                             words.Add(new string(currentWord.ToArray()));                             currentWord.Clear();                              mode = Utils.IsWhiteSpace(character) ? Mode.Whitespace : Mode.Character;                         }                         else                         {                             currentWord.Add(character);                         }                          break;                     case Mode.Whitespace:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                          break;                     case Mode.Entity:                         if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (char.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsEndOfEntity(character))                         {                             var switchToNextMode = true;                             if (currentWord.Count != 0)                             {                                 currentWord.Add(character);                                 words.Add(new string(currentWord.ToArray()));                                  //join &nbsp; entity with last whitespace                                 if (words.Count > 2                                     && Utils.IsWhiteSpace(words[words.Count - 2])                                     && Utils.IsWhiteSpace(words[words.Count - 1]))                                 {                                     var w1 = words[words.Count - 2];                                     var w2 = words[words.Count - 1];                                     words.RemoveRange(words.Count - 2' 2);                                     currentWord.Clear();                                     currentWord.AddRange(w1);                                     currentWord.AddRange(w2);                                     mode = Mode.Whitespace;                                     switchToNextMode = false;                                 }                             }                             if (switchToNextMode)                             {                                 currentWord.Clear();                                 mode = Mode.Character;                             }                         }                         else if (Utils.IsWord(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                         break;                 }
Missing Default,HtmlDiff,HtmlDiff,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\Diff.cs,PerformOperation,The following switch statement is missing a default case: switch (operation.Action)             {                 case Action.Equal:                     ProcessEqualOperation(operation);                     break;                 case Action.Delete:                     ProcessDeleteOperation(operation' "diffdel");                     break;                 case Action.Insert:                     ProcessInsertOperation(operation' "diffins");                     break;                 case Action.None:                     break;                 case Action.Replace:                     ProcessReplaceOperation(operation);                     break;             }
Missing Default,HtmlDiff,WordSplitter,C:\research\architectureSmells\repos\Rohland_htmldiff.net\HtmlDiff\WordSplitter.cs,ConvertHtmlToListOfWords,The following switch statement is missing a default case: switch (mode)                 {                     case Mode.Character:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add('<');                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsWord(character)                             && (currentWord.Count == 0 || Utils.IsWord(currentWord.Last())))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                         }                          break;                     case Mode.Tag:                          if (Utils.IsEndOfTag(character))                         {                             currentWord.Add(character);                             words.Add(new string(currentWord.ToArray()));                             currentWord.Clear();                              mode = Utils.IsWhiteSpace(character) ? Mode.Whitespace : Mode.Character;                         }                         else                         {                             currentWord.Add(character);                         }                          break;                     case Mode.Whitespace:                          if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (Utils.IsStartOfEntity(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Entity;                         }                         else if (Utils.IsWhiteSpace(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                          break;                     case Mode.Entity:                         if (Utils.IsStartOfTag(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                              currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Tag;                         }                         else if (char.IsWhiteSpace(character))                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Whitespace;                         }                         else if (Utils.IsEndOfEntity(character))                         {                             var switchToNextMode = true;                             if (currentWord.Count != 0)                             {                                 currentWord.Add(character);                                 words.Add(new string(currentWord.ToArray()));                                  //join &nbsp; entity with last whitespace                                 if (words.Count > 2                                     && Utils.IsWhiteSpace(words[words.Count - 2])                                     && Utils.IsWhiteSpace(words[words.Count - 1]))                                 {                                     var w1 = words[words.Count - 2];                                     var w2 = words[words.Count - 1];                                     words.RemoveRange(words.Count - 2' 2);                                     currentWord.Clear();                                     currentWord.AddRange(w1);                                     currentWord.AddRange(w2);                                     mode = Mode.Whitespace;                                     switchToNextMode = false;                                 }                             }                             if (switchToNextMode)                             {                                 currentWord.Clear();                                 mode = Mode.Character;                             }                         }                         else if (Utils.IsWord(character))                         {                             currentWord.Add(character);                         }                         else                         {                             if (currentWord.Count != 0)                             {                                 words.Add(new string(currentWord.ToArray()));                             }                             currentWord.Clear();                             currentWord.Add(character);                             mode = Mode.Character;                         }                         break;                 }
