Implementation smell,Namespace,Class,File,Method,Description
Long Method,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The method has 196 lines of code.
Long Method,DomTreeEditorSample,Program,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\Program.cs,Main,The method has 105 lines of code.
Long Method,DomTreeEditorSample,SchemaLoader,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\SchemaLoader.cs,OnSchemaSetLoaded,The method has 245 lines of code.
Complex Method,DomTreeEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\EditingContext.cs,CanInsert,Cyclomatic complexity of the method is 8
Complex Method,DomTreeEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\EditingContext.cs,Insert,Cyclomatic complexity of the method is 10
Long Parameter List,DomTreeEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\Editor.cs,Editor,The method has 5 parameters. Parameters: contextRegistry' documentRegistry' documentService' treeLister' schemaLoader
Long Parameter List,DomTreeEditorSample,TreeLister,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\TreeLister.cs,TreeLister,The method has 5 parameters. Parameters: commandService' controlHostService' contextRegistry' documentRegistry' documentService
Long Statement,DomTreeEditorSample,Program,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\Program.cs,Main,The length of the statement  "            Application.DoEvents(); // see http://www.codeproject.com/buglist/EnableVisualStylesBug.asp?df=100&forumid=25268&exp=0&select=984714 " is 132.
Long Statement,DomTreeEditorSample,Program,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\Program.cs,Main,The length of the statement  "                typeof(OutputService)'                  // rich text box for displaying error and warning messages. Implements IOutputWriter.                 " is 125.
Long Statement,DomTreeEditorSample,Program,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\Program.cs,Main,The length of the statement  "                typeof(AutomationService)               // provides facilities to run an automated script using the .NET remoting service " is 121.
Long Statement,DomTreeEditorSample,Program,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\Program.cs,Main,The length of the statement  "            //            windowLayoutService.SetOrAddLayout(dockStateProvider' "Programmatic Layout " + layoutNum' xmlDoc.InnerXml); " is 121.
Long Statement,DomTreeEditorSample,SchemaLoader,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\SchemaLoader.cs,OnSchemaSetLoaded,The length of the statement  "                UISchema.UIType.Type.Define(new ExtensionInfo<Validator>());            // makes sure referenced resources are in package " is 121.
Complex Conditional,DomTreeEditorSample,CurveLimitValidator,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\CurveLimitValidator.cs,OnNodeSet,The conditional expression  "cp.X < curve.MinX                              || cp.X > curve.MaxX                              || cp.Y < curve.MinY                              || cp.Y > curve.MaxY"  is complex.
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxX = 1000;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.X = 500;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.Y = 10;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxX = 1000;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.Y = 30;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.X = 500;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.Y = 40;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxX = 1000;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.Y = 60;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.X = 500;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.Y = 100;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxX = 1000;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxY = 255;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxX = 1000;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxY = 255;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.X = 800;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.Y = 255;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxX = 1000;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxY = 255;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.Y = 128;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.X = 900;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.Y = 128;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxX = 1000;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: curve.MaxY = 255;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.Y = 255;
Magic Number,DomTreeEditorSample,UIAnimation,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\UIAnimation.cs,OnNodeSet,The following statement contains a magic number: cp.X = 1000;
Magic Number,DomTreeEditorSample,SchemaLoader,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\SchemaLoader.cs,OnSchemaSetLoaded,The following statement contains a magic number: foreach (XmlSchemaTypeCollection typeCollection in GetTypeCollections())              {                  m_namespace = typeCollection.TargetNamespace;                  m_typeCollection = typeCollection;                  UISchema.Initialize(typeCollection);                                    // register UI adapters as extensions on the DOM data                    // register adapters on the root to define document and editing context                  UISchema.UIType.Type.Define(new ExtensionInfo<UI>());                  UISchema.UIType.Type.Define(new ExtensionInfo<EditingContext>());                  UISchema.UIType.Type.Define(new ExtensionInfo<TreeView>());                  UISchema.UIType.Type.Define(new ExtensionInfo<Document>());                  UISchema.UIType.Type.Define(new ExtensionInfo<MultipleHistoryContext>());                                      // register adapters on the root for data validation                  UISchema.UIType.Type.Define(new ExtensionInfo<Validator>());            // makes sure referenced resources are in package                                                                                          //  this must be first so unique naming can work on copied resources                  UISchema.UIType.Type.Define(new ExtensionInfo<ReferenceValidator>());   // prevents dangling references                  UISchema.UIType.Type.Define(new ExtensionInfo<UniqueIdValidator>());    // makes sure ref targets have unique ids                    // register adapters to define the UI object model                  UISchema.UIPackageType.Type.Define(new ExtensionInfo<UIPackage>());                  UISchema.UIFormType.Type.Define(new ExtensionInfo<UIForm>());                  UISchema.UIShaderType.Type.Define(new ExtensionInfo<UIShader>());                  UISchema.UITextureType.Type.Define(new ExtensionInfo<UITexture>());                  UISchema.UIFontType.Type.Define(new ExtensionInfo<UIFont>());                  UISchema.UISpriteType.Type.Define(new ExtensionInfo<UISprite>());                  UISchema.UITextItemType.Type.Define(new ExtensionInfo<UITextItem>());                  UISchema.UIRefType.Type.Define(new ExtensionInfo<UIRef>());                  UISchema.UIAnimationType.Type.Define(new ExtensionInfo<UIAnimation>());                  UISchema.curveType.Type.Define(new ExtensionInfo<Curve>());                  UISchema.curveType.Type.Define(new ExtensionInfo<CurveLimitValidator>());                                  UISchema.controlPointType.Type.Define(new ExtensionInfo<ControlPoint>());                                      //                  // tag UI types with display info; it will be used both in the palette                  //  and in the UITreeLister tree view.                    UISchema.UIType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIType.Type'                          "UI".Localize()'                          "UI Container".Localize()'                          "Sce.Atf.Resources.Data16.png"));                    UISchema.UIPackageType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIPackageType.Type'                          "Package".Localize()'                          "Package' containing a complete collection of UI items".Localize()'                          "DomTreeEditorSample.Resources.package.png"));                    UISchema.UIFormType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIFormType.Type'                          "Form".Localize()'                          "Form' containing a UI screen".Localize()'                          "DomTreeEditorSample.Resources.form.png"));                    UISchema.UISpriteType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UISpriteType.Type'                          "Sprite".Localize()'                          "A moveable UI element".Localize()'                          "DomTreeEditorSample.Resources.sprite.png"));                    UISchema.UIShaderType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIShaderType.Type'                          "Shader".Localize()'                          "Shader for rendering graphics".Localize()'                          "DomTreeEditorSample.Resources.shader.png"));                    UISchema.UITextureType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UITextureType.Type'                          "Texture".Localize()'                          "Texture for rendering graphics".Localize()'                          "DomTreeEditorSample.Resources.texture.png"));                    UISchema.UIFontType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIFontType.Type'                          "Font".Localize()'                          "Font for rendering text".Localize()'                          "DomTreeEditorSample.Resources.font.png"));                    UISchema.UITextItemType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UITextItemType.Type'                          "Text".Localize()'                          "Text' to display on Form".Localize()'                          "DomTreeEditorSample.Resources.text.png"));                    UISchema.UITransformType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UITransformType.Type'                          "Transform".Localize()'                          "Transform' for sprites and text".Localize()'                          "DomTreeEditorSample.Resources.transform.png"));                    UISchema.UIAnimationType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIAnimationType.Type'                          "Animation".Localize()'                          "Color and position animation curves' for form and control".Localize()'                          null)                                          );                    UISchema.curveType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.curveType.Type'                          "Curve".Localize()'                          "animation curve".Localize()'                          null));                    // Tag UI types with descriptors for property editing                    //UISchema.UIObjectType.Type.SetTag(                  //    new PropertyDescriptorCollection(                  //        new PropertyDescriptor[] {                  //        new AttributePropertyDescriptor(                  //            Localizer.Localize("Name")'                  //            UISchema.UIObjectType.nameAttribute'                  //            null'                  //            Localizer.Localize("Item name")'                  //            false)                  //    }));                    //UISchema.UIPackageType.Type.SetTag(                  //    new PropertyDescriptorCollection(                  //        new PropertyDescriptor[] {                  //        new AttributePropertyDescriptor(                  //            Localizer.Localize("Package")'                  //            UISchema.UIPackageType.FxFileAttribute'                  //            null'                  //            Localizer.Localize("Shader file path")'                  //            false'                  //            new CollectionEditor())                  //    }));                    UISchema.UIShaderType.Type.SetTag(                      new PropertyDescriptorCollection(                          new PropertyDescriptor[] {                          new AttributePropertyDescriptor(                              "Shader".Localize()'                              UISchema.UIShaderType.FxFileAttribute'                              null'                              "Shader file path".Localize()'                              false'                              new FileUriEditor("Fx Files (*.fx)|*.fx"))'                          new AttributePropertyDescriptor(                              "Shader param".Localize()'                              UISchema.UIShaderType.ShaderParamAttribute'                              null'                              "Shader param".Localize()'                              false'                              new NumericEditor(typeof(Int32)))                      }));                    UISchema.UITextureType.Type.SetTag(                      new PropertyDescriptorCollection(                          new PropertyDescriptor[] {                          new AttributePropertyDescriptor(                              "Texture file".Localize()'                              UISchema.UITextureType.TextureFileAttribute'                              null'                              "Texture file path".Localize()'                              false'                              new FileUriEditor("Texture Files (*.tga)|*.tga"))'                          new AttributePropertyDescriptor(                              "Texture folder".Localize()'                              UISchema.UITextureType.TextureFolderAttribute'                              null'                              "Texture folder path".Localize()'                              false'                              new FolderBrowserDialogUITypeEditor("Texture folder path"))'                          new AttributePropertyDescriptor(                              "Texture numbers".Localize()'                              UISchema.UITextureType.TextureArrayAttribute'                              null'                              "Texture number array".Localize()'                              false'                              new ArrayEditor())'                          new AttributePropertyDescriptor(                              "Texture revision date".Localize()'                              UISchema.UITextureType.TextureRevDateAttribute'                              null'                              "Texture revision date".Localize()'                              false'                              new DateTimeEditor())'                      }));                    UISchema.UIFontType.Type.SetTag(                      new PropertyDescriptorCollection(                          new PropertyDescriptor[] {                          new AttributePropertyDescriptor(                              "Font".Localize()'                              UISchema.UIFontType.FontFileAttribute'                              null'                              "Font file path".Localize()'                              false'                              new FileUriEditor("Font Files (*.ttf)|*.ttf"))'                          new AttributePropertyDescriptor(                              "Font parameters".Localize()'                              UISchema.UIFontType.FontParamsAttribute'                              null'                              "Font parameters".Localize()'                              false'                              new CollectionEditor())'                      }));                    UISchema.UIAnimationType.Type.SetTag(                      new PropertyDescriptorCollection(                          new PropertyDescriptor[] {                          new AttributePropertyDescriptor(                              "Animation transform".Localize()'                              UISchema.UIAnimationType.AnimationTransformAttribute'                              null'                              "Animation transform".Localize()'                              false'                              new NumericMatrixEditor(typeof(float)' 3' 3))'                          new AttributePropertyDescriptor(                              "Animal kinds".Localize()'                              UISchema.UIAnimationType.AnimalKindsAttribute'                              null'                              "Kinds of animal to animate".Localize()'                              false'                              new CollectionEditor())'                      }));                    UISchema.UIControlType.Type.SetTag(                      new PropertyDescriptorCollection(                          new PropertyDescriptor[]                      {                          new ChildAttributePropertyDescriptor(                              "Translation".Localize()'                              UISchema.UITransformType.TranslateAttribute'                              UISchema.UIControlType.TransformChild'                              null'                              "Item position".Localize()'                              false'                              new NumericTupleEditor(typeof(float)' new string[] { "X"' "Y"' "Z" }))'                          new ChildAttributePropertyDescriptor(                              "Rotation".Localize()'                              UISchema.UITransformType.RotateAttribute'                              UISchema.UIControlType.TransformChild'                              null'                              "Item rotation".Localize()'                              false'                              new NumericTupleEditor(typeof(float)' new string[] { "X"' "Y"' "Z" }))'                          new ChildAttributePropertyDescriptor(                              "Scale".Localize()'                              UISchema.UITransformType.ScaleAttribute'                              UISchema.UIControlType.TransformChild'                              null'                              "Item scale".Localize()'                              false'                                                          new UniformArrayEditor<float>())                      }));                    // only one namespace                  break;              }
Magic Number,DomTreeEditorSample,SchemaLoader,C:\repos\SonyWWS_ATF\Samples\DomTreeEditor\SchemaLoader.cs,OnSchemaSetLoaded,The following statement contains a magic number: foreach (XmlSchemaTypeCollection typeCollection in GetTypeCollections())              {                  m_namespace = typeCollection.TargetNamespace;                  m_typeCollection = typeCollection;                  UISchema.Initialize(typeCollection);                                    // register UI adapters as extensions on the DOM data                    // register adapters on the root to define document and editing context                  UISchema.UIType.Type.Define(new ExtensionInfo<UI>());                  UISchema.UIType.Type.Define(new ExtensionInfo<EditingContext>());                  UISchema.UIType.Type.Define(new ExtensionInfo<TreeView>());                  UISchema.UIType.Type.Define(new ExtensionInfo<Document>());                  UISchema.UIType.Type.Define(new ExtensionInfo<MultipleHistoryContext>());                                      // register adapters on the root for data validation                  UISchema.UIType.Type.Define(new ExtensionInfo<Validator>());            // makes sure referenced resources are in package                                                                                          //  this must be first so unique naming can work on copied resources                  UISchema.UIType.Type.Define(new ExtensionInfo<ReferenceValidator>());   // prevents dangling references                  UISchema.UIType.Type.Define(new ExtensionInfo<UniqueIdValidator>());    // makes sure ref targets have unique ids                    // register adapters to define the UI object model                  UISchema.UIPackageType.Type.Define(new ExtensionInfo<UIPackage>());                  UISchema.UIFormType.Type.Define(new ExtensionInfo<UIForm>());                  UISchema.UIShaderType.Type.Define(new ExtensionInfo<UIShader>());                  UISchema.UITextureType.Type.Define(new ExtensionInfo<UITexture>());                  UISchema.UIFontType.Type.Define(new ExtensionInfo<UIFont>());                  UISchema.UISpriteType.Type.Define(new ExtensionInfo<UISprite>());                  UISchema.UITextItemType.Type.Define(new ExtensionInfo<UITextItem>());                  UISchema.UIRefType.Type.Define(new ExtensionInfo<UIRef>());                  UISchema.UIAnimationType.Type.Define(new ExtensionInfo<UIAnimation>());                  UISchema.curveType.Type.Define(new ExtensionInfo<Curve>());                  UISchema.curveType.Type.Define(new ExtensionInfo<CurveLimitValidator>());                                  UISchema.controlPointType.Type.Define(new ExtensionInfo<ControlPoint>());                                      //                  // tag UI types with display info; it will be used both in the palette                  //  and in the UITreeLister tree view.                    UISchema.UIType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIType.Type'                          "UI".Localize()'                          "UI Container".Localize()'                          "Sce.Atf.Resources.Data16.png"));                    UISchema.UIPackageType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIPackageType.Type'                          "Package".Localize()'                          "Package' containing a complete collection of UI items".Localize()'                          "DomTreeEditorSample.Resources.package.png"));                    UISchema.UIFormType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIFormType.Type'                          "Form".Localize()'                          "Form' containing a UI screen".Localize()'                          "DomTreeEditorSample.Resources.form.png"));                    UISchema.UISpriteType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UISpriteType.Type'                          "Sprite".Localize()'                          "A moveable UI element".Localize()'                          "DomTreeEditorSample.Resources.sprite.png"));                    UISchema.UIShaderType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIShaderType.Type'                          "Shader".Localize()'                          "Shader for rendering graphics".Localize()'                          "DomTreeEditorSample.Resources.shader.png"));                    UISchema.UITextureType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UITextureType.Type'                          "Texture".Localize()'                          "Texture for rendering graphics".Localize()'                          "DomTreeEditorSample.Resources.texture.png"));                    UISchema.UIFontType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIFontType.Type'                          "Font".Localize()'                          "Font for rendering text".Localize()'                          "DomTreeEditorSample.Resources.font.png"));                    UISchema.UITextItemType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UITextItemType.Type'                          "Text".Localize()'                          "Text' to display on Form".Localize()'                          "DomTreeEditorSample.Resources.text.png"));                    UISchema.UITransformType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UITransformType.Type'                          "Transform".Localize()'                          "Transform' for sprites and text".Localize()'                          "DomTreeEditorSample.Resources.transform.png"));                    UISchema.UIAnimationType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.UIAnimationType.Type'                          "Animation".Localize()'                          "Color and position animation curves' for form and control".Localize()'                          null)                                          );                    UISchema.curveType.Type.SetTag(                      new NodeTypePaletteItem(                          UISchema.curveType.Type'                          "Curve".Localize()'                          "animation curve".Localize()'                          null));                    // Tag UI types with descriptors for property editing                    //UISchema.UIObjectType.Type.SetTag(                  //    new PropertyDescriptorCollection(                  //        new PropertyDescriptor[] {                  //        new AttributePropertyDescriptor(                  //            Localizer.Localize("Name")'                  //            UISchema.UIObjectType.nameAttribute'                  //            null'                  //            Localizer.Localize("Item name")'                  //            false)                  //    }));                    //UISchema.UIPackageType.Type.SetTag(                  //    new PropertyDescriptorCollection(                  //        new PropertyDescriptor[] {                  //        new AttributePropertyDescriptor(                  //            Localizer.Localize("Package")'                  //            UISchema.UIPackageType.FxFileAttribute'                  //            null'                  //            Localizer.Localize("Shader file path")'                  //            false'                  //            new CollectionEditor())                  //    }));                    UISchema.UIShaderType.Type.SetTag(                      new PropertyDescriptorCollection(                          new PropertyDescriptor[] {                          new AttributePropertyDescriptor(                              "Shader".Localize()'                              UISchema.UIShaderType.FxFileAttribute'                              null'                              "Shader file path".Localize()'                              false'                              new FileUriEditor("Fx Files (*.fx)|*.fx"))'                          new AttributePropertyDescriptor(                              "Shader param".Localize()'                              UISchema.UIShaderType.ShaderParamAttribute'                              null'                              "Shader param".Localize()'                              false'                              new NumericEditor(typeof(Int32)))                      }));                    UISchema.UITextureType.Type.SetTag(                      new PropertyDescriptorCollection(                          new PropertyDescriptor[] {                          new AttributePropertyDescriptor(                              "Texture file".Localize()'                              UISchema.UITextureType.TextureFileAttribute'                              null'                              "Texture file path".Localize()'                              false'                              new FileUriEditor("Texture Files (*.tga)|*.tga"))'                          new AttributePropertyDescriptor(                              "Texture folder".Localize()'                              UISchema.UITextureType.TextureFolderAttribute'                              null'                              "Texture folder path".Localize()'                              false'                              new FolderBrowserDialogUITypeEditor("Texture folder path"))'                          new AttributePropertyDescriptor(                              "Texture numbers".Localize()'                              UISchema.UITextureType.TextureArrayAttribute'                              null'                              "Texture number array".Localize()'                              false'                              new ArrayEditor())'                          new AttributePropertyDescriptor(                              "Texture revision date".Localize()'                              UISchema.UITextureType.TextureRevDateAttribute'                              null'                              "Texture revision date".Localize()'                              false'                              new DateTimeEditor())'                      }));                    UISchema.UIFontType.Type.SetTag(                      new PropertyDescriptorCollection(                          new PropertyDescriptor[] {                          new AttributePropertyDescriptor(                              "Font".Localize()'                              UISchema.UIFontType.FontFileAttribute'                              null'                              "Font file path".Localize()'                              false'                              new FileUriEditor("Font Files (*.ttf)|*.ttf"))'                          new AttributePropertyDescriptor(                              "Font parameters".Localize()'                              UISchema.UIFontType.FontParamsAttribute'                              null'                              "Font parameters".Localize()'                              false'                              new CollectionEditor())'                      }));                    UISchema.UIAnimationType.Type.SetTag(                      new PropertyDescriptorCollection(                          new PropertyDescriptor[] {                          new AttributePropertyDescriptor(                              "Animation transform".Localize()'                              UISchema.UIAnimationType.AnimationTransformAttribute'                              null'                              "Animation transform".Localize()'                              false'                              new NumericMatrixEditor(typeof(float)' 3' 3))'                          new AttributePropertyDescriptor(                              "Animal kinds".Localize()'                              UISchema.UIAnimationType.AnimalKindsAttribute'                              null'                              "Kinds of animal to animate".Localize()'                              false'                              new CollectionEditor())'                      }));                    UISchema.UIControlType.Type.SetTag(                      new PropertyDescriptorCollection(                          new PropertyDescriptor[]                      {                          new ChildAttributePropertyDescriptor(                              "Translation".Localize()'                              UISchema.UITransformType.TranslateAttribute'                              UISchema.UIControlType.TransformChild'                              null'                              "Item position".Localize()'                              false'                              new NumericTupleEditor(typeof(float)' new string[] { "X"' "Y"' "Z" }))'                          new ChildAttributePropertyDescriptor(                              "Rotation".Localize()'                              UISchema.UITransformType.RotateAttribute'                              UISchema.UIControlType.TransformChild'                              null'                              "Item rotation".Localize()'                              false'                              new NumericTupleEditor(typeof(float)' new string[] { "X"' "Y"' "Z" }))'                          new ChildAttributePropertyDescriptor(                              "Scale".Localize()'                              UISchema.UITransformType.ScaleAttribute'                              UISchema.UIControlType.TransformChild'                              null'                              "Item scale".Localize()'                              false'                                                          new UniformArrayEditor<float>())                      }));                    // only one namespace                  break;              }
