Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,UpdateCachedStatuses,Cyclomatic complexity of the method is 14
Complex Method,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,ParseStatus,Cyclomatic complexity of the method is 10
Complex Method,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,GetCommonRootPaths,Cyclomatic complexity of the method is 10
Long Statement,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,UpdateCachedStatuses,The length of the statement  "                    var childInfos = m_infoCache.Values.Where(fileInfo => !uri.Equals(fileInfo.Uri) && fileInfo.Uri.LocalPath.StartsWith(uri.LocalPath)).ToArray(); " is 143.
Magic Number,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,UpdateCachedStatuses,The following statement contains a magic number: foreach (var line in m_svnOutput.Split(new[] { '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries))              {                  // ignore non-file lines                  if (line.StartsWith("Status against revision:") || line.StartsWith("        >"))                      continue;                    SourceControlStatus status;                  switch (line[0])                  {                      case ' ':                          status = SourceControlStatus.CheckedIn; break;                      case 'A':                          status = SourceControlStatus.Added; break;                      case 'C':                          status = SourceControlStatus.Unknown; break;                      case 'D':                          status = SourceControlStatus.Deleted; break;                      case 'I':                          status = SourceControlStatus.NotControlled; break;                      case 'M':                          status = SourceControlStatus.CheckedOut; break;                      case 'R':                          status = SourceControlStatus.CheckedOut; break;                      case 'X':                          status = SourceControlStatus.NotControlled; break;                      case '?':                          status = SourceControlStatus.NotControlled; break;                      case '!':                          status = SourceControlStatus.FileDoesNotExist; break;                      case '~':                          status = SourceControlStatus.Unknown; break;                      default:                          throw new Exception("Unhandled status character '" + line[0] + "' in svn status.");                  }                    // path is the last item on each line (but may contains spaces)                  // note that folder paths here do *not* have an ending slash (thanks SVN)                  var fields = line.Substring(9).Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                  var numFields = fields.Length;                  var minFields = status != SourceControlStatus.NotControlled ? 4 : 1;                  if (numFields < minFields)                      throw new Exception("Should be at least " + minFields + " fields' the last one being the path to the repository item");                    var i = minFields - 1;                  var path = fields[i];                  while (++i < numFields)                      path += " " + fields[i];                    // add ending slash to folder paths that don't already have them                  Uri uri;                  if (Directory.Exists(path) && !path.EndsWith("\\") && !path.EndsWith("/"))                      uri = new Uri(path + "\\");                  else                      uri = new Uri(path);                    // apply the status to an existing FileInfo' or create a new one                  FileInfo info;                  if (!m_infoCache.TryGetValue(path' out info))                  {                      info = new FileInfo(uri' status);                      m_infoCache[path] = info;                  }                  else                      info.Status = status;                    // folders that aren't controlled don't get their child files listed in 'svn status'.                  // if there are any cached FileInfos for such child files' mark them as not controlled as well                  // (required when a to-be-added folder is reverted' and its children were also marked for add)                  if (info.Status == SourceControlStatus.NotControlled && info.Uri.LocalPath.EndsWith("\\"))                  {                      var childInfos = m_infoCache.Values.Where(fileInfo => !uri.Equals(fileInfo.Uri) && fileInfo.Uri.LocalPath.StartsWith(uri.LocalPath)).ToArray();                      childInfos.ForEach(childInfo => childInfo.Status = SourceControlStatus.NotControlled);                  }              }
Magic Number,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,UpdateCachedStatuses,The following statement contains a magic number: foreach (var line in m_svnOutput.Split(new[] { '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries))              {                  // ignore non-file lines                  if (line.StartsWith("Status against revision:") || line.StartsWith("        >"))                      continue;                    SourceControlStatus status;                  switch (line[0])                  {                      case ' ':                          status = SourceControlStatus.CheckedIn; break;                      case 'A':                          status = SourceControlStatus.Added; break;                      case 'C':                          status = SourceControlStatus.Unknown; break;                      case 'D':                          status = SourceControlStatus.Deleted; break;                      case 'I':                          status = SourceControlStatus.NotControlled; break;                      case 'M':                          status = SourceControlStatus.CheckedOut; break;                      case 'R':                          status = SourceControlStatus.CheckedOut; break;                      case 'X':                          status = SourceControlStatus.NotControlled; break;                      case '?':                          status = SourceControlStatus.NotControlled; break;                      case '!':                          status = SourceControlStatus.FileDoesNotExist; break;                      case '~':                          status = SourceControlStatus.Unknown; break;                      default:                          throw new Exception("Unhandled status character '" + line[0] + "' in svn status.");                  }                    // path is the last item on each line (but may contains spaces)                  // note that folder paths here do *not* have an ending slash (thanks SVN)                  var fields = line.Substring(9).Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                  var numFields = fields.Length;                  var minFields = status != SourceControlStatus.NotControlled ? 4 : 1;                  if (numFields < minFields)                      throw new Exception("Should be at least " + minFields + " fields' the last one being the path to the repository item");                    var i = minFields - 1;                  var path = fields[i];                  while (++i < numFields)                      path += " " + fields[i];                    // add ending slash to folder paths that don't already have them                  Uri uri;                  if (Directory.Exists(path) && !path.EndsWith("\\") && !path.EndsWith("/"))                      uri = new Uri(path + "\\");                  else                      uri = new Uri(path);                    // apply the status to an existing FileInfo' or create a new one                  FileInfo info;                  if (!m_infoCache.TryGetValue(path' out info))                  {                      info = new FileInfo(uri' status);                      m_infoCache[path] = info;                  }                  else                      info.Status = status;                    // folders that aren't controlled don't get their child files listed in 'svn status'.                  // if there are any cached FileInfos for such child files' mark them as not controlled as well                  // (required when a to-be-added folder is reverted' and its children were also marked for add)                  if (info.Status == SourceControlStatus.NotControlled && info.Uri.LocalPath.EndsWith("\\"))                  {                      var childInfos = m_infoCache.Values.Where(fileInfo => !uri.Equals(fileInfo.Uri) && fileInfo.Uri.LocalPath.StartsWith(uri.LocalPath)).ToArray();                      childInfos.ForEach(childInfo => childInfo.Status = SourceControlStatus.NotControlled);                  }              }
Magic Number,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,GetRevisionLog,The following statement contains a magic number: while (line != null)              {                  // first line are fields' 2nd line is the message                  string[] tokens = line.Split(new[] { '|' });                  if (tokens.Length >= 3)                  {                      svnDataRow = svnDataTable.NewRow();                      string rev = tokens[0].Substring(1);                      decimal revVal;                      try                      {                          revVal = Decimal.Parse(rev);                      }                      catch                      {                          revVal = 0;                      }                      svnDataRow["revision"] = revVal;                      svnDataRow["author"] = tokens[1];                      svnDataRow["date"] = tokens[2];                      line = strReader.ReadLine();                      line = strReader.ReadLine();                      svnDataRow["description"] = line;                      svnDataTable.Rows.Add(svnDataRow);                  }                  line = strReader.ReadLine();                }
Magic Number,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,GetRevisionLog,The following statement contains a magic number: while (line != null)              {                  // first line are fields' 2nd line is the message                  string[] tokens = line.Split(new[] { '|' });                  if (tokens.Length >= 3)                  {                      svnDataRow = svnDataTable.NewRow();                      string rev = tokens[0].Substring(1);                      decimal revVal;                      try                      {                          revVal = Decimal.Parse(rev);                      }                      catch                      {                          revVal = 0;                      }                      svnDataRow["revision"] = revVal;                      svnDataRow["author"] = tokens[1];                      svnDataRow["date"] = tokens[2];                      line = strReader.ReadLine();                      line = strReader.ReadLine();                      svnDataRow["description"] = line;                      svnDataTable.Rows.Add(svnDataRow);                  }                  line = strReader.ReadLine();                }
Magic Number,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,GetCanonicalPath,The following statement contains a magic number: string drive = path.Substring(0' 2);
Magic Number,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,GetCanonicalPath,The following statement contains a magic number: StringBuilder sb = new StringBuilder(256);
Magic Number,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,GetCanonicalPath,The following statement contains a magic number: Kernel32.QueryDosDeviceW(drive' sb' 256);
Magic Number,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,GetCanonicalPath,The following statement contains a magic number: if (device.StartsWith(cSubstDrivePrefix))              {                  path = device.Substring(cSubstDrivePrefix.Length) + path.Substring(2);              }
Magic Number,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,SvnStatusLineToAbsoluteUri,The following statement contains a magic number: var firstPathField = isDirectory ? 6 : 7;
Magic Number,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,SvnStatusLineToAbsoluteUri,The following statement contains a magic number: var firstPathField = isDirectory ? 6 : 7;
Missing Default,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,Export,The following switch statement is missing a default case: switch (revision.Kind)                  {                      case SourceControlRevisionKind.Number:                          cmd += " -r";                          cmd += revision.Number.ToString();                          break;                      case SourceControlRevisionKind.Unspecified:                          break;                      case SourceControlRevisionKind.Base:                          cmd += " -r BASE";                          break;                      case SourceControlRevisionKind.Head:                          cmd += " -r HEAD";                          break;                      case SourceControlRevisionKind.Working:                          break;                      case SourceControlRevisionKind.Date:                          //input date specifiers wrapped in curly braces { }                          cmd += " -r {";                          cmd += revision.Date.ToString();                          cmd += "}";                          break;                      case SourceControlRevisionKind.ChangeList:                          throw new NotSupportedException("Changelist not supported in Subversion ");                  }
Missing Default,Atf.Subversion,SubversionService,C:\repos\SonyWWS_ATF\Framework\Atf.Subversion\SubversionService.cs,GetSourceControlStatusIcon,The following switch statement is missing a default case: switch (status)              {                  case SourceControlStatus.Added:                      result = m_statusImages[SVNFileAdd];                      break;                  case SourceControlStatus.CheckedIn:                      {                          result = m_statusImages[SVNFileSync];                          break;                      }                  case SourceControlStatus.CheckedOut:                      {                          result = m_statusImages[SVNModified];                          break;                      }                  case SourceControlStatus.NotControlled:                      // fall through to retun null                      break;              }
