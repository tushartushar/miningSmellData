Implementation smell,Namespace,Class,File,Method,Description
Long Method,FsmEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\FsmEditor\Editor.cs,Open,The method has 106 lines of code.
Long Method,FsmEditorSample,SchemaLoader,C:\repos\SonyWWS_ATF\Samples\FsmEditor\SchemaLoader.cs,OnSchemaSetLoaded,The method has 217 lines of code.
Complex Method,FsmEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\EditingContext.cs,Copy,Cyclomatic complexity of the method is 8
Long Parameter List,FsmEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\EditingContext.cs,Connect,The method has 5 parameters. Parameters: fromNode' fromRoute' toNode' toRoute' existingEdge
Long Parameter List,FsmEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\FsmEditor\Editor.cs,Editor,The method has 7 parameters. Parameters: controlHostService' commandService' contextRegistry' documentRegistry' documentService' prototypeLister' schemaLoader
Long Statement,FsmEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\EditingContext.cs,InsertTransition,The length of the statement  "                    ((IEditableGraph<State' Transition' NumberedRoute>)this).Connect(fromNode' new NumberedRoute()' toNode' new NumberedRoute()' null); " is 131.
Long Statement,FsmEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\FsmEditor\Editor.cs,Open,The length of the statement  "                var viewingAdapter = new ViewingAdapter(transformAdapter); // implements IViewingContext for framing or ensuring that items are visible " is 135.
Long Statement,FsmEditorSample,Program,C:\repos\SonyWWS_ATF\Samples\FsmEditor\Program.cs,Main,The length of the statement  "            Application.DoEvents(); // see http://www.codeproject.com/buglist/EnableVisualStylesBug.asp?df=100&forumid=25268&exp=0&select=984714 " is 132.
Long Statement,FsmEditorSample,Program,C:\repos\SonyWWS_ATF\Samples\FsmEditor\Program.cs,Main,The length of the statement  "                typeof(AutomationService)               // provides facilities to run an automated script using the .NET remoting service " is 121.
Magic Number,FsmEditorSample,ViewingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\ViewingContext.cs,SetCanvasBounds,The following statement contains a magic number: if (m_control != null &&                  m_control.Visible)              {                  Rectangle bounds = GetBounds();                    ITransformAdapter transformAdapter = m_control.As<ITransformAdapter>();                  bounds = GdiUtil.InverseTransform(transformAdapter.Transform' bounds);                    // make canvas twice as large as it needs to be to give the user some room'                  //  or at least as large as the control's client area.                  Rectangle clientRect = m_control.ClientRectangle;                  bounds.Width = Math.Max(bounds.Width * 2' clientRect.Width);                  bounds.Height = Math.Max(bounds.Height * 2' clientRect.Height);                    ICanvasAdapter canvasAdapter = m_control.As<ICanvasAdapter>();                  canvasAdapter.Bounds = new Rectangle(0' 0' bounds.Right' bounds.Bottom);              }
Magic Number,FsmEditorSample,ViewingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\ViewingContext.cs,SetCanvasBounds,The following statement contains a magic number: if (m_control != null &&                  m_control.Visible)              {                  Rectangle bounds = GetBounds();                    ITransformAdapter transformAdapter = m_control.As<ITransformAdapter>();                  bounds = GdiUtil.InverseTransform(transformAdapter.Transform' bounds);                    // make canvas twice as large as it needs to be to give the user some room'                  //  or at least as large as the control's client area.                  Rectangle clientRect = m_control.ClientRectangle;                  bounds.Width = Math.Max(bounds.Width * 2' clientRect.Width);                  bounds.Height = Math.Max(bounds.Height * 2' clientRect.Height);                    ICanvasAdapter canvasAdapter = m_control.As<ICanvasAdapter>();                  canvasAdapter.Bounds = new Rectangle(0' 0' bounds.Right' bounds.Bottom);              }
Magic Number,FsmEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\EditingContext.cs,InsertState,The following statement contains a magic number: size = size < 64 ? 64 : size;
Magic Number,FsmEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\EditingContext.cs,InsertState,The following statement contains a magic number: size = size < 64 ? 64 : size;
Magic Number,FsmEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\EditingContext.cs,InsertState,The following statement contains a magic number: int xCenter = xUpperLeft + size / 2;
Magic Number,FsmEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\EditingContext.cs,InsertState,The following statement contains a magic number: int yCenter = yUpperLeft + size / 2;
Magic Number,FsmEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\EditingContext.cs,Insert,The following statement contains a magic number: Point center = new Point(m_viewingContext.Control.Width / 2' m_viewingContext.Control.Height / 2);
Magic Number,FsmEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\FsmEditor\EditingContext.cs,Insert,The following statement contains a magic number: Point center = new Point(m_viewingContext.Control.Width / 2' m_viewingContext.Control.Height / 2);
Magic Number,FsmEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\FsmEditor\Editor.cs,Open,The following statement contains a magic number: if (node != null)              {                  // set up the AdaptableControl for editing FSMs                  var control = new D2dAdaptableControl();                  control.SuspendLayout();                    control.BackColor = SystemColors.ControlLight;                  control.AllowDrop = true;                    var transformAdapter = new TransformAdapter(); // required by several of the other adapters                  transformAdapter.UniformScale = true;                  transformAdapter.MinScale = new PointF(0.25f' 0.25f);                  transformAdapter.MaxScale = new PointF(4' 4);                    var viewingAdapter = new ViewingAdapter(transformAdapter); // implements IViewingContext for framing or ensuring that items are visible                    var canvasAdapter = new CanvasAdapter(); // implements a bounded canvas to limit scrolling                    var autoTranslateAdapter = // implements auto translate when the user drags out of control's client area                      new AutoTranslateAdapter(transformAdapter);                  var mouseTransformManipulator = // implements mouse drag translate and scale                      new MouseTransformManipulator(transformAdapter);                  var mouseWheelManipulator = // implements mouse wheel scale                      new MouseWheelManipulator(transformAdapter);                  var scrollbarAdapter = // adds scroll bars to control' driven by canvas and transform                      new ScrollbarAdapter(transformAdapter' canvasAdapter);                    var hoverAdapter = new HoverAdapter(); // add hover events over pickable items                  hoverAdapter.HoverStarted += control_HoverStarted;                  hoverAdapter.HoverStopped += control_HoverStopped;                    var annotationAdaptor = new D2dAnnotationAdapter(m_theme); // display annotations under diagram                    var fsmAdapter = // adapt control to allow binding to graph data                      new D2dGraphAdapter<State' Transition' NumberedRoute>(m_fsmRenderer' transformAdapter);                    var fsmStateEditAdapter = // adapt control to allow state editing                      new D2dGraphNodeEditAdapter<State' Transition' NumberedRoute>(m_fsmRenderer' fsmAdapter' transformAdapter);                    var fsmTransitionEditAdapter = // adapt control to allow transition                      new D2dGraphEdgeEditAdapter<State' Transition' NumberedRoute>(m_fsmRenderer' fsmAdapter' transformAdapter);                    var mouseLayoutManipulator = new MouseLayoutManipulator(transformAdapter);                    // apply adapters to control; ordering is from back to front' that is' the first adapter                  //  will be conceptually underneath all the others. Mouse and keyboard events are fed to                  //  the adapters in the reverse order' so it all makes sense to the user.                  control.Adapt(                      hoverAdapter'                      scrollbarAdapter'                      autoTranslateAdapter'                      new RectangleDragSelector()'                      transformAdapter'                      viewingAdapter'                      canvasAdapter'                      mouseTransformManipulator'                      mouseWheelManipulator'                      new KeyboardGraphNavigator<State' Transition' NumberedRoute>()'                      //new GridAdapter()'                      annotationAdaptor'                      fsmAdapter'                      fsmStateEditAdapter'                      fsmTransitionEditAdapter'                      new LabelEditAdapter()'                      new SelectionAdapter()'                      mouseLayoutManipulator'                      new DragDropAdapter(m_statusService)'                      new ContextMenuAdapter(m_commandService' m_contextMenuCommandProviders)                      );                    control.ResumeLayout();                    // associate the control with the viewing context; other adapters use this                  //  adapter for viewing' layout and calculating bounds.                  ViewingContext viewingContext = node.Cast<ViewingContext>();                  viewingContext.Control = control;                    // set document URI                  document = node.As<Document>();                  ControlInfo controlInfo = new ControlInfo(fileName' filePath' StandardControlGroup.Center);                    //Set IsDocument to true to prevent exception in command service if two files with the                  //  same name' but in different directories' are opened.                  controlInfo.IsDocument = true;                    document.ControlInfo = controlInfo;                  document.Uri = uri;                    // now that the data is complete' initialize the rest of the extensions to the Dom data;                  //  this is needed for adapters such as validators' which may not be referenced anywhere                  //  but still need to be initialized.                  node.InitializeExtensions();                    // set control's context to main editing context                  EditingContext editingContext = node.Cast<EditingContext>();                  control.Context = editingContext;                    // show the FSM control                  m_controlHostService.RegisterControl(control' controlInfo' this);              }
Magic Number,FsmEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\FsmEditor\Editor.cs,Open,The following statement contains a magic number: if (node != null)              {                  // set up the AdaptableControl for editing FSMs                  var control = new D2dAdaptableControl();                  control.SuspendLayout();                    control.BackColor = SystemColors.ControlLight;                  control.AllowDrop = true;                    var transformAdapter = new TransformAdapter(); // required by several of the other adapters                  transformAdapter.UniformScale = true;                  transformAdapter.MinScale = new PointF(0.25f' 0.25f);                  transformAdapter.MaxScale = new PointF(4' 4);                    var viewingAdapter = new ViewingAdapter(transformAdapter); // implements IViewingContext for framing or ensuring that items are visible                    var canvasAdapter = new CanvasAdapter(); // implements a bounded canvas to limit scrolling                    var autoTranslateAdapter = // implements auto translate when the user drags out of control's client area                      new AutoTranslateAdapter(transformAdapter);                  var mouseTransformManipulator = // implements mouse drag translate and scale                      new MouseTransformManipulator(transformAdapter);                  var mouseWheelManipulator = // implements mouse wheel scale                      new MouseWheelManipulator(transformAdapter);                  var scrollbarAdapter = // adds scroll bars to control' driven by canvas and transform                      new ScrollbarAdapter(transformAdapter' canvasAdapter);                    var hoverAdapter = new HoverAdapter(); // add hover events over pickable items                  hoverAdapter.HoverStarted += control_HoverStarted;                  hoverAdapter.HoverStopped += control_HoverStopped;                    var annotationAdaptor = new D2dAnnotationAdapter(m_theme); // display annotations under diagram                    var fsmAdapter = // adapt control to allow binding to graph data                      new D2dGraphAdapter<State' Transition' NumberedRoute>(m_fsmRenderer' transformAdapter);                    var fsmStateEditAdapter = // adapt control to allow state editing                      new D2dGraphNodeEditAdapter<State' Transition' NumberedRoute>(m_fsmRenderer' fsmAdapter' transformAdapter);                    var fsmTransitionEditAdapter = // adapt control to allow transition                      new D2dGraphEdgeEditAdapter<State' Transition' NumberedRoute>(m_fsmRenderer' fsmAdapter' transformAdapter);                    var mouseLayoutManipulator = new MouseLayoutManipulator(transformAdapter);                    // apply adapters to control; ordering is from back to front' that is' the first adapter                  //  will be conceptually underneath all the others. Mouse and keyboard events are fed to                  //  the adapters in the reverse order' so it all makes sense to the user.                  control.Adapt(                      hoverAdapter'                      scrollbarAdapter'                      autoTranslateAdapter'                      new RectangleDragSelector()'                      transformAdapter'                      viewingAdapter'                      canvasAdapter'                      mouseTransformManipulator'                      mouseWheelManipulator'                      new KeyboardGraphNavigator<State' Transition' NumberedRoute>()'                      //new GridAdapter()'                      annotationAdaptor'                      fsmAdapter'                      fsmStateEditAdapter'                      fsmTransitionEditAdapter'                      new LabelEditAdapter()'                      new SelectionAdapter()'                      mouseLayoutManipulator'                      new DragDropAdapter(m_statusService)'                      new ContextMenuAdapter(m_commandService' m_contextMenuCommandProviders)                      );                    control.ResumeLayout();                    // associate the control with the viewing context; other adapters use this                  //  adapter for viewing' layout and calculating bounds.                  ViewingContext viewingContext = node.Cast<ViewingContext>();                  viewingContext.Control = control;                    // set document URI                  document = node.As<Document>();                  ControlInfo controlInfo = new ControlInfo(fileName' filePath' StandardControlGroup.Center);                    //Set IsDocument to true to prevent exception in command service if two files with the                  //  same name' but in different directories' are opened.                  controlInfo.IsDocument = true;                    document.ControlInfo = controlInfo;                  document.Uri = uri;                    // now that the data is complete' initialize the rest of the extensions to the Dom data;                  //  this is needed for adapters such as validators' which may not be referenced anywhere                  //  but still need to be initialized.                  node.InitializeExtensions();                    // set control's context to main editing context                  EditingContext editingContext = node.Cast<EditingContext>();                  control.Context = editingContext;                    // show the FSM control                  m_controlHostService.RegisterControl(control' controlInfo' this);              }
Magic Number,FsmEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\FsmEditor\Editor.cs,GetHoverForm,The following statement contains a magic number: if (result != null)              {                  Point p = Control.MousePosition;                  result.Location = new Point(p.X - (result.Width + 12)' p.Y + 12);                  result.ShowWithoutFocus();              }
Magic Number,FsmEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\FsmEditor\Editor.cs,GetHoverForm,The following statement contains a magic number: if (result != null)              {                  Point p = Control.MousePosition;                  result.Location = new Point(p.X - (result.Width + 12)' p.Y + 12);                  result.ShowWithoutFocus();              }
