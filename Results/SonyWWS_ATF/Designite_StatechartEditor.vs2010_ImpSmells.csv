Implementation smell,Namespace,Class,File,Method,Description
Long Method,StatechartEditorSample,SchemaLoader,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\SchemaLoader.cs,OnSchemaSetLoaded,The method has 151 lines of code.
Long Method,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,Open,The method has 102 lines of code.
Complex Method,StatechartEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\EditingContext.cs,Copy,Cyclomatic complexity of the method is 9
Long Parameter List,StatechartEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\EditingContext.cs,Connect,The method has 5 parameters. Parameters: fromNode' fromRoute' toNode' toRoute' existingEdge
Long Parameter List,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,Editor,The method has 7 parameters. Parameters: controlHostService' commandService' contextRegistry' documentRegistry' documentService' schemaLoader' prototypeLister
Long Identifier,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,Open,The length of the parameter statechartTransitionEditAdapter is 31.
Long Statement,StatechartEditorSample,Program,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Program.cs,Main,The length of the statement  "            Application.DoEvents(); // see http://www.codeproject.com/buglist/EnableVisualStylesBug.asp?df=100&forumid=25268&exp=0&select=984714 " is 132.
Long Statement,StatechartEditorSample,Program,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Program.cs,Main,The length of the statement  "                typeof(OutputService)'                  // rich text box for displaying error and warning messages. Implements IOutputWriter. " is 125.
Long Statement,StatechartEditorSample,Program,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Program.cs,Main,The length of the statement  "                typeof(AutomationService)               // provides facilities to run an automated script using the .NET remoting service " is 121.
Long Statement,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,Open,The length of the statement  "                    new D2dGraphNodeEditAdapter<StateBase' Transition' BoundaryRoute>(m_statechartRenderer' statechartAdapter' transformAdapter); " is 125.
Long Statement,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,Open,The length of the statement  "                    new D2dGraphEdgeEditAdapter<StateBase' Transition' BoundaryRoute>(m_statechartRenderer' statechartAdapter' transformAdapter); " is 125.
Magic Number,StatechartEditorSample,BoundsValidator,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\BoundsValidator.cs,Layout,The following statement contains a magic number: newBounds.Width = Math.Max(newBounds.Width' 64);
Magic Number,StatechartEditorSample,BoundsValidator,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\BoundsValidator.cs,Layout,The following statement contains a magic number: newBounds.Height = Math.Max(newBounds.Height' 64);
Magic Number,StatechartEditorSample,ViewingContext,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\ViewingContext.cs,SetCanvasBounds,The following statement contains a magic number: if (m_control != null &&                  m_control.Visible)              {                  Rectangle bounds = GetBounds();                    ITransformAdapter transformAdapter = m_control.As<ITransformAdapter>();                  bounds = GdiUtil.InverseTransform(transformAdapter.Transform' bounds);                    // make canvas twice as large as it needs to be to give the user some room'                  //  or at least as large as the control's client area.                  Rectangle clientRect = m_control.ClientRectangle;                  bounds.Width = Math.Max(bounds.Width * 2' clientRect.Width);                  bounds.Height = Math.Max(bounds.Height * 2' clientRect.Height);                    ICanvasAdapter canvasAdapter = m_control.As<ICanvasAdapter>();                  canvasAdapter.Bounds = new Rectangle(0' 0' bounds.Right' bounds.Bottom);              }
Magic Number,StatechartEditorSample,ViewingContext,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\ViewingContext.cs,SetCanvasBounds,The following statement contains a magic number: if (m_control != null &&                  m_control.Visible)              {                  Rectangle bounds = GetBounds();                    ITransformAdapter transformAdapter = m_control.As<ITransformAdapter>();                  bounds = GdiUtil.InverseTransform(transformAdapter.Transform' bounds);                    // make canvas twice as large as it needs to be to give the user some room'                  //  or at least as large as the control's client area.                  Rectangle clientRect = m_control.ClientRectangle;                  bounds.Width = Math.Max(bounds.Width * 2' clientRect.Width);                  bounds.Height = Math.Max(bounds.Height * 2' clientRect.Height);                    ICanvasAdapter canvasAdapter = m_control.As<ICanvasAdapter>();                  canvasAdapter.Bounds = new Rectangle(0' 0' bounds.Right' bounds.Bottom);              }
Magic Number,StatechartEditorSample,State,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\State.cs,OnNodeSet,The following statement contains a magic number: if (sz.Width == 0 || sz.Height == 0)              {                  this.Size = new Size(64' 64);              }
Magic Number,StatechartEditorSample,State,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\State.cs,OnNodeSet,The following statement contains a magic number: if (sz.Width == 0 || sz.Height == 0)              {                  this.Size = new Size(64' 64);              }
Magic Number,StatechartEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\EditingContext.cs,Center,The following statement contains a magic number: Point offset = new Point(                  center.X - (bounds.Left + bounds.Width / 2)'                  center.Y - (bounds.Top + bounds.Height / 2));
Magic Number,StatechartEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\EditingContext.cs,Center,The following statement contains a magic number: Point offset = new Point(                  center.X - (bounds.Left + bounds.Width / 2)'                  center.Y - (bounds.Top + bounds.Height / 2));
Magic Number,StatechartEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\EditingContext.cs,Insert,The following statement contains a magic number: if (dragDropAdapter != null && dragDropAdapter.IsDropping)              {                  insertionPoint = FindStatechartUnder(dragDropAdapter.MousePosition);                  center = GdiUtil.InverseTransform(transform' dragDropAdapter.MousePosition);              }              else // paste into last selected state              {                  State state = Selection.GetLastSelected<State>();                  if (state != null)                  {                      insertionPoint = GetStatechart(state);                      Rectangle stateBounds = m_viewingContext.GetBounds(state);                      center = new Point(                              stateBounds.X + stateBounds.Width / 2'                              stateBounds.Y + stateBounds.Height / 2);                      center = GdiUtil.InverseTransform(transform' center);                  }                  else                  {                      center = GdiUtil.InverseTransform(transform'                           new Point(                               control.Width / 2'                               control.Height / 2));                  }              }
Magic Number,StatechartEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\EditingContext.cs,Insert,The following statement contains a magic number: if (dragDropAdapter != null && dragDropAdapter.IsDropping)              {                  insertionPoint = FindStatechartUnder(dragDropAdapter.MousePosition);                  center = GdiUtil.InverseTransform(transform' dragDropAdapter.MousePosition);              }              else // paste into last selected state              {                  State state = Selection.GetLastSelected<State>();                  if (state != null)                  {                      insertionPoint = GetStatechart(state);                      Rectangle stateBounds = m_viewingContext.GetBounds(state);                      center = new Point(                              stateBounds.X + stateBounds.Width / 2'                              stateBounds.Y + stateBounds.Height / 2);                      center = GdiUtil.InverseTransform(transform' center);                  }                  else                  {                      center = GdiUtil.InverseTransform(transform'                           new Point(                               control.Width / 2'                               control.Height / 2));                  }              }
Magic Number,StatechartEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\EditingContext.cs,Insert,The following statement contains a magic number: if (dragDropAdapter != null && dragDropAdapter.IsDropping)              {                  insertionPoint = FindStatechartUnder(dragDropAdapter.MousePosition);                  center = GdiUtil.InverseTransform(transform' dragDropAdapter.MousePosition);              }              else // paste into last selected state              {                  State state = Selection.GetLastSelected<State>();                  if (state != null)                  {                      insertionPoint = GetStatechart(state);                      Rectangle stateBounds = m_viewingContext.GetBounds(state);                      center = new Point(                              stateBounds.X + stateBounds.Width / 2'                              stateBounds.Y + stateBounds.Height / 2);                      center = GdiUtil.InverseTransform(transform' center);                  }                  else                  {                      center = GdiUtil.InverseTransform(transform'                           new Point(                               control.Width / 2'                               control.Height / 2));                  }              }
Magic Number,StatechartEditorSample,EditingContext,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\EditingContext.cs,Insert,The following statement contains a magic number: if (dragDropAdapter != null && dragDropAdapter.IsDropping)              {                  insertionPoint = FindStatechartUnder(dragDropAdapter.MousePosition);                  center = GdiUtil.InverseTransform(transform' dragDropAdapter.MousePosition);              }              else // paste into last selected state              {                  State state = Selection.GetLastSelected<State>();                  if (state != null)                  {                      insertionPoint = GetStatechart(state);                      Rectangle stateBounds = m_viewingContext.GetBounds(state);                      center = new Point(                              stateBounds.X + stateBounds.Width / 2'                              stateBounds.Y + stateBounds.Height / 2);                      center = GdiUtil.InverseTransform(transform' center);                  }                  else                  {                      center = GdiUtil.InverseTransform(transform'                           new Point(                               control.Width / 2'                               control.Height / 2));                  }              }
Magic Number,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,Open,The following statement contains a magic number: if (node != null)              {                  // AdaptableControl was registered as an extension by the schema loader                  var control = new D2dAdaptableControl();                  control.SuspendLayout();                    control.BackColor = SystemColors.ControlLight;                  control.AllowDrop = true;                    var transformAdapter = new TransformAdapter();                  transformAdapter.UniformScale = true;                  transformAdapter.MinScale = new PointF(0.25f' 0.25f);                  transformAdapter.MaxScale = new PointF(4' 4);                  var viewingAdapter = new ViewingAdapter(transformAdapter);                  var canvasAdapter = new CanvasAdapter(new Rectangle(0' 0' 1000' 1000));                    var autoTranslateAdapter = new AutoTranslateAdapter(transformAdapter);                  var mouseTransformManipulator = new MouseTransformManipulator(transformAdapter);                  var mouseWheelManipulator = new MouseWheelManipulator(transformAdapter);                    var gridAdapter = new D2dGridAdapter();                  gridAdapter.Enabled = false;                  gridAdapter.Visible = true;                    var scrollbarAdapter = new ScrollbarAdapter(transformAdapter' canvasAdapter);                    var hoverAdapter = new HoverAdapter();                  hoverAdapter.HoverStarted += control_HoverStarted;                  hoverAdapter.HoverStopped += control_HoverStopped;                    var annotationAdaptor =                      // display annotations under diagram                      new D2dAnnotationAdapter(m_diagramTheme);                    var statechartAdapter = new StatechartGraphAdapter(m_statechartRenderer' transformAdapter);                    var statechartStateEditAdapter =                      new D2dGraphNodeEditAdapter<StateBase' Transition' BoundaryRoute>(m_statechartRenderer' statechartAdapter' transformAdapter);                    var statechartTransitionEditAdapter =                      new D2dGraphEdgeEditAdapter<StateBase' Transition' BoundaryRoute>(m_statechartRenderer' statechartAdapter' transformAdapter);                    var mouseLayoutManipulator = new MouseLayoutManipulator(transformAdapter);                    control.Adapt(                      hoverAdapter'                      scrollbarAdapter'                      autoTranslateAdapter'                      new RectangleDragSelector()'                      transformAdapter'                      viewingAdapter'                      canvasAdapter'                      mouseTransformManipulator'                      mouseWheelManipulator'                      new KeyboardGraphNavigator<StateBase' Transition' BoundaryRoute>()'                      gridAdapter'                      annotationAdaptor'                      statechartAdapter'                      statechartStateEditAdapter'                      statechartTransitionEditAdapter'                      new SelectionAdapter()'                      mouseLayoutManipulator'                      new LabelEditAdapter()'                      new DragDropAdapter(m_statusService)'                      new ContextMenuAdapter(m_commandService' m_contextMenuCommandProviders)                      );                    control.ResumeLayout();                    // associate the control with the data; several of the adapters need the                  //  control for viewing' layout and calculating bounds.                  var viewingContext = node.Cast<ViewingContext>();                  viewingContext.Control = control;                    var boundsValidator = node.Cast<BoundsValidator>();                  boundsValidator.StatechartRenderer = m_statechartRenderer;                    statechartDocument = node.Cast<Document>();                  string fileName = Path.GetFileName(filePath);                  var controlInfo = new ControlInfo(fileName' filePath' StandardControlGroup.Center);                                    //Set IsDocument to true to prevent exception in command service if two files with the                  //  same name' but in different directories' are opened.                  controlInfo.IsDocument = true;                    statechartDocument.ControlInfo = controlInfo;                  statechartDocument.Uri = uri;                    // now that the data is complete' initialize the rest of the extensions to the Dom data;                  //  this is needed for adapters such as validators' which may not be referenced anywhere                  //  but still need to be instantiated.                  node.InitializeExtensions();                    // set control's context to main editing context                  var context = node.Cast<EditingContext>();                  control.Context = context;                    m_controlHostService.RegisterControl(control' controlInfo' this);              }
Magic Number,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,Open,The following statement contains a magic number: if (node != null)              {                  // AdaptableControl was registered as an extension by the schema loader                  var control = new D2dAdaptableControl();                  control.SuspendLayout();                    control.BackColor = SystemColors.ControlLight;                  control.AllowDrop = true;                    var transformAdapter = new TransformAdapter();                  transformAdapter.UniformScale = true;                  transformAdapter.MinScale = new PointF(0.25f' 0.25f);                  transformAdapter.MaxScale = new PointF(4' 4);                  var viewingAdapter = new ViewingAdapter(transformAdapter);                  var canvasAdapter = new CanvasAdapter(new Rectangle(0' 0' 1000' 1000));                    var autoTranslateAdapter = new AutoTranslateAdapter(transformAdapter);                  var mouseTransformManipulator = new MouseTransformManipulator(transformAdapter);                  var mouseWheelManipulator = new MouseWheelManipulator(transformAdapter);                    var gridAdapter = new D2dGridAdapter();                  gridAdapter.Enabled = false;                  gridAdapter.Visible = true;                    var scrollbarAdapter = new ScrollbarAdapter(transformAdapter' canvasAdapter);                    var hoverAdapter = new HoverAdapter();                  hoverAdapter.HoverStarted += control_HoverStarted;                  hoverAdapter.HoverStopped += control_HoverStopped;                    var annotationAdaptor =                      // display annotations under diagram                      new D2dAnnotationAdapter(m_diagramTheme);                    var statechartAdapter = new StatechartGraphAdapter(m_statechartRenderer' transformAdapter);                    var statechartStateEditAdapter =                      new D2dGraphNodeEditAdapter<StateBase' Transition' BoundaryRoute>(m_statechartRenderer' statechartAdapter' transformAdapter);                    var statechartTransitionEditAdapter =                      new D2dGraphEdgeEditAdapter<StateBase' Transition' BoundaryRoute>(m_statechartRenderer' statechartAdapter' transformAdapter);                    var mouseLayoutManipulator = new MouseLayoutManipulator(transformAdapter);                    control.Adapt(                      hoverAdapter'                      scrollbarAdapter'                      autoTranslateAdapter'                      new RectangleDragSelector()'                      transformAdapter'                      viewingAdapter'                      canvasAdapter'                      mouseTransformManipulator'                      mouseWheelManipulator'                      new KeyboardGraphNavigator<StateBase' Transition' BoundaryRoute>()'                      gridAdapter'                      annotationAdaptor'                      statechartAdapter'                      statechartStateEditAdapter'                      statechartTransitionEditAdapter'                      new SelectionAdapter()'                      mouseLayoutManipulator'                      new LabelEditAdapter()'                      new DragDropAdapter(m_statusService)'                      new ContextMenuAdapter(m_commandService' m_contextMenuCommandProviders)                      );                    control.ResumeLayout();                    // associate the control with the data; several of the adapters need the                  //  control for viewing' layout and calculating bounds.                  var viewingContext = node.Cast<ViewingContext>();                  viewingContext.Control = control;                    var boundsValidator = node.Cast<BoundsValidator>();                  boundsValidator.StatechartRenderer = m_statechartRenderer;                    statechartDocument = node.Cast<Document>();                  string fileName = Path.GetFileName(filePath);                  var controlInfo = new ControlInfo(fileName' filePath' StandardControlGroup.Center);                                    //Set IsDocument to true to prevent exception in command service if two files with the                  //  same name' but in different directories' are opened.                  controlInfo.IsDocument = true;                    statechartDocument.ControlInfo = controlInfo;                  statechartDocument.Uri = uri;                    // now that the data is complete' initialize the rest of the extensions to the Dom data;                  //  this is needed for adapters such as validators' which may not be referenced anywhere                  //  but still need to be instantiated.                  node.InitializeExtensions();                    // set control's context to main editing context                  var context = node.Cast<EditingContext>();                  control.Context = context;                    m_controlHostService.RegisterControl(control' controlInfo' this);              }
Magic Number,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,Open,The following statement contains a magic number: if (node != null)              {                  // AdaptableControl was registered as an extension by the schema loader                  var control = new D2dAdaptableControl();                  control.SuspendLayout();                    control.BackColor = SystemColors.ControlLight;                  control.AllowDrop = true;                    var transformAdapter = new TransformAdapter();                  transformAdapter.UniformScale = true;                  transformAdapter.MinScale = new PointF(0.25f' 0.25f);                  transformAdapter.MaxScale = new PointF(4' 4);                  var viewingAdapter = new ViewingAdapter(transformAdapter);                  var canvasAdapter = new CanvasAdapter(new Rectangle(0' 0' 1000' 1000));                    var autoTranslateAdapter = new AutoTranslateAdapter(transformAdapter);                  var mouseTransformManipulator = new MouseTransformManipulator(transformAdapter);                  var mouseWheelManipulator = new MouseWheelManipulator(transformAdapter);                    var gridAdapter = new D2dGridAdapter();                  gridAdapter.Enabled = false;                  gridAdapter.Visible = true;                    var scrollbarAdapter = new ScrollbarAdapter(transformAdapter' canvasAdapter);                    var hoverAdapter = new HoverAdapter();                  hoverAdapter.HoverStarted += control_HoverStarted;                  hoverAdapter.HoverStopped += control_HoverStopped;                    var annotationAdaptor =                      // display annotations under diagram                      new D2dAnnotationAdapter(m_diagramTheme);                    var statechartAdapter = new StatechartGraphAdapter(m_statechartRenderer' transformAdapter);                    var statechartStateEditAdapter =                      new D2dGraphNodeEditAdapter<StateBase' Transition' BoundaryRoute>(m_statechartRenderer' statechartAdapter' transformAdapter);                    var statechartTransitionEditAdapter =                      new D2dGraphEdgeEditAdapter<StateBase' Transition' BoundaryRoute>(m_statechartRenderer' statechartAdapter' transformAdapter);                    var mouseLayoutManipulator = new MouseLayoutManipulator(transformAdapter);                    control.Adapt(                      hoverAdapter'                      scrollbarAdapter'                      autoTranslateAdapter'                      new RectangleDragSelector()'                      transformAdapter'                      viewingAdapter'                      canvasAdapter'                      mouseTransformManipulator'                      mouseWheelManipulator'                      new KeyboardGraphNavigator<StateBase' Transition' BoundaryRoute>()'                      gridAdapter'                      annotationAdaptor'                      statechartAdapter'                      statechartStateEditAdapter'                      statechartTransitionEditAdapter'                      new SelectionAdapter()'                      mouseLayoutManipulator'                      new LabelEditAdapter()'                      new DragDropAdapter(m_statusService)'                      new ContextMenuAdapter(m_commandService' m_contextMenuCommandProviders)                      );                    control.ResumeLayout();                    // associate the control with the data; several of the adapters need the                  //  control for viewing' layout and calculating bounds.                  var viewingContext = node.Cast<ViewingContext>();                  viewingContext.Control = control;                    var boundsValidator = node.Cast<BoundsValidator>();                  boundsValidator.StatechartRenderer = m_statechartRenderer;                    statechartDocument = node.Cast<Document>();                  string fileName = Path.GetFileName(filePath);                  var controlInfo = new ControlInfo(fileName' filePath' StandardControlGroup.Center);                                    //Set IsDocument to true to prevent exception in command service if two files with the                  //  same name' but in different directories' are opened.                  controlInfo.IsDocument = true;                    statechartDocument.ControlInfo = controlInfo;                  statechartDocument.Uri = uri;                    // now that the data is complete' initialize the rest of the extensions to the Dom data;                  //  this is needed for adapters such as validators' which may not be referenced anywhere                  //  but still need to be instantiated.                  node.InitializeExtensions();                    // set control's context to main editing context                  var context = node.Cast<EditingContext>();                  control.Context = context;                    m_controlHostService.RegisterControl(control' controlInfo' this);              }
Magic Number,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,Open,The following statement contains a magic number: if (node != null)              {                  // AdaptableControl was registered as an extension by the schema loader                  var control = new D2dAdaptableControl();                  control.SuspendLayout();                    control.BackColor = SystemColors.ControlLight;                  control.AllowDrop = true;                    var transformAdapter = new TransformAdapter();                  transformAdapter.UniformScale = true;                  transformAdapter.MinScale = new PointF(0.25f' 0.25f);                  transformAdapter.MaxScale = new PointF(4' 4);                  var viewingAdapter = new ViewingAdapter(transformAdapter);                  var canvasAdapter = new CanvasAdapter(new Rectangle(0' 0' 1000' 1000));                    var autoTranslateAdapter = new AutoTranslateAdapter(transformAdapter);                  var mouseTransformManipulator = new MouseTransformManipulator(transformAdapter);                  var mouseWheelManipulator = new MouseWheelManipulator(transformAdapter);                    var gridAdapter = new D2dGridAdapter();                  gridAdapter.Enabled = false;                  gridAdapter.Visible = true;                    var scrollbarAdapter = new ScrollbarAdapter(transformAdapter' canvasAdapter);                    var hoverAdapter = new HoverAdapter();                  hoverAdapter.HoverStarted += control_HoverStarted;                  hoverAdapter.HoverStopped += control_HoverStopped;                    var annotationAdaptor =                      // display annotations under diagram                      new D2dAnnotationAdapter(m_diagramTheme);                    var statechartAdapter = new StatechartGraphAdapter(m_statechartRenderer' transformAdapter);                    var statechartStateEditAdapter =                      new D2dGraphNodeEditAdapter<StateBase' Transition' BoundaryRoute>(m_statechartRenderer' statechartAdapter' transformAdapter);                    var statechartTransitionEditAdapter =                      new D2dGraphEdgeEditAdapter<StateBase' Transition' BoundaryRoute>(m_statechartRenderer' statechartAdapter' transformAdapter);                    var mouseLayoutManipulator = new MouseLayoutManipulator(transformAdapter);                    control.Adapt(                      hoverAdapter'                      scrollbarAdapter'                      autoTranslateAdapter'                      new RectangleDragSelector()'                      transformAdapter'                      viewingAdapter'                      canvasAdapter'                      mouseTransformManipulator'                      mouseWheelManipulator'                      new KeyboardGraphNavigator<StateBase' Transition' BoundaryRoute>()'                      gridAdapter'                      annotationAdaptor'                      statechartAdapter'                      statechartStateEditAdapter'                      statechartTransitionEditAdapter'                      new SelectionAdapter()'                      mouseLayoutManipulator'                      new LabelEditAdapter()'                      new DragDropAdapter(m_statusService)'                      new ContextMenuAdapter(m_commandService' m_contextMenuCommandProviders)                      );                    control.ResumeLayout();                    // associate the control with the data; several of the adapters need the                  //  control for viewing' layout and calculating bounds.                  var viewingContext = node.Cast<ViewingContext>();                  viewingContext.Control = control;                    var boundsValidator = node.Cast<BoundsValidator>();                  boundsValidator.StatechartRenderer = m_statechartRenderer;                    statechartDocument = node.Cast<Document>();                  string fileName = Path.GetFileName(filePath);                  var controlInfo = new ControlInfo(fileName' filePath' StandardControlGroup.Center);                                    //Set IsDocument to true to prevent exception in command service if two files with the                  //  same name' but in different directories' are opened.                  controlInfo.IsDocument = true;                    statechartDocument.ControlInfo = controlInfo;                  statechartDocument.Uri = uri;                    // now that the data is complete' initialize the rest of the extensions to the Dom data;                  //  this is needed for adapters such as validators' which may not be referenced anywhere                  //  but still need to be instantiated.                  node.InitializeExtensions();                    // set control's context to main editing context                  var context = node.Cast<EditingContext>();                  control.Context = context;                    m_controlHostService.RegisterControl(control' controlInfo' this);              }
Magic Number,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,GetHoverForm,The following statement contains a magic number: if (result != null)              {                  Point p = Control.MousePosition;                  result.Location = new Point(p.X - (result.Width + 12)' p.Y + 12);                  result.ShowWithoutFocus();              }
Magic Number,StatechartEditorSample,Editor,C:\repos\SonyWWS_ATF\Samples\StatechartEditor\Editor.cs,GetHoverForm,The following statement contains a magic number: if (result != null)              {                  Point p = Control.MousePosition;                  result.Location = new Point(p.X - (result.Width + 12)' p.Y + 12);                  result.ShowWithoutFocus();              }
