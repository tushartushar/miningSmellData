Implementation smell,Namespace,Class,File,Method,Description
Long Method,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,LaunchProcessInNonZeroSession,The method has 156 lines of code.
Complex Method,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,LaunchProcessInNonZeroSession,Cyclomatic complexity of the method is 12
Long Parameter List,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,CreateProcessAsUser,The method has 11 parameters. Parameters: hToken' lpApplicationName' lpCommandLine' lpProcessAttributes' lpThreadAttributes' bInheritHandle' dwCreationFlags' lpEnvironment' lpCurrentDirectory' lpStartupInfo' lpProcessInformation
Long Parameter List,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,ReadFile,The method has 5 parameters. Parameters: hFile' lpBuffer' nNumberOfBytesToRead' lpNumberOfBytesRead' lpOverlapped
Long Parameter List,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,WriteFile,The method has 5 parameters. Parameters: hFile' lpBuffer' nNumberOfBytesToRead' lpNumberOfBytesRead' lpOverlapped
Long Parameter List,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,DuplicateTokenEx,The method has 6 parameters. Parameters: existingTokenHandle' dwDesiredAccess' lpThreadAttributes' tokenType' impersonationLevel' duplicateTokenHandle
Long Statement,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,LaunchProcessInNonZeroSession,The length of the statement  "            //This is the magic that copies this process's permissions to the new process' and makes it launch in a user (non-zero) session " is 127.
Long Statement,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,LaunchProcessInNonZeroSession,The length of the statement  "            if (!DuplicateTokenEx(hPToken' MAXIMUM_ALLOWED' ref sa' (int)SECURITY_IMPERSONATION_LEVEL.SecurityIdentification' (int)TOKEN_TYPE.TokenPrimary' ref hUserTokenDup)) " is 163.
Long Statement,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,LaunchProcessInNonZeroSession,The length of the statement  "            si.lpDesktop = @"winsta0\default"; // interactive window station parameter; basically this indicates that the process created can display a GUI on the desktop " is 158.
Long Statement,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,LaunchProcessInNonZeroSession,The length of the statement  "            bool result = CreateProcessAsUser(hUserTokenDup'        // client's access token (the "magic").  Set this to IntPtr.Zero if testing locally and don't want to bother with that magic " is 180.
Magic Number,ProcessLauncher,SpecialLauncher,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\SpecialLauncher.cs,LaunchProcessInNonZeroSession,The following statement contains a magic number: const int bufSize = 1024;
Magic Number,ProcessLauncher,Program,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\Program.cs,LaunchProcessNormally,The following statement contains a magic number: if (!newProcess.WaitForExit(1000 * 60 *120))              {                  Console.WriteLine("Process {0} timed out after 2 hours"' path);                  newProcess.Kill();                  return 1;              }
Magic Number,ProcessLauncher,Program,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\Program.cs,LaunchProcessNormally,The following statement contains a magic number: if (!newProcess.WaitForExit(1000 * 60 *120))              {                  Console.WriteLine("Process {0} timed out after 2 hours"' path);                  newProcess.Kill();                  return 1;              }
Magic Number,ProcessLauncher,Program,C:\repos\SonyWWS_ATF\Test\ProcessLauncher\Program.cs,LaunchProcessNormally,The following statement contains a magic number: if (!newProcess.WaitForExit(1000 * 60 *120))              {                  Console.WriteLine("Process {0} timed out after 2 hours"' path);                  newProcess.Kill();                  return 1;              }
