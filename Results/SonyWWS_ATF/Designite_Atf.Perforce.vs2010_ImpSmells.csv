Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sce.Atf.Perforce,Connections,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\Connections.cs,InitializeComponent,The method has 123 lines of code.
Complex Method,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,ConfigureConnection,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Perforce,PerforceService,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\PerforceService.cs,CheckIn,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Perforce,PerforceService,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\PerforceService.cs,GetModifiedFiles,Cyclomatic complexity of the method is 10
Long Statement,Sce.Atf.Perforce,Connections,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\Connections.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Connections)); " is 131.
Long Statement,Sce.Atf.Perforce,Connections,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\Connections.cs,InitializeComponent,The length of the statement  "            this.comboBoxRecentSettings.SelectionChangeCommitted += new System.EventHandler(this.comboBoxRecentSettings_SelectionChangeCommitted); " is 134.
Long Statement,Sce.Atf.Perforce,LoginDialog,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\LoginDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LoginDialog)); " is 131.
Long Statement,Sce.Atf.Perforce,PerforceService,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\PerforceService.cs,GetModifiedFiles,The length of the statement  "            // -se shows only the names of unopened files in the client workspace that are different than the revision in the depot. " is 120.
Long Statement,Sce.Atf.Perforce,UsersList,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\UsersList.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UsersList)); " is 129.
Long Statement,Sce.Atf.Perforce,WorkspaceList,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\WorkspaceList.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WorkspaceList)); " is 133.
Magic Number,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,InitializeConnection,The following statement contains a magic number: if (!m_connectionInitialized)              {                  string[] connectionConfig = null;                  if (!string.IsNullOrWhiteSpace(selectedConnection))                      connectionConfig = ExtractConnectionParts(selectedConnection);                  else if (!string.IsNullOrWhiteSpace(DefaultConnection))                      connectionConfig = ExtractConnectionParts(DefaultConnection);                  if (connectionConfig != null && connectionConfig.Length == 3)                  {                      var server = new Server(new ServerAddress(connectionConfig[0]));                                            lock (m_lock)                      {                          if (m_repository != null)                              m_repository.Dispose();                          m_repository = new Repository(server);                          m_repository.Connection.UserName = connectionConfig[1];                          m_repository.Connection.Client = new Client {Name = connectionConfig[2]};                      }                        if (ValidateConnection(true))                      {                          m_connectionInitialized = true;                      }                  }                                }
Magic Number,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,InitializeConnection,The following statement contains a magic number: if (!m_connectionInitialized)              {                  string[] connectionConfig = null;                  if (!string.IsNullOrWhiteSpace(selectedConnection))                      connectionConfig = ExtractConnectionParts(selectedConnection);                  else if (!string.IsNullOrWhiteSpace(DefaultConnection))                      connectionConfig = ExtractConnectionParts(DefaultConnection);                  if (connectionConfig != null && connectionConfig.Length == 3)                  {                      var server = new Server(new ServerAddress(connectionConfig[0]));                                            lock (m_lock)                      {                          if (m_repository != null)                              m_repository.Dispose();                          m_repository = new Repository(server);                          m_repository.Connection.UserName = connectionConfig[1];                          m_repository.Connection.Client = new Client {Name = connectionConfig[2]};                      }                        if (ValidateConnection(true))                      {                          m_connectionInitialized = true;                      }                  }                                }
Magic Number,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,ConfigureConnection,The following statement contains a magic number: if (dr == DialogResult.OK)              {                  string oldConnection = CurrentConnection;                    lock (m_lock)                  {                      if (m_repository != null)                      {                          m_repository.Dispose();                          m_repository = null;                      }                  }                  m_connectionInitialized = false;                  m_configuring = true; // nullify InitializeConnection()                     string[] connectionConfig = ExtractConnectionParts(dlg.ConnectionSelected);                  if (connectionConfig != null && connectionConfig.Length == 3)                  {                      var server = new Server(new ServerAddress(connectionConfig[0]));                      lock (m_lock)                      {                          m_repository = new Repository(server);                          m_repository.Connection.UserName = connectionConfig[1];                          m_repository.Connection.Client = new Client {Name = connectionConfig[2]};                      }                  }                    if (ValidateConnection(true))// a valid connection                  {                      m_connectionInitialized = true;                        if (dlg.UseAsDefaultConnection)                          DefaultConnection = CurrentConnection;                        int index = RecentConnections.IndexOf(CurrentConnection);                      if (index != -1)                          RecentConnections.RemoveAt(index);                      RecentConnections.Insert(0' CurrentConnection);                      if (CurrentConnection != oldConnection)                          OnConnectionChanged(EventArgs.Empty);                  }                  result = true;              }              else //if (dr == DialogResult.Cancel)              {                  result = false;              }
Magic Number,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,ConfigureConnection,The following statement contains a magic number: if (dr == DialogResult.OK)              {                  string oldConnection = CurrentConnection;                    lock (m_lock)                  {                      if (m_repository != null)                      {                          m_repository.Dispose();                          m_repository = null;                      }                  }                  m_connectionInitialized = false;                  m_configuring = true; // nullify InitializeConnection()                     string[] connectionConfig = ExtractConnectionParts(dlg.ConnectionSelected);                  if (connectionConfig != null && connectionConfig.Length == 3)                  {                      var server = new Server(new ServerAddress(connectionConfig[0]));                      lock (m_lock)                      {                          m_repository = new Repository(server);                          m_repository.Connection.UserName = connectionConfig[1];                          m_repository.Connection.Client = new Client {Name = connectionConfig[2]};                      }                  }                    if (ValidateConnection(true))// a valid connection                  {                      m_connectionInitialized = true;                        if (dlg.UseAsDefaultConnection)                          DefaultConnection = CurrentConnection;                        int index = RecentConnections.IndexOf(CurrentConnection);                      if (index != -1)                          RecentConnections.RemoveAt(index);                      RecentConnections.Insert(0' CurrentConnection);                      if (CurrentConnection != oldConnection)                          OnConnectionChanged(EventArgs.Empty);                  }                  result = true;              }              else //if (dr == DialogResult.Cancel)              {                  result = false;              }
Magic Number,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,ExtractConnectionParts,The following statement contains a magic number: if (tokens.Length == 3)              {                  if (tokens[2].EndsWith(DefaultConnectionMarker))                      tokens[2] = tokens[2].Substring(0' tokens[2].Length - DefaultConnectionMarker.Length);                               }
Magic Number,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,ExtractConnectionParts,The following statement contains a magic number: if (tokens.Length == 3)              {                  if (tokens[2].EndsWith(DefaultConnectionMarker))                      tokens[2] = tokens[2].Substring(0' tokens[2].Length - DefaultConnectionMarker.Length);                               }
Magic Number,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,ExtractConnectionParts,The following statement contains a magic number: if (tokens.Length == 3)              {                  if (tokens[2].EndsWith(DefaultConnectionMarker))                      tokens[2] = tokens[2].Substring(0' tokens[2].Length - DefaultConnectionMarker.Length);                               }
Magic Number,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,ExtractConnectionParts,The following statement contains a magic number: if (tokens.Length == 3)              {                  if (tokens[2].EndsWith(DefaultConnectionMarker))                      tokens[2] = tokens[2].Substring(0' tokens[2].Length - DefaultConnectionMarker.Length);                               }
Magic Number,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,ExtractConnectionParts,The following statement contains a magic number: if (tokens.Length == 3)              {                  if (tokens[2].EndsWith(DefaultConnectionMarker))                      tokens[2] = tokens[2].Substring(0' tokens[2].Length - DefaultConnectionMarker.Length);                               }
Magic Number,Sce.Atf.Perforce,Connections,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\Connections.cs,Connections,The following statement contains a magic number: MinimumSize = new Size(2 * Width / 3' Height);
Magic Number,Sce.Atf.Perforce,Connections,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\Connections.cs,Connections,The following statement contains a magic number: MinimumSize = new Size(2 * Width / 3' Height);
Magic Number,Sce.Atf.Perforce,PerforceService,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\PerforceService.cs,PerforceService,The following statement contains a magic number: CacheExpireTimeInSeconds = 60;
Magic Number,Sce.Atf.Perforce,PerforceService,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\PerforceService.cs,GetRevisionLog,The following statement contains a magic number: if (Enabled && m_connectionManager.InitializeConnection())              {                  var path = uri.Path();                    var p4RecordSet =                      RunP4Command("changes"' "-s"' "submitted"' "-l"' "-m"' "100"' path);                    if (p4RecordSet.TaggedOutput.Count == 0)                      return p4DataTable;                    p4DataTable.Columns.Add(                      new DataColumn                      {                          DataType = Type.GetType("System.Int32")'                          ColumnName = "revision"'                          ReadOnly = true'                          Unique = true                      });                    p4DataTable.Columns.Add(                      new DataColumn                      {                          DataType = Type.GetType("System.String")'                          ColumnName = "user"                      });                    p4DataTable.Columns.Add(                      new DataColumn                      {                          DataType = Type.GetType("System.String")'                          ColumnName = "description"                      });                    p4DataTable.Columns.Add(                      new DataColumn                      {                          DataType = Type.GetType("System.String")'                          ColumnName = "status"                      });                    p4DataTable.Columns.Add(                      new DataColumn                      {                          DataType = Type.GetType("System.String")'                          ColumnName = "client"                      });                    p4DataTable.Columns.Add(                      new DataColumn                      {                          DataType = Type.GetType("System.DateTime")'                          ColumnName = "time"                      });                    // Valid keys on each record in this particular record set:                  // "user"' "change"' "desc"' "status"' "client"' "time"                  foreach (var record in p4RecordSet.TaggedOutput)                  {                      string change = record["change"];                      string user = record["user"];                      string desc = record["desc"];                      string status = record["status"];                      string client = record["client"];                      string time = record["time"];                        DateTime date;                      {                          double dTime = double.Parse(time);                          date =                              (new DateTime(1970' 1' 1' 0' 0' 0)                              .AddSeconds(dTime)                              .ToLocalTime());                      }                        DataRow row = p4DataTable.NewRow();                      row["revision"] = Int32.Parse(change);                      row["user"] = user;                      row["description"] = desc;                      row["status"] = status;                      row["client"] = client;                      row["time"] = date;                        p4DataTable.Rows.Add(row);                  }                }
Missing Default,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,GetUsers,The following switch statement is missing a default case: switch (ex.ErrorLevel)                  {                      case ErrorSeverity.E_WARN:                          Outputs.WriteLine(OutputMessageType.Warning' ex.Message);                          break;                      case ErrorSeverity.E_FAILED:                          Outputs.WriteLine(OutputMessageType.Error' ex.Message);                          break;                      case ErrorSeverity.E_INFO:                          Outputs.WriteLine(OutputMessageType.Info' ex.Message);                          break;                  }
Missing Default,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,GetWorkspaces,The following switch statement is missing a default case: switch (ex.ErrorLevel)                  {                      case ErrorSeverity.E_WARN:                          Outputs.WriteLine(OutputMessageType.Warning' ex.Message);                          break;                      case ErrorSeverity.E_FAILED:                          Outputs.WriteLine(OutputMessageType.Error' ex.Message);                          break;                      case ErrorSeverity.E_INFO:                          Outputs.WriteLine(OutputMessageType.Info' ex.Message);                          break;                  }
Missing Default,Sce.Atf.Perforce,ConnectionManager,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\ConnectionManager.cs,ValidateConnection,The following switch statement is missing a default case: switch (ex.ErrorLevel)                      {                          case ErrorSeverity.E_WARN:                              Outputs.WriteLine(OutputMessageType.Warning' ex.Message);                              break;                          case ErrorSeverity.E_FAILED:                              Outputs.WriteLine(OutputMessageType.Error' ex.Message);                              break;                          case ErrorSeverity.E_INFO:                              Outputs.WriteLine(OutputMessageType.Info' ex.Message);                              break;                      }
Missing Default,Sce.Atf.Perforce,PerforceService,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\PerforceService.cs,CheckIn,The following switch statement is missing a default case: switch (ex.ErrorLevel)                  {                      case ErrorSeverity.E_WARN:                          Outputs.WriteLine(OutputMessageType.Warning' ex.Message);                          break;                      case ErrorSeverity.E_FAILED:                          Outputs.WriteLine(OutputMessageType.Error' ex.Message);                          break;                      case ErrorSeverity.E_INFO:                          Outputs.WriteLine(OutputMessageType.Info' ex.Message);                          break;                  }
Missing Default,Sce.Atf.Perforce,PerforceService,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\PerforceService.cs,Export,The following switch statement is missing a default case: switch (revision.Kind)              {                  case SourceControlRevisionKind.Number:                      fromPath += "#" + revision.Number;                      break;                  case SourceControlRevisionKind.Unspecified:                      throw new NotSupportedException("Can't export revision of none ");                  //fromPath += "#none";                  //break;                  case SourceControlRevisionKind.Base:                      fromPath += "#have";                      break;                  case SourceControlRevisionKind.Head:                      fromPath += "#head";                      break;                  case SourceControlRevisionKind.Working:                      //just file copy                       System.IO.File.Copy(fromPath' toPath' true);                      return;                  case SourceControlRevisionKind.Date:                      fromPath += "@" + revision.Date;                      break;                  case SourceControlRevisionKind.ChangeList:                      fromPath += "@" + revision.ChangeListNumber;                      break;              }
Missing Default,Sce.Atf.Perforce,PerforceService,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\PerforceService.cs,RunP4Command,The following switch statement is missing a default case: switch (ex.ErrorLevel)                  {                      case ErrorSeverity.E_WARN:                          Outputs.WriteLine(OutputMessageType.Warning' ex.Message);                          break;                      case ErrorSeverity.E_FAILED:                          Outputs.WriteLine(OutputMessageType.Error' ex.Message);                          break;                      case ErrorSeverity.E_INFO:                          Outputs.WriteLine(OutputMessageType.Info' ex.Message);                          break;                  }
Missing Default,Sce.Atf.Perforce,PerforceService,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\PerforceService.cs,GetSourceControlStatusIcon,The following switch statement is missing a default case: switch (status)              {                  case SourceControlStatus.Added:                      result = m_statusImages[P4VFileAdd];                      break;                  case SourceControlStatus.CheckedIn:                      {                          if (IsSynched(uri))                          {                              FileInfo info = GetInfo(uri);                              if (string.IsNullOrEmpty(info.OtherLock))                                  result = m_statusImages[P4VFileSync];                              else                                  result = m_statusImages[P4VFileLockOther];                          }                          else                              result = m_statusImages[P4VFileNotsync];                            break;                      }                  case SourceControlStatus.CheckedOut:                      {                          FileInfo info = GetInfo(uri);                          if (info.IsLocked)                              result = m_statusImages[P4VFileLock];                          else                              result = m_statusImages[P4VFileEditHead];                          break;                      }                  case SourceControlStatus.NotControlled:                      result = m_statusImages[P4VFileWs];                      break;              }
Missing Default,Sce.Atf.Perforce,PerforceService,C:\repos\SonyWWS_ATF\Framework\Atf.Perforce\PerforceService.cs,GetInfo,The following switch statement is missing a default case: switch (error.SeverityLevel)                                  {                                      case ErrorSeverity.E_WARN:                                          Outputs.WriteLine(OutputMessageType.Warning' error.ErrorMessage);                                          break;                                      case ErrorSeverity.E_FAILED:                                          Outputs.WriteLine(OutputMessageType.Error' error.ErrorMessage);                                          break;                                      case ErrorSeverity.E_INFO:                                          Outputs.WriteLine(OutputMessageType.Info' error.ErrorMessage);                                          break;                                  }
