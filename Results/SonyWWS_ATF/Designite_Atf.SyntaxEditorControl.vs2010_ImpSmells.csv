Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,EditorTriggerActivated,The method has 160 lines of code.
Long Parameter List,Sce.Atf.Controls.SyntaxEditorControl,EditorTextChangedEventArgs,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\EditorTextChangedEventArgs.cs,EditorTextChangedEventArgs,The method has 5 parameters. Parameters: text' startOffset' endOffset' startLineNumber' endLineNumber
Long Parameter List,Sce.Atf.Controls.SyntaxEditorControl,Token,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\Token.cs,Token,The method has 5 parameters. Parameters: startOffset' endOffset' id' tokenType' lexeme
Long Statement,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,EditorKeyTyping,The length of the statement  "            editor.IntelliPrompt.ParameterInfo.Info.Add(@"void Control.Invalidate(<b>System.Drawing.Rectangle rc</b>' bool invalidateChildren)<br/>" + " is 138.
Long Statement,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,EditorViewMouseDown,The length of the statement  "                        if (e.HitTestResult.DocumentLine == null || e.Button == MouseButtons.Right || e.HitTestResult.DocumentLine.Text.Trim().Length == 0) " is 131.
Long Statement,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,CurrentStatement,The length of the statement  "                    layer = new SpanIndicatorLayer(SpanIndicatorLayer.CurrentStatementKey' SpanIndicatorLayer.CurrentStatementDisplayPriority); " is 123.
Long Statement,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,FindAll,The length of the statement  "            FindReplaceResultSet results = Document.FindReplace.FindAll((FindReplaceOptions)options' new TextRange(textRange.StartOffset' textRange.EndOffset)); " is 148.
Long Statement,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,MarkAll,The length of the statement  "            FindReplaceResultSet results = Document.FindReplace.MarkAll((FindReplaceOptions)options' new TextRange(textRange.StartOffset' textRange.EndOffset)); " is 148.
Long Statement,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,ReplaceAll,The length of the statement  "            FindReplaceResultSet results = Document.FindReplace.ReplaceAll((FindReplaceOptions)options' new TextRange(textRange.StartOffset' textRange.EndOffset)); " is 151.
Long Statement,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,PerformAndShowAuditStuff,The length of the statement  "            const BindingFlags flags = BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly; " is 121.
Complex Conditional,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,SelectLine,The conditional expression  "startOffset < 0 || startOffset >= line.Length                  || endOffset < 0 || endOffset >= line.Length"  is complex.
Magic Number,Sce.Atf.Controls.SyntaxEditorControl,BreakpointIndicator,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\BreakpointIndicator.cs,DrawGlyph,The following statement contains a magic number: if (m_marker)              {                  float lineWidth = 0.2f * bounds.Width;                  int marginW = (int)Math.Round(0.3f * bounds.Width);                  int marginH = (int)Math.Round(0.3f * bounds.Height);                  bounds.Inflate(-marginW' -marginH);                  Pen p = new Pen(ForeColor' lineWidth);                  e.Graphics.DrawLine(p' bounds.Left' (bounds.Top + bounds.Bottom) / 2' bounds.Right' (bounds.Top + bounds.Bottom) / 2);                  e.Graphics.DrawLine(p' (bounds.Left + bounds.Right) / 2' bounds.Top' (bounds.Left + bounds.Right) / 2' bounds.Bottom);                  p.Dispose();              }
Magic Number,Sce.Atf.Controls.SyntaxEditorControl,BreakpointIndicator,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\BreakpointIndicator.cs,DrawGlyph,The following statement contains a magic number: if (m_marker)              {                  float lineWidth = 0.2f * bounds.Width;                  int marginW = (int)Math.Round(0.3f * bounds.Width);                  int marginH = (int)Math.Round(0.3f * bounds.Height);                  bounds.Inflate(-marginW' -marginH);                  Pen p = new Pen(ForeColor' lineWidth);                  e.Graphics.DrawLine(p' bounds.Left' (bounds.Top + bounds.Bottom) / 2' bounds.Right' (bounds.Top + bounds.Bottom) / 2);                  e.Graphics.DrawLine(p' (bounds.Left + bounds.Right) / 2' bounds.Top' (bounds.Left + bounds.Right) / 2' bounds.Bottom);                  p.Dispose();              }
Magic Number,Sce.Atf.Controls.SyntaxEditorControl,BreakpointIndicator,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\BreakpointIndicator.cs,DrawGlyph,The following statement contains a magic number: if (m_marker)              {                  float lineWidth = 0.2f * bounds.Width;                  int marginW = (int)Math.Round(0.3f * bounds.Width);                  int marginH = (int)Math.Round(0.3f * bounds.Height);                  bounds.Inflate(-marginW' -marginH);                  Pen p = new Pen(ForeColor' lineWidth);                  e.Graphics.DrawLine(p' bounds.Left' (bounds.Top + bounds.Bottom) / 2' bounds.Right' (bounds.Top + bounds.Bottom) / 2);                  e.Graphics.DrawLine(p' (bounds.Left + bounds.Right) / 2' bounds.Top' (bounds.Left + bounds.Right) / 2' bounds.Bottom);                  p.Dispose();              }
Magic Number,Sce.Atf.Controls.SyntaxEditorControl,BreakpointIndicator,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\BreakpointIndicator.cs,DrawGlyph,The following statement contains a magic number: if (m_marker)              {                  float lineWidth = 0.2f * bounds.Width;                  int marginW = (int)Math.Round(0.3f * bounds.Width);                  int marginH = (int)Math.Round(0.3f * bounds.Height);                  bounds.Inflate(-marginW' -marginH);                  Pen p = new Pen(ForeColor' lineWidth);                  e.Graphics.DrawLine(p' bounds.Left' (bounds.Top + bounds.Bottom) / 2' bounds.Right' (bounds.Top + bounds.Bottom) / 2);                  e.Graphics.DrawLine(p' (bounds.Left + bounds.Right) / 2' bounds.Top' (bounds.Left + bounds.Right) / 2' bounds.Bottom);                  p.Dispose();              }
Magic Number,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,EditorKeyTyping,The following statement contains a magic number: if ((offset < 10) || (editor.Document.GetSubstring(offset - 10' 10) != "Invalidate"))                  return;
Magic Number,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,EditorKeyTyping,The following statement contains a magic number: if ((offset < 10) || (editor.Document.GetSubstring(offset - 10' 10) != "Invalidate"))                  return;
Magic Number,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,EditorKeyTyping,The following statement contains a magic number: if ((offset < 10) || (editor.Document.GetSubstring(offset - 10' 10) != "Invalidate"))                  return;
Magic Number,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,EditorKeyTyping,The following statement contains a magic number: editor.IntelliPrompt.ParameterInfo.Show(offset - 10);
Magic Number,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,PerformAndShowAuditStuff,The following statement contains a magic number: MessageBox.Show(                  string.Format(                      "ATF's ISyntaxEditorControl is using approximately {0}% " +                      "of the ActiproSoftware SyntaxEditor class!"'                      (totalInterfacePublicItems / (float)totalSyntaxEditorPublicItems) * 100)'                  @"SyntaxEditorControl Audit");
Missing Default,Sce.Atf.Controls.SyntaxEditorControl,LuaDynamicSyntaxLanguage,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\LuaDynamicSyntaxLanguage.cs,GetTokenOutliningAction,The following switch statement is missing a default case: switch (token.Key)              {                  //case "OpenCurlyBraceToken":                  //    outliningKey = "CodeBlock";                  //    tokenAction = OutliningNodeAction.Start;                  //    break;                    //case "CloseCurlyBraceToken":                  //    outliningKey = "CodeBlock";                  //    tokenAction = OutliningNodeAction.End;                  //    break;                    case ReservedWordToken:                  {                      string tokenString = token.AutoCaseCorrectText;                      if (string.IsNullOrEmpty(tokenString))                          return;                        switch (tokenString)                      {                          case "do":                          //case "while": // while's also contain "do"                          //case "for":   // for's also contain "do"                          case "if":                          case "repeat":                          case "function":                              outliningKey = "CodeBlock";                              tokenAction = OutliningNodeAction.Start;                              break;                            case "until":                          case "end":                              outliningKey = "CodeBlock";                              tokenAction = OutliningNodeAction.End;                              break;                      }                  }                  break;                    case MultiLineCommentStartToken:                      outliningKey = "MultiLineComment";                      tokenAction = OutliningNodeAction.Start;                      break;                    case MultiLineCommentEndToken:                      outliningKey = "MultiLineComment";                      tokenAction = OutliningNodeAction.End;                      break;              }
Missing Default,Sce.Atf.Controls.SyntaxEditorControl,LuaDynamicSyntaxLanguage,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\LuaDynamicSyntaxLanguage.cs,GetTokenOutliningAction,The following switch statement is missing a default case: switch (tokenString)                      {                          case "do":                          //case "while": // while's also contain "do"                          //case "for":   // for's also contain "do"                          case "if":                          case "repeat":                          case "function":                              outliningKey = "CodeBlock";                              tokenAction = OutliningNodeAction.Start;                              break;                            case "until":                          case "end":                              outliningKey = "CodeBlock";                              tokenAction = OutliningNodeAction.End;                              break;                      }
Missing Default,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,EditorTriggerActivated,The following switch statement is missing a default case: switch (fullName)                                          {                                              case "bool":                                                  fullName = "System.Boolean";                                                  break;                                              case "byte":                                                  fullName = "System.Byte";                                                  break;                                              case "char":                                                  fullName = "System.Char";                                                  break;                                              case "decimal":                                                  fullName = "System.Decimal";                                                  break;                                              case "double":                                                  fullName = "System.Double";                                                  break;                                              case "short":                                                  fullName = "System.Int16";                                                  break;                                              case "int":                                                  fullName = "System.Int32";                                                  break;                                              case "long":                                                  fullName = "System.Int64";                                                  break;                                              case "object":                                                  fullName = "System.Object";                                                  break;                                              case "sbyte":                                                  fullName = "System.SByte";                                                  break;                                              case "float":                                                  fullName = "System.Single";                                                  break;                                              case "string":                                                  fullName = "System.String";                                                  break;                                              case "ushort":                                                  fullName = "System.UInt16";                                                  break;                                              case "uint":                                                  fullName = "System.UInt32";                                                  break;                                              case "ulong":                                                  fullName = "System.UInt64";                                                  break;                                              case "void":                                                  fullName = "System.Void";                                                  break;                                          }
Missing Default,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,EditorViewMouseDown,The following switch statement is missing a default case: switch (e.HitTestResult.Token.Key)                              {                                  case "CommentURLToken":                                  case "MultiLineCommentURLToken":                                  case "XMLCommentURLToken":                                      {                                          // If the CTRL key is pressed' navigate to the URL                                          if ((e.Button == MouseButtons.Left) && (ModifierKeys == Keys.Control))                                          {                                              e.Cancel = true;                                              if (editor != null)                                                  System.Diagnostics.Process.Start(editor.Document.GetTokenText(e.HitTestResult.Token));                                          }                                      }                                      break;                              }
Missing Default,Sce.Atf.Controls.SyntaxEditorControl,SyntaxEditorControl,C:\repos\SonyWWS_ATF\Framework\Atf.SyntaxEditorControl\Controls\SyntaxEditorControl\SyntaxEditorControl.cs,EditorViewMouseHover,The following switch statement is missing a default case: switch (e.HitTestResult.Token.Language.Key.ToLower())                  {                      case "c#":                          lang = Languages.Csharp;                          break;                      case "lua":                          lang = Languages.Lua;                          break;                      case "python":                          lang = Languages.Python;                          break;                      case "xml":                          lang = Languages.Xml;                          break;                  }
