Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TimelineEditorSample,TimelineCommands,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineCommands.cs,DoCommand,Cyclomatic complexity of the method is 17
Complex Method,TimelineEditorSample,TimelineContext,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineContext.cs,Insert,Cyclomatic complexity of the method is 17
Complex Method,TimelineEditorSample,TimelineContext,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineContext.cs,GetOrCreateOrderedTracks,Cyclomatic complexity of the method is 8
Complex Method,TimelineEditorSample,TimelineContext,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineContext.cs,Insert,Cyclomatic complexity of the method is 14
Complex Method,TimelineEditorSample,TimelineEditor,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineEditor.cs,LoadOrCreateDocument,Cyclomatic complexity of the method is 12
Long Parameter List,TimelineEditorSample,TimelineEditor,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineEditor.cs,TimelineEditor,The method has 7 parameters. Parameters: controlHostService' commandService' contextRegistry' documentRegistry' documentService' paletteService' settingsService
Long Statement,TimelineEditorSample,Program,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\Program.cs,Main,The length of the statement  "            Application.DoEvents(); // see http://www.codeproject.com/buglist/EnableVisualStylesBug.asp?df=100&forumid=25268&exp=0&select=984714 " is 132.
Long Statement,TimelineEditorSample,Program,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\Program.cs,Main,The length of the statement  "                typeof(OutputService)'                  // rich text box for displaying error and warning messages. Implements IOutputWriter " is 124.
Long Statement,TimelineEditorSample,Program,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\Program.cs,Main,The length of the statement  "                typeof(SkinService)'                    // allows for customization of an applicationâ€™s appearance by using inheritable properties that can be applied at run-time " is 162.
Long Statement,TimelineEditorSample,Program,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\Program.cs,Main,The length of the statement  "                typeof(AutomationService)               // provides facilities to run an automated script using the .NET remoting service " is 121.
Long Statement,TimelineEditorSample,TimelineEditor,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineEditor.cs,Initialize,The length of the statement  "                    () => D2dTimelineRenderer.GlobalTrackHeight' "Track Height"' "Appearance"' "Height of track' relative to units of time")' " is 121.
Long Statement,TimelineEditorSample,TimelineEditor,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineEditor.cs,Initialize,The length of the statement  "                new BoundPropertyDescriptor(typeof(D2dSnapManipulator)' () => D2dSnapManipulator.SnapTolerance' "Snap Tolerance"' "Behavior"' " is 125.
Long Statement,TimelineEditorSample,TimelineEditor,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineEditor.cs,Initialize,The length of the statement  "                new BoundPropertyDescriptor(typeof(D2dSnapManipulator)' () => D2dSnapManipulator.Color' "Snap Indicator Color"' "Appearance"' " is 125.
Long Statement,TimelineEditorSample,TimelineEditor,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineEditor.cs,Initialize,The length of the statement  "                new BoundPropertyDescriptor(typeof(D2dScaleManipulator)' () => D2dScaleManipulator.Color' "Scale Manipulator Color"' "Appearance"' " is 130.
Magic Number,TimelineEditorSample,TimelineContext,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineContext.cs,Insert,The following statement contains a magic number: Point clientPoint = new Point(                  clientRect.Left + clientRect.Width / 2'                  clientRect.Top + clientRect.Height / 2);
Magic Number,TimelineEditorSample,TimelineContext,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineContext.cs,Insert,The following statement contains a magic number: Point clientPoint = new Point(                  clientRect.Left + clientRect.Width / 2'                  clientRect.Top + clientRect.Height / 2);
Magic Number,TimelineEditorSample,TimelineContext,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineContext.cs,CenterEvents,The following statement contains a magic number: newStart -= width / 2;
Missing Default,TimelineEditorSample,TimelineCommands,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineCommands.cs,UpdateCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                      case Command.ToggleSplitMode:                          commandState.Check = document.SplitManipulator != null ? document.SplitManipulator.Active : false;                          break;                  }
Missing Default,TimelineEditorSample,TimelineCommands,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                      case Command.RemoveGroup:                          if (activeGroup == null)                              return false;                            if (doing)                          {                              transactionContext.DoTransaction(delegate                              {                                  activeGroup.Timeline.Groups.Remove(activeGroup);                              }'                              "Remove Group");                          }                          return true;                        case Command.RemoveTrack:                          if (activeTrack == null)                              return false;                            if (doing)                          {                              transactionContext.DoTransaction(delegate                              {                                  activeTrack.Group.Tracks.Remove(activeTrack);                              }'                              "Remove Track");                          }                          return true;                        case Command.RemoveEmptyGroupsAndTracks:                          if (activeTimeline == null)                              return false;                            if (doing)                          {                              transactionContext.DoTransaction(delegate                              {                                  IList<IGroup> groups = activeTimeline.Groups;                                  for (int i = 0; i < groups.Count; )                                  {                                      IList<ITrack> tracks = groups[i].Tracks;                                      for (int j = 0; j < tracks.Count; )                                      {                                          if (tracks[j].Intervals.Count == 0 && tracks[j].Keys.Count == 0)                                              tracks.RemoveAt(j);                                          else                                              j++;                                      }                                        if (tracks.Count == 0)                                          groups.RemoveAt(i);                                      else                                          i++;                                  }                              }'                              "Remove Empty Groups and Tracks");                          }                          return true;                  }
Missing Default,TimelineEditorSample,TimelineCommands,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\TimelineEditor\TimelineCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.ViewZoomExtents:                          if (doing)                          {                              document.TimelineControl.Frame();                          }                          return true;                  }
