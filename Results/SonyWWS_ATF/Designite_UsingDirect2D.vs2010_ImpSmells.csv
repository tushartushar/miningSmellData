Implementation smell,Namespace,Class,File,Method,Description
Long Method,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The method has 111 lines of code.
Long Method,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The method has 365 lines of code.
Long Method,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,GenPrimitives,The method has 208 lines of code.
Long Method,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,Render,The method has 105 lines of code.
Complex Method,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,OnKeyDown,Cyclomatic complexity of the method is 9
Complex Method,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,Cyclomatic complexity of the method is 49
Complex Method,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,GenPrimitives,Cyclomatic complexity of the method is 33
Complex Method,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GenPrimitives,Cyclomatic complexity of the method is 12
Complex Method,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,Render,Cyclomatic complexity of the method is 16
Complex Conditional,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,GenPrimitives,The conditional expression  "m_sampleDrawing == SampleDrawings.FillSolidRects                  || m_sampleDrawing == SampleDrawings.FillGradientRects1                  || m_sampleDrawing == SampleDrawings.FillGradientRects2                  || m_sampleDrawing == SampleDrawings.FillGradientRects3                  || m_sampleDrawing == SampleDrawings.DrawRects                  || m_sampleDrawing == SampleDrawings.DrawRectsWithBitmapMasks                  || m_sampleDrawing == SampleDrawings.FillBmpRects"  is complex.
Magic Number,UsingDirect2D,Form1,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Form1,The following statement contains a magic number: ClientSize = new Size(1280' 900);
Magic Number,UsingDirect2D,Form1,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Form1,The following statement contains a magic number: ClientSize = new Size(1280' 900);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.FillRectangle(new RectangleF(1' 1' 80' 40)' s_lnBrush);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.FillRectangle(new RectangleF(1' 1' 80' 40)' s_lnBrush);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.DrawLine(10' 10' 100' 100' m_brush' 10);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.DrawLine(10' 10' 100' 100' m_brush' 10);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.DrawLine(10' 10' 100' 100' m_brush' 10);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.DrawLine(10' 10' 100' 100' m_brush' 10);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.DrawLine(10' 10' 100' 100' m_brush' 10);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.DrawBitmap(s_bmp' new RectangleF(2' 50' 60' 60)' 1.0f' D2dBitmapInterpolationMode.Linear);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.DrawBitmap(s_bmp' new RectangleF(2' 50' 60' 60)' 1.0f' D2dBitmapInterpolationMode.Linear);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.DrawBitmap(s_bmp' new RectangleF(2' 50' 60' 60)' 1.0f' D2dBitmapInterpolationMode.Linear);
Magic Number,UsingDirect2D,TestRT,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_graphics.DrawBitmap(s_bmp' new RectangleF(2' 50' 60' 60)' 1.0f' D2dBitmapInterpolationMode.Linear);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateCachedBmp,The following statement contains a magic number: var bitmapgraphics = m_d2dGraphics.CreateCompatibleGraphics(                  new Size(300' 300)' D2dCompatibleGraphicsOptions.GdiCompatible);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateCachedBmp,The following statement contains a magic number: var bitmapgraphics = m_d2dGraphics.CreateCompatibleGraphics(                  new Size(300' 300)' D2dCompatibleGraphicsOptions.GdiCompatible);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateCachedBmp,The following statement contains a magic number: bitmapgraphics.FillRectangle(new RectangleF(10' 10' 280' 280)' Color.Blue);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateCachedBmp,The following statement contains a magic number: bitmapgraphics.FillRectangle(new RectangleF(10' 10' 280' 280)' Color.Blue);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateCachedBmp,The following statement contains a magic number: bitmapgraphics.FillRectangle(new RectangleF(10' 10' 280' 280)' Color.Blue);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateCachedBmp,The following statement contains a magic number: bitmapgraphics.FillRectangle(new RectangleF(10' 10' 280' 280)' Color.Blue);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateCachedBmp,The following statement contains a magic number: bitmapgraphics.DrawText("Cached Graphics"' m_generalTextFormat' new PointF(12' 12)' Color.Gold);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateCachedBmp,The following statement contains a magic number: bitmapgraphics.DrawText("Cached Graphics"' m_generalTextFormat' new PointF(12' 12)' Color.Gold);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: m_brush1 = D2dFactory.CreateSolidBrush(Color.FromArgb(128' Color.Blue));
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: Color stateColor1 = Color.FromArgb(142' 182' 243);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: Color stateColor1 = Color.FromArgb(142' 182' 243);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: Color stateColor1 = Color.FromArgb(142' 182' 243);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: float retain = 0.75f;
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: m_darkenBrush = D2dFactory.CreateLinearGradientBrush(                  new D2dGradientStop(Color.FromArgb(0' 0' 0' 0)' 0.0f)'                  new D2dGradientStop(Color.FromArgb(100' 0' 0' 0)' 1.0f));
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: const float fontSize = 12;
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: var stSize = new SizeF(96' 96);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: var stSize = new SizeF(96' 96);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: st.Bound.Location = new PointF(i * stSize.Width + (i + 1) * 50' (i + 1) * stSize.Height / 3);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: st.Bound.Location = new PointF(i * stSize.Width + (i + 1) * 50' (i + 1) * stSize.Height / 3);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: i < 5
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: m_states[2].Name = "long state name";
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: m_states[2].Bound.Width = stSize.Width + 30;
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: m_states[2].Bound.Width = stSize.Width + 30;
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: m_stRect.RadiusX = 14;
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: m_stRect.RadiusY = 14;
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: m_emptyBmp = D2dFactory.CreateBitmap(400' 400);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: m_emptyBmp = D2dFactory.CreateBitmap(400' 400);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: m_generalTextFormat = D2dFactory.CreateTextFormat("Calibri"                  ' D2dFontWeight.Bold' D2dFontStyle.Normal' D2dFactory.FontSizeToPixel(16));
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: var r = new Random(7373);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: int red = r.Next(255);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: int green = r.Next(255);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: int blue = r.Next(255);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: i < 3000
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: var radGradstops = new D2dGradientStop[3];
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: var linearGradstops = new D2dGradientStop[4];
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: var linearGradstops2 = new D2dGradientStop[2];
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: Color c2 = Color.FromArgb(c1.R / 2' c1.G / 2' c1.B / 2);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: Color c2 = Color.FromArgb(c1.R / 2' c1.G / 2' c1.B / 2);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: Color c2 = Color.FromArgb(c1.R / 2' c1.G / 2' c1.B / 2);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: radGradstops[0] = new D2dGradientStop(Color.FromArgb(255' c1)' 0);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: radGradstops[1] = new D2dGradientStop(Color.FromArgb(240' c2)' 0.94f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: radGradstops[1] = new D2dGradientStop(Color.FromArgb(240' c2)' 0.94f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: radGradstops[2] = new D2dGradientStop(Color.FromArgb(255' c1)' 1.0f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: radGradstops[2] = new D2dGradientStop(Color.FromArgb(255' c1)' 1.0f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: linearGradstops[1] = new D2dGradientStop(Color.FromArgb(200' c2)' 0.7f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: linearGradstops[1] = new D2dGradientStop(Color.FromArgb(200' c2)' 0.7f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: linearGradstops[2] = new D2dGradientStop(Color.FromArgb(255' c2)' 0.90f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: linearGradstops[2] = new D2dGradientStop(Color.FromArgb(255' c2)' 0.90f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: linearGradstops[2] = new D2dGradientStop(Color.FromArgb(255' c2)' 0.90f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: linearGradstops[3] = new D2dGradientStop(Color.FromArgb(255' c1)' 1.0f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: linearGradstops[3] = new D2dGradientStop(Color.FromArgb(255' c1)' 1.0f);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: linearGradstops2[0] = new D2dGradientStop(Color.FromArgb(255' Color.White)' 0);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,CreateSharedResources,The following statement contains a magic number: i < 60
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                  case SampleDrawings.DrawFewStates:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                            float scale = 2.0f;                          Matrix3x2F xform = Matrix3x2F.CreateScale(scale' scale);                          m_d2dGraphics.Transform = xform;                          m_brush1.Color = Color.Black;                          m_brush2.Color = Color.White;                          foreach (State state in m_states)                          {                              DrawState(state' scale);                          }                          m_d2dGraphics.Transform = Matrix3x2F.Identity;                      }                      break;                  case SampleDrawings.FillSolidRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                              m_d2dGraphics.FillRectangle(m_rects[i]' m_colors[i]);                      }                      break;                  case SampleDrawings.FillBmpRects:                      {                           //turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 1; i < 5; i++)                          {                              var rect = new RectangleF(20 + i * 50' 10' 50' 50);                              m_bmpBrush.Location = rect.Location;                              m_d2dGraphics.FillRectangle(rect' m_bmpBrush);                          }                        }                      break;                  case SampleDrawings.FillGradientRects1:                      {                                                  // Below is a way to use one linear gradient brush                           // to fill a rectangle with the given color.                          // This method works best for non-overlapping rectangles.                                                   // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                            for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                                                            m_d2dGraphics.FillRectangle(rect' m_colors[i]);                                m_darkenBrush.StartPoint = rect.Location;                              m_darkenBrush.EndPoint = new PointF(rect.X' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_darkenBrush);                          }                      }                      break;                  case SampleDrawings.FillGradientRects2:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              Color start = m_colors[i];                              Color end = Color.FromArgb((int)(start.R / 1.90f)' (int)(start.G / 1.90f)' (int)(start.B / 1.90f));                              PointF pt1 = rect.Location;                              PointF pt2 = new PointF(rect.X' rect.Bottom);                                // Note that for each unique color a new linear gradient brush                               // will be created and cached for reuse.                              m_d2dGraphics.FillRectangle(rect' pt1' pt2' start' end);                          }                                              }                      break;                  case SampleDrawings.FillGradientRects3:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              RectangleF rect = m_rects[i];                              m_titlebrush.StartPoint = rect.Location;                              m_titlebrush.EndPoint = new PointF(rect.Right' rect.Bottom);                              m_d2dGraphics.FillRectangle(rect' m_titlebrush);                          }                      }                      break;                  case SampleDrawings.DrawTriangle:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          PointF[] polys                              = {                                    new PointF(200'200)'                                    new PointF(250'300)'                                    new PointF(150'300)'                                };                          m_d2dGraphics.FillPolygon(polys' Color.DarkBlue);                          m_d2dGraphics.DrawPolygon(polys' Color.Yellow' 3.0f);                                                }                      break;                  case SampleDrawings.DrawRects:                      {                          // turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRectangle(m_rects[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawRectsWithBitmapMasks:                      {                         //  turn off AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.Aliased;                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillOpacityMask(m_bmp' m_brush1' m_rects[i]);                          }                      }                      break;                  case SampleDrawings.FillSolidRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                                                  for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillRoundedRectangle(m_roundedRects[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawRoundedRects:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            // fill rounded rectangles                          for (int i = 0; i < m_roundedRects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawRoundedRectangle(m_roundedRects[i]' m_brush1' 1.0f);                          }                      }                      break;                  case SampleDrawings.FillSolidEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.FillEllipse(m_ellipses[i]' m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawEllipse:                      {                          // turn On AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_ellipses.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawEllipse(m_ellipses[i]' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.DrawOrbs:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_ellipses.Count; i++)                          {                              D2dRadialGradientBrush                              radialBrush = m_radialBrushes[i];                              D2dEllipse ellipse = m_ellipses[i];                              PointF center = ellipse.Center;                                                            radialBrush.Center = center;                                                          radialBrush.RadiusX = ellipse.RadiusX;                              radialBrush.RadiusY = ellipse.RadiusY;                                D2dLinearGradientBrush linearBrush = m_linearBrushes[i];                              linearBrush.StartPoint = new PointF(0' center.Y - ellipse.RadiusY);                              linearBrush.EndPoint = new PointF(0' center.Y + ellipse.RadiusY);                                                                                                               m_d2dGraphics.FillEllipse(m_ellipses[i]' radialBrush);                              m_d2dGraphics.FillEllipse(ellipse' linearBrush);                                                           var glassy = new D2dEllipse();                              glassy.Center =                                  new PointF(center.X' center.Y - ellipse.RadiusY * 0.5f);                              glassy.RadiusX = ellipse.RadiusX * 0.75f;                              glassy.RadiusY = ellipse.RadiusY * 0.5f;                                  D2dLinearGradientBrush linearBrush2 = m_linearBrushes2[i];                              linearBrush2.StartPoint                                  = new PointF(0' glassy.Center.Y - glassy.RadiusY);                              linearBrush2.EndPoint                                  = new PointF(0' glassy.Center.Y + glassy.RadiusY);                                m_d2dGraphics.FillEllipse(glassy' linearBrush2);                          }                      }                      break;                  case SampleDrawings.DrawRandomLines1:                      {                          // turn on AA                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 1.0f);                          }                                              }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                      }                      break;                  case SampleDrawings.UseClipRectangle:                      {                          m_brush1.Color = Color.Yellow;                            m_d2dGraphics.DrawText                              ("Use Clip Rectangle"' m_generalTextFormat'                              new RectangleF(10' 10' 200' 50)' m_brush1);                          // OK turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            RectangleF clipRect                              = new RectangleF(120' 120' 400'400);                            m_d2dGraphics.PushAxisAlignedClip(clipRect);                            for (int i = 0; i < m_lines.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              Line line = m_lines[i];                              m_d2dGraphics.DrawLine(line.P1' line.P2' m_brush1' 2.0f);                          }                            m_d2dGraphics.PopAxisAlignedClip();                      }                      break;                  case SampleDrawings.DrawConnectedLines:                      {                          // Turn AA ON for thick lines.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            m_brush1.Color = Color.White;                          m_d2dGraphics.DrawLines(m_connectedLines' m_brush1' 2.0f);                      }                      break;                  case SampleDrawings.DrawBeziers:                      {                          // Turn AA on.                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          float width = 2.0f;                                                  int c = 0;                          foreach (Bezier bz in m_beziers)                          {                              m_brush1.Color = m_colors[c++];                              m_d2dGraphics.DrawBezier(                                  bz.P1' bz.P2' bz.P3' bz.P4' m_brush1' width);                          }                      }                      break;                  case SampleDrawings.DrawCachedBitmap:                      {                          if (m_cachedBmp.IsDisposed)                              CreateCachedBmp();                          m_d2dGraphics.DrawBitmap(m_cachedBmp' new PointF(10' 60));                      }                      break;                  case SampleDrawings.DrawText:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                            for (int i = 0; i < m_texts.Count; i++)                          {                                                         m_brush1.Color = m_colors[i];                                                           m_d2dGraphics.DrawText(                                    m_drawInfo'                                    m_generalTextFormat'                                    m_texts[i]'                                    m_brush1);                          }                      }                      break;                  case SampleDrawings.DrawTextLayout:                      {                          m_d2dGraphics.TextAntialiasMode = D2dTextAntialiasMode.Default;                          m_d2dGraphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          for (int i = 0; i < m_texts.Count; i++)                          {                                                          m_brush1.Color = m_colors[i];                              m_d2dGraphics.DrawTextLayout(m_texts[i]' m_textLayouts[i]' m_brush1);                                                      }                      }                      break;                  case SampleDrawings.DrawBitmaps:                      {                          var rnd = new Random(7533);                            for (int i = 0; i < 20; i++)                          {                              var bmpPt = new PointF(rnd.Next(w)' rnd.Next(h));                              m_d2dGraphics.DrawBitmap(m_bmp' bmpPt' 1.0f - i / 20.0f);                          }                          m_d2dGraphics.DrawBitmap(m_emptyBmp' new PointF(5' 5)' 1.0f);                      }                      break;                  case SampleDrawings.GdiInterOp:                      {                          m_d2dGraphics.BeginGdiSection();                          m_d2dGraphics.Graphics.SmoothingMode                              = System.Drawing.Drawing2D.SmoothingMode.None;                                                    var p = new Pen(Color.Gold);                          for (int i = 10; i < 200; i++)                          {                              var rect = new Rectangle(i' i' i' i);                              p.Color = m_colors[i];                              m_d2dGraphics.Graphics.DrawRectangle(p' rect);                          }                          p.Dispose();                                                                        m_d2dGraphics.EndGdiSection();                                              }                      break;                  case SampleDrawings.LastValue:                      break;                  default:                      break;              }
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: var msRect = new RectangleF(pt' new SizeF(4' 4));
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: var msRect = new RectangleF(pt' new SizeF(4' 4));
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: msRect.Offset(-2' -2);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: msRect.Offset(-2' -2);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,Render,The following statement contains a magic number: m_frameCount > 30
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,GenPrimitives,The following statement contains a magic number: var r = new Random(7737);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,DrawState,The following statement contains a magic number: float outlinewidth = 2.0f / scale;
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,DrawState,The following statement contains a magic number: var nameRect = new RectangleF(stbound.X + 10' stbound.Y' stbound.Width - 20' TitleBarHeight);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,DrawState,The following statement contains a magic number: var nameRect = new RectangleF(stbound.X + 10' stbound.Y' stbound.Width - 20' TitleBarHeight);
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,StressTest,The following statement contains a magic number: const int NumFrames = 1000;
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,StressTest,The following statement contains a magic number: double medianframetime = (double)allFrames[NumFrames / 2] / frq;
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,StressTest,The following statement contains a magic number: report.AppendLine("Median frame rendering time: " + Math.Round(1000.0 * medianframetime' 3) + "ms");
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,StressTest,The following statement contains a magic number: report.AppendLine("Median frame rendering time: " + Math.Round(1000.0 * medianframetime' 3) + "ms");
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,StressTest,The following statement contains a magic number: report.AppendLine("Fastest frame rendering time: " + Math.Round(1000.0 * fastest' 3) + "ms");
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,StressTest,The following statement contains a magic number: report.AppendLine("Fastest frame rendering time: " + Math.Round(1000.0 * fastest' 3) + "ms");
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,StressTest,The following statement contains a magic number: report.AppendLine("Slowest frame rendering time: " + Math.Round(1000.0 * slowest' 3) + "ms");
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,StressTest,The following statement contains a magic number: report.AppendLine("Slowest frame rendering time: " + Math.Round(1000.0 * slowest' 3) + "ms");
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,StressTest,The following statement contains a magic number: report.AppendLine("Total rendering time: " + Math.Round(1000.0 * totalframetime'2) + "ms");
Magic Number,UsingDirect2D,Canvas2d,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\Form1.cs,StressTest,The following statement contains a magic number: report.AppendLine("Total rendering time: " + Math.Round(1000.0 * totalframetime'2) + "ms");
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GdiCanvas,The following statement contains a magic number: m_info = new System.Drawing.Font("Calibri"' 16' FontStyle.Bold);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GdiCanvas,The following statement contains a magic number: Random r = new Random(737);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GdiCanvas,The following statement contains a magic number: int red = r.Next(255);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GdiCanvas,The following statement contains a magic number: int green = r.Next(255);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GdiCanvas,The following statement contains a magic number: int blue = r.Next(255);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GdiCanvas,The following statement contains a magic number: i < 3000
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GenPrimitives,The following statement contains a magic number: Random r = new Random(7737);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GenPrimitives,The following statement contains a magic number: int itemCount = 300;
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GenPrimitives,The following statement contains a magic number: int cx = r.Next(-40' w);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GenPrimitives,The following statement contains a magic number: int cy = r.Next(-40' h);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GenPrimitives,The following statement contains a magic number: int width = r.Next(20' 140);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GenPrimitives,The following statement contains a magic number: int width = r.Next(20' 140);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GenPrimitives,The following statement contains a magic number: int height = r.Next(20' 140);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,GenPrimitives,The following statement contains a magic number: int height = r.Next(20' 140);
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                    case SampleDrawings.FillSolidRects:                      {                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              g.FillRectangle(m_brush1' m_rects[i]);                          }                      }                      break;                    case SampleDrawings.Draw_Rects:                      {                          Pen p = new Pen(Color.Red);                          for (int i = 0; i < m_rects.Count; i++)                          {                              p.Color = m_colors[i];                              g.DrawRectangle(p' m_rects[i]);                          }                          p.Dispose();                      }                      break;                    case SampleDrawings.DrawRandomLines1:                      {                            Pen p = new Pen(Color.Red);                          for (int i = 0; i < m_lines.Count; i++)                          {                              p.Color = m_colors[i];                              Line line = m_lines[i];                              g.DrawLine(p' line.P1' line.P2);                          }                          p.Dispose();                      }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          Pen p = new Pen(Color.Red' 2.0f);                          for (int i = 0; i < m_lines.Count; i++)                          {                              p.Color = m_colors[i];                              Line line = m_lines[i];                              g.DrawLine(p' line.P1' line.P2);                          }                          p.Dispose();                        }                      break;                    case SampleDrawings.DrawBeziers:                      {                          int c = 0;                          Pen p = new Pen(Color.White' 2.0f);                          //Pen p = new Pen(Color.White);                                                  foreach (Bezier bz in m_beziers)                          {                              p.Color = m_colors[c++];                              g.DrawBezier(p' bz.P1' bz.P2' bz.P3' bz.P4);                          }                          p.Dispose();                      }                      break;                  case SampleDrawings.DrawText:                      {                          RectangleF layoutrect = new RectangleF();                          layoutrect.Size = g.MeasureString(m_drawInfo' m_info);                            for (int i = 0; i < m_texts.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              layoutrect.Location = m_texts[i];                              g.DrawString(m_drawInfo                                  ' m_info' m_brush1' layoutrect' m_strFormat);                          }                      }                        break;                  case SampleDrawings.DrawBitmaps:                      {                          Random rnd = new Random(7533);                            RectangleF bmpRect = new RectangleF();                          bmpRect.Size = m_bmp.Size;                            for (int i = 0; i < 20; i++)                          {                              bmpRect.Location = new PointF(rnd.Next(w)' rnd.Next(h));                              g.DrawImage(m_bmp' bmpRect);                          }                      }                      break;                      default:                      break;              }
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                    case SampleDrawings.FillSolidRects:                      {                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              g.FillRectangle(m_brush1' m_rects[i]);                          }                      }                      break;                    case SampleDrawings.Draw_Rects:                      {                          Pen p = new Pen(Color.Red);                          for (int i = 0; i < m_rects.Count; i++)                          {                              p.Color = m_colors[i];                              g.DrawRectangle(p' m_rects[i]);                          }                          p.Dispose();                      }                      break;                    case SampleDrawings.DrawRandomLines1:                      {                            Pen p = new Pen(Color.Red);                          for (int i = 0; i < m_lines.Count; i++)                          {                              p.Color = m_colors[i];                              Line line = m_lines[i];                              g.DrawLine(p' line.P1' line.P2);                          }                          p.Dispose();                      }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          Pen p = new Pen(Color.Red' 2.0f);                          for (int i = 0; i < m_lines.Count; i++)                          {                              p.Color = m_colors[i];                              Line line = m_lines[i];                              g.DrawLine(p' line.P1' line.P2);                          }                          p.Dispose();                        }                      break;                    case SampleDrawings.DrawBeziers:                      {                          int c = 0;                          Pen p = new Pen(Color.White' 2.0f);                          //Pen p = new Pen(Color.White);                                                  foreach (Bezier bz in m_beziers)                          {                              p.Color = m_colors[c++];                              g.DrawBezier(p' bz.P1' bz.P2' bz.P3' bz.P4);                          }                          p.Dispose();                      }                      break;                  case SampleDrawings.DrawText:                      {                          RectangleF layoutrect = new RectangleF();                          layoutrect.Size = g.MeasureString(m_drawInfo' m_info);                            for (int i = 0; i < m_texts.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              layoutrect.Location = m_texts[i];                              g.DrawString(m_drawInfo                                  ' m_info' m_brush1' layoutrect' m_strFormat);                          }                      }                        break;                  case SampleDrawings.DrawBitmaps:                      {                          Random rnd = new Random(7533);                            RectangleF bmpRect = new RectangleF();                          bmpRect.Size = m_bmp.Size;                            for (int i = 0; i < 20; i++)                          {                              bmpRect.Location = new PointF(rnd.Next(w)' rnd.Next(h));                              g.DrawImage(m_bmp' bmpRect);                          }                      }                      break;                      default:                      break;              }
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                    case SampleDrawings.FillSolidRects:                      {                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              g.FillRectangle(m_brush1' m_rects[i]);                          }                      }                      break;                    case SampleDrawings.Draw_Rects:                      {                          Pen p = new Pen(Color.Red);                          for (int i = 0; i < m_rects.Count; i++)                          {                              p.Color = m_colors[i];                              g.DrawRectangle(p' m_rects[i]);                          }                          p.Dispose();                      }                      break;                    case SampleDrawings.DrawRandomLines1:                      {                            Pen p = new Pen(Color.Red);                          for (int i = 0; i < m_lines.Count; i++)                          {                              p.Color = m_colors[i];                              Line line = m_lines[i];                              g.DrawLine(p' line.P1' line.P2);                          }                          p.Dispose();                      }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          Pen p = new Pen(Color.Red' 2.0f);                          for (int i = 0; i < m_lines.Count; i++)                          {                              p.Color = m_colors[i];                              Line line = m_lines[i];                              g.DrawLine(p' line.P1' line.P2);                          }                          p.Dispose();                        }                      break;                    case SampleDrawings.DrawBeziers:                      {                          int c = 0;                          Pen p = new Pen(Color.White' 2.0f);                          //Pen p = new Pen(Color.White);                                                  foreach (Bezier bz in m_beziers)                          {                              p.Color = m_colors[c++];                              g.DrawBezier(p' bz.P1' bz.P2' bz.P3' bz.P4);                          }                          p.Dispose();                      }                      break;                  case SampleDrawings.DrawText:                      {                          RectangleF layoutrect = new RectangleF();                          layoutrect.Size = g.MeasureString(m_drawInfo' m_info);                            for (int i = 0; i < m_texts.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              layoutrect.Location = m_texts[i];                              g.DrawString(m_drawInfo                                  ' m_info' m_brush1' layoutrect' m_strFormat);                          }                      }                        break;                  case SampleDrawings.DrawBitmaps:                      {                          Random rnd = new Random(7533);                            RectangleF bmpRect = new RectangleF();                          bmpRect.Size = m_bmp.Size;                            for (int i = 0; i < 20; i++)                          {                              bmpRect.Location = new PointF(rnd.Next(w)' rnd.Next(h));                              g.DrawImage(m_bmp' bmpRect);                          }                      }                      break;                      default:                      break;              }
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,Render,The following statement contains a magic number: switch (m_sampleDrawing)              {                    case SampleDrawings.FillSolidRects:                      {                          for (int i = 0; i < m_rects.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              g.FillRectangle(m_brush1' m_rects[i]);                          }                      }                      break;                    case SampleDrawings.Draw_Rects:                      {                          Pen p = new Pen(Color.Red);                          for (int i = 0; i < m_rects.Count; i++)                          {                              p.Color = m_colors[i];                              g.DrawRectangle(p' m_rects[i]);                          }                          p.Dispose();                      }                      break;                    case SampleDrawings.DrawRandomLines1:                      {                            Pen p = new Pen(Color.Red);                          for (int i = 0; i < m_lines.Count; i++)                          {                              p.Color = m_colors[i];                              Line line = m_lines[i];                              g.DrawLine(p' line.P1' line.P2);                          }                          p.Dispose();                      }                      break;                  case SampleDrawings.DrawRandomLines2:                      {                          Pen p = new Pen(Color.Red' 2.0f);                          for (int i = 0; i < m_lines.Count; i++)                          {                              p.Color = m_colors[i];                              Line line = m_lines[i];                              g.DrawLine(p' line.P1' line.P2);                          }                          p.Dispose();                        }                      break;                    case SampleDrawings.DrawBeziers:                      {                          int c = 0;                          Pen p = new Pen(Color.White' 2.0f);                          //Pen p = new Pen(Color.White);                                                  foreach (Bezier bz in m_beziers)                          {                              p.Color = m_colors[c++];                              g.DrawBezier(p' bz.P1' bz.P2' bz.P3' bz.P4);                          }                          p.Dispose();                      }                      break;                  case SampleDrawings.DrawText:                      {                          RectangleF layoutrect = new RectangleF();                          layoutrect.Size = g.MeasureString(m_drawInfo' m_info);                            for (int i = 0; i < m_texts.Count; i++)                          {                              m_brush1.Color = m_colors[i];                              layoutrect.Location = m_texts[i];                              g.DrawString(m_drawInfo                                  ' m_info' m_brush1' layoutrect' m_strFormat);                          }                      }                        break;                  case SampleDrawings.DrawBitmaps:                      {                          Random rnd = new Random(7533);                            RectangleF bmpRect = new RectangleF();                          bmpRect.Size = m_bmp.Size;                            for (int i = 0; i < 20; i++)                          {                              bmpRect.Location = new PointF(rnd.Next(w)' rnd.Next(h));                              g.DrawImage(m_bmp' bmpRect);                          }                      }                      break;                      default:                      break;              }
Magic Number,UsingDirect2D,GdiCanvas,D:\research\architectureSmells\repos1\SonyWWS_ATF\Samples\UsingDirect2D\GdiCanvas.cs,Render,The following statement contains a magic number: m_frameCount > 10
