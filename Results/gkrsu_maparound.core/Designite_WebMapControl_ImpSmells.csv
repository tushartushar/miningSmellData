Implementation smell,Namespace,Class,File,Method,Description
Long Method,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,addChildControls,The method has 330 lines of code.
Complex Method,MapAround.Caching,FileTileCacheAccessor,C:\repos\gkrsu_maparound.core\src\WebMapControl\Caching.cs,Invalidate,Cyclomatic complexity of the method is 10
Complex Method,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,Cyclomatic complexity of the method is 14
Long Parameter List,MapAround.Caching,FileTileCacheAccessor,C:\repos\gkrsu_maparound.core\src\WebMapControl\Caching.cs,SaveTileBytes,The method has 5 parameters. Parameters: layer' area' key' tile' contentType
Long Parameter List,MapAround.Caching,WebTileCacheAccessor,C:\repos\gkrsu_maparound.core\src\WebMapControl\Caching.cs,SaveTileBytes,The method has 5 parameters. Parameters: layer' area' key' tile' contentType
Long Parameter List,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,newButton,The method has 5 parameters. Parameters: id' display' title' imageUrl' onclick
Long Statement,MapAround.Caching,WebCacheAccessor,C:\repos\gkrsu_maparound.core\src\WebMapControl\Caching.cs,AddOrReplaceCollection,The length of the statement  "            _cache.Insert(Key + featureTypeSubKey(featureType)' features' null' System.Web.Caching.Cache.NoAbsoluteExpiration' _expirationTimeout' CacheItemPriority.NotRemovable' null); " is 173.
Long Statement,MapAround.Caching,WebCacheAccessor,C:\repos\gkrsu_maparound.core\src\WebMapControl\Caching.cs,AddOrReplaceIndex,The length of the statement  "            _cache.Insert(Key + featureTypeSubKey(featureType) + "index"' index' null' System.Web.Caching.Cache.NoAbsoluteExpiration' _expirationTimeout' CacheItemPriority.NotRemovable' null); " is 180.
Long Statement,MapAround.Caching,WebCacheAccessor,C:\repos\gkrsu_maparound.core\src\WebMapControl\Caching.cs,AddOrReplaceAttributeNames,The length of the statement  "            _cache.Insert(Key + "attributeNames"' attributeNames' null' System.Web.Caching.Cache.NoAbsoluteExpiration' _expirationTimeout' CacheItemPriority.NotRemovable' null); " is 165.
Long Statement,MapAround.Caching,WebTileCacheAccessor,C:\repos\gkrsu_maparound.core\src\WebMapControl\Caching.cs,SaveTileBytes,The length of the statement  "            _cache.Insert(_prefix + layer+key+contentType' tile' null' System.Web.Caching.Cache.NoAbsoluteExpiration' _expirationTimeout' CacheItemPriority.NotRemovable' null); " is 164.
Long Statement,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,registerScripts,The length of the statement  "                    "pointColor: \"" + ColorTranslator.ToHtml(DrawingToolsPointColor) + "\"' lineColor: \"" + ColorTranslator.ToHtml(DrawingToolsLineColor) + "\"' shadowColor: \"rgba(0' 0' 0' 0.5)\"' pointRadius: " + DrawingToolsPointSize.ToString(CultureInfo.InvariantCulture) + " is 259.
Long Statement,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,registerScripts,The length of the statement  "                    "' lineWidth: " + DrawingToolsLineWidth.ToString(CultureInfo.InvariantCulture) + "' shadowOffset: 2' canvasWidth: " + MapWidth.ToString() + " is 139.
Long Statement,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,registerScripts,The length of the statement  "                    "pointColor: \"" + ColorTranslator.ToHtml(DrawingToolsPointColor) + "\"' lineColor: \"" + ColorTranslator.ToHtml(DrawingToolsLineColor) + "\"' shadowColor: \"rgba(0' 0' 0' 0.5)\"' pointRadius: " + DrawingToolsPointSize.ToString() + " is 231.
Long Statement,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,registerScripts,The length of the statement  "                    "' lineWidth: " + DrawingToolsLineWidth.ToString(CultureInfo.InvariantCulture) + "' shadowOffset: 2' canvasWidth: " + MapWidth.ToString(CultureInfo.InvariantCulture) + "' canvasHeight: " + MapHeight.ToString() + " is 211.
Long Statement,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,registerScripts,The length of the statement  "                    "' fillColor: \"rgba(" + fillColor + "' 0.3)\"' pixelSize: " + pixelSize + "' doc: document' canvasId: \"" + _contourDrawingCanvas.ClientID + " is 141.
Long Statement,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,translateClientCoords,The length of the statement  "                    _clientFeatureCoordinates.Add(ScreenToMap(PlanimetryEnvironment.NewCoordinate(double.Parse(args[i]' CultureInfo.InvariantCulture)' " is 130.
Complex Conditional,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,encodeValue,The conditional expression  "char.IsLetterOrDigit(chars[i]) ||                         char.IsNumber(chars[i]) ||                         char.IsPunctuation(chars[i]) ||                          chars[i] == '='"  is complex.
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,addChildControls,The following statement contains a magic number: int loaderHeight = 12;
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,addChildControls,The following statement contains a magic number: int loaderWidth = 12;
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,addChildControls,The following statement contains a magic number: _imgMapLoading.Style.Add("top"' ((MapHeight - loaderHeight) / 2).ToString(CultureInfo.InvariantCulture) + "px");
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,addChildControls,The following statement contains a magic number: _imgMapLoading.Style.Add("left"' ((MapWidth - loaderWidth) / 2).ToString(CultureInfo.InvariantCulture) + "px");
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,addChildControls,The following statement contains a magic number: if (LayersControl)              {                  _layersControl = new System.Web.UI.HtmlControls.HtmlGenericControl("div");                  _layersControl.ID = "divLayers";                  _layersControl.Style.Add("opacity"' "0.75");                  _layersControl.Style.Add("background"' ColorTranslator.ToHtml(ToolsColor));                  _layersControl.Style.Add("z-index"' "70");                  _layersControl.Style.Add("position"' "absolute");                  _layersControl.Style.Add("overflow"' "hidden");                  _layersControl.Style.Add("padding"' "0px");                  _layersControl.Style.Add("filter"' "alpha(opacity=75)");                  _layersControl.Style.Add("margin"' "0px");                  _layersControl.Style.Add("border"' "1px solid #777777");                    _layersControl.Style.Add("top"' "5px");                  _layersControl.Style.Add("left"' (MapWidth - 253).ToString() + "px");                  _layersControl.Style.Add("height"' "25px");                  _layersControl.Style.Add("width"' "241px");                    HtmlGenericControl p = new HtmlGenericControl("p");                  p.Style.Add("margin"' "0px");                  p.Style.Add("padding"' "0x 0px 0px 0px");                  p.Style.Add("text-align"' "center");                  p.Style.Add("font-family"' "Arial' Helvetica' sans-serif");                  p.Style.Add("font-weight"' "bold");                  p.Style.Add("font-size"' "small");                  p.Style.Add("width"' "213px");                  p.Style.Add("cursor"' "pointer");                    _btnSwitchLayers = new HtmlGenericControl("input");                  _btnSwitchLayers.ID = "btnSwitchLayerControl";                    _btnSwitchLayers.Style.Add("margin"' "2px 0px 3px 20px");                  _btnSwitchLayers.Style.Add("color"' "#555555");                  _btnSwitchLayers.Style.Add("background-color"' ColorTranslator.ToHtml(ToolsColor));                  _btnSwitchLayers.Style.Add("border-width"' "0px");                    _btnSwitchLayers.Style.Add("border-style"' "None");                  _btnSwitchLayers.Style.Add("font-weight"' "bold");                  _btnSwitchLayers.Style.Add("height"' "auto");                  _btnSwitchLayers.Style.Add("cursor"' "pointer");                    _btnSwitchLayers.Attributes.Add("type"' "submit");                  _btnSwitchLayers.Attributes.Add("value"' LayersControlCaption);                    p.Controls.Add(_btnSwitchLayers);                  HtmlGenericControl layersPlaceHolder = new HtmlGenericControl("div");                  layersPlaceHolder.ID = "layersPlaceHolder";                  layersPlaceHolder.Controls.Add(p);                    HtmlGenericControl linksHolder = new HtmlGenericControl("p");                  linksHolder.Style.Add("margin"' "5px 0px 8px 5px");                  linksHolder.Style.Add("font-size"' "x-small");                  linksHolder.Style.Add("font-family"' "Arial' Helvetica' sans-serif");                  layersPlaceHolder.Controls.Add(linksHolder);                    HtmlGenericControl lnkShowAll = new HtmlGenericControl("a");                  lnkShowAll.Style.Add("text-decoration"' "underline");                  lnkShowAll.Style.Add("color"' "#0000FF");                  lnkShowAll.Style.Add("cursor"' "pointer");                    lnkShowAll.Attributes.Add("onclick"' "javascript:" + JsVarName + ".showAllLayers();");                  lnkShowAll.InnerText = "Show all";                  linksHolder.Controls.Add(lnkShowAll);                    HtmlGenericControl space = new HtmlGenericControl("span");                  space.InnerHtml = "&nbsp;&nbsp;";                  linksHolder.Controls.Add(space);                    HtmlGenericControl lnkCloseAll = new HtmlGenericControl("a");                  lnkCloseAll.Style.Add("text-decoration"' "underline");                  lnkCloseAll.Style.Add("color"' "#0000FF");                  lnkCloseAll.Style.Add("cursor"' "pointer");                  lnkCloseAll.InnerText = "Hide all";                    lnkCloseAll.Attributes.Add("onclick"' "javascript:" + JsVarName + ".hideAllLayers();");                  linksHolder.Controls.Add(lnkCloseAll);                    _layerRecordsHolder = new HtmlGenericControl("div");                  _layerRecordsHolder.ID = "layerRecordsHolder";                  _layerRecordsHolder.Style.Add("font-size"' "x-small");                  _layerRecordsHolder.Style.Add("font-family"' "Arial' Helvetica' sans-serif");                  layersPlaceHolder.Controls.Add(_layerRecordsHolder);                    _layersControl.Controls.Add(layersPlaceHolder);                  Controls.Add(_layersControl);                  }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,addChildControls,The following statement contains a magic number: if (ScaleBar)              {                  int scaleSegmentLength = 0;                  string scaleLabel = "unknown";                  getScalePresentationData(Workspace.ViewBox' 110' ref scaleSegmentLength' ref scaleLabel);                    _scaleSegment = new HtmlGenericControl("div");                  _scaleSegment.ID = "scaleSegment";                  _scaleSegment.Style.Add("font-size"' "0");                  _scaleSegment.Style.Add("z-index"' "54");                  _scaleSegment.Style.Add("width"' scaleSegmentLength.ToString() + "px");                  _scaleSegment.Style.Add("height"' "3px");                  _scaleSegment.Style.Add("border-style"' "solid");                  _scaleSegment.Style.Add("border-width"' "1px");                  _scaleSegment.Style.Add("padding"' "0px 0px 0px 0px");                  _scaleSegment.Style.Add("margin"' "0px");                  _scaleSegment.Style.Add("opacity"' "0.75");                  _scaleSegment.Style.Add("filter"' " alpha(opacity=75)");                  _scaleSegment.Style.Add("background"' ColorTranslator.ToHtml(ScaleSegmentColor));                  _scaleSegment.Style.Add("position"' "absolute");                  _scaleSegment.Style.Add("top"' (MapHeight - 20).ToString() + "px");                  _scaleSegment.Style.Add("left"' "10px");                    Controls.Add(_scaleSegment);                    _scaleLabel = new HtmlGenericControl("span");                  _scaleLabel.Style.Add("border-style"' "none");                  _scaleLabel.Style.Add("padding"' "0px 0px 0px 0px");                  _scaleLabel.Style.Add("margin"' "0px");                  _scaleLabel.Style.Add("font-family"' "Arial' Helvetica' sans-serif");                  _scaleLabel.Style.Add("font-weight"' "bold");                  _scaleLabel.Style.Add("font-size"' "small");                  _scaleLabel.Style.Add("color"' ColorTranslator.ToHtml(ScaleLabelColor));                  _scaleLabel.Style.Add("background"' "transparent");                  _scaleLabel.Style.Add("position"' "absolute");                  _scaleLabel.Style.Add("top"' (MapHeight - 40).ToString() + "px");                  _scaleLabel.Style.Add("left"' "10px");                  _scaleLabel.Style.Add("height"' "18px");                  _scaleLabel.Style.Add("opacity"' "0.75");                  _scaleLabel.Style.Add("filter"' "alpha(opacity=75)");                  _scaleLabel.Style.Add("width"' "auto");                  _scaleLabel.Style.Add("z-index"' "54");                  _scaleLabel.InnerText = scaleLabel;                    Controls.Add(_scaleLabel);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,addChildControls,The following statement contains a magic number: if (ScaleBar)              {                  int scaleSegmentLength = 0;                  string scaleLabel = "unknown";                  getScalePresentationData(Workspace.ViewBox' 110' ref scaleSegmentLength' ref scaleLabel);                    _scaleSegment = new HtmlGenericControl("div");                  _scaleSegment.ID = "scaleSegment";                  _scaleSegment.Style.Add("font-size"' "0");                  _scaleSegment.Style.Add("z-index"' "54");                  _scaleSegment.Style.Add("width"' scaleSegmentLength.ToString() + "px");                  _scaleSegment.Style.Add("height"' "3px");                  _scaleSegment.Style.Add("border-style"' "solid");                  _scaleSegment.Style.Add("border-width"' "1px");                  _scaleSegment.Style.Add("padding"' "0px 0px 0px 0px");                  _scaleSegment.Style.Add("margin"' "0px");                  _scaleSegment.Style.Add("opacity"' "0.75");                  _scaleSegment.Style.Add("filter"' " alpha(opacity=75)");                  _scaleSegment.Style.Add("background"' ColorTranslator.ToHtml(ScaleSegmentColor));                  _scaleSegment.Style.Add("position"' "absolute");                  _scaleSegment.Style.Add("top"' (MapHeight - 20).ToString() + "px");                  _scaleSegment.Style.Add("left"' "10px");                    Controls.Add(_scaleSegment);                    _scaleLabel = new HtmlGenericControl("span");                  _scaleLabel.Style.Add("border-style"' "none");                  _scaleLabel.Style.Add("padding"' "0px 0px 0px 0px");                  _scaleLabel.Style.Add("margin"' "0px");                  _scaleLabel.Style.Add("font-family"' "Arial' Helvetica' sans-serif");                  _scaleLabel.Style.Add("font-weight"' "bold");                  _scaleLabel.Style.Add("font-size"' "small");                  _scaleLabel.Style.Add("color"' ColorTranslator.ToHtml(ScaleLabelColor));                  _scaleLabel.Style.Add("background"' "transparent");                  _scaleLabel.Style.Add("position"' "absolute");                  _scaleLabel.Style.Add("top"' (MapHeight - 40).ToString() + "px");                  _scaleLabel.Style.Add("left"' "10px");                  _scaleLabel.Style.Add("height"' "18px");                  _scaleLabel.Style.Add("opacity"' "0.75");                  _scaleLabel.Style.Add("filter"' "alpha(opacity=75)");                  _scaleLabel.Style.Add("width"' "auto");                  _scaleLabel.Style.Add("z-index"' "54");                  _scaleLabel.InnerText = scaleLabel;                    Controls.Add(_scaleLabel);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,addChildControls,The following statement contains a magic number: if (ScaleBar)              {                  int scaleSegmentLength = 0;                  string scaleLabel = "unknown";                  getScalePresentationData(Workspace.ViewBox' 110' ref scaleSegmentLength' ref scaleLabel);                    _scaleSegment = new HtmlGenericControl("div");                  _scaleSegment.ID = "scaleSegment";                  _scaleSegment.Style.Add("font-size"' "0");                  _scaleSegment.Style.Add("z-index"' "54");                  _scaleSegment.Style.Add("width"' scaleSegmentLength.ToString() + "px");                  _scaleSegment.Style.Add("height"' "3px");                  _scaleSegment.Style.Add("border-style"' "solid");                  _scaleSegment.Style.Add("border-width"' "1px");                  _scaleSegment.Style.Add("padding"' "0px 0px 0px 0px");                  _scaleSegment.Style.Add("margin"' "0px");                  _scaleSegment.Style.Add("opacity"' "0.75");                  _scaleSegment.Style.Add("filter"' " alpha(opacity=75)");                  _scaleSegment.Style.Add("background"' ColorTranslator.ToHtml(ScaleSegmentColor));                  _scaleSegment.Style.Add("position"' "absolute");                  _scaleSegment.Style.Add("top"' (MapHeight - 20).ToString() + "px");                  _scaleSegment.Style.Add("left"' "10px");                    Controls.Add(_scaleSegment);                    _scaleLabel = new HtmlGenericControl("span");                  _scaleLabel.Style.Add("border-style"' "none");                  _scaleLabel.Style.Add("padding"' "0px 0px 0px 0px");                  _scaleLabel.Style.Add("margin"' "0px");                  _scaleLabel.Style.Add("font-family"' "Arial' Helvetica' sans-serif");                  _scaleLabel.Style.Add("font-weight"' "bold");                  _scaleLabel.Style.Add("font-size"' "small");                  _scaleLabel.Style.Add("color"' ColorTranslator.ToHtml(ScaleLabelColor));                  _scaleLabel.Style.Add("background"' "transparent");                  _scaleLabel.Style.Add("position"' "absolute");                  _scaleLabel.Style.Add("top"' (MapHeight - 40).ToString() + "px");                  _scaleLabel.Style.Add("left"' "10px");                  _scaleLabel.Style.Add("height"' "18px");                  _scaleLabel.Style.Add("opacity"' "0.75");                  _scaleLabel.Style.Add("filter"' "alpha(opacity=75)");                  _scaleLabel.Style.Add("width"' "auto");                  _scaleLabel.Style.Add("z-index"' "54");                  _scaleLabel.InnerText = scaleLabel;                    Controls.Add(_scaleLabel);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,GetCallbackResult,The following statement contains a magic number: if (!string.IsNullOrEmpty(_layers))              {                  result = "layers" + _layers;                  _layers = string.Empty;                  return result;              }              else              {                  result = "objectInfo" + ObjectInfoHtml.Length.ToString() + ObjectInfoHtml;                  result += " " + (Workspace.ViewBox.Width / w).ToString(CultureInfo.InvariantCulture) + " ";                  result += "scaleData";                  if (ScaleBar)                  {                      int segmentLength = 0;                      string label = string.Empty;                      getScalePresentationData(Workspace.ViewBox' 110' ref segmentLength' ref label);                      result += (label.Length + 1).ToString() + " " +                                 label.ToString() + segmentLength.ToString() + " ";                  }                  else                      result += "0";                    if(!string.IsNullOrEmpty(_mode))                      result += "mode" + _mode + " ";                    string featureCoords = string.Empty;                  if(_clientFeatureCoordinates.Count > 0)                  {                      featureCoords += "shapeCoords" + _clientFeatureCoordinates.Count + " ";                      foreach (ICoordinate p in _clientFeatureCoordinates)                      {                          ICoordinate imagePoint = MapToScreenD(p);                          featureCoords += imagePoint.X.ToString(CultureInfo.InvariantCulture) + " ";                          featureCoords += imagePoint.Y.ToString(CultureInfo.InvariantCulture) + " ";                      }                  }                    result += featureCoords;                    Random r = new Random();                    string s = Context.Request.FilePath;                  string urlLeftPart = Context.Request.Url.GetLeftPart(UriPartial.Authority) + s.Substring(0' s.LastIndexOf('/'));                    result +=                      urlLeftPart + "/" + ResolveClientUrl(HttpHandlerName) +                      "?width=" + w.ToString() +                      "&height=" + h.ToString() +                      "&workspace=" + WorkspaceUniqString +                      "&rn=" + r.Next().ToString();                    return result;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: if (args[0].StartsWith("post"))              {                  Collection<ICoordinate> points = new Collection<ICoordinate>();                    for (int i = 1; i < args.Length; i += 2)                      if (!string.IsNullOrEmpty(args[i]))                          points.Add(ScreenToMap(PlanimetryEnvironment.NewCoordinate(double.Parse(args[i]' CultureInfo.InvariantCulture)'                                                  double.Parse(args[i + 1]' CultureInfo.InvariantCulture))));                    ICoordinate[] pointsArr = new ICoordinate[points.Count];                  for (int i = 0; i < pointsArr.Length; i++)                      pointsArr[i] = points[i];                    FeatureType type = FeatureType.Point;                    if (args[0].StartsWith("postPolygon"))                      type = FeatureType.Polygon;                    if (args[0].StartsWith("postPolyline"))                      type = FeatureType.Polyline;                    if (FeaturePosted != null)                      FeaturePosted(this' new FeaturePostEventArgs(type' pointsArr));                  return;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: if (args[0].StartsWith("layerVisibilityChange"))              {                  int n;                  string s = args[0].Substring(21);                  if (int.TryParse(s' out n))                      doLayerVisibilityChange(n);                  else                  {                      if (s == "hideAll")                      {                          doSetAllLayersVisibility(false);                      }                      else if (s == "showAll")                      {                          doSetAllLayersVisibility(true);                      }                  }                  return;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: if (args.Length > 2)              {                  if (args[1].EndsWith("px"))                      args[1] = args[1].Substring(0' args[1].Length - 2);                    if (args[2].EndsWith("px"))                      args[2] = args[2].Substring(0' args[2].Length - 2);                    x = int.Parse(args[1]);                  y = int.Parse(args[2]);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: if (args.Length > 2)              {                  if (args[1].EndsWith("px"))                      args[1] = args[1].Substring(0' args[1].Length - 2);                    if (args[2].EndsWith("px"))                      args[2] = args[2].Substring(0' args[2].Length - 2);                    x = int.Parse(args[1]);                  y = int.Parse(args[2]);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: if (args.Length > 2)              {                  if (args[1].EndsWith("px"))                      args[1] = args[1].Substring(0' args[1].Length - 2);                    if (args[2].EndsWith("px"))                      args[2] = args[2].Substring(0' args[2].Length - 2);                    x = int.Parse(args[1]);                  y = int.Parse(args[2]);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: if (args.Length > 2)              {                  if (args[1].EndsWith("px"))                      args[1] = args[1].Substring(0' args[1].Length - 2);                    if (args[2].EndsWith("px"))                      args[2] = args[2].Substring(0' args[2].Length - 2);                    x = int.Parse(args[1]);                  y = int.Parse(args[2]);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: if (args.Length > 2)              {                  if (args[1].EndsWith("px"))                      args[1] = args[1].Substring(0' args[1].Length - 2);                    if (args[2].EndsWith("px"))                      args[2] = args[2].Substring(0' args[2].Length - 2);                    x = int.Parse(args[1]);                  y = int.Parse(args[2]);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: if (args.Length > 2)              {                  if (args[1].EndsWith("px"))                      args[1] = args[1].Substring(0' args[1].Length - 2);                    if (args[2].EndsWith("px"))                      args[2] = args[2].Substring(0' args[2].Length - 2);                    x = int.Parse(args[1]);                  y = int.Parse(args[2]);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: if (args.Length > 2)              {                  if (args[1].EndsWith("px"))                      args[1] = args[1].Substring(0' args[1].Length - 2);                    if (args[2].EndsWith("px"))                      args[2] = args[2].Substring(0' args[2].Length - 2);                    x = int.Parse(args[1]);                  y = int.Parse(args[2]);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: if (args.Length > 2)              {                  if (args[1].EndsWith("px"))                      args[1] = args[1].Substring(0' args[1].Length - 2);                    if (args[2].EndsWith("px"))                      args[2] = args[2].Substring(0' args[2].Length - 2);                    x = int.Parse(args[1]);                  y = int.Parse(args[2]);              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: switch (args[0])              {                   case "hideSelection":                      doHideSelection();                      break;                  case "layerListQuery":                      generateLayerList();                      break;                  case "drag":                  case "lineMeasurer":                  case "areaMeasurer":                      translateClientCoords(args' 3);                      doDragMap(x' y);                      break;                  case "zoomIn":                      translateClientCoords(args' 3);                      changeZoom(ZoomStep' x' y);                      break;                  case "zoomOut":                      translateClientCoords(args' 3);                      changeZoom(-ZoomStep' x' y);                      break;                  case "center":                      translateClientCoords(args' 3);                      doCenterMap(x' y);                      break;                  case "info":                      doSelectObject(x' y);                      break;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: switch (args[0])              {                   case "hideSelection":                      doHideSelection();                      break;                  case "layerListQuery":                      generateLayerList();                      break;                  case "drag":                  case "lineMeasurer":                  case "areaMeasurer":                      translateClientCoords(args' 3);                      doDragMap(x' y);                      break;                  case "zoomIn":                      translateClientCoords(args' 3);                      changeZoom(ZoomStep' x' y);                      break;                  case "zoomOut":                      translateClientCoords(args' 3);                      changeZoom(-ZoomStep' x' y);                      break;                  case "center":                      translateClientCoords(args' 3);                      doCenterMap(x' y);                      break;                  case "info":                      doSelectObject(x' y);                      break;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: switch (args[0])              {                   case "hideSelection":                      doHideSelection();                      break;                  case "layerListQuery":                      generateLayerList();                      break;                  case "drag":                  case "lineMeasurer":                  case "areaMeasurer":                      translateClientCoords(args' 3);                      doDragMap(x' y);                      break;                  case "zoomIn":                      translateClientCoords(args' 3);                      changeZoom(ZoomStep' x' y);                      break;                  case "zoomOut":                      translateClientCoords(args' 3);                      changeZoom(-ZoomStep' x' y);                      break;                  case "center":                      translateClientCoords(args' 3);                      doCenterMap(x' y);                      break;                  case "info":                      doSelectObject(x' y);                      break;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following statement contains a magic number: switch (args[0])              {                   case "hideSelection":                      doHideSelection();                      break;                  case "layerListQuery":                      generateLayerList();                      break;                  case "drag":                  case "lineMeasurer":                  case "areaMeasurer":                      translateClientCoords(args' 3);                      doDragMap(x' y);                      break;                  case "zoomIn":                      translateClientCoords(args' 3);                      changeZoom(ZoomStep' x' y);                      break;                  case "zoomOut":                      translateClientCoords(args' 3);                      changeZoom(-ZoomStep' x' y);                      break;                  case "center":                      translateClientCoords(args' 3);                      doCenterMap(x' y);                      break;                  case "info":                      doSelectObject(x' y);                      break;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,translateClientCoords,The following statement contains a magic number: for(int i = startIndex; i < args.Length; i += 2)                  if (!string.IsNullOrEmpty(args[i]))                      _clientFeatureCoordinates.Add(ScreenToMap(PlanimetryEnvironment.NewCoordinate(double.Parse(args[i]' CultureInfo.InvariantCulture)'                                                                    double.Parse(args[i + 1]' CultureInfo.InvariantCulture))));
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,encodeValue,The following statement contains a magic number: for (int i = 0; i < chars.Count(); i++)              {                  byte[] charBytes = Encoding.UTF8.GetBytes(chars' i' 1);                  if (charBytes[0] == 208 || charBytes[0] == 209)                  {                      for (int j = 0; j < charBytes.Count(); j++)                          result += "%" + Convert.ToString(charBytes[j]' 16);                  }                  else                  {                      if (char.IsLetterOrDigit(chars[i]) ||                         char.IsNumber(chars[i]) ||                         char.IsPunctuation(chars[i]) ||                          chars[i] == '=')                          result += Encoding.UTF8.GetChars(charBytes)[0];                      else                          result += "%" + Convert.ToString(charBytes[0]' 16);                  }              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,encodeValue,The following statement contains a magic number: for (int i = 0; i < chars.Count(); i++)              {                  byte[] charBytes = Encoding.UTF8.GetBytes(chars' i' 1);                  if (charBytes[0] == 208 || charBytes[0] == 209)                  {                      for (int j = 0; j < charBytes.Count(); j++)                          result += "%" + Convert.ToString(charBytes[j]' 16);                  }                  else                  {                      if (char.IsLetterOrDigit(chars[i]) ||                         char.IsNumber(chars[i]) ||                         char.IsPunctuation(chars[i]) ||                          chars[i] == '=')                          result += Encoding.UTF8.GetChars(charBytes)[0];                      else                          result += "%" + Convert.ToString(charBytes[0]' 16);                  }              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,encodeValue,The following statement contains a magic number: for (int i = 0; i < chars.Count(); i++)              {                  byte[] charBytes = Encoding.UTF8.GetBytes(chars' i' 1);                  if (charBytes[0] == 208 || charBytes[0] == 209)                  {                      for (int j = 0; j < charBytes.Count(); j++)                          result += "%" + Convert.ToString(charBytes[j]' 16);                  }                  else                  {                      if (char.IsLetterOrDigit(chars[i]) ||                         char.IsNumber(chars[i]) ||                         char.IsPunctuation(chars[i]) ||                          chars[i] == '=')                          result += Encoding.UTF8.GetChars(charBytes)[0];                      else                          result += "%" + Convert.ToString(charBytes[0]' 16);                  }              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,encodeValue,The following statement contains a magic number: for (int i = 0; i < chars.Count(); i++)              {                  byte[] charBytes = Encoding.UTF8.GetBytes(chars' i' 1);                  if (charBytes[0] == 208 || charBytes[0] == 209)                  {                      for (int j = 0; j < charBytes.Count(); j++)                          result += "%" + Convert.ToString(charBytes[j]' 16);                  }                  else                  {                      if (char.IsLetterOrDigit(chars[i]) ||                         char.IsNumber(chars[i]) ||                         char.IsPunctuation(chars[i]) ||                          chars[i] == '=')                          result += Encoding.UTF8.GetChars(charBytes)[0];                      else                          result += "%" + Convert.ToString(charBytes[0]' 16);                  }              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,changeZoom,The following statement contains a magic number: if (deltaPercent != 0)              {                  double delta = (double)deltaPercent / 100;                    if (mouseX < 0 || mouseX > MapWidth || !AlignmentWhileZooming)                      mouseX = MapWidth / 2;                  if (mouseY < 0 || mouseY > MapHeight || !AlignmentWhileZooming)                      mouseY = MapHeight / 2;                    ICoordinate node = ScreenToMap(new Point(mouseX' mouseY));                    double leftWidth = node.X - workspace.ViewBox.MinX;                  double rightWidth = workspace.ViewBox.MaxX - node.X;                  double bottomHeight = node.Y - workspace.ViewBox.MinY;                  double topHeight = workspace.ViewBox.MaxY - node.Y;                    double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;                    BoundingRectangle viewbox =                      new BoundingRectangle(node.X - leftWidth * factor'                                            node.Y - bottomHeight * factor'                                            node.X + rightWidth * factor'                                            node.Y + topHeight * factor);                    workspace.ViewBox = viewbox;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,changeZoom,The following statement contains a magic number: if (deltaPercent != 0)              {                  double delta = (double)deltaPercent / 100;                    if (mouseX < 0 || mouseX > MapWidth || !AlignmentWhileZooming)                      mouseX = MapWidth / 2;                  if (mouseY < 0 || mouseY > MapHeight || !AlignmentWhileZooming)                      mouseY = MapHeight / 2;                    ICoordinate node = ScreenToMap(new Point(mouseX' mouseY));                    double leftWidth = node.X - workspace.ViewBox.MinX;                  double rightWidth = workspace.ViewBox.MaxX - node.X;                  double bottomHeight = node.Y - workspace.ViewBox.MinY;                  double topHeight = workspace.ViewBox.MaxY - node.Y;                    double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;                    BoundingRectangle viewbox =                      new BoundingRectangle(node.X - leftWidth * factor'                                            node.Y - bottomHeight * factor'                                            node.X + rightWidth * factor'                                            node.Y + topHeight * factor);                    workspace.ViewBox = viewbox;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,changeZoom,The following statement contains a magic number: if (deltaPercent != 0)              {                  double delta = (double)deltaPercent / 100;                    if (mouseX < 0 || mouseX > MapWidth || !AlignmentWhileZooming)                      mouseX = MapWidth / 2;                  if (mouseY < 0 || mouseY > MapHeight || !AlignmentWhileZooming)                      mouseY = MapHeight / 2;                    ICoordinate node = ScreenToMap(new Point(mouseX' mouseY));                    double leftWidth = node.X - workspace.ViewBox.MinX;                  double rightWidth = workspace.ViewBox.MaxX - node.X;                  double bottomHeight = node.Y - workspace.ViewBox.MinY;                  double topHeight = workspace.ViewBox.MaxY - node.Y;                    double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;                    BoundingRectangle viewbox =                      new BoundingRectangle(node.X - leftWidth * factor'                                            node.Y - bottomHeight * factor'                                            node.X + rightWidth * factor'                                            node.Y + topHeight * factor);                    workspace.ViewBox = viewbox;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,changeZoom,The following statement contains a magic number: if (deltaPercent != 0)              {                  double delta = (double)deltaPercent / 100;                    if (mouseX < 0 || mouseX > MapWidth || !AlignmentWhileZooming)                      mouseX = MapWidth / 2;                  if (mouseY < 0 || mouseY > MapHeight || !AlignmentWhileZooming)                      mouseY = MapHeight / 2;                    ICoordinate node = ScreenToMap(new Point(mouseX' mouseY));                    double leftWidth = node.X - workspace.ViewBox.MinX;                  double rightWidth = workspace.ViewBox.MaxX - node.X;                  double bottomHeight = node.Y - workspace.ViewBox.MinY;                  double topHeight = workspace.ViewBox.MaxY - node.Y;                    double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;                    BoundingRectangle viewbox =                      new BoundingRectangle(node.X - leftWidth * factor'                                            node.Y - bottomHeight * factor'                                            node.X + rightWidth * factor'                                            node.Y + topHeight * factor);                    workspace.ViewBox = viewbox;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,changeZoom,The following statement contains a magic number: if (deltaPercent != 0)              {                  double delta = (double)deltaPercent / 100;                    if (mouseX < 0 || mouseX > MapWidth || !AlignmentWhileZooming)                      mouseX = MapWidth / 2;                  if (mouseY < 0 || mouseY > MapHeight || !AlignmentWhileZooming)                      mouseY = MapHeight / 2;                    ICoordinate node = ScreenToMap(new Point(mouseX' mouseY));                    double leftWidth = node.X - workspace.ViewBox.MinX;                  double rightWidth = workspace.ViewBox.MaxX - node.X;                  double bottomHeight = node.Y - workspace.ViewBox.MinY;                  double topHeight = workspace.ViewBox.MaxY - node.Y;                    double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;                    BoundingRectangle viewbox =                      new BoundingRectangle(node.X - leftWidth * factor'                                            node.Y - bottomHeight * factor'                                            node.X + rightWidth * factor'                                            node.Y + topHeight * factor);                    workspace.ViewBox = viewbox;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,changeZoom,The following statement contains a magic number: if (deltaPercent != 0)              {                  double delta = (double)deltaPercent / 100;                    if (mouseX < 0 || mouseX > MapWidth || !AlignmentWhileZooming)                      mouseX = MapWidth / 2;                  if (mouseY < 0 || mouseY > MapHeight || !AlignmentWhileZooming)                      mouseY = MapHeight / 2;                    ICoordinate node = ScreenToMap(new Point(mouseX' mouseY));                    double leftWidth = node.X - workspace.ViewBox.MinX;                  double rightWidth = workspace.ViewBox.MaxX - node.X;                  double bottomHeight = node.Y - workspace.ViewBox.MinY;                  double topHeight = workspace.ViewBox.MaxY - node.Y;                    double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;                    BoundingRectangle viewbox =                      new BoundingRectangle(node.X - leftWidth * factor'                                            node.Y - bottomHeight * factor'                                            node.X + rightWidth * factor'                                            node.Y + topHeight * factor);                    workspace.ViewBox = viewbox;              }
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,doCenterMap,The following statement contains a magic number: double dx = x - workspace.ViewBox.Width / 2 - workspace.ViewBox.MinX;
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,doCenterMap,The following statement contains a magic number: double dy = y - workspace.ViewBox.Height / 2 - workspace.ViewBox.MinY;
Magic Number,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,doSelectObject,The following statement contains a magic number: workspace.Map.SelectionPointRadius =                  4 * workspace.ViewBox.Width / MapWidth;
Magic Number,MapAround.UI.Web,MapImageHandler,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapImageHandler.cs,getMapWidth,The following statement contains a magic number: return getIntParam("width"' 800' request);
Magic Number,MapAround.UI.Web,MapImageHandler,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapImageHandler.cs,getMapHeight,The following statement contains a magic number: return getIntParam("height"' 600' request);
Missing Default,MapAround.Caching,WebCacheAccessor,C:\repos\gkrsu_maparound.core\src\WebMapControl\Caching.cs,featureTypeSubKey,The following switch statement is missing a default case: switch (featureType)              {                   case FeatureType.Point:                      return "points";                  case FeatureType.Polyline:                      return "polylines";                  case FeatureType.Polygon:                      return "polygons";              }
Missing Default,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,SwitchToMode,The following switch statement is missing a default case: switch (mode)              {                   case MapControlMode.Pan:                       _mode = "drag";                      break;                  case MapControlMode.Select:                      _mode = "info";                      break;                  case MapControlMode.DrawPolyline:                      _mode = "lineMeasurer";                      break;                  case MapControlMode.DrawPolygon:                      _mode = "areaMeasurer";                      break;              }
Missing Default,MapAround.UI.Web,MapControl,C:\repos\gkrsu_maparound.core\src\WebMapControl\MapControl.cs,RaiseCallbackEvent,The following switch statement is missing a default case: switch (args[0])              {                   case "hideSelection":                      doHideSelection();                      break;                  case "layerListQuery":                      generateLayerList();                      break;                  case "drag":                  case "lineMeasurer":                  case "areaMeasurer":                      translateClientCoords(args' 3);                      doDragMap(x' y);                      break;                  case "zoomIn":                      translateClientCoords(args' 3);                      changeZoom(ZoomStep' x' y);                      break;                  case "zoomOut":                      translateClientCoords(args' 3);                      changeZoom(-ZoomStep' x' y);                      break;                  case "center":                      translateClientCoords(args' 3);                      doCenterMap(x' y);                      break;                  case "info":                      doSelectObject(x' y);                      break;              }
