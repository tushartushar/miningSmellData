Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseLeftButtonUp,Cyclomatic complexity of the method is 9
Complex Method,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,SetViewBox,Cyclomatic complexity of the method is 10
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseLeftButtonUp,The length of the statement  "						AnimatedPan ((_offsetX + (avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration))' (_offsetY + (avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration))); " is 165.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseLeftButtonUp,The length of the statement  "					Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY)); " is 125.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseLeftButtonUp,The length of the statement  "					BoundingRectangle r = new BoundingRectangle (Math.Min (p1.X' p2.X)' Math.Min (p1.Y' p2.Y)' Math.Max (p1.X' p2.X)' Math.Max (p1.Y' p2.Y)); " is 137.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnSizeChanged,The length of the statement  "			BoundingRectangle viewBox = new BoundingRectangle (_viewBox.MinX' _viewBox.MinY - dy * _viewBox.Height / _oldHeight' _viewBox.MaxX + dx * _viewBox.Width / _oldWidth' _viewBox.MaxY); " is 181.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,GetMouseSpeed,The length of the statement  "	return PlanimetryEnvironment.NewCoordinate ((startPoint.X - endPoint.X) / milliseconds' (startPoint.Y - endPoint.Y) / milliseconds); " is 132.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,GetAvgMouseSpeed,The length of the statement  "	ICoordinate v1 = GetMouseSpeed (_mouseTime [3]' _mouseTime [2]' new Point (_mouseX [3]' _mouseY [3])' new Point (_mouseX [2]' _mouseY [2])); " is 140.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,GetAvgMouseSpeed,The length of the statement  "	ICoordinate v2 = GetMouseSpeed (_mouseTime [2]' _mouseTime [1]' new Point (_mouseX [2]' _mouseY [2])' new Point (_mouseX [1]' _mouseY [1])); " is 140.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,GetAvgMouseSpeed,The length of the statement  "	ICoordinate v3 = GetMouseSpeed (_mouseTime [1]' _mouseTime [0]' new Point (_mouseX [1]' _mouseY [1])' new Point (_mouseX [0]' _mouseY [0])); " is 140.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,GetAvgMouseSpeed,The length of the statement  "	double vxAvg = 0.35 * -(v1.X * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.X * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.X * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds; " is 260.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,GetAvgMouseSpeed,The length of the statement  "	double vyAvg = 0.35 * -(v1.Y * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.Y * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.Y * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds; " is 260.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawDragging,The length of the statement  "		Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY)); " is 125.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawAnimated,The length of the statement  "	if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) { " is 275.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawGeneral,The length of the statement  "	Rect r = new Rect (new Point (_startAnimationOffsetX' _startAnimationOffsetY)' new Size (this.ActualWidth' this.ActualHeight)); " is 127.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,PlayFade,The length of the statement  "		TimeSpan animationInterval = new TimeSpan (0' 0' 0' 0' (int)Math.Round (_animationTime * (1 - _mainAnimationRelativeDuration))); " is 128.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,Play,The length of the statement  "		endRectangle = new Rect (new Point ((-endRectangle.X * xScaleFactor)' (-endRectangle.Y * yScaleFactor))' new Size ((startRectangle.Height * yScaleFactor)' (startRectangle.Width * xScaleFactor))); " is 195.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,Play,The length of the statement  "		TimeSpan animationInterval = new TimeSpan (0' 0' 0' 0' (int)Math.Round (_animationTime * _mainAnimationRelativeDuration)); " is 122.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MapViewBoxToClientRectangle,The length of the statement  "	return new Rect (new Point (Math.Min (p1.X' p2.X)' Math.Min (p1.Y' p2.Y))' new Size (Math.Abs (p1.X - p2.X)' Math.Abs (p1.Y - p2.Y))); " is 134.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,WhetherViewBoxChanged,The length of the statement  "		if (newViewBox.MinX != _viewBox.MinX || newViewBox.MaxX != _viewBox.MaxX || newViewBox.MinY != _viewBox.MinY || newViewBox.MaxY != _viewBox.MaxY) " is 145.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,AnimatedPan,The length of the statement  "		BoundingRectangle viewBox = new BoundingRectangle (_viewBox.MinX - horizontalShift * xFactor' _viewBox.MinY + verticalShift * yFactor' _viewBox.MaxX - horizontalShift * xFactor' _viewBox.MaxY + verticalShift * yFactor); " is 219.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,PrepareForSelect,The length of the statement  "		_map.SelectionPointRadius = PlanimetryAlgorithms.Distance (PlanimetryEnvironment.NewCoordinate (inverseTransform.Transform (result.Values ()))' delta); " is 151.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ConvertBitmap,The length of the statement  "		return Imaging.CreateBitmapSourceFromHBitmap (hBitmap' IntPtr.Zero' Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ()); " is 124.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The length of the statement  "		BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor); " is 171.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ClientToMap,The length of the statement  "	return PlanimetryEnvironment.NewCoordinate (_viewBox.Width / ActualWidth * point.X + _viewBox.MinX' _viewBox.MaxY - _viewBox.Height / ActualHeight * point.Y); " is 158.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,Pan,The length of the statement  "		BoundingRectangle viewBox = new BoundingRectangle (_viewBox.MinX - horizontalShift * xFactor' _viewBox.MinY + verticalShift * yFactor' _viewBox.MaxX - horizontalShift * xFactor' _viewBox.MaxY + verticalShift * yFactor); " is 219.
Long Statement,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,Pan,The length of the statement  "		BoundingRectangle viewBox = new BoundingRectangle (_viewBox.MinX - horizontalShift * xFactor' _viewBox.MinY + verticalShift * yFactor' _viewBox.MaxX - horizontalShift * xFactor' _viewBox.MaxY + verticalShift * yFactor); " is 219.
Complex Conditional,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnSizeChanged,The conditional expression  "(dx != 0 || dy != 0) && ActualWidth != 0 && ActualHeight != 0"  is complex.
Complex Conditional,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawAnimated,The conditional expression  "_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9"  is complex.
Complex Conditional,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,WhetherViewBoxChanged,The conditional expression  "newViewBox.MinX != _viewBox.MinX || newViewBox.MaxX != _viewBox.MaxX || newViewBox.MinY != _viewBox.MinY || newViewBox.MaxY != _viewBox.MaxY"  is complex.
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseLeftButtonUp,The following statement contains a magic number: if (_isMapDragging) {  	_isMapDragging = false;  	if (_dragStartedFlag) {  		if (_draggingMode == DraggingMode.Pan) {  			if (Animation) {  				if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  					Pan (_offsetX' _offsetY);  				} else {  					_startAnimationOffsetX = _offsetX;  					_startAnimationOffsetY = _offsetY;  					ICoordinate avgSpeed = GetAvgMouseSpeed ();  					AnimatedPan ((_offsetX + (avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration))' (_offsetY + (avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration)));  				}  			} else {  				Pan (_offsetX' _offsetY);  			}  		}  		if (_draggingMode == DraggingMode.Zoom) {  			if (SelectionRectangleDefined != null) {  				Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY));  				ICoordinate p1 = ClientToMap (upperLeft);  				ICoordinate p2 = ClientToMap (new Point (upperLeft.X + Math.Abs (_offsetX)' upperLeft.Y + Math.Abs (_offsetY)));  				BoundingRectangle r = new BoundingRectangle (Math.Min (p1.X' p2.X)' Math.Min (p1.Y' p2.Y)' Math.Max (p1.X' p2.X)' Math.Max (p1.Y' p2.Y));  				SelectionRectangleDefined (this' new ViewBoxEventArgs (r));  			}  			this.InvalidateVisual ();  		}  		_dragStartedFlag = false;  		if (MapDragFinished != null) {  			MapDragFinished (this' new EventArgs ());  		}  	} else {  		this.InvalidateVisual ();  	}  	_offsetX = 0;  	_offsetY = 0;  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseLeftButtonUp,The following statement contains a magic number: if (_dragStartedFlag) {  	if (_draggingMode == DraggingMode.Pan) {  		if (Animation) {  			if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  				Pan (_offsetX' _offsetY);  			} else {  				_startAnimationOffsetX = _offsetX;  				_startAnimationOffsetY = _offsetY;  				ICoordinate avgSpeed = GetAvgMouseSpeed ();  				AnimatedPan ((_offsetX + (avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration))' (_offsetY + (avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration)));  			}  		} else {  			Pan (_offsetX' _offsetY);  		}  	}  	if (_draggingMode == DraggingMode.Zoom) {  		if (SelectionRectangleDefined != null) {  			Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY));  			ICoordinate p1 = ClientToMap (upperLeft);  			ICoordinate p2 = ClientToMap (new Point (upperLeft.X + Math.Abs (_offsetX)' upperLeft.Y + Math.Abs (_offsetY)));  			BoundingRectangle r = new BoundingRectangle (Math.Min (p1.X' p2.X)' Math.Min (p1.Y' p2.Y)' Math.Max (p1.X' p2.X)' Math.Max (p1.Y' p2.Y));  			SelectionRectangleDefined (this' new ViewBoxEventArgs (r));  		}  		this.InvalidateVisual ();  	}  	_dragStartedFlag = false;  	if (MapDragFinished != null) {  		MapDragFinished (this' new EventArgs ());  	}  } else {  	this.InvalidateVisual ();  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseLeftButtonUp,The following statement contains a magic number: if (_draggingMode == DraggingMode.Pan) {  	if (Animation) {  		if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  			Pan (_offsetX' _offsetY);  		} else {  			_startAnimationOffsetX = _offsetX;  			_startAnimationOffsetY = _offsetY;  			ICoordinate avgSpeed = GetAvgMouseSpeed ();  			AnimatedPan ((_offsetX + (avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration))' (_offsetY + (avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration)));  		}  	} else {  		Pan (_offsetX' _offsetY);  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseLeftButtonUp,The following statement contains a magic number: if (Animation) {  	if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  		Pan (_offsetX' _offsetY);  	} else {  		_startAnimationOffsetX = _offsetX;  		_startAnimationOffsetY = _offsetY;  		ICoordinate avgSpeed = GetAvgMouseSpeed ();  		AnimatedPan ((_offsetX + (avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration))' (_offsetY + (avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration)));  	}  } else {  	Pan (_offsetX' _offsetY);  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseLeftButtonUp,The following statement contains a magic number: if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  	Pan (_offsetX' _offsetY);  } else {  	_startAnimationOffsetX = _offsetX;  	_startAnimationOffsetY = _offsetY;  	ICoordinate avgSpeed = GetAvgMouseSpeed ();  	AnimatedPan ((_offsetX + (avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration))' (_offsetY + (avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration)));  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseWheel,The following statement contains a magic number: if (_mouseWheelZooming) {  	var thisElement = sender as IInputElement;  	if (!Animation) {  		Point p = e.GetPosition (thisElement);  		ChangeZoom (e.Delta / 120 * _zoomPercent' p.X' p.Y);  	} else {  		_mouseLocation.X = e.GetPosition (thisElement).X;  		_mouseLocation.Y = e.GetPosition (thisElement).Y;  		if (!_wheelTimer.IsEnabled)  			_wheelTimer.Start ();  		_deltaPercent += e.Delta / 120 * _zoomPercent;  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseWheel,The following statement contains a magic number: if (_mouseWheelZooming) {  	var thisElement = sender as IInputElement;  	if (!Animation) {  		Point p = e.GetPosition (thisElement);  		ChangeZoom (e.Delta / 120 * _zoomPercent' p.X' p.Y);  	} else {  		_mouseLocation.X = e.GetPosition (thisElement).X;  		_mouseLocation.Y = e.GetPosition (thisElement).Y;  		if (!_wheelTimer.IsEnabled)  			_wheelTimer.Start ();  		_deltaPercent += e.Delta / 120 * _zoomPercent;  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseWheel,The following statement contains a magic number: if (!Animation) {  	Point p = e.GetPosition (thisElement);  	ChangeZoom (e.Delta / 120 * _zoomPercent' p.X' p.Y);  } else {  	_mouseLocation.X = e.GetPosition (thisElement).X;  	_mouseLocation.Y = e.GetPosition (thisElement).Y;  	if (!_wheelTimer.IsEnabled)  		_wheelTimer.Start ();  	_deltaPercent += e.Delta / 120 * _zoomPercent;  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseWheel,The following statement contains a magic number: if (!Animation) {  	Point p = e.GetPosition (thisElement);  	ChangeZoom (e.Delta / 120 * _zoomPercent' p.X' p.Y);  } else {  	_mouseLocation.X = e.GetPosition (thisElement).X;  	_mouseLocation.Y = e.GetPosition (thisElement).Y;  	if (!_wheelTimer.IsEnabled)  		_wheelTimer.Start ();  	_deltaPercent += e.Delta / 120 * _zoomPercent;  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseWheel,The following statement contains a magic number: ChangeZoom (e.Delta / 120 * _zoomPercent' p.X' p.Y);  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,OnMouseWheel,The following statement contains a magic number: _deltaPercent += e.Delta / 120 * _zoomPercent;  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: if (_mouseX [0] == -1) {  	_mouseX [0] = p.X;  	_mouseX [1] = p.X;  	_mouseX [2] = p.X;  	_mouseX [3] = p.X;  	_mouseY [0] = p.Y;  	_mouseY [1] = p.Y;  	_mouseY [2] = p.Y;  	_mouseY [3] = p.Y;  	_mouseTime = new DateTime[4] {  		DateTime.Now'  		DateTime.Now'  		DateTime.Now'  		DateTime.Now  	};  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: if (_mouseX [0] == -1) {  	_mouseX [0] = p.X;  	_mouseX [1] = p.X;  	_mouseX [2] = p.X;  	_mouseX [3] = p.X;  	_mouseY [0] = p.Y;  	_mouseY [1] = p.Y;  	_mouseY [2] = p.Y;  	_mouseY [3] = p.Y;  	_mouseTime = new DateTime[4] {  		DateTime.Now'  		DateTime.Now'  		DateTime.Now'  		DateTime.Now  	};  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: if (_mouseX [0] == -1) {  	_mouseX [0] = p.X;  	_mouseX [1] = p.X;  	_mouseX [2] = p.X;  	_mouseX [3] = p.X;  	_mouseY [0] = p.Y;  	_mouseY [1] = p.Y;  	_mouseY [2] = p.Y;  	_mouseY [3] = p.Y;  	_mouseTime = new DateTime[4] {  		DateTime.Now'  		DateTime.Now'  		DateTime.Now'  		DateTime.Now  	};  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: if (_mouseX [0] == -1) {  	_mouseX [0] = p.X;  	_mouseX [1] = p.X;  	_mouseX [2] = p.X;  	_mouseX [3] = p.X;  	_mouseY [0] = p.Y;  	_mouseY [1] = p.Y;  	_mouseY [2] = p.Y;  	_mouseY [3] = p.Y;  	_mouseTime = new DateTime[4] {  		DateTime.Now'  		DateTime.Now'  		DateTime.Now'  		DateTime.Now  	};  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: if (_mouseX [0] == -1) {  	_mouseX [0] = p.X;  	_mouseX [1] = p.X;  	_mouseX [2] = p.X;  	_mouseX [3] = p.X;  	_mouseY [0] = p.Y;  	_mouseY [1] = p.Y;  	_mouseY [2] = p.Y;  	_mouseY [3] = p.Y;  	_mouseTime = new DateTime[4] {  		DateTime.Now'  		DateTime.Now'  		DateTime.Now'  		DateTime.Now  	};  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: _mouseX [2] = p.X;  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: _mouseX [3] = p.X;  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: _mouseY [2] = p.Y;  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: _mouseY [3] = p.Y;  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: _mouseTime = new DateTime[4] {  	DateTime.Now'  	DateTime.Now'  	DateTime.Now'  	DateTime.Now  };  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: if ((dt - _mouseTime [3]).TotalMilliseconds > 30) {  	for (int i = 2; i >= 0; i--) {  		_mouseTime [i + 1] = _mouseTime [i];  		_mouseX [i + 1] = _mouseX [i];  		_mouseY [i + 1] = _mouseY [i];  	}  	_mouseX [0] = p.X;  	_mouseY [0] = p.Y;  	_mouseTime [0] = dt;  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: if ((dt - _mouseTime [3]).TotalMilliseconds > 30) {  	for (int i = 2; i >= 0; i--) {  		_mouseTime [i + 1] = _mouseTime [i];  		_mouseX [i + 1] = _mouseX [i];  		_mouseY [i + 1] = _mouseY [i];  	}  	_mouseX [0] = p.X;  	_mouseY [0] = p.Y;  	_mouseTime [0] = dt;  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: if ((dt - _mouseTime [3]).TotalMilliseconds > 30) {  	for (int i = 2; i >= 0; i--) {  		_mouseTime [i + 1] = _mouseTime [i];  		_mouseX [i + 1] = _mouseX [i];  		_mouseY [i + 1] = _mouseY [i];  	}  	_mouseX [0] = p.X;  	_mouseY [0] = p.Y;  	_mouseTime [0] = dt;  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MeasureMouseMovementParameters,The following statement contains a magic number: for (int i = 2; i >= 0; i--) {  	_mouseTime [i + 1] = _mouseTime [i];  	_mouseX [i + 1] = _mouseX [i];  	_mouseY [i + 1] = _mouseY [i];  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawDragging,The following statement contains a magic number: if (_draggingMode == DraggingMode.Zoom) {  	Rect rect = new Rect (0' 0' ActualWidth' ActualHeight);  	dc.DrawImage (_bitmap' rect);  	Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY));  	Rect r = new Rect (upperLeft' new Size (Math.Abs (_offsetX)' Math.Abs (_offsetY)));  	SolidColorBrush brush = new SolidColorBrush (new Color {  		A = 30'  		B = _selectionRectangleColor.B'  		G = _selectionRectangleColor.G'  		R = _selectionRectangleColor.R  	});  	Pen pen = new Pen (new SolidColorBrush (new Color {  		A = 80'  		B = _selectionRectangleColor.B'  		G = _selectionRectangleColor.G'  		R = _selectionRectangleColor.R'  	})' 1);  	dc.DrawRectangle (brush' pen' r);  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawDragging,The following statement contains a magic number: if (_draggingMode == DraggingMode.Zoom) {  	Rect rect = new Rect (0' 0' ActualWidth' ActualHeight);  	dc.DrawImage (_bitmap' rect);  	Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY));  	Rect r = new Rect (upperLeft' new Size (Math.Abs (_offsetX)' Math.Abs (_offsetY)));  	SolidColorBrush brush = new SolidColorBrush (new Color {  		A = 30'  		B = _selectionRectangleColor.B'  		G = _selectionRectangleColor.G'  		R = _selectionRectangleColor.R  	});  	Pen pen = new Pen (new SolidColorBrush (new Color {  		A = 80'  		B = _selectionRectangleColor.B'  		G = _selectionRectangleColor.G'  		R = _selectionRectangleColor.R'  	})' 1);  	dc.DrawRectangle (brush' pen' r);  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		dc.DrawImage (_bitmap' _currentRectangle);  	} else {  		Rect r = new Rect (new Point (0' 0)' new Size (this.ActualWidth' this.ActualHeight));  		dc.DrawImage (_asyncMapImage' r);  		_opocityColorMatrix.BeginInit ();  		_opocityColorMatrix.Source = _bitmap;  		if (_opacity > 0) {  			_opocityColorMatrix.AlphaThreshold = _opacity;  		} else {  			_opocityColorMatrix.AlphaThreshold = 0;  		}  		_opocityColorMatrix.DestinationFormat = PixelFormats.Default;  		_opocityColorMatrix.EndInit ();  		dc.DrawImage (_opocityColorMatrix' r);  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		dc.DrawImage (_bitmap' _currentRectangle);  	} else {  		Rect r = new Rect (new Point (0' 0)' new Size (this.ActualWidth' this.ActualHeight));  		dc.DrawImage (_asyncMapImage' r);  		_opocityColorMatrix.BeginInit ();  		_opocityColorMatrix.Source = _bitmap;  		if (_opacity > 0) {  			_opocityColorMatrix.AlphaThreshold = _opacity;  		} else {  			_opocityColorMatrix.AlphaThreshold = 0;  		}  		_opocityColorMatrix.DestinationFormat = PixelFormats.Default;  		_opocityColorMatrix.EndInit ();  		dc.DrawImage (_opocityColorMatrix' r);  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		dc.DrawImage (_bitmap' _currentRectangle);  	} else {  		Rect r = new Rect (new Point (0' 0)' new Size (this.ActualWidth' this.ActualHeight));  		dc.DrawImage (_asyncMapImage' r);  		_opocityColorMatrix.BeginInit ();  		_opocityColorMatrix.Source = _bitmap;  		if (_opacity > 0) {  			_opocityColorMatrix.AlphaThreshold = _opacity;  		} else {  			_opocityColorMatrix.AlphaThreshold = 0;  		}  		_opocityColorMatrix.DestinationFormat = PixelFormats.Default;  		_opocityColorMatrix.EndInit ();  		dc.DrawImage (_opocityColorMatrix' r);  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		dc.DrawImage (_bitmap' _currentRectangle);  	} else {  		Rect r = new Rect (new Point (0' 0)' new Size (this.ActualWidth' this.ActualHeight));  		dc.DrawImage (_asyncMapImage' r);  		_opocityColorMatrix.BeginInit ();  		_opocityColorMatrix.Source = _bitmap;  		if (_opacity > 0) {  			_opocityColorMatrix.AlphaThreshold = _opacity;  		} else {  			_opocityColorMatrix.AlphaThreshold = 0;  		}  		_opocityColorMatrix.DestinationFormat = PixelFormats.Default;  		_opocityColorMatrix.EndInit ();  		dc.DrawImage (_opocityColorMatrix' r);  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		dc.DrawImage (_bitmap' _currentRectangle);  	} else {  		Rect r = new Rect (new Point (0' 0)' new Size (this.ActualWidth' this.ActualHeight));  		dc.DrawImage (_asyncMapImage' r);  		_opocityColorMatrix.BeginInit ();  		_opocityColorMatrix.Source = _bitmap;  		if (_opacity > 0) {  			_opocityColorMatrix.AlphaThreshold = _opacity;  		} else {  			_opocityColorMatrix.AlphaThreshold = 0;  		}  		_opocityColorMatrix.DestinationFormat = PixelFormats.Default;  		_opocityColorMatrix.EndInit ();  		dc.DrawImage (_opocityColorMatrix' r);  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		dc.DrawImage (_bitmap' _currentRectangle);  	} else {  		Rect r = new Rect (new Point (0' 0)' new Size (this.ActualWidth' this.ActualHeight));  		dc.DrawImage (_asyncMapImage' r);  		_opocityColorMatrix.BeginInit ();  		_opocityColorMatrix.Source = _bitmap;  		if (_opacity > 0) {  			_opocityColorMatrix.AlphaThreshold = _opacity;  		} else {  			_opocityColorMatrix.AlphaThreshold = 0;  		}  		_opocityColorMatrix.DestinationFormat = PixelFormats.Default;  		_opocityColorMatrix.EndInit ();  		dc.DrawImage (_opocityColorMatrix' r);  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		dc.DrawImage (_bitmap' _currentRectangle);  	} else {  		Rect r = new Rect (new Point (0' 0)' new Size (this.ActualWidth' this.ActualHeight));  		dc.DrawImage (_asyncMapImage' r);  		_opocityColorMatrix.BeginInit ();  		_opocityColorMatrix.Source = _bitmap;  		if (_opacity > 0) {  			_opocityColorMatrix.AlphaThreshold = _opacity;  		} else {  			_opocityColorMatrix.AlphaThreshold = 0;  		}  		_opocityColorMatrix.DestinationFormat = PixelFormats.Default;  		_opocityColorMatrix.EndInit ();  		dc.DrawImage (_opocityColorMatrix' r);  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,DrawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		dc.DrawImage (_bitmap' _currentRectangle);  	} else {  		Rect r = new Rect (new Point (0' 0)' new Size (this.ActualWidth' this.ActualHeight));  		dc.DrawImage (_asyncMapImage' r);  		_opocityColorMatrix.BeginInit ();  		_opocityColorMatrix.Source = _bitmap;  		if (_opacity > 0) {  			_opocityColorMatrix.AlphaThreshold = _opacity;  		} else {  			_opocityColorMatrix.AlphaThreshold = 0;  		}  		_opocityColorMatrix.DestinationFormat = PixelFormats.Default;  		_opocityColorMatrix.EndInit ();  		dc.DrawImage (_opocityColorMatrix' r);  	}  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,Play,The following statement contains a magic number: try {  	double xScaleFactor = startRectangle.Width / endRectangle.Width;  	double yScaleFactor = startRectangle.Height / endRectangle.Height;  	endRectangle = new Rect (new Point ((-endRectangle.X * xScaleFactor)' (-endRectangle.Y * yScaleFactor))' new Size ((startRectangle.Height * yScaleFactor)' (startRectangle.Width * xScaleFactor)));  	TimeSpan animationInterval = new TimeSpan (0' 0' 0' 0' (int)Math.Round (_animationTime * _mainAnimationRelativeDuration));  	DateTime begin = DateTime.Now;  	DateTime end = begin.Add (animationInterval);  	double dTop = startRectangle.Top - endRectangle.Top;  	double dLeft = startRectangle.Left - endRectangle.Left;  	double dRight = startRectangle.Right - endRectangle.Right;  	double dBottom = startRectangle.Bottom - endRectangle.Bottom;  	DateTime now = DateTime.Now;  	while (now < end) {  		double t = (double)(now - begin).Ticks / (double)animationInterval.Ticks;  		if (t > 0) {  			double factor = Math.Pow (t' 0.25);  			double newLeft = Math.Round (startRectangle.Left - dLeft * factor);  			double newTop = Math.Round (startRectangle.Top - dTop * factor);  			double newRight = Math.Round (startRectangle.Right - dRight * factor);  			double newBottom = Math.Round (startRectangle.Bottom - dBottom * factor);  			_currentRectangle = new Rect (newLeft' newTop' newRight - newLeft' newBottom - newTop);  			UpdateLayout ();  			this.InvalidateVisual ();  		}  		now = DateTime.Now;  	}  } finally {  	_animated = false;  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,Play,The following statement contains a magic number: while (now < end) {  	double t = (double)(now - begin).Ticks / (double)animationInterval.Ticks;  	if (t > 0) {  		double factor = Math.Pow (t' 0.25);  		double newLeft = Math.Round (startRectangle.Left - dLeft * factor);  		double newTop = Math.Round (startRectangle.Top - dTop * factor);  		double newRight = Math.Round (startRectangle.Right - dRight * factor);  		double newBottom = Math.Round (startRectangle.Bottom - dBottom * factor);  		_currentRectangle = new Rect (newLeft' newTop' newRight - newLeft' newBottom - newTop);  		UpdateLayout ();  		this.InvalidateVisual ();  	}  	now = DateTime.Now;  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,Play,The following statement contains a magic number: if (t > 0) {  	double factor = Math.Pow (t' 0.25);  	double newLeft = Math.Round (startRectangle.Left - dLeft * factor);  	double newTop = Math.Round (startRectangle.Top - dTop * factor);  	double newRight = Math.Round (startRectangle.Right - dRight * factor);  	double newBottom = Math.Round (startRectangle.Bottom - dBottom * factor);  	_currentRectangle = new Rect (newLeft' newTop' newRight - newLeft' newBottom - newTop);  	UpdateLayout ();  	this.InvalidateVisual ();  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,MapControl,The following statement contains a magic number: _wheelTimer.Interval = new TimeSpan (80);  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = deltaPercent / 100.0;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = ActualWidth / 2;  		mouseY = ActualHeight / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = deltaPercent / 100.0;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = ActualWidth / 2;  		mouseY = ActualHeight / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = deltaPercent / 100.0;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = ActualWidth / 2;  		mouseY = ActualHeight / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = deltaPercent / 100.0;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = ActualWidth / 2;  		mouseY = ActualHeight / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = deltaPercent / 100.0;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = ActualWidth / 2;  		mouseY = ActualHeight / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = deltaPercent / 100.0;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = ActualWidth / 2;  		mouseY = ActualHeight / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = deltaPercent / 100.0;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = ActualWidth / 2;  		mouseY = ActualHeight / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: if (delta > 0)  	delta *= 2;  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: delta *= 2;  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: if (!_alignmentWhileZooming) {  	mouseX = ActualWidth / 2;  	mouseY = ActualHeight / 2;  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: if (!_alignmentWhileZooming) {  	mouseX = ActualWidth / 2;  	mouseY = ActualHeight / 2;  }  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: mouseX = ActualWidth / 2;  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ChangeZoom,The following statement contains a magic number: mouseY = ActualHeight / 2;  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ZoomIn,The following statement contains a magic number: ChangeZoom (_zoomPercent' ActualWidth / 2' ActualHeight / 2);  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ZoomIn,The following statement contains a magic number: ChangeZoom (_zoomPercent' ActualWidth / 2' ActualHeight / 2);  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ZoomOut,The following statement contains a magic number: ChangeZoom (-_zoomPercent' ActualWidth / 2' ActualHeight / 2);  
Magic Number,WpfMapControl,MapControl,F:\newReposMay17\gkrsu_maparound.core\src\WpfMapControl\MapControl.xaml.cs,ZoomOut,The following statement contains a magic number: ChangeZoom (-_zoomPercent' ActualWidth / 2' ActualHeight / 2);  
