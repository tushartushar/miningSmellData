Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,Cyclomatic complexity of the method is 27
Complex Method,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,drawNodes,Cyclomatic complexity of the method is 8
Complex Method,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,recalcActiveElements,Cyclomatic complexity of the method is 11
Complex Method,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,Cyclomatic complexity of the method is 9
Complex Method,MapAround.UI.WinForms,EditAction,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,Do,Cyclomatic complexity of the method is 17
Complex Method,MapAround.UI.WinForms,EditAction,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,EditAction,Cyclomatic complexity of the method is 17
Complex Method,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseUp,Cyclomatic complexity of the method is 12
Complex Method,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,SetViewBox,Cyclomatic complexity of the method is 10
Long Parameter List,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,drawActiveNode,The method has 5 parameters.
Long Parameter List,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,drawNodes,The method has 6 parameters.
Long Statement,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The length of the statement  "				result.Add (PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2)); " is 156.
Long Statement,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The length of the statement  "				result.Add (PlanimetryEnvironment.NewCoordinate ((c.Vertices [i].X + c.Vertices [j].X) / 2' (c.Vertices [i].Y + c.Vertices [j].Y) / 2)); " is 136.
Long Statement,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The length of the statement  "				ICoordinate c = PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2); " is 159.
Long Statement,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The length of the statement  "				ICoordinate c = PlanimetryEnvironment.NewCoordinate ((contour.Vertices [i].X + contour.Vertices [j].X) / 2' (contour.Vertices [i].Y + contour.Vertices [j].Y) / 2); " is 163.
Long Statement,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryActivateNodeAt,The length of the statement  "		BoundingRectangle br = new BoundingRectangle (coord.X - nodeSize' coord.Y - nodeSize' coord.X + nodeSize' coord.Y + nodeSize); " is 126.
Long Statement,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryActivateNodeAt,The length of the statement  "				oldActiveNodeCoordinate = (ICoordinate)(_geometry as Polygon).Contours [_activePatchIndex].Vertices [_activeCoordinateIndex].Clone (); " is 134.
Long Statement,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryActivateNodeAt,The length of the statement  "				oldActiveNodeCoordinate = (ICoordinate)(_geometry as Polyline).Paths [_activePatchIndex].Vertices [_activeCoordinateIndex].Clone (); " is 132.
Long Statement,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryActivateNodeAt,The length of the statement  "		BoundingRectangle br = new BoundingRectangle (coord.X - nodeSize' coord.Y - nodeSize' coord.X + nodeSize' coord.Y + nodeSize); " is 126.
Long Statement,MapAround.UI.WinForms,EditAction,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,Do,The length of the statement  "			(geometry as Polygon).Contours [_parameters.PatchIndex].Vertices [_parameters.NodeIndex].X = _parameters.NodePosition.X; " is 120.
Long Statement,MapAround.UI.WinForms,EditAction,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,Do,The length of the statement  "			(geometry as Polygon).Contours [_parameters.PatchIndex].Vertices [_parameters.NodeIndex].Y = _parameters.NodePosition.Y; " is 120.
Long Statement,MapAround.UI.WinForms,EditAction,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,Do,The length of the statement  "			(geometry as Polyline).Paths [_parameters.PatchIndex].Vertices.Insert (_parameters.NodeIndex' _parameters.NodePosition); " is 120.
Long Statement,MapAround.UI.WinForms,EditAction,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,Do,The length of the statement  "			(geometry as Polygon).Contours [_parameters.PatchIndex].Vertices.Insert (_parameters.NodeIndex' _parameters.NodePosition); " is 122.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getMouseSpeed,The length of the statement  "	return PlanimetryEnvironment.NewCoordinate ((startPoint.X - endPoint.X) / milliseconds' (startPoint.Y - endPoint.Y) / milliseconds); " is 132.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The length of the statement  "	ICoordinate v1 = getMouseSpeed (_mouseTime [3]' _mouseTime [2]' new Point (_mouseX [3]' _mouseY [3])' new Point (_mouseX [2]' _mouseY [2])); " is 140.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The length of the statement  "	ICoordinate v2 = getMouseSpeed (_mouseTime [2]' _mouseTime [1]' new Point (_mouseX [2]' _mouseY [2])' new Point (_mouseX [1]' _mouseY [1])); " is 140.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The length of the statement  "	ICoordinate v3 = getMouseSpeed (_mouseTime [1]' _mouseTime [0]' new Point (_mouseX [1]' _mouseY [1])' new Point (_mouseX [0]' _mouseY [0])); " is 140.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The length of the statement  "	vxAvg = 0.35 * -(v1.X * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.X * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.X * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds; " is 253.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The length of the statement  "	vyAvg = 0.35 * -(v1.Y * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.Y * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.Y * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds; " is 253.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseUp,The length of the statement  "							animatedPan (_offsetX + (int)(avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration)' _offsetY + (int)(avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration)); " is 171.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseUp,The length of the statement  "					Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY)); " is 125.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseUp,The length of the statement  "						BoundingRectangle r = new BoundingRectangle (Math.Min (p1.X' p2.X)' Math.Min (p1.Y' p2.Y)' Math.Max (p1.X' p2.X)' Math.Max (p1.Y' p2.Y)); " is 137.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,tryActivateFeatureNode,The length of the statement  "	double nodeSize = PlanimetryAlgorithms.Distance (ClientToMap (new Point (mouseX' mouseY))' ClientToMap (new Point (mouseX - _editor.NodeSize' mouseY))); " is 152.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,sizeChanged,The length of the statement  "			BoundingRectangle viewBox = new BoundingRectangle (_viewBox.MinX' _viewBox.MinY - dy * _viewBox.Height / _oldHeight' _viewBox.MaxX + dx * _viewBox.Width / _oldWidth' _viewBox.MaxY); " is 181.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawDragging,The length of the statement  "		Rectangle rect = new Rectangle (pe.ClipRectangle.Left + _offsetX' pe.ClipRectangle.Top + _offsetY' pe.ClipRectangle.Right' pe.ClipRectangle.Bottom); " is 148.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawDragging,The length of the statement  "		Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY)); " is 125.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawGeneral,The length of the statement  "	Rectangle r = new Rectangle (new Point (_startAnimationOffsetX' _startAnimationOffsetY)' new Size (new Point (pe.ClipRectangle.Left + pe.ClipRectangle.Width' pe.ClipRectangle.Top + pe.ClipRectangle.Height))); " is 208.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The length of the statement  "	if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) { " is 275.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The length of the statement  "			Rectangle r = new Rectangle (new Point (0' 0)' new Size (new Point (pe.ClipRectangle.Left + pe.ClipRectangle.Width' pe.ClipRectangle.Top + pe.ClipRectangle.Height))); " is 166.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The length of the statement  "				pe.Graphics.DrawImage (_bitmap' new Rectangle ((int)_currentRectangle.Left' (int)_currentRectangle.Top' (int)_currentRectangle.Width' (int)_currentRectangle.Height)' 0' 0' _bitmap.Width' _bitmap.Height' GraphicsUnit.Pixel' imageAttributes); " is 240.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mapViewBoxToClientRectangle,The length of the statement  "	return new Rectangle (new Point (Math.Min (p1.X' p2.X)' Math.Min (p1.Y' p2.Y))' new Size (Math.Abs (p1.X - p2.X)' Math.Abs (p1.Y - p2.Y))); " is 139.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,playFade,The length of the statement  "		TimeSpan animationInterval = new TimeSpan (0' 0' 0' 0' (int)Math.Round (_animationTime * (1 - _mainAnimationRelativeDuration))); " is 128.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,play,The length of the statement  "		endRectangle = new Rectangle (new Point ((int)(-endRectangle.X * xScaleFactor)' (int)(-endRectangle.Y * yScaleFactor))' new Size ((int)(startRectangle.Width * xScaleFactor)' (int)(startRectangle.Height * yScaleFactor))); " is 220.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,play,The length of the statement  "		TimeSpan animationInterval = new TimeSpan (0' 0' 0' 0' (int)Math.Round (_animationTime * _mainAnimationRelativeDuration)); " is 122.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,whetherViewBoxChanged,The length of the statement  "		if (newViewBox.MinX != _viewBox.MinX || newViewBox.MaxX != _viewBox.MaxX || newViewBox.MinY != _viewBox.MinY || newViewBox.MaxY != _viewBox.MaxY) " is 145.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The length of the statement  "		BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor); " is 171.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,Pan,The length of the statement  "		BoundingRectangle viewBox = new BoundingRectangle (_viewBox.MinX - horizontalShift * xFactor' _viewBox.MinY + verticalShift * yFactor' _viewBox.MaxX - horizontalShift * xFactor' _viewBox.MaxY + verticalShift * yFactor); " is 219.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,Pan,The length of the statement  "		BoundingRectangle viewBox = new BoundingRectangle (_viewBox.MinX - horizontalShift * xFactor' _viewBox.MinY + verticalShift * yFactor' _viewBox.MaxX - horizontalShift * xFactor' _viewBox.MaxY + verticalShift * yFactor); " is 219.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,animatedPan,The length of the statement  "		BoundingRectangle viewBox = new BoundingRectangle (_viewBox.MinX - horizontalShift * xFactor' _viewBox.MinY + verticalShift * yFactor' _viewBox.MaxX - horizontalShift * xFactor' _viewBox.MaxY + verticalShift * yFactor); " is 219.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,prepareForSelect,The length of the statement  "		_map.SelectionPointRadius = PlanimetryAlgorithms.Distance (PlanimetryEnvironment.NewCoordinate (inverseTransform.Transform (result.Values ()))' delta); " is 151.
Long Statement,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ClientToMap,The length of the statement  "	return PlanimetryEnvironment.NewCoordinate (_viewBox.Width / Width * point.X + _viewBox.MinX' _viewBox.MaxY - _viewBox.Height / Height * point.Y); " is 146.
Complex Conditional,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,sizeChanged,The conditional expression  "(dx != 0 || dy != 0) && Width != 0 && Height != 0"  is complex.
Complex Conditional,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The conditional expression  "_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9"  is complex.
Complex Conditional,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,whetherViewBoxChanged,The conditional expression  "newViewBox.MinX != _viewBox.MinX || newViewBox.MaxX != _viewBox.MaxX || newViewBox.MinY != _viewBox.MinY || newViewBox.MaxY != _viewBox.MaxY"  is complex.
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath (FillMode.Alternate)) {  	if (_geometry is Polygon) {  		path.StartFigure ();  		Polygon p = (Polygon)_geometry;  		foreach (Contour c in p.Contours) {  			points = new Point[c.CoordinateCount];  			for (int i = 0; i < c.CoordinateCount; i++) {  				points [i] = mapToClient (c.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 2)  				path.AddPolygon (points);  			else if (points.Length == 2)  				path.AddLines (points);  		}  		path.CloseFigure ();  		using (Brush b = new SolidBrush (_fillColor))  			g.FillPath (b' path);  	}  	if (_geometry is Polyline) {  		Polyline p = (Polyline)_geometry;  		foreach (LinePath pt in p.Paths) {  			path.StartFigure ();  			points = new Point[pt.CoordinateCount];  			for (int i = 0; i < pt.CoordinateCount; i++) {  				points [i] = mapToClient (pt.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 1)  				path.AddLines (points);  		}  	}  	using (Pen p = new Pen (_inactivePatchColor))  		g.DrawPath (p' path);  	if (_activePatchIndex >= 0) {  		using (GraphicsPath activePath = new GraphicsPath (FillMode.Alternate)) {  			activePath.StartFigure ();  			if (_geometry is Polygon) {  				Polygon p = (Polygon)_geometry;  				Contour c = p.Contours [_activePatchIndex];  				points = new Point[c.CoordinateCount];  				for (int i = 0; i < c.CoordinateCount; i++) {  					points [i] = mapToClient (c.Vertices [i]);  					points [i].X += offsetX;  					points [i].Y += offsetY;  				}  				if (points.Length > 2)  					activePath.AddPolygon (points);  				else if (points.Length == 2)  					activePath.AddLines (points);  				activePath.CloseFigure ();  			}  			if (_geometry is Polyline) {  				Polyline p = (Polyline)_geometry;  				LinePath pt = p.Paths [_activePatchIndex];  				points = new Point[pt.CoordinateCount];  				for (int i = 0; i < pt.CoordinateCount; i++) {  					points [i] = mapToClient (pt.Vertices [i]);  					points [i].X += offsetX;  					points [i].Y += offsetY;  				}  				if (points.Length > 1)  					activePath.AddLines (points);  			}  			using (Pen p = new Pen (_activePatchColor))  				g.DrawPath (p' activePath);  		}  	}  	drawNodes (GetSecondaryNodes ()' g' mapToClient' _secondaryNodeColor' offsetX' offsetY);  	drawNodes (_geometry.ExtractCoordinates ()' g' mapToClient' _primaryNodeColor' offsetX' offsetY);  	if (_activeCoordinateIndex >= 0 && _activePatchIndex >= 0)  		drawActiveNode (g' mapToClient' _activeNodeColor' offsetX' offsetY);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath (FillMode.Alternate)) {  	if (_geometry is Polygon) {  		path.StartFigure ();  		Polygon p = (Polygon)_geometry;  		foreach (Contour c in p.Contours) {  			points = new Point[c.CoordinateCount];  			for (int i = 0; i < c.CoordinateCount; i++) {  				points [i] = mapToClient (c.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 2)  				path.AddPolygon (points);  			else if (points.Length == 2)  				path.AddLines (points);  		}  		path.CloseFigure ();  		using (Brush b = new SolidBrush (_fillColor))  			g.FillPath (b' path);  	}  	if (_geometry is Polyline) {  		Polyline p = (Polyline)_geometry;  		foreach (LinePath pt in p.Paths) {  			path.StartFigure ();  			points = new Point[pt.CoordinateCount];  			for (int i = 0; i < pt.CoordinateCount; i++) {  				points [i] = mapToClient (pt.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 1)  				path.AddLines (points);  		}  	}  	using (Pen p = new Pen (_inactivePatchColor))  		g.DrawPath (p' path);  	if (_activePatchIndex >= 0) {  		using (GraphicsPath activePath = new GraphicsPath (FillMode.Alternate)) {  			activePath.StartFigure ();  			if (_geometry is Polygon) {  				Polygon p = (Polygon)_geometry;  				Contour c = p.Contours [_activePatchIndex];  				points = new Point[c.CoordinateCount];  				for (int i = 0; i < c.CoordinateCount; i++) {  					points [i] = mapToClient (c.Vertices [i]);  					points [i].X += offsetX;  					points [i].Y += offsetY;  				}  				if (points.Length > 2)  					activePath.AddPolygon (points);  				else if (points.Length == 2)  					activePath.AddLines (points);  				activePath.CloseFigure ();  			}  			if (_geometry is Polyline) {  				Polyline p = (Polyline)_geometry;  				LinePath pt = p.Paths [_activePatchIndex];  				points = new Point[pt.CoordinateCount];  				for (int i = 0; i < pt.CoordinateCount; i++) {  					points [i] = mapToClient (pt.Vertices [i]);  					points [i].X += offsetX;  					points [i].Y += offsetY;  				}  				if (points.Length > 1)  					activePath.AddLines (points);  			}  			using (Pen p = new Pen (_activePatchColor))  				g.DrawPath (p' activePath);  		}  	}  	drawNodes (GetSecondaryNodes ()' g' mapToClient' _secondaryNodeColor' offsetX' offsetY);  	drawNodes (_geometry.ExtractCoordinates ()' g' mapToClient' _primaryNodeColor' offsetX' offsetY);  	if (_activeCoordinateIndex >= 0 && _activePatchIndex >= 0)  		drawActiveNode (g' mapToClient' _activeNodeColor' offsetX' offsetY);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath (FillMode.Alternate)) {  	if (_geometry is Polygon) {  		path.StartFigure ();  		Polygon p = (Polygon)_geometry;  		foreach (Contour c in p.Contours) {  			points = new Point[c.CoordinateCount];  			for (int i = 0; i < c.CoordinateCount; i++) {  				points [i] = mapToClient (c.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 2)  				path.AddPolygon (points);  			else if (points.Length == 2)  				path.AddLines (points);  		}  		path.CloseFigure ();  		using (Brush b = new SolidBrush (_fillColor))  			g.FillPath (b' path);  	}  	if (_geometry is Polyline) {  		Polyline p = (Polyline)_geometry;  		foreach (LinePath pt in p.Paths) {  			path.StartFigure ();  			points = new Point[pt.CoordinateCount];  			for (int i = 0; i < pt.CoordinateCount; i++) {  				points [i] = mapToClient (pt.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 1)  				path.AddLines (points);  		}  	}  	using (Pen p = new Pen (_inactivePatchColor))  		g.DrawPath (p' path);  	if (_activePatchIndex >= 0) {  		using (GraphicsPath activePath = new GraphicsPath (FillMode.Alternate)) {  			activePath.StartFigure ();  			if (_geometry is Polygon) {  				Polygon p = (Polygon)_geometry;  				Contour c = p.Contours [_activePatchIndex];  				points = new Point[c.CoordinateCount];  				for (int i = 0; i < c.CoordinateCount; i++) {  					points [i] = mapToClient (c.Vertices [i]);  					points [i].X += offsetX;  					points [i].Y += offsetY;  				}  				if (points.Length > 2)  					activePath.AddPolygon (points);  				else if (points.Length == 2)  					activePath.AddLines (points);  				activePath.CloseFigure ();  			}  			if (_geometry is Polyline) {  				Polyline p = (Polyline)_geometry;  				LinePath pt = p.Paths [_activePatchIndex];  				points = new Point[pt.CoordinateCount];  				for (int i = 0; i < pt.CoordinateCount; i++) {  					points [i] = mapToClient (pt.Vertices [i]);  					points [i].X += offsetX;  					points [i].Y += offsetY;  				}  				if (points.Length > 1)  					activePath.AddLines (points);  			}  			using (Pen p = new Pen (_activePatchColor))  				g.DrawPath (p' activePath);  		}  	}  	drawNodes (GetSecondaryNodes ()' g' mapToClient' _secondaryNodeColor' offsetX' offsetY);  	drawNodes (_geometry.ExtractCoordinates ()' g' mapToClient' _primaryNodeColor' offsetX' offsetY);  	if (_activeCoordinateIndex >= 0 && _activePatchIndex >= 0)  		drawActiveNode (g' mapToClient' _activeNodeColor' offsetX' offsetY);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath (FillMode.Alternate)) {  	if (_geometry is Polygon) {  		path.StartFigure ();  		Polygon p = (Polygon)_geometry;  		foreach (Contour c in p.Contours) {  			points = new Point[c.CoordinateCount];  			for (int i = 0; i < c.CoordinateCount; i++) {  				points [i] = mapToClient (c.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 2)  				path.AddPolygon (points);  			else if (points.Length == 2)  				path.AddLines (points);  		}  		path.CloseFigure ();  		using (Brush b = new SolidBrush (_fillColor))  			g.FillPath (b' path);  	}  	if (_geometry is Polyline) {  		Polyline p = (Polyline)_geometry;  		foreach (LinePath pt in p.Paths) {  			path.StartFigure ();  			points = new Point[pt.CoordinateCount];  			for (int i = 0; i < pt.CoordinateCount; i++) {  				points [i] = mapToClient (pt.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 1)  				path.AddLines (points);  		}  	}  	using (Pen p = new Pen (_inactivePatchColor))  		g.DrawPath (p' path);  	if (_activePatchIndex >= 0) {  		using (GraphicsPath activePath = new GraphicsPath (FillMode.Alternate)) {  			activePath.StartFigure ();  			if (_geometry is Polygon) {  				Polygon p = (Polygon)_geometry;  				Contour c = p.Contours [_activePatchIndex];  				points = new Point[c.CoordinateCount];  				for (int i = 0; i < c.CoordinateCount; i++) {  					points [i] = mapToClient (c.Vertices [i]);  					points [i].X += offsetX;  					points [i].Y += offsetY;  				}  				if (points.Length > 2)  					activePath.AddPolygon (points);  				else if (points.Length == 2)  					activePath.AddLines (points);  				activePath.CloseFigure ();  			}  			if (_geometry is Polyline) {  				Polyline p = (Polyline)_geometry;  				LinePath pt = p.Paths [_activePatchIndex];  				points = new Point[pt.CoordinateCount];  				for (int i = 0; i < pt.CoordinateCount; i++) {  					points [i] = mapToClient (pt.Vertices [i]);  					points [i].X += offsetX;  					points [i].Y += offsetY;  				}  				if (points.Length > 1)  					activePath.AddLines (points);  			}  			using (Pen p = new Pen (_activePatchColor))  				g.DrawPath (p' activePath);  		}  	}  	drawNodes (GetSecondaryNodes ()' g' mapToClient' _secondaryNodeColor' offsetX' offsetY);  	drawNodes (_geometry.ExtractCoordinates ()' g' mapToClient' _primaryNodeColor' offsetX' offsetY);  	if (_activeCoordinateIndex >= 0 && _activePatchIndex >= 0)  		drawActiveNode (g' mapToClient' _activeNodeColor' offsetX' offsetY);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (_geometry is Polygon) {  	path.StartFigure ();  	Polygon p = (Polygon)_geometry;  	foreach (Contour c in p.Contours) {  		points = new Point[c.CoordinateCount];  		for (int i = 0; i < c.CoordinateCount; i++) {  			points [i] = mapToClient (c.Vertices [i]);  			points [i].X += offsetX;  			points [i].Y += offsetY;  		}  		if (points.Length > 2)  			path.AddPolygon (points);  		else if (points.Length == 2)  			path.AddLines (points);  	}  	path.CloseFigure ();  	using (Brush b = new SolidBrush (_fillColor))  		g.FillPath (b' path);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (_geometry is Polygon) {  	path.StartFigure ();  	Polygon p = (Polygon)_geometry;  	foreach (Contour c in p.Contours) {  		points = new Point[c.CoordinateCount];  		for (int i = 0; i < c.CoordinateCount; i++) {  			points [i] = mapToClient (c.Vertices [i]);  			points [i].X += offsetX;  			points [i].Y += offsetY;  		}  		if (points.Length > 2)  			path.AddPolygon (points);  		else if (points.Length == 2)  			path.AddLines (points);  	}  	path.CloseFigure ();  	using (Brush b = new SolidBrush (_fillColor))  		g.FillPath (b' path);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: foreach (Contour c in p.Contours) {  	points = new Point[c.CoordinateCount];  	for (int i = 0; i < c.CoordinateCount; i++) {  		points [i] = mapToClient (c.Vertices [i]);  		points [i].X += offsetX;  		points [i].Y += offsetY;  	}  	if (points.Length > 2)  		path.AddPolygon (points);  	else if (points.Length == 2)  		path.AddLines (points);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: foreach (Contour c in p.Contours) {  	points = new Point[c.CoordinateCount];  	for (int i = 0; i < c.CoordinateCount; i++) {  		points [i] = mapToClient (c.Vertices [i]);  		points [i].X += offsetX;  		points [i].Y += offsetY;  	}  	if (points.Length > 2)  		path.AddPolygon (points);  	else if (points.Length == 2)  		path.AddLines (points);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (points.Length > 2)  	path.AddPolygon (points);  else if (points.Length == 2)  	path.AddLines (points);  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (points.Length > 2)  	path.AddPolygon (points);  else if (points.Length == 2)  	path.AddLines (points);  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (points.Length == 2)  	path.AddLines (points);  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (_activePatchIndex >= 0) {  	using (GraphicsPath activePath = new GraphicsPath (FillMode.Alternate)) {  		activePath.StartFigure ();  		if (_geometry is Polygon) {  			Polygon p = (Polygon)_geometry;  			Contour c = p.Contours [_activePatchIndex];  			points = new Point[c.CoordinateCount];  			for (int i = 0; i < c.CoordinateCount; i++) {  				points [i] = mapToClient (c.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 2)  				activePath.AddPolygon (points);  			else if (points.Length == 2)  				activePath.AddLines (points);  			activePath.CloseFigure ();  		}  		if (_geometry is Polyline) {  			Polyline p = (Polyline)_geometry;  			LinePath pt = p.Paths [_activePatchIndex];  			points = new Point[pt.CoordinateCount];  			for (int i = 0; i < pt.CoordinateCount; i++) {  				points [i] = mapToClient (pt.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 1)  				activePath.AddLines (points);  		}  		using (Pen p = new Pen (_activePatchColor))  			g.DrawPath (p' activePath);  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (_activePatchIndex >= 0) {  	using (GraphicsPath activePath = new GraphicsPath (FillMode.Alternate)) {  		activePath.StartFigure ();  		if (_geometry is Polygon) {  			Polygon p = (Polygon)_geometry;  			Contour c = p.Contours [_activePatchIndex];  			points = new Point[c.CoordinateCount];  			for (int i = 0; i < c.CoordinateCount; i++) {  				points [i] = mapToClient (c.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 2)  				activePath.AddPolygon (points);  			else if (points.Length == 2)  				activePath.AddLines (points);  			activePath.CloseFigure ();  		}  		if (_geometry is Polyline) {  			Polyline p = (Polyline)_geometry;  			LinePath pt = p.Paths [_activePatchIndex];  			points = new Point[pt.CoordinateCount];  			for (int i = 0; i < pt.CoordinateCount; i++) {  				points [i] = mapToClient (pt.Vertices [i]);  				points [i].X += offsetX;  				points [i].Y += offsetY;  			}  			if (points.Length > 1)  				activePath.AddLines (points);  		}  		using (Pen p = new Pen (_activePatchColor))  			g.DrawPath (p' activePath);  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: using (GraphicsPath activePath = new GraphicsPath (FillMode.Alternate)) {  	activePath.StartFigure ();  	if (_geometry is Polygon) {  		Polygon p = (Polygon)_geometry;  		Contour c = p.Contours [_activePatchIndex];  		points = new Point[c.CoordinateCount];  		for (int i = 0; i < c.CoordinateCount; i++) {  			points [i] = mapToClient (c.Vertices [i]);  			points [i].X += offsetX;  			points [i].Y += offsetY;  		}  		if (points.Length > 2)  			activePath.AddPolygon (points);  		else if (points.Length == 2)  			activePath.AddLines (points);  		activePath.CloseFigure ();  	}  	if (_geometry is Polyline) {  		Polyline p = (Polyline)_geometry;  		LinePath pt = p.Paths [_activePatchIndex];  		points = new Point[pt.CoordinateCount];  		for (int i = 0; i < pt.CoordinateCount; i++) {  			points [i] = mapToClient (pt.Vertices [i]);  			points [i].X += offsetX;  			points [i].Y += offsetY;  		}  		if (points.Length > 1)  			activePath.AddLines (points);  	}  	using (Pen p = new Pen (_activePatchColor))  		g.DrawPath (p' activePath);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: using (GraphicsPath activePath = new GraphicsPath (FillMode.Alternate)) {  	activePath.StartFigure ();  	if (_geometry is Polygon) {  		Polygon p = (Polygon)_geometry;  		Contour c = p.Contours [_activePatchIndex];  		points = new Point[c.CoordinateCount];  		for (int i = 0; i < c.CoordinateCount; i++) {  			points [i] = mapToClient (c.Vertices [i]);  			points [i].X += offsetX;  			points [i].Y += offsetY;  		}  		if (points.Length > 2)  			activePath.AddPolygon (points);  		else if (points.Length == 2)  			activePath.AddLines (points);  		activePath.CloseFigure ();  	}  	if (_geometry is Polyline) {  		Polyline p = (Polyline)_geometry;  		LinePath pt = p.Paths [_activePatchIndex];  		points = new Point[pt.CoordinateCount];  		for (int i = 0; i < pt.CoordinateCount; i++) {  			points [i] = mapToClient (pt.Vertices [i]);  			points [i].X += offsetX;  			points [i].Y += offsetY;  		}  		if (points.Length > 1)  			activePath.AddLines (points);  	}  	using (Pen p = new Pen (_activePatchColor))  		g.DrawPath (p' activePath);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (_geometry is Polygon) {  	Polygon p = (Polygon)_geometry;  	Contour c = p.Contours [_activePatchIndex];  	points = new Point[c.CoordinateCount];  	for (int i = 0; i < c.CoordinateCount; i++) {  		points [i] = mapToClient (c.Vertices [i]);  		points [i].X += offsetX;  		points [i].Y += offsetY;  	}  	if (points.Length > 2)  		activePath.AddPolygon (points);  	else if (points.Length == 2)  		activePath.AddLines (points);  	activePath.CloseFigure ();  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (_geometry is Polygon) {  	Polygon p = (Polygon)_geometry;  	Contour c = p.Contours [_activePatchIndex];  	points = new Point[c.CoordinateCount];  	for (int i = 0; i < c.CoordinateCount; i++) {  		points [i] = mapToClient (c.Vertices [i]);  		points [i].X += offsetX;  		points [i].Y += offsetY;  	}  	if (points.Length > 2)  		activePath.AddPolygon (points);  	else if (points.Length == 2)  		activePath.AddLines (points);  	activePath.CloseFigure ();  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (points.Length > 2)  	activePath.AddPolygon (points);  else if (points.Length == 2)  	activePath.AddLines (points);  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (points.Length > 2)  	activePath.AddPolygon (points);  else if (points.Length == 2)  	activePath.AddLines (points);  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,DrawEditingGeometry,The following statement contains a magic number: if (points.Length == 2)  	activePath.AddLines (points);  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,drawNodes,The following statement contains a magic number: using (Pen p = new Pen (color)) {  	Point[] points = new Point[nodes.Count ()];  	int i = 0;  	foreach (ICoordinate c in nodes) {  		points [i] = MapToClient (c);  		points [i].X += offsetX;  		points [i].Y += offsetY;  		i++;  	}  	Rectangle[] rectangles = new Rectangle[points.Length];  	int ns = this.NodeSize;  	for (i = 0; i < points.Length; i++)  		rectangles [i] = new Rectangle ((int)points [i].X - ns' (int)points [i].Y - ns' ns * 2' ns * 2);  	using (Brush b = new SolidBrush (color)) {  		g.FillRectangles (b' rectangles);  	}  	g.DrawRectangles (p' rectangles);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,drawNodes,The following statement contains a magic number: using (Pen p = new Pen (color)) {  	Point[] points = new Point[nodes.Count ()];  	int i = 0;  	foreach (ICoordinate c in nodes) {  		points [i] = MapToClient (c);  		points [i].X += offsetX;  		points [i].Y += offsetY;  		i++;  	}  	Rectangle[] rectangles = new Rectangle[points.Length];  	int ns = this.NodeSize;  	for (i = 0; i < points.Length; i++)  		rectangles [i] = new Rectangle ((int)points [i].X - ns' (int)points [i].Y - ns' ns * 2' ns * 2);  	using (Brush b = new SolidBrush (color)) {  		g.FillRectangles (b' rectangles);  	}  	g.DrawRectangles (p' rectangles);  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,drawNodes,The following statement contains a magic number: for (i = 0; i < points.Length; i++)  	rectangles [i] = new Rectangle ((int)points [i].X - ns' (int)points [i].Y - ns' ns * 2' ns * 2);  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,drawNodes,The following statement contains a magic number: for (i = 0; i < points.Length; i++)  	rectangles [i] = new Rectangle ((int)points [i].X - ns' (int)points [i].Y - ns' ns * 2' ns * 2);  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,drawNodes,The following statement contains a magic number: rectangles [i] = new Rectangle ((int)points [i].X - ns' (int)points [i].Y - ns' ns * 2' ns * 2);  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,drawNodes,The following statement contains a magic number: rectangles [i] = new Rectangle ((int)points [i].X - ns' (int)points [i].Y - ns' ns * 2' ns * 2);  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: if (_geometry is Polyline) {  	Polyline p = (Polyline)_geometry;  	foreach (LinePath path in p.Paths) {  		for (int i = 0; i < path.Vertices.Count - 1; i++) {  			result.Add (PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2));  		}  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: if (_geometry is Polyline) {  	Polyline p = (Polyline)_geometry;  	foreach (LinePath path in p.Paths) {  		for (int i = 0; i < path.Vertices.Count - 1; i++) {  			result.Add (PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2));  		}  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: foreach (LinePath path in p.Paths) {  	for (int i = 0; i < path.Vertices.Count - 1; i++) {  		result.Add (PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2));  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: foreach (LinePath path in p.Paths) {  	for (int i = 0; i < path.Vertices.Count - 1; i++) {  		result.Add (PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2));  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: for (int i = 0; i < path.Vertices.Count - 1; i++) {  	result.Add (PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2));  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: for (int i = 0; i < path.Vertices.Count - 1; i++) {  	result.Add (PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2));  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: result.Add (PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2));  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: result.Add (PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2));  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: if (_geometry is Polygon) {  	Polygon p = (Polygon)_geometry;  	foreach (Contour c in p.Contours) {  		for (int i = 0; i < c.Vertices.Count; i++) {  			int j = i == c.Vertices.Count - 1 ? 0 : i + 1;  			result.Add (PlanimetryEnvironment.NewCoordinate ((c.Vertices [i].X + c.Vertices [j].X) / 2' (c.Vertices [i].Y + c.Vertices [j].Y) / 2));  		}  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: if (_geometry is Polygon) {  	Polygon p = (Polygon)_geometry;  	foreach (Contour c in p.Contours) {  		for (int i = 0; i < c.Vertices.Count; i++) {  			int j = i == c.Vertices.Count - 1 ? 0 : i + 1;  			result.Add (PlanimetryEnvironment.NewCoordinate ((c.Vertices [i].X + c.Vertices [j].X) / 2' (c.Vertices [i].Y + c.Vertices [j].Y) / 2));  		}  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: foreach (Contour c in p.Contours) {  	for (int i = 0; i < c.Vertices.Count; i++) {  		int j = i == c.Vertices.Count - 1 ? 0 : i + 1;  		result.Add (PlanimetryEnvironment.NewCoordinate ((c.Vertices [i].X + c.Vertices [j].X) / 2' (c.Vertices [i].Y + c.Vertices [j].Y) / 2));  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: foreach (Contour c in p.Contours) {  	for (int i = 0; i < c.Vertices.Count; i++) {  		int j = i == c.Vertices.Count - 1 ? 0 : i + 1;  		result.Add (PlanimetryEnvironment.NewCoordinate ((c.Vertices [i].X + c.Vertices [j].X) / 2' (c.Vertices [i].Y + c.Vertices [j].Y) / 2));  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: for (int i = 0; i < c.Vertices.Count; i++) {  	int j = i == c.Vertices.Count - 1 ? 0 : i + 1;  	result.Add (PlanimetryEnvironment.NewCoordinate ((c.Vertices [i].X + c.Vertices [j].X) / 2' (c.Vertices [i].Y + c.Vertices [j].Y) / 2));  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: for (int i = 0; i < c.Vertices.Count; i++) {  	int j = i == c.Vertices.Count - 1 ? 0 : i + 1;  	result.Add (PlanimetryEnvironment.NewCoordinate ((c.Vertices [i].X + c.Vertices [j].X) / 2' (c.Vertices [i].Y + c.Vertices [j].Y) / 2));  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: result.Add (PlanimetryEnvironment.NewCoordinate ((c.Vertices [i].X + c.Vertices [j].X) / 2' (c.Vertices [i].Y + c.Vertices [j].Y) / 2));  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,GetSecondaryNodes,The following statement contains a magic number: result.Add (PlanimetryEnvironment.NewCoordinate ((c.Vertices [i].X + c.Vertices [j].X) / 2' (c.Vertices [i].Y + c.Vertices [j].Y) / 2));  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: if (_geometry is Polyline) {  	Polyline p = (Polyline)_geometry;  	int k = 0;  	foreach (LinePath path in p.Paths) {  		for (int i = 0; i < path.Vertices.Count - 1; i++) {  			ICoordinate c = PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2);  			if (c.Equals (coordinate)) {  				insertNodeAt (k' i + 1' coordinate);  				return true;  			}  		}  		k++;  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: if (_geometry is Polyline) {  	Polyline p = (Polyline)_geometry;  	int k = 0;  	foreach (LinePath path in p.Paths) {  		for (int i = 0; i < path.Vertices.Count - 1; i++) {  			ICoordinate c = PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2);  			if (c.Equals (coordinate)) {  				insertNodeAt (k' i + 1' coordinate);  				return true;  			}  		}  		k++;  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: foreach (LinePath path in p.Paths) {  	for (int i = 0; i < path.Vertices.Count - 1; i++) {  		ICoordinate c = PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2);  		if (c.Equals (coordinate)) {  			insertNodeAt (k' i + 1' coordinate);  			return true;  		}  	}  	k++;  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: foreach (LinePath path in p.Paths) {  	for (int i = 0; i < path.Vertices.Count - 1; i++) {  		ICoordinate c = PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2);  		if (c.Equals (coordinate)) {  			insertNodeAt (k' i + 1' coordinate);  			return true;  		}  	}  	k++;  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: for (int i = 0; i < path.Vertices.Count - 1; i++) {  	ICoordinate c = PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2);  	if (c.Equals (coordinate)) {  		insertNodeAt (k' i + 1' coordinate);  		return true;  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: for (int i = 0; i < path.Vertices.Count - 1; i++) {  	ICoordinate c = PlanimetryEnvironment.NewCoordinate ((path.Vertices [i].X + path.Vertices [i + 1].X) / 2' (path.Vertices [i].Y + path.Vertices [i + 1].Y) / 2);  	if (c.Equals (coordinate)) {  		insertNodeAt (k' i + 1' coordinate);  		return true;  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: if (_geometry is Polygon) {  	Polygon p = (Polygon)_geometry;  	int k = 0;  	foreach (Contour contour in p.Contours) {  		for (int i = 0; i < contour.Vertices.Count; i++) {  			int j = i == contour.Vertices.Count - 1 ? 0 : i + 1;  			ICoordinate c = PlanimetryEnvironment.NewCoordinate ((contour.Vertices [i].X + contour.Vertices [j].X) / 2' (contour.Vertices [i].Y + contour.Vertices [j].Y) / 2);  			if (c.Equals (coordinate)) {  				insertNodeAt (k' i + 1' coordinate);  				return true;  			}  		}  		k++;  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: if (_geometry is Polygon) {  	Polygon p = (Polygon)_geometry;  	int k = 0;  	foreach (Contour contour in p.Contours) {  		for (int i = 0; i < contour.Vertices.Count; i++) {  			int j = i == contour.Vertices.Count - 1 ? 0 : i + 1;  			ICoordinate c = PlanimetryEnvironment.NewCoordinate ((contour.Vertices [i].X + contour.Vertices [j].X) / 2' (contour.Vertices [i].Y + contour.Vertices [j].Y) / 2);  			if (c.Equals (coordinate)) {  				insertNodeAt (k' i + 1' coordinate);  				return true;  			}  		}  		k++;  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: foreach (Contour contour in p.Contours) {  	for (int i = 0; i < contour.Vertices.Count; i++) {  		int j = i == contour.Vertices.Count - 1 ? 0 : i + 1;  		ICoordinate c = PlanimetryEnvironment.NewCoordinate ((contour.Vertices [i].X + contour.Vertices [j].X) / 2' (contour.Vertices [i].Y + contour.Vertices [j].Y) / 2);  		if (c.Equals (coordinate)) {  			insertNodeAt (k' i + 1' coordinate);  			return true;  		}  	}  	k++;  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: foreach (Contour contour in p.Contours) {  	for (int i = 0; i < contour.Vertices.Count; i++) {  		int j = i == contour.Vertices.Count - 1 ? 0 : i + 1;  		ICoordinate c = PlanimetryEnvironment.NewCoordinate ((contour.Vertices [i].X + contour.Vertices [j].X) / 2' (contour.Vertices [i].Y + contour.Vertices [j].Y) / 2);  		if (c.Equals (coordinate)) {  			insertNodeAt (k' i + 1' coordinate);  			return true;  		}  	}  	k++;  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: for (int i = 0; i < contour.Vertices.Count; i++) {  	int j = i == contour.Vertices.Count - 1 ? 0 : i + 1;  	ICoordinate c = PlanimetryEnvironment.NewCoordinate ((contour.Vertices [i].X + contour.Vertices [j].X) / 2' (contour.Vertices [i].Y + contour.Vertices [j].Y) / 2);  	if (c.Equals (coordinate)) {  		insertNodeAt (k' i + 1' coordinate);  		return true;  	}  }  
Magic Number,MapAround.UI.WinForms,GeometryEditor,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,TryAddNode,The following statement contains a magic number: for (int i = 0; i < contour.Vertices.Count; i++) {  	int j = i == contour.Vertices.Count - 1 ? 0 : i + 1;  	ICoordinate c = PlanimetryEnvironment.NewCoordinate ((contour.Vertices [i].X + contour.Vertices [j].X) / 2' (contour.Vertices [i].Y + contour.Vertices [j].Y) / 2);  	if (c.Equals (coordinate)) {  		insertNodeAt (k' i + 1' coordinate);  		return true;  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: if (_mouseX [0] == -1) {  	_mouseX [0] = e.X;  	_mouseX [1] = e.X;  	_mouseX [2] = e.X;  	_mouseX [3] = e.X;  	_mouseY [0] = e.Y;  	_mouseY [1] = e.Y;  	_mouseY [2] = e.Y;  	_mouseY [3] = e.Y;  	_mouseTime = new DateTime[4] {  		DateTime.Now'  		DateTime.Now'  		DateTime.Now'  		DateTime.Now  	};  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: if (_mouseX [0] == -1) {  	_mouseX [0] = e.X;  	_mouseX [1] = e.X;  	_mouseX [2] = e.X;  	_mouseX [3] = e.X;  	_mouseY [0] = e.Y;  	_mouseY [1] = e.Y;  	_mouseY [2] = e.Y;  	_mouseY [3] = e.Y;  	_mouseTime = new DateTime[4] {  		DateTime.Now'  		DateTime.Now'  		DateTime.Now'  		DateTime.Now  	};  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: if (_mouseX [0] == -1) {  	_mouseX [0] = e.X;  	_mouseX [1] = e.X;  	_mouseX [2] = e.X;  	_mouseX [3] = e.X;  	_mouseY [0] = e.Y;  	_mouseY [1] = e.Y;  	_mouseY [2] = e.Y;  	_mouseY [3] = e.Y;  	_mouseTime = new DateTime[4] {  		DateTime.Now'  		DateTime.Now'  		DateTime.Now'  		DateTime.Now  	};  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: if (_mouseX [0] == -1) {  	_mouseX [0] = e.X;  	_mouseX [1] = e.X;  	_mouseX [2] = e.X;  	_mouseX [3] = e.X;  	_mouseY [0] = e.Y;  	_mouseY [1] = e.Y;  	_mouseY [2] = e.Y;  	_mouseY [3] = e.Y;  	_mouseTime = new DateTime[4] {  		DateTime.Now'  		DateTime.Now'  		DateTime.Now'  		DateTime.Now  	};  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: if (_mouseX [0] == -1) {  	_mouseX [0] = e.X;  	_mouseX [1] = e.X;  	_mouseX [2] = e.X;  	_mouseX [3] = e.X;  	_mouseY [0] = e.Y;  	_mouseY [1] = e.Y;  	_mouseY [2] = e.Y;  	_mouseY [3] = e.Y;  	_mouseTime = new DateTime[4] {  		DateTime.Now'  		DateTime.Now'  		DateTime.Now'  		DateTime.Now  	};  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: _mouseX [2] = e.X;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: _mouseX [3] = e.X;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: _mouseY [2] = e.Y;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: _mouseY [3] = e.Y;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: _mouseTime = new DateTime[4] {  	DateTime.Now'  	DateTime.Now'  	DateTime.Now'  	DateTime.Now  };  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: if ((dt - _mouseTime [3]).TotalMilliseconds > 30) {  	for (int i = 2; i >= 0; i--) {  		_mouseTime [i + 1] = _mouseTime [i];  		_mouseX [i + 1] = _mouseX [i];  		_mouseY [i + 1] = _mouseY [i];  	}  	_mouseX [0] = e.X;  	_mouseY [0] = e.Y;  	_mouseTime [0] = dt;  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: if ((dt - _mouseTime [3]).TotalMilliseconds > 30) {  	for (int i = 2; i >= 0; i--) {  		_mouseTime [i + 1] = _mouseTime [i];  		_mouseX [i + 1] = _mouseX [i];  		_mouseY [i + 1] = _mouseY [i];  	}  	_mouseX [0] = e.X;  	_mouseY [0] = e.Y;  	_mouseTime [0] = dt;  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: if ((dt - _mouseTime [3]).TotalMilliseconds > 30) {  	for (int i = 2; i >= 0; i--) {  		_mouseTime [i + 1] = _mouseTime [i];  		_mouseX [i + 1] = _mouseX [i];  		_mouseY [i + 1] = _mouseY [i];  	}  	_mouseX [0] = e.X;  	_mouseY [0] = e.Y;  	_mouseTime [0] = dt;  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,measureMouseMovementParameters,The following statement contains a magic number: for (int i = 2; i >= 0; i--) {  	_mouseTime [i + 1] = _mouseTime [i];  	_mouseX [i + 1] = _mouseX [i];  	_mouseY [i + 1] = _mouseY [i];  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The following statement contains a magic number: vxAvg = 0.35 * -(v1.X * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.X * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.X * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The following statement contains a magic number: vxAvg = 0.35 * -(v1.X * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.X * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.X * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The following statement contains a magic number: vxAvg = 0.35 * -(v1.X * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.X * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.X * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The following statement contains a magic number: vxAvg = 0.35 * -(v1.X * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.X * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.X * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The following statement contains a magic number: vxAvg = 0.35 * -(v1.X * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.X * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.X * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The following statement contains a magic number: vyAvg = 0.35 * -(v1.Y * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.Y * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.Y * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The following statement contains a magic number: vyAvg = 0.35 * -(v1.Y * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.Y * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.Y * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The following statement contains a magic number: vyAvg = 0.35 * -(v1.Y * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.Y * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.Y * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The following statement contains a magic number: vyAvg = 0.35 * -(v1.Y * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.Y * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.Y * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,getAvgMouseSpeed,The following statement contains a magic number: vyAvg = 0.35 * -(v1.Y * (_mouseTime [2] - _mouseTime [3]).TotalMilliseconds + v2.Y * (_mouseTime [1] - _mouseTime [2]).TotalMilliseconds + v3.Y * (_mouseTime [0] - _mouseTime [1]).TotalMilliseconds) / (_mouseTime [0] - _mouseTime [3]).TotalMilliseconds;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseUp,The following statement contains a magic number: if (_isMapDragging)  	if (e.Button == MouseButtons.Left) {  		_isMapDragging = false;  		if (_dragStartedFlag) {  			if (_draggingMode == DraggingMode.Pan) {  				if (Animation) {  					if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  						Pan (_offsetX' _offsetY);  					}  					else {  						_startAnimationOffsetX = _offsetX;  						_startAnimationOffsetY = _offsetY;  						ICoordinate avgSpeed = getAvgMouseSpeed ();  						animatedPan (_offsetX + (int)(avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration)' _offsetY + (int)(avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration));  					}  				}  				else  					Pan (_offsetX' _offsetY);  			}  			if (_draggingMode == DraggingMode.Zoom) {  				Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY));  				ICoordinate p1 = ClientToMap (upperLeft);  				ICoordinate p2 = ClientToMap (new Point (upperLeft.X + Math.Abs (_offsetX)' upperLeft.Y + Math.Abs (_offsetY)));  				if (SelectionRectangleDefined != null) {  					BoundingRectangle r = new BoundingRectangle (Math.Min (p1.X' p2.X)' Math.Min (p1.Y' p2.Y)' Math.Max (p1.X' p2.X)' Math.Max (p1.Y' p2.Y));  					SelectionRectangleDefined (this' new ViewBoxEventArgs (r));  				}  				this.Refresh ();  			}  			_dragStartedFlag = false;  			if (MapDragFinished != null)  				MapDragFinished (this' new EventArgs ());  		}  		else  			this.Refresh ();  		_offsetX = 0;  		_offsetY = 0;  	}  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseUp,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	_isMapDragging = false;  	if (_dragStartedFlag) {  		if (_draggingMode == DraggingMode.Pan) {  			if (Animation) {  				if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  					Pan (_offsetX' _offsetY);  				}  				else {  					_startAnimationOffsetX = _offsetX;  					_startAnimationOffsetY = _offsetY;  					ICoordinate avgSpeed = getAvgMouseSpeed ();  					animatedPan (_offsetX + (int)(avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration)' _offsetY + (int)(avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration));  				}  			}  			else  				Pan (_offsetX' _offsetY);  		}  		if (_draggingMode == DraggingMode.Zoom) {  			Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY));  			ICoordinate p1 = ClientToMap (upperLeft);  			ICoordinate p2 = ClientToMap (new Point (upperLeft.X + Math.Abs (_offsetX)' upperLeft.Y + Math.Abs (_offsetY)));  			if (SelectionRectangleDefined != null) {  				BoundingRectangle r = new BoundingRectangle (Math.Min (p1.X' p2.X)' Math.Min (p1.Y' p2.Y)' Math.Max (p1.X' p2.X)' Math.Max (p1.Y' p2.Y));  				SelectionRectangleDefined (this' new ViewBoxEventArgs (r));  			}  			this.Refresh ();  		}  		_dragStartedFlag = false;  		if (MapDragFinished != null)  			MapDragFinished (this' new EventArgs ());  	}  	else  		this.Refresh ();  	_offsetX = 0;  	_offsetY = 0;  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseUp,The following statement contains a magic number: if (_dragStartedFlag) {  	if (_draggingMode == DraggingMode.Pan) {  		if (Animation) {  			if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  				Pan (_offsetX' _offsetY);  			}  			else {  				_startAnimationOffsetX = _offsetX;  				_startAnimationOffsetY = _offsetY;  				ICoordinate avgSpeed = getAvgMouseSpeed ();  				animatedPan (_offsetX + (int)(avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration)' _offsetY + (int)(avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration));  			}  		}  		else  			Pan (_offsetX' _offsetY);  	}  	if (_draggingMode == DraggingMode.Zoom) {  		Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY));  		ICoordinate p1 = ClientToMap (upperLeft);  		ICoordinate p2 = ClientToMap (new Point (upperLeft.X + Math.Abs (_offsetX)' upperLeft.Y + Math.Abs (_offsetY)));  		if (SelectionRectangleDefined != null) {  			BoundingRectangle r = new BoundingRectangle (Math.Min (p1.X' p2.X)' Math.Min (p1.Y' p2.Y)' Math.Max (p1.X' p2.X)' Math.Max (p1.Y' p2.Y));  			SelectionRectangleDefined (this' new ViewBoxEventArgs (r));  		}  		this.Refresh ();  	}  	_dragStartedFlag = false;  	if (MapDragFinished != null)  		MapDragFinished (this' new EventArgs ());  }  else  	this.Refresh ();  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseUp,The following statement contains a magic number: if (_draggingMode == DraggingMode.Pan) {  	if (Animation) {  		if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  			Pan (_offsetX' _offsetY);  		}  		else {  			_startAnimationOffsetX = _offsetX;  			_startAnimationOffsetY = _offsetY;  			ICoordinate avgSpeed = getAvgMouseSpeed ();  			animatedPan (_offsetX + (int)(avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration)' _offsetY + (int)(avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration));  		}  	}  	else  		Pan (_offsetX' _offsetY);  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseUp,The following statement contains a magic number: if (Animation) {  	if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  		Pan (_offsetX' _offsetY);  	}  	else {  		_startAnimationOffsetX = _offsetX;  		_startAnimationOffsetY = _offsetY;  		ICoordinate avgSpeed = getAvgMouseSpeed ();  		animatedPan (_offsetX + (int)(avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration)' _offsetY + (int)(avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration));  	}  }  else  	Pan (_offsetX' _offsetY);  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseUp,The following statement contains a magic number: if ((DateTime.Now - _mouseTime [0]).TotalMilliseconds > 200) {  	Pan (_offsetX' _offsetY);  }  else {  	_startAnimationOffsetX = _offsetX;  	_startAnimationOffsetY = _offsetY;  	ICoordinate avgSpeed = getAvgMouseSpeed ();  	animatedPan (_offsetX + (int)(avgSpeed.X * AnimationTime * _mainAnimationRelativeDuration)' _offsetY + (int)(avgSpeed.Y * AnimationTime * _mainAnimationRelativeDuration));  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseDown,The following statement contains a magic number: if (e.Clicks == 2 && _editor != null) {  	if (tryActivateFeatureNode (e.X' e.Y)) {  		_editor.RemoveActiveNode ();  		this.Refresh ();  		return;  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseWheel,The following statement contains a magic number: if (_mouseWheelZooming) {  	if (!Animation) {  		ChangeZoom (e.Delta / 120 * _zoomPercent' e.X' e.Y);  	}  	else {  		_mouseLocation = e.Location;  		if (!_wheelTimer.Enabled)  			_wheelTimer.Start ();  		_deltaPercent += e.Delta / 120 * _zoomPercent;  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseWheel,The following statement contains a magic number: if (_mouseWheelZooming) {  	if (!Animation) {  		ChangeZoom (e.Delta / 120 * _zoomPercent' e.X' e.Y);  	}  	else {  		_mouseLocation = e.Location;  		if (!_wheelTimer.Enabled)  			_wheelTimer.Start ();  		_deltaPercent += e.Delta / 120 * _zoomPercent;  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseWheel,The following statement contains a magic number: if (!Animation) {  	ChangeZoom (e.Delta / 120 * _zoomPercent' e.X' e.Y);  }  else {  	_mouseLocation = e.Location;  	if (!_wheelTimer.Enabled)  		_wheelTimer.Start ();  	_deltaPercent += e.Delta / 120 * _zoomPercent;  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseWheel,The following statement contains a magic number: if (!Animation) {  	ChangeZoom (e.Delta / 120 * _zoomPercent' e.X' e.Y);  }  else {  	_mouseLocation = e.Location;  	if (!_wheelTimer.Enabled)  		_wheelTimer.Start ();  	_deltaPercent += e.Delta / 120 * _zoomPercent;  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseWheel,The following statement contains a magic number: ChangeZoom (e.Delta / 120 * _zoomPercent' e.X' e.Y);  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,mouseWheel,The following statement contains a magic number: _deltaPercent += e.Delta / 120 * _zoomPercent;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawDragging,The following statement contains a magic number: if (_draggingMode == DraggingMode.Zoom) {  	pe.Graphics.DrawImageUnscaledAndClipped (_bitmap' pe.ClipRectangle);  	Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY));  	Rectangle r = new Rectangle (upperLeft' new Size (new Point (Math.Abs (_offsetX)' Math.Abs (_offsetY))));  	using (Brush b = new SolidBrush (Color.FromArgb (30' _selectionRectangleColor)))  		pe.Graphics.FillRectangle (b' r);  	using (Pen p = new Pen (Color.FromArgb (80' _selectionRectangleColor)))  		pe.Graphics.DrawRectangle (p' r);  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawDragging,The following statement contains a magic number: if (_draggingMode == DraggingMode.Zoom) {  	pe.Graphics.DrawImageUnscaledAndClipped (_bitmap' pe.ClipRectangle);  	Point upperLeft = new Point (Math.Min (_mouseDownX' _mouseDownX + _offsetX)' Math.Min (_mouseDownY' _mouseDownY + _offsetY));  	Rectangle r = new Rectangle (upperLeft' new Size (new Point (Math.Abs (_offsetX)' Math.Abs (_offsetY))));  	using (Brush b = new SolidBrush (Color.FromArgb (30' _selectionRectangleColor)))  		pe.Graphics.FillRectangle (b' r);  	using (Pen p = new Pen (Color.FromArgb (80' _selectionRectangleColor)))  		pe.Graphics.DrawRectangle (p' r);  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawDragging,The following statement contains a magic number: using (Brush b = new SolidBrush (Color.FromArgb (30' _selectionRectangleColor)))  	pe.Graphics.FillRectangle (b' r);  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawDragging,The following statement contains a magic number: using (Pen p = new Pen (Color.FromArgb (80' _selectionRectangleColor)))  	pe.Graphics.DrawRectangle (p' r);  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		pe.Graphics.DrawImage (_bitmap' _currentRectangle);  	}  	else {  		Rectangle r = new Rectangle (new Point (0' 0)' new Size (new Point (pe.ClipRectangle.Left + pe.ClipRectangle.Width' pe.ClipRectangle.Top + pe.ClipRectangle.Height)));  		pe.Graphics.DrawImageUnscaledAndClipped (_asyncMapImage' r);  		if (_opacity > 0)  			_opacityColorMatrix.Matrix33 = (float)_opacity;  		else  			_opacityColorMatrix.Matrix33 = 0;  		using (ImageAttributes imageAttributes = new ImageAttributes ()) {  			imageAttributes.SetColorMatrix (_opacityColorMatrix' ColorMatrixFlag.Default' ColorAdjustType.Bitmap);  			pe.Graphics.DrawImage (_bitmap' new Rectangle ((int)_currentRectangle.Left' (int)_currentRectangle.Top' (int)_currentRectangle.Width' (int)_currentRectangle.Height)' 0' 0' _bitmap.Width' _bitmap.Height' GraphicsUnit.Pixel' imageAttributes);  		}  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		pe.Graphics.DrawImage (_bitmap' _currentRectangle);  	}  	else {  		Rectangle r = new Rectangle (new Point (0' 0)' new Size (new Point (pe.ClipRectangle.Left + pe.ClipRectangle.Width' pe.ClipRectangle.Top + pe.ClipRectangle.Height)));  		pe.Graphics.DrawImageUnscaledAndClipped (_asyncMapImage' r);  		if (_opacity > 0)  			_opacityColorMatrix.Matrix33 = (float)_opacity;  		else  			_opacityColorMatrix.Matrix33 = 0;  		using (ImageAttributes imageAttributes = new ImageAttributes ()) {  			imageAttributes.SetColorMatrix (_opacityColorMatrix' ColorMatrixFlag.Default' ColorAdjustType.Bitmap);  			pe.Graphics.DrawImage (_bitmap' new Rectangle ((int)_currentRectangle.Left' (int)_currentRectangle.Top' (int)_currentRectangle.Width' (int)_currentRectangle.Height)' 0' 0' _bitmap.Width' _bitmap.Height' GraphicsUnit.Pixel' imageAttributes);  		}  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		pe.Graphics.DrawImage (_bitmap' _currentRectangle);  	}  	else {  		Rectangle r = new Rectangle (new Point (0' 0)' new Size (new Point (pe.ClipRectangle.Left + pe.ClipRectangle.Width' pe.ClipRectangle.Top + pe.ClipRectangle.Height)));  		pe.Graphics.DrawImageUnscaledAndClipped (_asyncMapImage' r);  		if (_opacity > 0)  			_opacityColorMatrix.Matrix33 = (float)_opacity;  		else  			_opacityColorMatrix.Matrix33 = 0;  		using (ImageAttributes imageAttributes = new ImageAttributes ()) {  			imageAttributes.SetColorMatrix (_opacityColorMatrix' ColorMatrixFlag.Default' ColorAdjustType.Bitmap);  			pe.Graphics.DrawImage (_bitmap' new Rectangle ((int)_currentRectangle.Left' (int)_currentRectangle.Top' (int)_currentRectangle.Width' (int)_currentRectangle.Height)' 0' 0' _bitmap.Width' _bitmap.Height' GraphicsUnit.Pixel' imageAttributes);  		}  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		pe.Graphics.DrawImage (_bitmap' _currentRectangle);  	}  	else {  		Rectangle r = new Rectangle (new Point (0' 0)' new Size (new Point (pe.ClipRectangle.Left + pe.ClipRectangle.Width' pe.ClipRectangle.Top + pe.ClipRectangle.Height)));  		pe.Graphics.DrawImageUnscaledAndClipped (_asyncMapImage' r);  		if (_opacity > 0)  			_opacityColorMatrix.Matrix33 = (float)_opacity;  		else  			_opacityColorMatrix.Matrix33 = 0;  		using (ImageAttributes imageAttributes = new ImageAttributes ()) {  			imageAttributes.SetColorMatrix (_opacityColorMatrix' ColorMatrixFlag.Default' ColorAdjustType.Bitmap);  			pe.Graphics.DrawImage (_bitmap' new Rectangle ((int)_currentRectangle.Left' (int)_currentRectangle.Top' (int)_currentRectangle.Width' (int)_currentRectangle.Height)' 0' 0' _bitmap.Width' _bitmap.Height' GraphicsUnit.Pixel' imageAttributes);  		}  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		pe.Graphics.DrawImage (_bitmap' _currentRectangle);  	}  	else {  		Rectangle r = new Rectangle (new Point (0' 0)' new Size (new Point (pe.ClipRectangle.Left + pe.ClipRectangle.Width' pe.ClipRectangle.Top + pe.ClipRectangle.Height)));  		pe.Graphics.DrawImageUnscaledAndClipped (_asyncMapImage' r);  		if (_opacity > 0)  			_opacityColorMatrix.Matrix33 = (float)_opacity;  		else  			_opacityColorMatrix.Matrix33 = 0;  		using (ImageAttributes imageAttributes = new ImageAttributes ()) {  			imageAttributes.SetColorMatrix (_opacityColorMatrix' ColorMatrixFlag.Default' ColorAdjustType.Bitmap);  			pe.Graphics.DrawImage (_bitmap' new Rectangle ((int)_currentRectangle.Left' (int)_currentRectangle.Top' (int)_currentRectangle.Width' (int)_currentRectangle.Height)' 0' 0' _bitmap.Width' _bitmap.Height' GraphicsUnit.Pixel' imageAttributes);  		}  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		pe.Graphics.DrawImage (_bitmap' _currentRectangle);  	}  	else {  		Rectangle r = new Rectangle (new Point (0' 0)' new Size (new Point (pe.ClipRectangle.Left + pe.ClipRectangle.Width' pe.ClipRectangle.Top + pe.ClipRectangle.Height)));  		pe.Graphics.DrawImageUnscaledAndClipped (_asyncMapImage' r);  		if (_opacity > 0)  			_opacityColorMatrix.Matrix33 = (float)_opacity;  		else  			_opacityColorMatrix.Matrix33 = 0;  		using (ImageAttributes imageAttributes = new ImageAttributes ()) {  			imageAttributes.SetColorMatrix (_opacityColorMatrix' ColorMatrixFlag.Default' ColorAdjustType.Bitmap);  			pe.Graphics.DrawImage (_bitmap' new Rectangle ((int)_currentRectangle.Left' (int)_currentRectangle.Top' (int)_currentRectangle.Width' (int)_currentRectangle.Height)' 0' 0' _bitmap.Width' _bitmap.Height' GraphicsUnit.Pixel' imageAttributes);  		}  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		pe.Graphics.DrawImage (_bitmap' _currentRectangle);  	}  	else {  		Rectangle r = new Rectangle (new Point (0' 0)' new Size (new Point (pe.ClipRectangle.Left + pe.ClipRectangle.Width' pe.ClipRectangle.Top + pe.ClipRectangle.Height)));  		pe.Graphics.DrawImageUnscaledAndClipped (_asyncMapImage' r);  		if (_opacity > 0)  			_opacityColorMatrix.Matrix33 = (float)_opacity;  		else  			_opacityColorMatrix.Matrix33 = 0;  		using (ImageAttributes imageAttributes = new ImageAttributes ()) {  			imageAttributes.SetColorMatrix (_opacityColorMatrix' ColorMatrixFlag.Default' ColorAdjustType.Bitmap);  			pe.Graphics.DrawImage (_bitmap' new Rectangle ((int)_currentRectangle.Left' (int)_currentRectangle.Top' (int)_currentRectangle.Width' (int)_currentRectangle.Height)' 0' 0' _bitmap.Width' _bitmap.Height' GraphicsUnit.Pixel' imageAttributes);  		}  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,drawAnimated,The following statement contains a magic number: if (_currentRectangle.Width <= 1e9 && _currentRectangle.Width >= -1e9 && _currentRectangle.Height <= 1e9 && _currentRectangle.Height >= -1e9 && _currentRectangle.Left <= 1e9 && _currentRectangle.Left >= -1e9 && _currentRectangle.Top <= 1e9 && _currentRectangle.Top >= -1e9) {  	if (_opacity == 0) {  		pe.Graphics.DrawImage (_bitmap' _currentRectangle);  	}  	else {  		Rectangle r = new Rectangle (new Point (0' 0)' new Size (new Point (pe.ClipRectangle.Left + pe.ClipRectangle.Width' pe.ClipRectangle.Top + pe.ClipRectangle.Height)));  		pe.Graphics.DrawImageUnscaledAndClipped (_asyncMapImage' r);  		if (_opacity > 0)  			_opacityColorMatrix.Matrix33 = (float)_opacity;  		else  			_opacityColorMatrix.Matrix33 = 0;  		using (ImageAttributes imageAttributes = new ImageAttributes ()) {  			imageAttributes.SetColorMatrix (_opacityColorMatrix' ColorMatrixFlag.Default' ColorAdjustType.Bitmap);  			pe.Graphics.DrawImage (_bitmap' new Rectangle ((int)_currentRectangle.Left' (int)_currentRectangle.Top' (int)_currentRectangle.Width' (int)_currentRectangle.Height)' 0' 0' _bitmap.Width' _bitmap.Height' GraphicsUnit.Pixel' imageAttributes);  		}  	}  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,play,The following statement contains a magic number: try {  	double xScaleFactor = (double)startRectangle.Width / (double)endRectangle.Width;  	double yScaleFactor = (double)startRectangle.Height / (double)endRectangle.Height;  	endRectangle = new Rectangle (new Point ((int)(-endRectangle.X * xScaleFactor)' (int)(-endRectangle.Y * yScaleFactor))' new Size ((int)(startRectangle.Width * xScaleFactor)' (int)(startRectangle.Height * yScaleFactor)));  	TimeSpan animationInterval = new TimeSpan (0' 0' 0' 0' (int)Math.Round (_animationTime * _mainAnimationRelativeDuration));  	DateTime begin = DateTime.Now;  	DateTime end = begin.Add (animationInterval);  	float dTop = startRectangle.Top - endRectangle.Top;  	float dLeft = startRectangle.Left - endRectangle.Left;  	float dRight = startRectangle.Right - endRectangle.Right;  	float dBottom = startRectangle.Bottom - endRectangle.Bottom;  	DateTime now = DateTime.Now;  	while (now < end) {  		double t = (double)(now - begin).Ticks / (double)animationInterval.Ticks;  		if (t > 0) {  			double factor = Math.Pow (t' 0.25);  			float newLeft = (int)Math.Round (startRectangle.Left - dLeft * factor);  			float newTop = (int)Math.Round (startRectangle.Top - dTop * factor);  			float newRight = (int)Math.Round (startRectangle.Right - dRight * factor);  			float newBottom = (int)Math.Round (startRectangle.Bottom - dBottom * factor);  			_currentRectangle = new RectangleF (newLeft' newTop' newRight - newLeft' newBottom - newTop);  			this.Refresh ();  		}  		now = DateTime.Now;  	}  }  finally {  	_animated = false;  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,play,The following statement contains a magic number: while (now < end) {  	double t = (double)(now - begin).Ticks / (double)animationInterval.Ticks;  	if (t > 0) {  		double factor = Math.Pow (t' 0.25);  		float newLeft = (int)Math.Round (startRectangle.Left - dLeft * factor);  		float newTop = (int)Math.Round (startRectangle.Top - dTop * factor);  		float newRight = (int)Math.Round (startRectangle.Right - dRight * factor);  		float newBottom = (int)Math.Round (startRectangle.Bottom - dBottom * factor);  		_currentRectangle = new RectangleF (newLeft' newTop' newRight - newLeft' newBottom - newTop);  		this.Refresh ();  	}  	now = DateTime.Now;  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,play,The following statement contains a magic number: if (t > 0) {  	double factor = Math.Pow (t' 0.25);  	float newLeft = (int)Math.Round (startRectangle.Left - dLeft * factor);  	float newTop = (int)Math.Round (startRectangle.Top - dTop * factor);  	float newRight = (int)Math.Round (startRectangle.Right - dRight * factor);  	float newBottom = (int)Math.Round (startRectangle.Bottom - dBottom * factor);  	_currentRectangle = new RectangleF (newLeft' newTop' newRight - newLeft' newBottom - newTop);  	this.Refresh ();  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,MapControl,The following statement contains a magic number: _wheelTimer.Interval = 80;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = (double)deltaPercent / 100;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = Width / 2;  		mouseY = Height / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = (double)deltaPercent / 100;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = Width / 2;  		mouseY = Height / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = (double)deltaPercent / 100;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = Width / 2;  		mouseY = Height / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = (double)deltaPercent / 100;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = Width / 2;  		mouseY = Height / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = (double)deltaPercent / 100;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = Width / 2;  		mouseY = Height / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = (double)deltaPercent / 100;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = Width / 2;  		mouseY = Height / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: if (deltaPercent != 0) {  	if (_viewBox.IsEmpty ())  		return;  	double delta = (double)deltaPercent / 100;  	if (delta > 0)  		delta *= 2;  	if (!_alignmentWhileZooming) {  		mouseX = Width / 2;  		mouseY = Height / 2;  	}  	ICoordinate node = ClientToMap (new Point (mouseX' mouseY));  	double leftWidth = node.X - _viewBox.MinX;  	double rightWidth = _viewBox.MaxX - node.X;  	double bottomHeight = node.Y - _viewBox.MinY;  	double topHeight = _viewBox.MaxY - node.Y;  	double factor = delta > 0 ? 1 - delta / (2 + 2 * delta) : 1 - delta / 2;  	BoundingRectangle viewbox = new BoundingRectangle (node.X - leftWidth * factor' node.Y - bottomHeight * factor' node.X + rightWidth * factor' node.Y + topHeight * factor);  	SetViewBox (viewbox' true' false' true);  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: if (delta > 0)  	delta *= 2;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: delta *= 2;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: if (!_alignmentWhileZooming) {  	mouseX = Width / 2;  	mouseY = Height / 2;  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: if (!_alignmentWhileZooming) {  	mouseX = Width / 2;  	mouseY = Height / 2;  }  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: mouseX = Width / 2;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ChangeZoom,The following statement contains a magic number: mouseY = Height / 2;  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ZoomIn,The following statement contains a magic number: ChangeZoom (_zoomPercent' Width / 2' Height / 2);  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ZoomIn,The following statement contains a magic number: ChangeZoom (_zoomPercent' Width / 2' Height / 2);  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ZoomOut,The following statement contains a magic number: ChangeZoom (-_zoomPercent' Width / 2' Height / 2);  
Magic Number,MapAround.UI.WinForms,MapControl,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\MapControl.cs,ZoomOut,The following statement contains a magic number: ChangeZoom (-_zoomPercent' Width / 2' Height / 2);  
Missing Default,MapAround.UI.WinForms,EditAction,C:\repos\gkrsu_maparound.core\src\WinFormsMapControl\GeometryEditor.cs,getInvertedAction,The following switch statement is missing a default case: switch (forwardActionType) {  case EditActionType.SetNodePosition:  	return EditActionType.SetNodePosition;  case EditActionType.ReplaceGeometry:  	return EditActionType.ReplaceGeometry;  case EditActionType.InsertNode:  	return EditActionType.DeleteNode;  case EditActionType.DeleteNode:  	return EditActionType.InsertNode;  case EditActionType.InsertPatch:  	return EditActionType.DeletePatch;  case EditActionType.DeletePatch:  	return EditActionType.InsertPatch;  }  
