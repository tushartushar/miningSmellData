Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Simplify.DI.Provider.SimpleInjector,SimpleInjectorDIProvider,D:\newReposJune17\i4004_Simplify\src\Simplify.DI.Provider.SimpleInjector\SimpleInjectorDIProvider.cs,Register,Cyclomatic complexity of the method is 9
Complex Method,Simplify.DI.Provider.SimpleInjector,SimpleInjectorDIProvider,D:\newReposJune17\i4004_Simplify\src\Simplify.DI.Provider.SimpleInjector\SimpleInjectorDIProvider.cs,Register,Cyclomatic complexity of the method is 9
Missing Default,Simplify.DI.Provider.SimpleInjector,SimpleInjectorDIProvider,D:\newReposJune17\i4004_Simplify\src\Simplify.DI.Provider.SimpleInjector\SimpleInjectorDIProvider.cs,Register,The following switch statement is missing a default case: switch (lifetimeType) {  case LifetimeType.Transient:  	Container.Register (serviceType' implementationType' Lifestyle.Transient);  	break;  case LifetimeType.Singleton:  	Container.Register (serviceType' implementationType' Lifestyle.Singleton);  	break;  case LifetimeType.PerLifetimeScope:  	Container.Register (serviceType' implementationType' Lifestyle.Scoped);  	break;  }  
Missing Default,Simplify.DI.Provider.SimpleInjector,SimpleInjectorDIProvider,D:\newReposJune17\i4004_Simplify\src\Simplify.DI.Provider.SimpleInjector\SimpleInjectorDIProvider.cs,Register,The following switch statement is missing a default case: switch (lifetimeType) {  case LifetimeType.Transient:  	Container.Register (() => instanceCreator (this)' Lifestyle.Transient);  	break;  case LifetimeType.Singleton:  	Container.Register (() => instanceCreator (this)' Lifestyle.Singleton);  	break;  case LifetimeType.PerLifetimeScope:  	Container.Register (() => instanceCreator (this)' Lifestyle.Scoped);  	break;  }  
