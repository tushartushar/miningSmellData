Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Simplify.Scheduler,SchedulerJobsHandler,D:\research\architectureSmells\repos\i4004_Simplify\src\Simplify.Scheduler\SchedulerJobsHandler.cs,AddJob,The length of the statement  "			var job = SchedulerJobFactory.CreateCrontabJob<T>(configuration' configurationSectionName' invokeMethodName' startupArgs); " is 122.
Long Statement,Simplify.Scheduler.Jobs.Crontab,CrontabSchedulerJob<T>,D:\research\architectureSmells\repos\i4004_Simplify\src\Simplify.Scheduler\Jobs\Crontab\CrontabSchedulerJob.cs,Start,The length of the statement  "				_timer = new Timer(OnCronTimerTick ?? throw new InvalidOperationException("OnCronTimerTick is not assigned")' this' 1000' 60000); " is 129.
Long Statement,Simplify.Scheduler.Jobs.Crontab,CrontabSchedulerJob<T>,D:\research\architectureSmells\repos\i4004_Simplify\src\Simplify.Scheduler\Jobs\Crontab\CrontabSchedulerJob.cs,Start,The length of the statement  "				_timer = new Timer(OnStartWork ?? throw new InvalidOperationException("OnStartWork is not assigned")' this' 1000' Settings.ProcessingInterval * 1000); " is 150.
Magic Number,Simplify.Scheduler.Jobs.Crontab,CrontabSchedulerJob<T>,D:\research\architectureSmells\repos\i4004_Simplify\src\Simplify.Scheduler\Jobs\Crontab\CrontabSchedulerJob.cs,Start,The following statement contains a magic number: _timer = new Timer(OnCronTimerTick ?? throw new InvalidOperationException("OnCronTimerTick is not assigned")' this' 1000' 60000);
Magic Number,Simplify.Scheduler.Jobs.Crontab,CrontabSchedulerJob<T>,D:\research\architectureSmells\repos\i4004_Simplify\src\Simplify.Scheduler\Jobs\Crontab\CrontabSchedulerJob.cs,Start,The following statement contains a magic number: _timer = new Timer(OnCronTimerTick ?? throw new InvalidOperationException("OnCronTimerTick is not assigned")' this' 1000' 60000);
Missing Default,Simplify.Scheduler,MultitaskScheduler,D:\research\architectureSmells\repos\i4004_Simplify\src\Simplify.Scheduler\MultitaskScheduler.cs,Start,The following switch statement is missing a default case: switch (commandLineProcessResult)  			{  				case ProcessCommandLineResult.SkipSchedulerStart:  					return false;    				case ProcessCommandLineResult.NoArguments:  					StartAndWait();  					break;  			}
Missing Default,Simplify.Scheduler.CommandLine,CommandLineProcessor,D:\research\architectureSmells\repos\i4004_Simplify\src\Simplify.Scheduler\CommandLine\CommandLineProcessor.cs,ProcessCommandLineArguments,The following switch statement is missing a default case: switch (action)  			{  				case CommandLineAction.SkipScheduler:  					return ProcessCommandLineResult.SkipSchedulerStart;  			}
