Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,OrgPortal.Data,SampleDataItem,C:\repos\magenic_OrgPortal\OrgPortal\DataModel\SampleDataSource.cs,SampleDataItem,The method has 6 parameters. Parameters: uniqueId' title' subtitle' imagePath' description' content
Long Parameter List,OrgPortal.Data,SampleDataGroup,C:\repos\magenic_OrgPortal\OrgPortal\DataModel\SampleDataSource.cs,SampleDataGroup,The method has 5 parameters. Parameters: uniqueId' title' subtitle' imagePath' description
Long Parameter List,OrgPortal.ViewModels,AppDetailsPageViewModel,C:\repos\magenic_OrgPortal\OrgPortal\ViewModels\AppDetailsPageViewModel.cs,AppDetailsPageViewModel,The method has 5 parameters. Parameters: navigation' messageBox' navBar' fileManager' branding
Long Parameter List,OrgPortal.ViewModels,InstalledAppsPageViewModel,C:\repos\magenic_OrgPortal\OrgPortal\ViewModels\InstalledAppsPageViewModel.cs,InstalledAppsPageViewModel,The method has 5 parameters. Parameters: navigation' messageBox' navBar' fileManager' branding
Long Parameter List,OrgPortal.ViewModels,MainPageViewModel,C:\repos\magenic_OrgPortal\OrgPortal\ViewModels\MainPageViewModel.cs,MainPageViewModel,The method has 6 parameters. Parameters: navigation' messageBox' navBar' dataSource' fileManager' branding
Long Statement,OrgPortal.Common,SuspensionManager,C:\repos\magenic_OrgPortal\OrgPortal\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,OrgPortal.Common,SuspensionManager,C:\repos\magenic_OrgPortal\OrgPortal\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Long Statement,OrgPortal.Data,SampleDataSource,C:\repos\magenic_OrgPortal\OrgPortal\DataModel\SampleDataSource.cs,GetItemAsync,The length of the statement  "            var matches = _sampleDataSource.Groups.SelectMany(group => group.Items).Where((item) => item.UniqueId.Equals(uniqueId)); " is 120.
Long Statement,OrgPortal.ViewModels,MainPageViewModel,C:\repos\magenic_OrgPortal\OrgPortal\ViewModels\MainPageViewModel.cs,UpdateDevLicense,The length of the statement  "            await _messageBox.ShowAsync("License key request sent; you may need to switch to the Desktop to complete the process"' "Get Dev License"); " is 138.
Complex Conditional,OrgPortal.Common,NavigationHelper,C:\repos\magenic_OrgPortal\OrgPortal\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,OrgPortal.Common,NavigationHelper,C:\repos\magenic_OrgPortal\OrgPortal\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,OrgPortal.Common,NavigationHelper,C:\repos\magenic_OrgPortal\OrgPortal\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: byte a = 255;
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: byte r = 255;
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: byte g = 255;
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: byte b = 255;
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: if (hexColor.Length > 6)              {                  a = byte.Parse(hexColor.Substring(startIndex' 2)' NumberStyles.HexNumber);                  startIndex += 2;              }
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: if (hexColor.Length > 6)              {                  a = byte.Parse(hexColor.Substring(startIndex' 2)' NumberStyles.HexNumber);                  startIndex += 2;              }
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: if (hexColor.Length > 6)              {                  a = byte.Parse(hexColor.Substring(startIndex' 2)' NumberStyles.HexNumber);                  startIndex += 2;              }
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: r = byte.Parse(hexColor.Substring(startIndex' 2)' NumberStyles.HexNumber);
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: g = byte.Parse(hexColor.Substring(startIndex + 2' 2)' NumberStyles.HexNumber);
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: g = byte.Parse(hexColor.Substring(startIndex + 2' 2)' NumberStyles.HexNumber);
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: b = byte.Parse(hexColor.Substring(startIndex + 4' 2)' NumberStyles.HexNumber);
Magic Number,OrgPortal.Common,Theme,C:\repos\magenic_OrgPortal\OrgPortal\Common\ThemeManager.cs,ColorFromHex,The following statement contains a magic number: b = byte.Parse(hexColor.Substring(startIndex + 4' 2)' NumberStyles.HexNumber);
Magic Number,OrgPortal.Common,NavigationHelper,C:\repos\magenic_OrgPortal\OrgPortal\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,OrgPortal.Common,NavigationHelper,C:\repos\magenic_OrgPortal\OrgPortal\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,OrgPortal.Common,NavigationHelper,C:\repos\magenic_OrgPortal\OrgPortal\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,OrgPortal.Common,NavigationHelper,C:\repos\magenic_OrgPortal\OrgPortal\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,OrgPortal.DataModel,FileSyncManager,C:\repos\magenic_OrgPortal\OrgPortal\DataModel\FileSyncManager.cs,GetInstalledApps,The following statement contains a magic number: if (file != null)              {                  var installedPackages = await FileIO.ReadLinesAsync(file);                  AppInfo info = new AppInfo();                  foreach (var line in installedPackages)                  {                      if (line.StartsWith("Name"))                          info.Name = line.Substring(line.IndexOf(":") + 2);                      else if (line.StartsWith("PackageFamilyName"))                          info.PackageFamilyName = line.Substring(line.IndexOf(":") + 2);                      else if (line.StartsWith("Version"))                          info.Version = line.Substring(line.IndexOf(":") + 2);                      else if (line.StartsWith("IsDevelopmentMode"))                      {                          results.Add(info);                          info = new AppInfo();                      }                  }              }
Magic Number,OrgPortal.DataModel,FileSyncManager,C:\repos\magenic_OrgPortal\OrgPortal\DataModel\FileSyncManager.cs,GetInstalledApps,The following statement contains a magic number: if (file != null)              {                  var installedPackages = await FileIO.ReadLinesAsync(file);                  AppInfo info = new AppInfo();                  foreach (var line in installedPackages)                  {                      if (line.StartsWith("Name"))                          info.Name = line.Substring(line.IndexOf(":") + 2);                      else if (line.StartsWith("PackageFamilyName"))                          info.PackageFamilyName = line.Substring(line.IndexOf(":") + 2);                      else if (line.StartsWith("Version"))                          info.Version = line.Substring(line.IndexOf(":") + 2);                      else if (line.StartsWith("IsDevelopmentMode"))                      {                          results.Add(info);                          info = new AppInfo();                      }                  }              }
Magic Number,OrgPortal.DataModel,FileSyncManager,C:\repos\magenic_OrgPortal\OrgPortal\DataModel\FileSyncManager.cs,GetInstalledApps,The following statement contains a magic number: if (file != null)              {                  var installedPackages = await FileIO.ReadLinesAsync(file);                  AppInfo info = new AppInfo();                  foreach (var line in installedPackages)                  {                      if (line.StartsWith("Name"))                          info.Name = line.Substring(line.IndexOf(":") + 2);                      else if (line.StartsWith("PackageFamilyName"))                          info.PackageFamilyName = line.Substring(line.IndexOf(":") + 2);                      else if (line.StartsWith("Version"))                          info.Version = line.Substring(line.IndexOf(":") + 2);                      else if (line.StartsWith("IsDevelopmentMode"))                      {                          results.Add(info);                          info = new AppInfo();                      }                  }              }
Missing Default,OrgPortal.Converters,InverseBoolToVisibilityConverter,C:\repos\magenic_OrgPortal\OrgPortal\Converters\InverseBoolToVisibilityConverter.cs,ConvertBack,The following switch statement is missing a default case: switch ((Visibility)value)                  {                      case Visibility.Visible:                          return false;                      case Visibility.Collapsed:                          return true;                  }
Missing Default,OrgPortal.Converters,BoolToVisibilityConverter,C:\repos\magenic_OrgPortal\OrgPortal\Converters\BoolToVisibilityConverter.cs,ConvertBack,The following switch statement is missing a default case: switch ((Visibility)value)                  {                      case Visibility.Visible:                          return true;                      case Visibility.Collapsed:                          return false;                  }
