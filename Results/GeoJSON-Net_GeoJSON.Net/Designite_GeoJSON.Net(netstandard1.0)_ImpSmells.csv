Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GeoJSON.Net.Converters,CrsConverter,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Converters\CrsConverter.cs,ReadJson,Cyclomatic complexity of the method is 10
Complex Method,GeoJSON.Net.Converters,GeoJsonConverter,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Converters\GeoJsonConverter.cs,ReadGeoJson,Cyclomatic complexity of the method is 12
Complex Method,GeoJSON.Net.Converters,GeometryConverter,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Converters\GeometryConverter.cs,ReadGeoJson,Cyclomatic complexity of the method is 10
Complex Method,GeoJSON.Net.CoordinateReferenceSystem,CRSBase,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\CoordinateReferenceSystem\CRSBase.cs,Equals,Cyclomatic complexity of the method is 8
Long Statement,GeoJSON.Net.Geometry,Position,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\Position.cs,ToString,The length of the statement  "                : string.Format(CultureInfo.InvariantCulture' "Latitude: {0}' Longitude: {1}' Altitude: {2}"' Latitude' Longitude' Altitude); " is 125.
Magic Number,GeoJSON.Net.CoordinateReferenceSystem,CRSBase,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\CoordinateReferenceSystem\CRSBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ toString.GetHashCode();
Magic Number,GeoJSON.Net,DoubleTenDecimalPlaceComparer,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\DoubleTenDecimalPlaceComparer.cs,Equals,The following statement contains a magic number: return Math.Abs(x - y) < 0.0000000001;
Magic Number,GeoJSON.Net.Feature,Feature<TGeometry;TProps>,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Feature\Feature.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Id != null ? Id.GetHashCode() : 0);
Magic Number,GeoJSON.Net.Feature,Feature<TGeometry;TProps>,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Feature\Feature.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ EqualityComparer<TGeometry>.Default.GetHashCode(Geometry);
Magic Number,GeoJSON.Net.Feature,Feature<TGeometry;TProps>,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Feature\Feature.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ EqualityComparer<TProps>.Default.GetHashCode(Properties);
Magic Number,GeoJSON.Net.Feature,FeatureCollection,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Feature\FeatureCollection.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ feature.GetHashCode();
Magic Number,GeoJSON.Net.Geometry,GeometryCollection,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\GeometryCollection.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ item.GetHashCode();
Magic Number,GeoJSON.Net.Geometry,LineString,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\LineString.cs,LineString,The following statement contains a magic number: Coordinates.Count < 2
Magic Number,GeoJSON.Net.Geometry,LineString,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\LineString.cs,IsLinearRing,The following statement contains a magic number: return Coordinates.Count >= 4 && IsClosed();
Magic Number,GeoJSON.Net.Geometry,LineString,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\LineString.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ item.GetHashCode();
Magic Number,GeoJSON.Net.Geometry,MultiLineString,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\MultiLineString.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ item.GetHashCode();
Magic Number,GeoJSON.Net.Geometry,MultiPoint,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\MultiPoint.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ item.GetHashCode();
Magic Number,GeoJSON.Net.Geometry,MultiPolygon,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\MultiPolygon.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ item.GetHashCode();
Magic Number,GeoJSON.Net.Geometry,Point,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\Point.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ Coordinates.GetHashCode();
Magic Number,GeoJSON.Net.Geometry,Polygon,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\Polygon.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ item.GetHashCode();
Magic Number,GeoJSON.Net.Geometry,Position,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\Position.cs,GetHashCode,The following statement contains a magic number: var hash = 397 ^ Latitude.GetHashCode();
Magic Number,GeoJSON.Net.Geometry,Position,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\Position.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ Longitude.GetHashCode();
Magic Number,GeoJSON.Net.Geometry,Position,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Geometry\Position.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ Altitude.GetValueOrDefault().GetHashCode();
Missing Default,GeoJSON.Net.Converters,GeoJsonConverter,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Converters\GeoJsonConverter.cs,ReadJson,The following switch statement is missing a default case: switch (reader.TokenType)  			{  				case JsonToken.Null:  					return null;  				case JsonToken.StartObject:  					var value = JObject.Load(reader);  					return ReadGeoJson(value);  				case JsonToken.StartArray:  					var values = JArray.Load(reader);  					var geometries = new List<IGeoJSONObject>(values.Count);  					geometries.AddRange(values.Cast<JObject>().Select(ReadGeoJson));  					return geometries;  			}
Missing Default,GeoJSON.Net.Converters,GeometryConverter,D:\research\architectureSmells\repos\GeoJSON-Net_GeoJSON.Net\src\GeoJSON.Net\Converters\GeometryConverter.cs,ReadJson,The following switch statement is missing a default case: switch (reader.TokenType)              {                  case JsonToken.Null:                      return null;                  case JsonToken.StartObject:                      var value = JObject.Load(reader);                      return ReadGeoJson(value);                  case JsonToken.StartArray:                      var values = JArray.Load(reader);                      var geometries = new ReadOnlyCollection<IGeometryObject>(                          values.Cast<JObject>().Select(ReadGeoJson).ToArray());                      return geometries;              }
