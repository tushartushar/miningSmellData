Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ICSharpCode.AvalonEdit.Sample,Window1,C:\repos\icsharpcode_AvalonEdit\ICSharpCode.AvalonEdit.Sample\Window1.xaml.cs,openFileClick,The length of the statement  "				textEditor.SyntaxHighlighting = HighlightingManager.Instance.GetDefinitionByExtension(Path.GetExtension(currentFileName)); " is 122.
Long Statement,ICSharpCode.AvalonEdit.Sample,Window1,C:\repos\icsharpcode_AvalonEdit\ICSharpCode.AvalonEdit.Sample\Window1.xaml.cs,HighlightingComboBox_SelectionChanged,The length of the statement  "						textEditor.TextArea.IndentationStrategy = new ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy(textEditor.Options); " is 134.
Magic Number,ICSharpCode.AvalonEdit.Sample,Window1,C:\repos\icsharpcode_AvalonEdit\ICSharpCode.AvalonEdit.Sample\Window1.xaml.cs,Window1,The following statement contains a magic number: propertyGridComboBox.SelectedIndex = 2;
Magic Number,ICSharpCode.AvalonEdit.Sample,Window1,C:\repos\icsharpcode_AvalonEdit\ICSharpCode.AvalonEdit.Sample\Window1.xaml.cs,Window1,The following statement contains a magic number: foldingUpdateTimer.Interval = TimeSpan.FromSeconds(2);
Magic Number,ICSharpCode.AvalonEdit.Sample,Window1,C:\repos\icsharpcode_AvalonEdit\ICSharpCode.AvalonEdit.Sample\Window1.xaml.cs,propertyGridComboBoxSelectionChanged,The following statement contains a magic number: switch (propertyGridComboBox.SelectedIndex) {  				case 0:  					propertyGrid.SelectedObject = textEditor;  					break;  				case 1:  					propertyGrid.SelectedObject = textEditor.TextArea;  					break;  				case 2:  					propertyGrid.SelectedObject = textEditor.Options;  					break;  			}
Missing Default,ICSharpCode.AvalonEdit.Sample,Window1,C:\repos\icsharpcode_AvalonEdit\ICSharpCode.AvalonEdit.Sample\Window1.xaml.cs,propertyGridComboBoxSelectionChanged,The following switch statement is missing a default case: switch (propertyGridComboBox.SelectedIndex) {  				case 0:  					propertyGrid.SelectedObject = textEditor;  					break;  				case 1:  					propertyGrid.SelectedObject = textEditor.TextArea;  					break;  				case 2:  					propertyGrid.SelectedObject = textEditor.Options;  					break;  			}
