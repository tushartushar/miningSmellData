Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryGetDataFromDateTime,The method has 112 lines of code.
Long Method,Dev2.Common.ExtMethods,TypeExtensions,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ExtMethods\TypeExtensions.cs,GetTypeFromSimpleName,The method has 107 lines of code.
Long Method,Dev2.Common.TimeZoneBuilder,DateTimeFormatPartsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPartsForDotNet.cs,Build,The method has 126 lines of code.
Long Method,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The method has 173 lines of code.
Long Method,Dev2.Common.Utils,JSONUtils,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Utils\JSONUtils.cs,Format,The method has 103 lines of code.
Complex Method,Dev2.Common,DependencyGraphGenerator,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DependencyGraphGenerator.cs,BuildGraph,Cyclomatic complexity of the method is 13
Complex Method,Dev2.Common,Mapper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Mapper.cs,Map,Cyclomatic complexity of the method is 11
Complex Method,Dev2.Common.DateAndTime,DateTimeFormatter,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeFormatter.cs,TryFormat,Cyclomatic complexity of the method is 10
Complex Method,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryParse,Cyclomatic complexity of the method is 11
Complex Method,Dev2.Common.Common,DirectoryHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Common\DirectoryHelper.cs,CheckIfDeleteIsValid,Cyclomatic complexity of the method is 13
Complex Method,Dev2.Common.Common,ExtensionMethods,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Common\ExtensionMethods.cs,IndexOf,Cyclomatic complexity of the method is 11
Complex Method,Dev2.Common.DateAndTime.TO,DateTimeResultTO,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\TO\DateTimeResultTO.cs,ToDateTime,Cyclomatic complexity of the method is 11
Complex Method,Dev2.Common.ExtMethods,TypeExtensions,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ExtMethods\TypeExtensions.cs,GetTypeFromSimpleName,Cyclomatic complexity of the method is 8
Complex Method,Dev2.Common.TimeZoneBuilder,TimeZoneBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeZoneBuilder.cs,Build,Cyclomatic complexity of the method is 11
Long Parameter List,Dev2.Common.Wrappers,DropboxClientWrapper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Wrappers\DropboxClientWrapper.cs,UploadAsync,The method has 6 parameters. Parameters: path' mode' autorename' clientModified' mute' body
Long Parameter List,Dev2.Common,DependencyGraphGenerator,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DependencyGraphGenerator.cs,BuildGraph,The method has 5 parameters. Parameters: xmlData' modelName' width' height' nestingLevel
Long Parameter List,Dev2.Common,DependencyGraphGenerator,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DependencyGraphGenerator.cs,CreateNode,The method has 5 parameters. Parameters: nodeElm' resourceName' width' height' count
Long Parameter List,Dev2.Common.DateAndTime,DateTimeConverterFactory,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeConverterFactory.cs,CreateDateTimeTO,The method has 6 parameters. Parameters: dateTime' inputFormat' outputFormat' timeModifierType' timeModifierAmount' result
Long Parameter List,Dev2.Common.DateAndTime,DateTimeLiteralProcessor,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeLiteralProcessor.cs,ProcessInsideEscapedLiteral,The method has 5 parameters. Parameters: error' currentChar' literalRegionState' currentValue' nothingDied
Long Parameter List,Dev2.Common.DateAndTime,DateTimeLiteralProcessor,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeLiteralProcessor.cs,ProcessInsideLiteral,The method has 8 parameters. Parameters: formatParts' error' currentChar' formatArray' count' forwardLookupLength' currentValue' literalRegionState
Long Parameter List,Dev2.Common.DateAndTime,DateTimeLiteralProcessor,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeLiteralProcessor.cs,ProcessInsideInferredEscapedLiteral,The method has 5 parameters. Parameters: error' currentChar' literalRegionState' currentValue' nothingDied
Long Parameter List,Dev2.Common.DateAndTime,DateTimeLiteralProcessor,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeLiteralProcessor.cs,ProcessInsideInferredLiteral,The method has 10 parameters. Parameters: dateTimeFormatForwardLookups' dateTimeFormatPartOptions' formatParts' error' currentChar' formatArray' count' forwardLookupLength' currentValue' literalRegionState
Long Parameter List,Dev2.Common.DateAndTime,DateTimeLiteralProcessor,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeLiteralProcessor.cs,ProcessOutsideLiteral,The method has 10 parameters. Parameters: dateTimeFormatForwardLookups' dateTimeFormatPartOptions' formatParts' error' currentChar' formatArray' count' forwardLookupLength' literalRegionState' currentValue
Long Parameter List,Dev2.Common.DateAndTime,DateTimeLiteralProcessor,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeLiteralProcessor.cs,TryGetDateTimeFormatPart,The method has 7 parameters. Parameters: formatArray' startPosition' forwardLookupIndex' dateTimeFormatForwardLookups' dateTimeFormatPartOptions' result' error
Long Parameter List,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryGetDateTimeFormatParts,The method has 5 parameters. Parameters: format' dateTimeFormatForwardLookups' dateTimeFormatPartOptions' formatParts' error
Long Parameter List,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryParse,The method has 5 parameters. Parameters: data' inputFormat' parseAsTime' result' error
Long Parameter List,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryGetDataFromDateTime,The method has 7 parameters. Parameters: dateTimeArray' startPosition' part' result' passAsTime' resultLength' error
Long Parameter List,Dev2.Common.DependencyVisualization,DependencyVisualizationNode,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DependencyVisualization\DependencyVisualizationNode.cs,DependencyVisualizationNode,The method has 5 parameters. Parameters: id' locationX' locationY' isTarget' isBroken
Long Parameter List,Dev2.Common.DateAndTime.TO,DateTimeFormatPartOptionTO,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\TO\DateTimeFormatPartOptionTO.cs,DateTimeFormatPartOptionTO,The method has 6 parameters. Parameters: length' predicate' isNumeric' actualValue' assignAction' resultLength
Long Parameter List,Dev2.Common.DateAndTime.TO,DateTimeOperationTO,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\TO\DateTimeOperationTO.cs,DateTimeOperationTO,The method has 6 parameters. Parameters: dateTime' inputFormat' outputFormat' timeModifierType' timeModifierAmount' result
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter ExecutionLoggingResultStartTag is 30.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter ViewInBrowserForceDownloadSize is 30.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter Dev2RuntimeConfigurationAssemblyName is 36.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter Dev2MessageBoxDesignSurfaceTabPasteDialog is 41.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter Dev2MessageBoxNoInputsWhenHyperlinkClickedDialog is 48.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter NetworkCommunicationErrorTextFormat is 35.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter AggregateCalculateTextConvertPrefix is 35.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter AggregateCalculateTextConvertSuffix is 35.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter AggregateCalculateTextConvertFormat is 35.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter InjectedDecisionDataListVariable is 32.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter DefaultDataListInitalizationString is 34.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter SwitchExpressionTextPropertyText is 32.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter UpgradedExplorerItemModelFormat is 31.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter Dev2DotNetDefaultDateTimeFormat is 31.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter Dev2CustomDefaultDateTimeFormat is 31.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter PreviousDev2DotNetDefaultDateTimeFormat is 39.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter PreviousGlobalDefaultNowFormat is 30.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter SerializableResourceSingleQuote is 31.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter GreaterThenOrEqualToUnicodeChar is 31.
Long Identifier,Dev2.Common,GlobalConstants,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\GlobalConstants.cs,,The length of the parameter DropboxPathMalformdedException is 30.
Long Identifier,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,,The length of the parameter _dateTimeFormatPartOptionsForDotNet is 35.
Long Identifier,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,,The length of the parameter _dateTimeFormatForwardLookupsForDotNet is 38.
Long Statement,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,Equals,The length of the statement  "            return string.Equals(Name' other.Name) && string.Equals(Description' other.Description) && string.Equals(Image' other.Image) && string.Equals(Url' other.Url) && Created.Equals(other.Created) && Modified.Equals(other.Modified) && string.Equals(SpecificationVersion' other.SpecificationVersion); " is 293.
Long Statement,Dev2.Common,Dev2Tokenizer,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Dev2Tokenizer.cs,NextToken,The length of the statement  "            result = _useEnumerator ? _ops[_opPointer].ExecuteOperation(_charEnumerator' _startIdx' _masterLen' _isReversed) : _ops[_opPointer].ExecuteOperation(_tokenParts' _startIdx' _isReversed); " is 186.
Long Statement,Dev2.Common,WebServiceHeaderBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\WebServiceHeaderBuilder.cs,SetupHeader,The length of the statement  "                bool ExistingHeaders(INameValue value) => value.Name.Equals(jsonHeader.Name' StringComparison.InvariantCultureIgnoreCase) && " is 124.
Long Statement,Dev2.Common,WebServiceHeaderBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\WebServiceHeaderBuilder.cs,SetupHeader,The length of the statement  "                var emptyHeader = region.Headers.FirstOrDefault(value => string.IsNullOrEmpty(value.Name) && string.IsNullOrEmpty(value.Value)); " is 128.
Long Statement,Dev2.Common,Mapper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Mapper.cs,Map,The length of the statement  "            var mapToFields = tTo.GetFields(BindingFlags.Instance | BindingFlags.NonPublic).Where(info => !info.Name.Contains("k__BackingField")); " is 134.
Long Statement,Dev2.Common,Mapper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Mapper.cs,Map,The length of the statement  "            var mapFromFields = tFrom.GetFields(BindingFlags.Instance | BindingFlags.NonPublic).Where(info => !info.Name.Contains("k__BackingField")); " is 138.
Long Statement,Dev2.Common.DateAndTime,StandardDateTimeComparer,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\StandardDateTimeComparer.cs,TryCompare,The length of the statement  "            var parsedCorreclty = DateTime.TryParseExact(dateTimeDiffTo.Input1' dateTimeDiffTo.InputFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out var parsedDate); " is 167.
Long Statement,Dev2.Common.DateAndTime,StandardDateTimeComparer,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\StandardDateTimeComparer.cs,TryCompare,The length of the statement  "                parsedCorreclty = DateTime.TryParseExact(dateTimeDiffTo.Input2' dateTimeDiffTo.InputFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out var parsedDate1); " is 164.
Long Statement,Dev2.Common.DateAndTime,StandardDateTimeComparer,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\StandardDateTimeComparer.cs,TryCompare,The length of the statement  "                    parsedCorreclty = OutputFormats.TryGetValue(dateTimeDiffTo.OutputType' out Func<DateTime' DateTime' double> returnedFunc); " is 122.
Long Statement,Dev2.Common.DateAndTime,StandardDateTimeFormatter,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\StandardDateTimeFormatter.cs,TryFormat,The length of the statement  "                dateTimeTO.DateTime = DateTime.Now.ToString(GlobalConstants.Dev2DotNetDefaultDateTimeFormat' CultureInfo.InvariantCulture); " is 123.
Long Statement,Dev2.Common.DateAndTime,StandardDateTimeFormatter,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\StandardDateTimeFormatter.cs,TryFormat,The length of the statement  "            var internallyParsedValue = DateTime.TryParseExact(dateTimeTO.DateTime?.Trim()' dateTimeTO.InputFormat' CultureInfo.InvariantCulture' DateTimeStyles.AllowWhiteSpaces' out var dateResult); " is 187.
Long Statement,Dev2.Common.DateAndTime,DateTimeComparer,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeComparer.cs,TryCompare,The length of the statement  "            var noErrorOccured = dateTimeParser.TryParseDateTime(dateTimeDiffTo.Input1' dateTimeDiffTo.InputFormat' out IDateTimeResultTO tmpRes' out error); " is 145.
Long Statement,Dev2.Common.DateAndTime,DateTimeComparer,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeComparer.cs,TryCompare,The length of the statement  "                noErrorOccured = dateTimeParser.TryParseDateTime(dateTimeDiffTo.Input2' dateTimeDiffTo.InputFormat' out tmpRes' out error); " is 123.
Long Statement,Dev2.Common.DateAndTime,DateTimeComparer,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeComparer.cs,TryCompare,The length of the statement  "                noErrorOccured = OutputFormats.TryGetValue(dateTimeDiffTo.OutputType' out Func<DateTime' DateTime' double> returnedFunc); " is 121.
Long Statement,Dev2.Common.DateAndTime,DateTimeFormatter,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeFormatter.cs,TryFormat,The length of the statement  "            if (dateTimeParser.TryParseDateTime(dateTimeTO.DateTime?.Trim()' dateTimeTO.InputFormat' out IDateTimeResultTO dateTimeResultTO' out error)) " is 140.
Long Statement,Dev2.Common.DateAndTime,DateTimeFormatter,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeFormatter.cs,TryFormat,The length of the statement  "                    if (TimeModifiers.TryGetValue(dateTimeTO.TimeModifierType' out Func<DateTime' int' DateTime> funcToExecute) && funcToExecute != null) " is 133.
Long Statement,Dev2.Common.DateAndTime,DateTimeFormatter,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeFormatter.cs,TryFormat,The length of the statement  "                    nothingDied = dateTimeParser.TryGetDateTimeFormatParts(outputFormat' out List<IDateTimeFormatPartTO> formatParts' out error); " is 125.
Long Statement,Dev2.Common.DateAndTime,DateTimeLiteralProcessor,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeLiteralProcessor.cs,ProcessOutsideLiteral,The length of the statement  "            if(currentChar == DateTimeParser.DateLiteralCharacter && CheckForDoubleEscapedLiteralCharacter(formatArray' count' out tmpForwardLookupResult' out error)) " is 154.
Long Statement,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryGetDateTimeFormatParts,The length of the statement  "                    forwardLookupLength = DateTimeLiteralProcessor.ProcessOutsideLiteral(dateTimeFormatForwardLookups' dateTimeFormatPartOptions' formatParts' ref error' currentChar' formatArray' count' forwardLookupLength' ref literalRegionState' ref currentValue); " is 246.
Long Statement,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryGetDateTimeFormatParts,The length of the statement  "                    forwardLookupLength = DateTimeLiteralProcessor.ProcessInsideInferredLiteral(dateTimeFormatForwardLookups' dateTimeFormatPartOptions' formatParts' ref error' currentChar' formatArray' count' forwardLookupLength' ref currentValue' ref literalRegionState); " is 253.
Long Statement,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryGetDateTimeFormatParts,The length of the statement  "                    literalRegionState = DateTimeLiteralProcessor.ProcessInsideInferredEscapedLiteral(ref error' currentChar' literalRegionState' ref currentValue' ref nothingDied); " is 161.
Long Statement,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryGetDateTimeFormatParts,The length of the statement  "                    forwardLookupLength = DateTimeLiteralProcessor.ProcessInsideLiteral(formatParts' ref error' currentChar' formatArray' count' forwardLookupLength' ref currentValue' ref literalRegionState); " is 188.
Long Statement,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryGetDateTimeFormatParts,The length of the statement  "                    literalRegionState = DateTimeLiteralProcessor.ProcessInsideEscapedLiteral(ref error' currentChar' literalRegionState' ref currentValue' ref nothingDied); " is 153.
Long Statement,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryParse,The length of the statement  "                nothingDied = TryGetDateTimeFormatParts(originalInputFormat' _dateTimeFormatForwardLookups' _dateTimeFormatPartOptions' out List<IDateTimeFormatPartTO> formatParts' out error); " is 176.
Long Statement,Dev2.Common.Common,ExtensionMethods,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Common\ExtensionMethods.cs,IsValidJson,The length of the statement  "            if (trimmedInput.StartsWith("{") && trimmedInput.EndsWith("}") || trimmedInput.StartsWith("[") && trimmedInput.EndsWith("]")) " is 125.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddYearParts,The length of the statement  "                new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)' " is 120.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddEraParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower(CultureInfo.InvariantCulture).Equals("a.d.")' false' "A.D."' _assignManager.AssignEra)' " is 156.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)' " is 188.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)' " is 188.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)' " is 188.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)' " is 191.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)' " is 191.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)' " is 188.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)' " is 189.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)' " is 177.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)' " is 177.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)' " is 178.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)' " is 180.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)' " is 179.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)' " is 177.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)' " is 179.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' " is 129.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' " is 129.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' " is 130.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' " is 130.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' " is 128.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' " is 129.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' " is 129.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' " is 128.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' " is 124.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' " is 129.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' " is 124.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' " is 124.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)' " is 182.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)' " is 182.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)' " is 180.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)' " is 180.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)' " is 178.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)' " is 179.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)' " is 179.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)' " is 181.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)' " is 184.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)' " is 183.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)' " is 185.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)' " is 185.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddOffsetParts,The length of the statement  "            DateTimeFormatsParts.Add("K"' new DateTimeFormatPartTO("K"' false' "Time zone in short format: GMT (if available on the system)")); " is 131.
Long Statement,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddOffsetParts,The length of the statement  "             new DateTimeFormatPartOptionTO(6' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone) " is 124.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' " is 129.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' " is 129.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' " is 130.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' " is 130.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' " is 128.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' " is 129.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' " is 129.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' " is 128.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' " is 124.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' " is 129.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' " is 124.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                        CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' " is 124.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)' " is 182.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)' " is 182.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)' " is 180.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)' " is 180.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)' " is 178.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)' " is 179.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)' " is 179.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)' " is 181.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)' " is 184.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)' " is 183.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)' " is 185.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)' " is 185.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)' " is 181.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)' " is 181.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)' " is 182.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)' " is 184.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)' " is 183.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)' " is 181.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)' " is 183.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                        CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' " is 127.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                        CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' " is 127.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                        CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' " is 128.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                        CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' " is 127.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                        CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' " is 126.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                        CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' " is 127.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The length of the statement  "                        CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' " is 126.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddSecondParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager. AssignMilliseconds)' " is 125.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddSecondParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager. AssignMilliseconds)' " is 125.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddSecondParts,The length of the statement  "                    new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager. AssignMilliseconds)' " is 125.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddOffsetParts,The length of the statement  "                IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone); " is 193.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddOffsetParts,The length of the statement  "                IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone); " is 193.
Long Statement,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddOffsetParts,The length of the statement  "                IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone); " is 193.
Long Statement,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The length of the statement  "                        new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)' " is 124.
Long Statement,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The length of the statement  "                        new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)' " is 124.
Long Statement,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The length of the statement  "                        new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)' " is 124.
Long Statement,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The length of the statement  "                        IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone); " is 193.
Long Statement,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The length of the statement  "                        IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone); " is 193.
Long Statement,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The length of the statement  "                        IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone); " is 193.
Complex Conditional,Dev2.Common,DebugStateTreeBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DebugStateTreeBuilder.cs,AddChildren,The conditional expression  "source.ContainsKey(node.ID)                  && (!node.IsAdded || (node.ActualType?.Contains("DsfForEachActivity") ?? false))                  && node.StateType != StateType.Duration"  is complex.
Complex Conditional,Dev2.Common,Dev2TokenOp,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\StringTokenizer\TokenOps\Dev2TokenOp.cs,IsMultiTokenMatch,The conditional expression  "cnt < _tokenParts.Length && cnt >= 0 && canidateIdx >= 0 && canidateIdx < canidate.Length && result"  is complex.
Complex Conditional,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryGetDataFromDateTime,The conditional expression  "(forwardLookupResult.Length == partOption.Length ||                               forwardLookupResult.Length == partOption.ResultLength) &&                              (partOption.Predicate == null || predicateRun)"  is complex.
Complex Conditional,Dev2.Common.Common,ExtensionMethods,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Common\ExtensionMethods.cs,IsValidJson,The conditional expression  "trimmedInput.StartsWith("{") && trimmedInput.EndsWith("}") || trimmedInput.StartsWith("[") && trimmedInput.EndsWith("]")"  is complex.
Empty Catch Block,Dev2.Common.ExtMethods,StringExtension,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ExtMethods\StringExtension.cs,IsBase64,The method has an empty catch block.
Magic Number,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Name?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Description?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Image?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Url?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Tags?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Created.GetHashCode();                  hashCode = (hashCode * 397) ^ Modified.GetHashCode();                  hashCode = (hashCode * 397) ^ (SpecificationVersion?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Apis?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Include?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Maintainers?.GetHashCode() ?? 0);                  return hashCode;              }
Magic Number,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Name?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Description?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Image?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Url?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Tags?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Created.GetHashCode();                  hashCode = (hashCode * 397) ^ Modified.GetHashCode();                  hashCode = (hashCode * 397) ^ (SpecificationVersion?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Apis?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Include?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Maintainers?.GetHashCode() ?? 0);                  return hashCode;              }
Magic Number,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Name?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Description?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Image?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Url?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Tags?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Created.GetHashCode();                  hashCode = (hashCode * 397) ^ Modified.GetHashCode();                  hashCode = (hashCode * 397) ^ (SpecificationVersion?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Apis?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Include?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Maintainers?.GetHashCode() ?? 0);                  return hashCode;              }
Magic Number,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Name?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Description?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Image?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Url?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Tags?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Created.GetHashCode();                  hashCode = (hashCode * 397) ^ Modified.GetHashCode();                  hashCode = (hashCode * 397) ^ (SpecificationVersion?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Apis?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Include?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Maintainers?.GetHashCode() ?? 0);                  return hashCode;              }
Magic Number,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Name?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Description?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Image?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Url?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Tags?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Created.GetHashCode();                  hashCode = (hashCode * 397) ^ Modified.GetHashCode();                  hashCode = (hashCode * 397) ^ (SpecificationVersion?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Apis?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Include?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Maintainers?.GetHashCode() ?? 0);                  return hashCode;              }
Magic Number,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Name?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Description?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Image?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Url?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Tags?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Created.GetHashCode();                  hashCode = (hashCode * 397) ^ Modified.GetHashCode();                  hashCode = (hashCode * 397) ^ (SpecificationVersion?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Apis?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Include?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Maintainers?.GetHashCode() ?? 0);                  return hashCode;              }
Magic Number,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Name?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Description?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Image?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Url?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Tags?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Created.GetHashCode();                  hashCode = (hashCode * 397) ^ Modified.GetHashCode();                  hashCode = (hashCode * 397) ^ (SpecificationVersion?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Apis?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Include?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Maintainers?.GetHashCode() ?? 0);                  return hashCode;              }
Magic Number,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Name?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Description?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Image?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Url?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Tags?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Created.GetHashCode();                  hashCode = (hashCode * 397) ^ Modified.GetHashCode();                  hashCode = (hashCode * 397) ^ (SpecificationVersion?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Apis?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Include?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Maintainers?.GetHashCode() ?? 0);                  return hashCode;              }
Magic Number,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Name?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Description?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Image?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Url?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Tags?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Created.GetHashCode();                  hashCode = (hashCode * 397) ^ Modified.GetHashCode();                  hashCode = (hashCode * 397) ^ (SpecificationVersion?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Apis?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Include?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Maintainers?.GetHashCode() ?? 0);                  return hashCode;              }
Magic Number,Dev2.Common,ApisJson,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ApisJson.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = Name?.GetHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Description?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Image?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Url?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Tags?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ Created.GetHashCode();                  hashCode = (hashCode * 397) ^ Modified.GetHashCode();                  hashCode = (hashCode * 397) ^ (SpecificationVersion?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Apis?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Include?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Maintainers?.GetHashCode() ?? 0);                  return hashCode;              }
Magic Number,Dev2.Common,DependencyGraphGenerator,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DependencyGraphGenerator.cs,BuildGraph,The following statement contains a magic number: try              {                  var title = graphElem.Attribute("title").Value;                  var graph = new Graph(title);                  double count = 0;                    var nodeElems = graphElem.Elements("node").ToList();                    // Create all of the nodes and add them to the graph.                  foreach (var nodeElem in nodeElems)                  {                      // build the graph position data                      var id = nodeElem.Attribute("id").Value;                      var node = CreateNode(nodeElem' modelName' width' height' ref count);                        var alreadyAdded = false;                      foreach (var n in graph.Nodes)                      {                          if (n.ID == id)                          {                              alreadyAdded = true;                          }                      }                        if (!alreadyAdded)                      {                          graph.Nodes.Add(node);                      }                  }                    // Associate each node with its dependencies.                  var graphCount = graph.Nodes.Count - 1;                  if (nestingLevel > 0)                  {                      for (var i = 0; i <= nestingLevel; i++)                      {                          if (nestingLevel < graphCount)                          {                              graph.Nodes.RemoveAt(graphCount);                              graphCount = graph.Nodes.Count - 1;                          }                      }                  }                  foreach (var node in graph.Nodes)                  {                      var nodeElem = nodeElems.First(elem => elem.Attribute("id").Value == node.ID);                      var dependencyElems = nodeElem.Elements("dependency");                      foreach (var dependencyElem in dependencyElems)                      {                          var depID = dependencyElem.Attribute("id").Value;                            var dependency = graph.Nodes.FirstOrDefault(n => n.ID == depID);                          if (dependency != null)                          {                              node.NodeDependencies.Add(dependency);                          }                      }                        //Now adjust position according to nodesize                      node.LocationX = node.LocationX - node.NodeWidth;                      node.LocationY = node.LocationY - node.NodeHeight / 2;                  }                    // Tell the graph to inspect itself for circular dependencies.                  graph.CheckForCircularDependencies();                    return graph;              }              catch              {                  return new Graph(ErrorResource.DependencyInormationMalformed);              }
Magic Number,Dev2.Common,DependencyGraphGenerator,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DependencyGraphGenerator.cs,CreateNode,The following statement contains a magic number: var screenHeight = height - 150;
Magic Number,Dev2.Common,DependencyGraphGenerator,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DependencyGraphGenerator.cs,CreateNode,The following statement contains a magic number: var centerX = Convert.ToInt32(screenWidth / 2);
Magic Number,Dev2.Common,DependencyGraphGenerator,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DependencyGraphGenerator.cs,CreateNode,The following statement contains a magic number: var centerY = Convert.ToInt32(screenHeight / 2);
Magic Number,Dev2.Common,DependencyGraphGenerator,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DependencyGraphGenerator.cs,CreateNode,The following statement contains a magic number: const int Distance = 300;
Magic Number,Dev2.Common,DependencyGraphGenerator,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DependencyGraphGenerator.cs,CreateNode,The following statement contains a magic number: if (isTarget)              {                  x = centerX;                  y = centerY;              }              else              {                  if (count > Distance)                  {                      count = 1.5;                  }                    var xCoOrd = (int)Math.Round(centerPoint.X - Distance * Math.Sin(count));                  var yCoOrd = (int)Math.Round(centerPoint.Y - Distance * Math.Cos(count));                    if (xCoOrd >= maxX)                  {                      xCoOrd = maxX;                  }                    if (yCoOrd >= maxY)                  {                      yCoOrd = maxY;                  }                    x = xCoOrd;                  y = yCoOrd;                  count++;              }
Magic Number,Dev2.Common,PluginConstructor,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\PluginConstructor.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Inputs?.GetHashCode() ?? 0) * 397) ^ (ConstructorName?.GetHashCode() ?? 0);              }
Magic Number,Dev2.Common.DateAndTime,AssignManager,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\AssignManager.cs,AssignYears,The following statement contains a magic number: if (!assignAsTime && years < 100)              {                  years = CultureInfo.InvariantCulture.Calendar.ToFourDigitYear(years);              }
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextMarch,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[2].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[2].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextMarch,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[2].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[2].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextApril,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[3].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[3].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextApril,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[3].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[3].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextMay,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[4].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[4].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextMay,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[4].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[4].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextJune,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[5].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[5].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextJune,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[5].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[5].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextJuly,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[6].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[6].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextJuly,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[6].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[6].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextAugust,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[7].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[7].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextAugust,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[7].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[7].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextSeptember,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[8].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[8].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextSeptember,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[8].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[8].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextOctober,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[9].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[9].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextOctober,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[9].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[9].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextNovember,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[10].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[10].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextNovember,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[10].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[10].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextDecember,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[11].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[11].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextDecember,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[11].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[11].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextTuesday,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextTuesday,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextWednesday,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextWednesday,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextThursday,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextThursday,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextFriday,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextFriday,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextSaturday,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].ToLower();
Magic Number,Dev2.Common.DateAndTime,CompareTextValueToDateTimePart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\CompareTextValueToDateTimePart.cs,IsTextSaturday,The following statement contains a magic number: return lowerData == CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].ToLower() ||                     lowerData == CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].ToLower();
Magic Number,Dev2.Common.DateAndTime,DateTimeComparer,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeComparer.cs,ReturnMonths,The following statement contains a magic number: result = result + 12 * tmpYears;
Magic Number,Dev2.Common.DateAndTime,DateTimeComparer,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeComparer.cs,ReturnWeeks,The following statement contains a magic number: var result = timeDiff.TotalDays / 7;
Magic Number,Dev2.Common.DateAndTime,DateTimeFormatter,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeFormatter.cs,TryFormat,The following statement contains a magic number: if (dateTimeParser.TryParseDateTime(dateTimeTO.DateTime?.Trim()' dateTimeTO.InputFormat' out IDateTimeResultTO dateTimeResultTO' out error))              {                  var tmpDateTime = dateTimeResultTO.ToDateTime();                  if (!string.IsNullOrWhiteSpace(dateTimeTO.TimeModifierType))                  {                      if (TimeModifiers.TryGetValue(dateTimeTO.TimeModifierType' out Func<DateTime' int' DateTime> funcToExecute) && funcToExecute != null)                      {                          tmpDateTime = funcToExecute(tmpDateTime' dateTimeTO.TimeModifierAmount);                      }                  }                    if (nothingDied)                  {                      var outputFormat = string.IsNullOrWhiteSpace(dateTimeTO.OutputFormat)                          ? dateTimeTO.InputFormat                          : dateTimeTO.OutputFormat;                      if (string.IsNullOrWhiteSpace(outputFormat))                      {                          var shortPattern = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;                          var longPattern = CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;                          var finalPattern = shortPattern + " " + longPattern;                          if (finalPattern.Contains("ss"))                          {                              outputFormat = finalPattern.Insert(finalPattern.IndexOf("ss"' StringComparison.Ordinal) + 2' ".fff");                              outputFormat = dateTimeParser.TranslateDotNetToDev2Format(outputFormat' out error);                          }                      }                        nothingDied = dateTimeParser.TryGetDateTimeFormatParts(outputFormat' out List<IDateTimeFormatPartTO> formatParts' out error);                        if (nothingDied)                      {                          var count = 0;                          while (count < formatParts.Count && nothingDied)                          {                              var formatPart = formatParts[count];                                if (formatPart.Isliteral)                              {                                  result += formatPart.Value;                              }                              else                              {                                  if (DateTimeFormatParts.TryGetValue(formatPart.Value' out Func<IDateTimeResultTO' DateTime' string> func))                                  {                                      result += func(dateTimeResultTO' tmpDateTime);                                  }                                  else                                  {                                      nothingDied = false;                                      error = string.Concat("Unrecognized format part '"' formatPart.Value' "'.");                                  }                              }                                count++;                          }                      }                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeFormatter,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeFormatter.cs,Format_ww,The following statement contains a magic number: return CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(dateTime' CalendarWeekRule.FirstDay' DayOfWeek.Sunday)                      .ToString(CultureInfo.InvariantCulture)                      .PadLeft(2' '0');
Magic Number,Dev2.Common.DateAndTime,DateTimeLiteralProcessor,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeLiteralProcessor.cs,CheckForDoubleEscapedLiteralCharacter,The following statement contains a magic number: result = DateTimeParser.ForwardLookup(formatArray' startPosition' 2);
Magic Number,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,TryParse,The following statement contains a magic number: const int MaxAttempts = 8;
Magic Number,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,MatchInputFormatToCulture,The following statement contains a magic number: switch (culturesTried)              {                  case 0:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.CurrentUICulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 1:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 2:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.ShortDatePattern + " " +                              CultureInfo.InvariantCulture.DateTimeFormat.LongTimePattern' out error);                      break;                    case 3:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 4:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-ZA").DateTimeFormat.LongTimePattern' out error);                      break;                    case 5:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 6:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-US").DateTimeFormat.LongTimePattern' out error);                      break;                    case 7:                      string shortPattern = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;                      string longPattern = CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;                      string finalPattern = shortPattern + " " + longPattern;                      if (finalPattern.Contains("ss"))                      {                          finalPattern =                              finalPattern.Insert(finalPattern.IndexOf("ss"' StringComparison.Ordinal) + 2'                                  ".fff");                      }                      inputFormat = TranslateDotNetToDev2Format(finalPattern' out error);                      break;                  default:                      break;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,MatchInputFormatToCulture,The following statement contains a magic number: switch (culturesTried)              {                  case 0:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.CurrentUICulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 1:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 2:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.ShortDatePattern + " " +                              CultureInfo.InvariantCulture.DateTimeFormat.LongTimePattern' out error);                      break;                    case 3:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 4:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-ZA").DateTimeFormat.LongTimePattern' out error);                      break;                    case 5:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 6:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-US").DateTimeFormat.LongTimePattern' out error);                      break;                    case 7:                      string shortPattern = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;                      string longPattern = CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;                      string finalPattern = shortPattern + " " + longPattern;                      if (finalPattern.Contains("ss"))                      {                          finalPattern =                              finalPattern.Insert(finalPattern.IndexOf("ss"' StringComparison.Ordinal) + 2'                                  ".fff");                      }                      inputFormat = TranslateDotNetToDev2Format(finalPattern' out error);                      break;                  default:                      break;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,MatchInputFormatToCulture,The following statement contains a magic number: switch (culturesTried)              {                  case 0:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.CurrentUICulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 1:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 2:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.ShortDatePattern + " " +                              CultureInfo.InvariantCulture.DateTimeFormat.LongTimePattern' out error);                      break;                    case 3:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 4:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-ZA").DateTimeFormat.LongTimePattern' out error);                      break;                    case 5:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 6:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-US").DateTimeFormat.LongTimePattern' out error);                      break;                    case 7:                      string shortPattern = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;                      string longPattern = CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;                      string finalPattern = shortPattern + " " + longPattern;                      if (finalPattern.Contains("ss"))                      {                          finalPattern =                              finalPattern.Insert(finalPattern.IndexOf("ss"' StringComparison.Ordinal) + 2'                                  ".fff");                      }                      inputFormat = TranslateDotNetToDev2Format(finalPattern' out error);                      break;                  default:                      break;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,MatchInputFormatToCulture,The following statement contains a magic number: switch (culturesTried)              {                  case 0:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.CurrentUICulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 1:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 2:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.ShortDatePattern + " " +                              CultureInfo.InvariantCulture.DateTimeFormat.LongTimePattern' out error);                      break;                    case 3:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 4:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-ZA").DateTimeFormat.LongTimePattern' out error);                      break;                    case 5:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 6:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-US").DateTimeFormat.LongTimePattern' out error);                      break;                    case 7:                      string shortPattern = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;                      string longPattern = CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;                      string finalPattern = shortPattern + " " + longPattern;                      if (finalPattern.Contains("ss"))                      {                          finalPattern =                              finalPattern.Insert(finalPattern.IndexOf("ss"' StringComparison.Ordinal) + 2'                                  ".fff");                      }                      inputFormat = TranslateDotNetToDev2Format(finalPattern' out error);                      break;                  default:                      break;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,MatchInputFormatToCulture,The following statement contains a magic number: switch (culturesTried)              {                  case 0:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.CurrentUICulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 1:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 2:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.ShortDatePattern + " " +                              CultureInfo.InvariantCulture.DateTimeFormat.LongTimePattern' out error);                      break;                    case 3:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 4:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-ZA").DateTimeFormat.LongTimePattern' out error);                      break;                    case 5:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 6:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-US").DateTimeFormat.LongTimePattern' out error);                      break;                    case 7:                      string shortPattern = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;                      string longPattern = CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;                      string finalPattern = shortPattern + " " + longPattern;                      if (finalPattern.Contains("ss"))                      {                          finalPattern =                              finalPattern.Insert(finalPattern.IndexOf("ss"' StringComparison.Ordinal) + 2'                                  ".fff");                      }                      inputFormat = TranslateDotNetToDev2Format(finalPattern' out error);                      break;                  default:                      break;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,MatchInputFormatToCulture,The following statement contains a magic number: switch (culturesTried)              {                  case 0:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.CurrentUICulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 1:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 2:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.ShortDatePattern + " " +                              CultureInfo.InvariantCulture.DateTimeFormat.LongTimePattern' out error);                      break;                    case 3:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 4:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-ZA").DateTimeFormat.LongTimePattern' out error);                      break;                    case 5:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 6:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-US").DateTimeFormat.LongTimePattern' out error);                      break;                    case 7:                      string shortPattern = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;                      string longPattern = CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;                      string finalPattern = shortPattern + " " + longPattern;                      if (finalPattern.Contains("ss"))                      {                          finalPattern =                              finalPattern.Insert(finalPattern.IndexOf("ss"' StringComparison.Ordinal) + 2'                                  ".fff");                      }                      inputFormat = TranslateDotNetToDev2Format(finalPattern' out error);                      break;                  default:                      break;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParser,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DateTimeParser.cs,MatchInputFormatToCulture,The following statement contains a magic number: switch (culturesTried)              {                  case 0:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.CurrentUICulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 1:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 2:                      inputFormat =                          TranslateDotNetToDev2Format(                              CultureInfo.InvariantCulture.DateTimeFormat.ShortDatePattern + " " +                              CultureInfo.InvariantCulture.DateTimeFormat.LongTimePattern' out error);                      break;                    case 3:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 4:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-ZA").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-ZA").DateTimeFormat.LongTimePattern' out error);                      break;                    case 5:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.FullDateTimePattern' out error);                      break;                    case 6:                      inputFormat =                          TranslateDotNetToDev2Format(                              new CultureInfo("en-US").DateTimeFormat.ShortDatePattern + " " +                              new CultureInfo("en-US").DateTimeFormat.LongTimePattern' out error);                      break;                    case 7:                      string shortPattern = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern;                      string longPattern = CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;                      string finalPattern = shortPattern + " " + longPattern;                      if (finalPattern.Contains("ss"))                      {                          finalPattern =                              finalPattern.Insert(finalPattern.IndexOf("ss"' StringComparison.Ordinal) + 2'                                  ".fff");                      }                      inputFormat = TranslateDotNetToDev2Format(finalPattern' out error);                      break;                  default:                      break;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumberWeekOfYear,The following statement contains a magic number: if (int.TryParse(data' NumberStyles.None' null' out numericData))              {                  if (!treatAsTime)                  {                      nothingDied = numericData >= 1 && numericData <= 52;                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumberDayOfYear,The following statement contains a magic number: if (int.TryParse(data' NumberStyles.None' null' out numericData) && numericData >= 1 && numericData <= 365)              {                  //nothing to do since nothignDied is already true              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumberDayOfWeek,The following statement contains a magic number: if (int.TryParse(data' NumberStyles.None' null' out numericData))              {                  if (!treatAsTime)                  {                      nothingDied = numericData >= 1 && numericData <= 7;                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,GetDayOfWeekInt,The following statement contains a magic number: if (dayOfWeek == DayOfWeek.Sunday)              {                  val = 7;              }              else              {                  val = (int)dayOfWeek;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumberDay,The following statement contains a magic number: if (int.TryParse(data' NumberStyles.None' null' out numericData))              {                  if (!treatAsTime)                  {                      nothingDied = numericData >= 1 && numericData <= 31;                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumberMonth,The following statement contains a magic number: if (int.TryParse(data' NumberStyles.None' null' out numericData))              {                  if (!treatAsTime)                  {                      nothingDied = numericData >= 1 && numericData <= 12;                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumber12H,The following statement contains a magic number: if (int.TryParse(data' NumberStyles.None' null' out numericData))              {                  if (!treatAsTime)                  {                      nothingDied = numericData >= 1 && numericData <= 12;                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumber24H,The following statement contains a magic number: if (data.Length == 2 && int.TryParse(data' out numericData))              {                  if (!treatAsTime)                  {                      nothingDied = numericData >= 0 && numericData <= 24;                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumber24H,The following statement contains a magic number: if (data.Length == 2 && int.TryParse(data' out numericData))              {                  if (!treatAsTime)                  {                      nothingDied = numericData >= 0 && numericData <= 24;                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumberMinutes,The following statement contains a magic number: if (int.TryParse(data' NumberStyles.None' null' out numericData))              {                  if (!treatAsTime)                  {                      nothingDied = numericData >= 0 && numericData <= 59;                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumberMilliseconds,The following statement contains a magic number: if (int.TryParse(data' NumberStyles.None' null' out numericData))              {                  if (!treatAsTime)                  {                      nothingDied = numericData >= 0 && numericData <= 999;                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.DateAndTime,DateTimeParserHelper,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\DatetimeParserHelper.cs,IsNumberSeconds,The following statement contains a magic number: if (int.TryParse(data' NumberStyles.None' null' out numericData))              {                  if (!treatAsTime)                  {                      nothingDied = numericData >= 0 && numericData <= 59;                  }              }              else              {                  nothingDied = false;              }
Magic Number,Dev2.Common.Common,ExtensionMethods,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Common\ExtensionMethods.cs,CleanEncodingHeaderForXmlSave,The following statement contains a magic number: if (removeStartIdx >= 0)              {                  int removeEndIdx = sb.IndexOf("?>"' 0' false);                  int len = removeEndIdx - removeStartIdx + 2;                  var result = sb.Remove(removeStartIdx' len);                    return result;              }
Magic Number,Dev2.Common.Common,ExtensionMethods,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Common\ExtensionMethods.cs,WriteToFile,The following statement contains a magic number: using (                  var fs = new FileStream(fileName' FileMode.Truncate' FileAccess.Write' FileShare.ReadWrite' 4096' true))              {                  for (int i = 0; i < rounds; i++)                  {                      var len = (int)GlobalConstants.MAX_SIZE_FOR_STRING;                      if (len > cleanStringBuilder.Length - startIdx)                      {                          len = cleanStringBuilder.Length - startIdx;                      }                        var bytes = encoding.GetBytes(cleanStringBuilder.Substring(startIdx' len));                      fs.Write(bytes' 0' bytes.Length);                      startIdx += len;                  }              }
Magic Number,Dev2.Common.Common,ExtensionMethods,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Common\ExtensionMethods.cs,GetByteArray,The following statement contains a magic number: var buffer = new byte[16 * 1024];
Magic Number,Dev2.Common.Common,ExtensionMethods,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Common\ExtensionMethods.cs,GetByteArray,The following statement contains a magic number: var buffer = new byte[16 * 1024];
Magic Number,Dev2.Common.Common,GetComputerNames,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Common\GetComputerNames.cs,StandardComputerNameQuery,The following statement contains a magic number: if (wi != null)              {                  var serverUserName = wi.Name;                    var parts = serverUserName.Split('\\');                    var queryStr = "WinNT://";                    if (parts.Length == 2)                  {                      queryStr += parts[0];                  }                  else                  {                      var query = new SelectQuery("Win32_ComputerSystem");                      var searcher = new ManagementObjectSearcher(query);                      var itr = searcher.Get().GetEnumerator();                      if (itr.MoveNext())                      {                          queryStr += itr.Current["Workgroup"] as string;                      }                  }                    var root = new DirectoryEntry(queryStr);                    var kids = root.Children;                    return (from DirectoryEntry node in kids where node.SchemaClassName == "Computer" select node.Name).ToList();              }
Magic Number,Dev2.Common.DateAndTime.TO,DateTimeResultTO,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\TO\DateTimeResultTO.cs,NormalizeTime,The following statement contains a magic number: if (Is24H && Hours >= 12)              {                  AmPm = DateTimeAmPm.pm;              }              else if (Hours > 12)              {                  Is24H = true;                  AmPm = DateTimeAmPm.pm;              }              else if (AmPm == DateTimeAmPm.pm)              {                  Is24H = true;                  if (Hours != 12)                  {                      Hours += 12;                  }              }              else              {                  if (AmPm == DateTimeAmPm.am)                  {                      Is24H = true;                      if (Hours >= 12)                      {                          Hours -= 12;                      }                  }              }
Magic Number,Dev2.Common.DateAndTime.TO,DateTimeResultTO,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\TO\DateTimeResultTO.cs,NormalizeTime,The following statement contains a magic number: if (Is24H && Hours >= 12)              {                  AmPm = DateTimeAmPm.pm;              }              else if (Hours > 12)              {                  Is24H = true;                  AmPm = DateTimeAmPm.pm;              }              else if (AmPm == DateTimeAmPm.pm)              {                  Is24H = true;                  if (Hours != 12)                  {                      Hours += 12;                  }              }              else              {                  if (AmPm == DateTimeAmPm.am)                  {                      Is24H = true;                      if (Hours >= 12)                      {                          Hours -= 12;                      }                  }              }
Magic Number,Dev2.Common.DateAndTime.TO,DateTimeResultTO,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\TO\DateTimeResultTO.cs,NormalizeTime,The following statement contains a magic number: if (Is24H && Hours >= 12)              {                  AmPm = DateTimeAmPm.pm;              }              else if (Hours > 12)              {                  Is24H = true;                  AmPm = DateTimeAmPm.pm;              }              else if (AmPm == DateTimeAmPm.pm)              {                  Is24H = true;                  if (Hours != 12)                  {                      Hours += 12;                  }              }              else              {                  if (AmPm == DateTimeAmPm.am)                  {                      Is24H = true;                      if (Hours >= 12)                      {                          Hours -= 12;                      }                  }              }
Magic Number,Dev2.Common.DateAndTime.TO,DateTimeResultTO,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\TO\DateTimeResultTO.cs,NormalizeTime,The following statement contains a magic number: if (Is24H && Hours >= 12)              {                  AmPm = DateTimeAmPm.pm;              }              else if (Hours > 12)              {                  Is24H = true;                  AmPm = DateTimeAmPm.pm;              }              else if (AmPm == DateTimeAmPm.pm)              {                  Is24H = true;                  if (Hours != 12)                  {                      Hours += 12;                  }              }              else              {                  if (AmPm == DateTimeAmPm.am)                  {                      Is24H = true;                      if (Hours >= 12)                      {                          Hours -= 12;                      }                  }              }
Magic Number,Dev2.Common.DateAndTime.TO,DateTimeResultTO,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\TO\DateTimeResultTO.cs,NormalizeTime,The following statement contains a magic number: if (Is24H && Hours >= 12)              {                  AmPm = DateTimeAmPm.pm;              }              else if (Hours > 12)              {                  Is24H = true;                  AmPm = DateTimeAmPm.pm;              }              else if (AmPm == DateTimeAmPm.pm)              {                  Is24H = true;                  if (Hours != 12)                  {                      Hours += 12;                  }              }              else              {                  if (AmPm == DateTimeAmPm.am)                  {                      Is24H = true;                      if (Hours >= 12)                      {                          Hours -= 12;                      }                  }              }
Magic Number,Dev2.Common.DateAndTime.TO,DateTimeResultTO,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\DateAndTime\TO\DateTimeResultTO.cs,NormalizeTime,The following statement contains a magic number: if (Is24H && Hours >= 12)              {                  AmPm = DateTimeAmPm.pm;              }              else if (Hours > 12)              {                  Is24H = true;                  AmPm = DateTimeAmPm.pm;              }              else if (AmPm == DateTimeAmPm.pm)              {                  Is24H = true;                  if (Hours != 12)                  {                      Hours += 12;                  }              }              else              {                  if (AmPm == DateTimeAmPm.am)                  {                      Is24H = true;                      if (Hours >= 12)                      {                          Hours -= 12;                      }                  }              }
Magic Number,Dev2.Common.ExtMethods,StringExtension,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ExtMethods\StringExtension.cs,ContainsUnicodeCharacter,The following statement contains a magic number: const int maxAnsiCode = 255;
Magic Number,Dev2.Common.ExtMethods,StringExtension,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ExtMethods\StringExtension.cs,IsHex,The following statement contains a magic number: if (payload.Length % 2 != 0)              {                  result = false;              }
Magic Number,Dev2.Common.ExtMethods,TypeExtensions,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\ExtMethods\TypeExtensions.cs,GetTypeFromSimpleName,The following statement contains a magic number: if (typeName.IndexOf("[]"' StringComparison.Ordinal) != -1)              {                  isArray = true;                  typeName = typeName.Remove(typeName.IndexOf("[]"' StringComparison.Ordinal)' 2);              }
Magic Number,Dev2.Common.Interfaces,PluginAction,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\PluginAction.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Inputs?.GetHashCode() ?? 0) * 397) ^ (Method?.GetHashCode() ?? 0);              }
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddYearParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("yy"' new List<IDateTimeFormatPartOptionTO>              {                  new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)              });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddYearParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("y"' new List<IDateTimeFormatPartOptionTO>              {                  new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)'                   new DateTimeFormatPartOptionTO(1' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)              });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddYearParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("yyyy"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddEraParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("gg"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower(CultureInfo.InvariantCulture).Equals("a.d.")' false' "A.D."' _assignManager.AssignEra)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddHourParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("HH"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddHourParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("H"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddHourParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("hh"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddHourParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("h"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMinuteParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("m"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMinuteParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("mm"' new List<IDateTimeFormatPartOptionTO>              {                  new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'              });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("d"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3'_assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5'  _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7'_assignManager.AssignDays)'                    });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dddd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 1' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 2' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 3' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 4' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 5' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 6' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 7' _assignManager.AssignDays)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MMMM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddOffsetParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("tt"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddOffsetParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("tt"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddOffsetParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("tt"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddOffsetParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("K"' new List<IDateTimeFormatPartOptionTO>              {               new DateTimeFormatPartOptionTO(6' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone)              });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ss"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("s"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("F"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                         new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                         new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                         new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                         new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(7' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(7' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(7' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(7' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(7' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,NewDateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\NewDateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("FFFFFFF"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(7' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(6' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(5' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(4' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('y'' new List<int> { 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('y'' new List<int> { 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('y'' new List<int> { 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('y'' new List<int> { 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('m'' new List<int> { 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('m'' new List<int> { 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('M'' new List<int> { 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('d'' new List<int> { 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('w'' new List<int> { 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('D'' new List<int> { 2 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('2'' new List<int> { 3 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('1'' new List<int> { 3 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('s'' new List<int> { 2 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('a'' new List<int> { 5 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('Z'' new List<int> { 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('Z'' new List<int> { 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('E'' new List<int> { 3 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookup,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookup.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookups.Add('e'' new List<int> { 3 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('d'' new List<int> { 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('d'' new List<int> { 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('d'' new List<int> { 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('f'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('f'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('f'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('f'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('f'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('f'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('F'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('F'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('F'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('F'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('F'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('F'' new List<int> { 7' 6' 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('g'' new List<int> { 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('h'' new List<int> { 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('H'' new List<int> { 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('m'' new List<int> { 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('M'' new List<int> { 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('M'' new List<int> { 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('M'' new List<int> { 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('s'' new List<int> { 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('t'' new List<int> { 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('y'' new List<int> { 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('y'' new List<int> { 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('y'' new List<int> { 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('y'' new List<int> { 5' 4' 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('z'' new List<int> { 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatForwardLookupsForDotNet,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatForwardLookupsForDotNet.cs,Build,The following statement contains a magic number: DateTimeFormatForwardLookupsForDotNetLu.Add('z'' new List<int> { 3' 2' 1 });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddYearParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("yy"' new List<IDateTimeFormatPartOptionTO>              {                  new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)              });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddYearParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("yyyy"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("mm"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("m"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("M"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false'                          1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false'                          2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7'                          _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false'                          8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember'                          false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false'                          10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember'                          false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.InvariantCulture.DateTimeFormat.AbbreviatedMonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember'                          false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMonthParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("MM"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[0].Length' CompareTextValueToDateTimePart.IsTextJanuary' false' 1' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[1].Length' CompareTextValueToDateTimePart.IsTextFebuary' false' 2' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[2].Length' CompareTextValueToDateTimePart.IsTextMarch' false' 3' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[3].Length' CompareTextValueToDateTimePart.IsTextApril' false' 4' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[4].Length' CompareTextValueToDateTimePart.IsTextMay' false' 5' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[5].Length' CompareTextValueToDateTimePart.IsTextJune' false' 6' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[6].Length' CompareTextValueToDateTimePart.IsTextJuly' false' 7' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[7].Length' CompareTextValueToDateTimePart.IsTextAugust' false' 8' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[8].Length' CompareTextValueToDateTimePart.IsTextSeptember' false' 9' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[9].Length' CompareTextValueToDateTimePart.IsTextOctober' false' 10' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[10].Length' CompareTextValueToDateTimePart.IsTextNovember' false' 11' _assignManager.AssignMonths)'                      new DateTimeFormatPartOptionTO(CultureInfo.InvariantCulture.DateTimeFormat.MonthNames[11].Length' CompareTextValueToDateTimePart.IsTextDecember' false' 12' _assignManager.AssignMonths)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("d"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dd"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("DW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false' 3' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false' 4' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5' _assignManager.AssignDaysOfWeek)'                      new DateTimeFormatPartOptionTO(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false' 6' _assignManager.AssignDaysOfWeek)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dW"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[0].Length' CompareTextValueToDateTimePart.IsTextSunday' false' 7'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[1].Length' CompareTextValueToDateTimePart.IsTextMonday' false' 1'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[2].Length' CompareTextValueToDateTimePart.IsTextTuesday' false' 2'                          _assignManager.AssignDaysOfWeek' 7)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[3].Length' CompareTextValueToDateTimePart.IsTextWednesday' false'                          3' _assignManager.AssignDaysOfWeek' 9)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[4].Length' CompareTextValueToDateTimePart.IsTextThursday' false'                          4' _assignManager.AssignDaysOfWeek' 8)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[5].Length' CompareTextValueToDateTimePart.IsTextFriday' false' 5'                          _assignManager.AssignDaysOfWeek' 6)'                      new DateTimeFormatPartOptionTO(                          CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[6].Length' CompareTextValueToDateTimePart.IsTextSaturday' false'                          6' _assignManager.AssignDaysOfWeek' 7)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dy"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddDayParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("dy"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddWeekParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ww"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddWeekParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("w"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddHourParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("24h"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddHourParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("12h"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddMinuteParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("min"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ss"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null'  _assignManager.AssignSeconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("sp"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager. AssignMilliseconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager. AssignMilliseconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager. AssignMilliseconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddSecondParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("sp"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager. AssignMilliseconds)'                      new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager. AssignMilliseconds)'                      new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager. AssignMilliseconds)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddOffsetParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("am/pm"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddOffsetParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("am/pm"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddOffsetParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("am/pm"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddEraParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("era"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                          _assignManager.AssignEra)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddEraParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("era"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                          _assignManager.AssignEra)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddEraParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("era"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                          _assignManager.AssignEra)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddEraParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("Era"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                          _assignManager.AssignEra)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddEraParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("Era"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                          _assignManager.AssignEra)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddEraParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("Era"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                          _assignManager.AssignEra)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddEraParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ERA"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                          _assignManager. AssignEra)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddEraParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ERA"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                          _assignManager. AssignEra)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,DateTimeFormatPart,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\DateTimeFormatPart.cs,AddEraParts,The following statement contains a magic number: DateTimeFormatPartOptions.Add("ERA"'                  new List<IDateTimeFormatPartOptionTO>                  {                      new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                          _assignManager.AssignEra)'                      new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                          _assignManager. AssignEra)                  });
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeFormatPartBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeFormatPartBuilder.cs,Build,The following statement contains a magic number: TimeFormatPartOptions = new Dictionary<string' List<IDateTimeFormatPartOptionTO>>              {                  {                      "yy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "yyyy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextNumeric' true' null' _assignManager.AssignYears)                      }                  }'                  {                      "mm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "m"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "MM"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)                      }                  }'                  {                      "M"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMonth' true' null' _assignManager.AssignMonths)'                      }                  }'                  {                      "d"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "dd"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDay' true' null' _assignManager.AssignDays)                      }                  }'                  {                      "DW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dW"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dw"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfWeek' true' null' _assignManager.AssignDaysOfWeek)'                      }                  }'                  {                      "dy"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberDayOfYear' true' null' _assignManager.AssignDaysOfYear)                      }                  }'                  {                      "w"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberWeekOfYear' true' null' _assignManager.AssignWeeks)'                      }                  }'                  {                      "24h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber24H' true' null' _assignManager.Assign24Hours)                      }                  }'                  {                      "12h"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumber12H' true' null' _assignManager.Assign12Hours)'                      }                  }'                  {                      "min"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMinutes' true' null' _assignManager.AssignMinutes)'                      }                  }'                  {                      "ss"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberSeconds' true' null' _assignManager.AssignSeconds)'                      }                  }'                  {                      "sp"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(2' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                          new DateTimeFormatPartOptionTO(1' DatetimeParserHelper.IsNumberMilliseconds' true' null' _assignManager.AssignMilliseconds)'                      }                  }'                  {                      "am/pm"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(3' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                          new DateTimeFormatPartOptionTO(2' CompareTextValueToDateTimePart.IsTextAmPm' false' null' _assignManager.AssignAmPm)'                      }                  }'                  {                      "Z"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "ZZZ"' _timeZones.Select(k =>                      {                          IDateTimeFormatPartOptionTO dateTimeFormatPartOptionTo = new DateTimeFormatPartOptionTO(k.Key.Length' CompareTextValueToDateTimePart.IsTextTimeZone' false' null' _assignManager.AssignTimeZone);                          return dateTimeFormatPartOptionTo;                      }).OrderByDescending(k => k.Length).ToList()                  }'                  {                      "era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(2' (data' treatAsTim) => data.ToLower().Equals("ad")' false' "AD"'                              _assignManager.AssignEra)                      }                  }'                  {                      "Era"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(3' (data' treatAsTim) => data.ToLower().Equals("a.d")' false' "A.D"'                              _assignManager.AssignEra)                      }                  }'                  {                      "ERA"' new List<IDateTimeFormatPartOptionTO>                      {                          new DateTimeFormatPartOptionTO(4' (data' treatAsTim) => data.ToLower().Equals("a.d.")' false' "A.D."'                              _assignManager.AssignEra)                      }                } };
Magic Number,Dev2.Common.TimeZoneBuilder,TimeZoneBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeZoneBuilder.cs,Build,The following statement contains a magic number: for (int hours = -12; hours < 13; hours++)              {                  if (hours != 0)                  {                      for (int minutes = 0; minutes < 2; minutes++)                      {                          var min = minutes == 0 ? "00" : "30";                          var hrs = string.Concat(hours / Math.Abs(hours) < 0 ? "-" : "+"'                              Math.Abs(hours).ToString(CultureInfo.InvariantCulture).PadLeft(2' '0'));                          var uct = string.Concat(UctShort' hrs' ":"' min);                          TimeZones.Add(uct.ToLower()' new TimeZoneTO(UctShort' uct' UctLong));                      }                  }                  else                  {                      TimeZones.Add(UctShort + "-00:30"' new TimeZoneTO(UctShort' UctShort + "-00:30"' UctLong));                      TimeZones.Add(UctShort + "+00:30"' new TimeZoneTO(UctShort' UctShort + "+00:30"' UctLong));                  }              }
Magic Number,Dev2.Common.TimeZoneBuilder,TimeZoneBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeZoneBuilder.cs,Build,The following statement contains a magic number: for (int hours = -12; hours < 13; hours++)              {                  if (hours != 0)                  {                      for (int minutes = 0; minutes < 2; minutes++)                      {                          var min = minutes == 0 ? "00" : "30";                          var hrs = string.Concat(hours / Math.Abs(hours) < 0 ? "-" : "+"'                              Math.Abs(hours).ToString(CultureInfo.InvariantCulture).PadLeft(2' '0'));                          var uct = string.Concat(UctShort' hrs' ":"' min);                          TimeZones.Add(uct.ToLower()' new TimeZoneTO(UctShort' uct' UctLong));                      }                  }                  else                  {                      TimeZones.Add(UctShort + "-00:30"' new TimeZoneTO(UctShort' UctShort + "-00:30"' UctLong));                      TimeZones.Add(UctShort + "+00:30"' new TimeZoneTO(UctShort' UctShort + "+00:30"' UctLong));                  }              }
Magic Number,Dev2.Common.TimeZoneBuilder,TimeZoneBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeZoneBuilder.cs,Build,The following statement contains a magic number: for (int hours = -12; hours < 13; hours++)              {                  if (hours != 0)                  {                      for (int minutes = 0; minutes < 2; minutes++)                      {                          var min = minutes == 0 ? "00" : "30";                          var hrs = string.Concat(hours / Math.Abs(hours) < 0 ? "-" : "+"'                              Math.Abs(hours).ToString(CultureInfo.InvariantCulture).PadLeft(2' '0'));                          var uct = string.Concat(UctShort' hrs' ":"' min);                          TimeZones.Add(uct.ToLower()' new TimeZoneTO(UctShort' uct' UctLong));                      }                  }                  else                  {                      TimeZones.Add(UctShort + "-00:30"' new TimeZoneTO(UctShort' UctShort + "-00:30"' UctLong));                      TimeZones.Add(UctShort + "+00:30"' new TimeZoneTO(UctShort' UctShort + "+00:30"' UctLong));                  }              }
Magic Number,Dev2.Common.TimeZoneBuilder,TimeZoneBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeZoneBuilder.cs,Build,The following statement contains a magic number: for (int hours = -12; hours < 13; hours++)              {                  if (hours != 0)                  {                      for (int minutes = 0; minutes < 2; minutes++)                      {                          var min = minutes == 0 ? "00" : "30";                          var hrs = string.Concat(hours / Math.Abs(hours) < 0 ? "-" : "+"'                              Math.Abs(hours).ToString(CultureInfo.InvariantCulture).PadLeft(2' '0'));                          var uct = string.Concat(UctShort' hrs' ":"' min);                          TimeZones.Add(uct.ToLower()' new TimeZoneTO(UctShort' uct' UctLong));                      }                  }                  else                  {                      TimeZones.Add(UctShort + "-00:30"' new TimeZoneTO(UctShort' UctShort + "-00:30"' UctLong));                      TimeZones.Add(UctShort + "+00:30"' new TimeZoneTO(UctShort' UctShort + "+00:30"' UctLong));                  }              }
Magic Number,Dev2.Common.TimeZoneBuilder,TimeZoneBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeZoneBuilder.cs,Build,The following statement contains a magic number: for (int hours = -12; hours < 13; hours++)              {                  if (hours != 0)                  {                      for (int minutes = 0; minutes < 2; minutes++)                      {                          var min = minutes == 0 ? "00" : "30";                          var hrs = string.Concat(hours / Math.Abs(hours) < 0 ? "-" : "+"'                              Math.Abs(hours).ToString(CultureInfo.InvariantCulture).PadLeft(2' '0'));                          var gmt = string.Concat(GmtShort' hrs' ":"' min);                          TimeZones.Add(gmt.ToLower()' new TimeZoneTO(GmtShort' gmt' GmtLong));                      }                  }                  else                  {                      TimeZones.Add(GmtShort + "-00:30"' new TimeZoneTO(GmtShort' GmtShort + "-00:30"' GmtLong));                      TimeZones.Add(GmtShort + "+00:30"' new TimeZoneTO(GmtShort' GmtShort + "+00:30"' GmtLong));                  }              }
Magic Number,Dev2.Common.TimeZoneBuilder,TimeZoneBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeZoneBuilder.cs,Build,The following statement contains a magic number: for (int hours = -12; hours < 13; hours++)              {                  if (hours != 0)                  {                      for (int minutes = 0; minutes < 2; minutes++)                      {                          var min = minutes == 0 ? "00" : "30";                          var hrs = string.Concat(hours / Math.Abs(hours) < 0 ? "-" : "+"'                              Math.Abs(hours).ToString(CultureInfo.InvariantCulture).PadLeft(2' '0'));                          var gmt = string.Concat(GmtShort' hrs' ":"' min);                          TimeZones.Add(gmt.ToLower()' new TimeZoneTO(GmtShort' gmt' GmtLong));                      }                  }                  else                  {                      TimeZones.Add(GmtShort + "-00:30"' new TimeZoneTO(GmtShort' GmtShort + "-00:30"' GmtLong));                      TimeZones.Add(GmtShort + "+00:30"' new TimeZoneTO(GmtShort' GmtShort + "+00:30"' GmtLong));                  }              }
Magic Number,Dev2.Common.TimeZoneBuilder,TimeZoneBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeZoneBuilder.cs,Build,The following statement contains a magic number: for (int hours = -12; hours < 13; hours++)              {                  if (hours != 0)                  {                      for (int minutes = 0; minutes < 2; minutes++)                      {                          var min = minutes == 0 ? "00" : "30";                          var hrs = string.Concat(hours / Math.Abs(hours) < 0 ? "-" : "+"'                              Math.Abs(hours).ToString(CultureInfo.InvariantCulture).PadLeft(2' '0'));                          var gmt = string.Concat(GmtShort' hrs' ":"' min);                          TimeZones.Add(gmt.ToLower()' new TimeZoneTO(GmtShort' gmt' GmtLong));                      }                  }                  else                  {                      TimeZones.Add(GmtShort + "-00:30"' new TimeZoneTO(GmtShort' GmtShort + "-00:30"' GmtLong));                      TimeZones.Add(GmtShort + "+00:30"' new TimeZoneTO(GmtShort' GmtShort + "+00:30"' GmtLong));                  }              }
Magic Number,Dev2.Common.TimeZoneBuilder,TimeZoneBuilder,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\TimeZoneBuilder\TimeZoneBuilder.cs,Build,The following statement contains a magic number: for (int hours = -12; hours < 13; hours++)              {                  if (hours != 0)                  {                      for (int minutes = 0; minutes < 2; minutes++)                      {                          var min = minutes == 0 ? "00" : "30";                          var hrs = string.Concat(hours / Math.Abs(hours) < 0 ? "-" : "+"'                              Math.Abs(hours).ToString(CultureInfo.InvariantCulture).PadLeft(2' '0'));                          var gmt = string.Concat(GmtShort' hrs' ":"' min);                          TimeZones.Add(gmt.ToLower()' new TimeZoneTO(GmtShort' gmt' GmtLong));                      }                  }                  else                  {                      TimeZones.Add(GmtShort + "-00:30"' new TimeZoneTO(GmtShort' GmtShort + "-00:30"' GmtLong));                      TimeZones.Add(GmtShort + "+00:30"' new TimeZoneTO(GmtShort' GmtShort + "+00:30"' GmtLong));                  }              }
Magic Number,Dev2.Common.Utils,TextUtils,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Utils\TextUtils.cs,ReplaceWorkflowNewLinesWithEnvironmentNewLines,The following statement contains a magic number: while (startIndex != -1 && startIndex < stringToReplaceIn.Length)              {                  int indexOfReplacement = stringToReplaceIn.IndexOf('\n'' startIndex);                  if (indexOfReplacement != -1)                  {                      bool dontReplace = true;                      int index = indexOfReplacement - 1;                      if (index >= 0)                      {                          char backwardsLookup = stringToReplaceIn[index];                          if (backwardsLookup == '\r')                          {                              dontReplace = false;                              startIndex = indexOfReplacement + 2;                          }                      }                        if (dontReplace)                      {                          stringToReplaceIn = stringToReplaceIn.Insert(indexOfReplacement' "\r");                          startIndex = indexOfReplacement + 2;                      }                  }                  else                  {                      startIndex = -1;                  }              }
Magic Number,Dev2.Common.Utils,TextUtils,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Common\Utils\TextUtils.cs,ReplaceWorkflowNewLinesWithEnvironmentNewLines,The following statement contains a magic number: while (startIndex != -1 && startIndex < stringToReplaceIn.Length)              {                  int indexOfReplacement = stringToReplaceIn.IndexOf('\n'' startIndex);                  if (indexOfReplacement != -1)                  {                      bool dontReplace = true;                      int index = indexOfReplacement - 1;                      if (index >= 0)                      {                          char backwardsLookup = stringToReplaceIn[index];                          if (backwardsLookup == '\r')                          {                              dontReplace = false;                              startIndex = indexOfReplacement + 2;                          }                      }                        if (dontReplace)                      {                          stringToReplaceIn = stringToReplaceIn.Insert(indexOfReplacement' "\r");                          startIndex = indexOfReplacement + 2;                      }                  }                  else                  {                      startIndex = -1;                  }              }
