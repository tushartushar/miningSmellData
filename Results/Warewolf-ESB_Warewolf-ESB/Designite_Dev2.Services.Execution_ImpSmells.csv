Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Dev2.Services.Execution,ServiceExecutionAbstract<TService;TSource>,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\ServiceExecutionAbstract.cs,BuildParameterIterators,Cyclomatic complexity of the method is 8
Complex Method,Dev2.Services.Execution,ServiceExecutionAbstract<TService;TSource>,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\ServiceExecutionAbstract.cs,TryConvert,Cyclomatic complexity of the method is 8
Long Parameter List,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,MapDataRowsToEnvironment,The method has 5 parameters. Parameters: executeService' environment' update' started' rowIdx
Long Parameter List,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,ProcessDataRow,The method has 6 parameters. Parameters: executeService' environment' update' started' rowIdx' row
Long Parameter List,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,ProcessOutputMapping,The method has 7 parameters. Parameters: executeService' environment' update' started' rowIdx' row' serviceOutputMapping
Long Parameter List,Dev2.Services.Execution,ServiceExecutionAbstract<TService;TSource>,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\ServiceExecutionAbstract.cs,ExecuteService,The method has 5 parameters. Parameters: itrCollection' itrs' errors' update' formater
Long Parameter List,Dev2.Services.Execution,ServiceExecutionAbstract<TService;TSource>,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\ServiceExecutionAbstract.cs,TryConvert,The method has 5 parameters. Parameters: children' outputDefs' indexCache' update' level
Long Statement,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,ProcessOutputMapping,The length of the statement  "            var displayExpression = DataListUtil.ReplaceRecordsetBlankWithIndex(DataListUtil.AddBracketsToValueIfNotExist(serviceOutputMapping.MappedTo)' rowIdx); " is 150.
Long Statement,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,SqlExecution,The length of the statement  "                    Dev2Logger.Info("Time taken to process proc " + ProcedureName + ":" + startTime.Elapsed.Milliseconds + " Milliseconds"' DataObj.ExecutionID.ToString()); " is 152.
Long Statement,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,SqlExecution,The length of the statement  "                    Dev2Logger.Info("Time taken to TranslateDataTableToEnvironment " + ProcedureName + ":" + startTime1.Elapsed.Milliseconds + " Milliseconds"' DataObj.ExecutionID.ToString()); " is 172.
Long Statement,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,MySqlExecution,The length of the statement  "                        using (var dataSet = server.FetchDataTable(parameters.ToArray()' server.GetProcedureOutParams(ProcedureName' Source.DatabaseName))) " is 131.
Long Statement,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,GetSqlParameters,The length of the statement  "                         string.Compare(parameter.Value' string.Empty' StringComparison.InvariantCultureIgnoreCase) == 0) ? new SqlParameter($"@{parameter.Name}"' DBNull.Value) : new SqlParameter($"@{parameter.Name}"' parameter.Value)); " is 211.
Long Statement,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,GetMySqlParameters,The length of the statement  "                         string.Compare(parameter.Value' string.Empty' StringComparison.InvariantCultureIgnoreCase) == 0) ? new MySqlParameter($"@{parameterName}"' DBNull.Value) : new MySqlParameter($"@{parameterName}"' parameter.Value)); " is 213.
Long Statement,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,OracleExecution,The length of the statement  "                        using (var dataSet = server.FetchDataTable(parameters.ToArray()' server.GetProcedureOutParams(ProcedureName' Source.DatabaseName))) " is 131.
Long Statement,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,GetOdbcParameters,The length of the statement  "                         string.Compare(parameter.Value' string.Empty' StringComparison.InvariantCultureIgnoreCase) == 0) ? new OdbcParameter($"@{parameter.Name}"' DBNull.Value) : new OdbcParameter($"@{parameter.Name}"' parameter.Value)); " is 213.
Long Statement,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,GetPostgreSqlParameters,The length of the statement  "                             0) ? new NpgsqlParameter($"@{parameter.Name}"' DBNull.Value) : new NpgsqlParameter($"@{parameter.Name}"' parameter.Value)); " is 123.
Long Statement,Dev2.Services.Execution,ServiceExecutionAbstract<TService;TSource>,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\ServiceExecutionAbstract.cs,BuildParameterIterators,The length of the statement  "                        toInject = DataListUtil.IsEvaluated(definitions[0].RawValue) ? DataListUtil.AddBracketsToValueIfNotExist(definitions[0].RawValue) : definitions[0].RawValue; " is 156.
Long Statement,Dev2.Services.Execution,ServiceExecutionAbstract<TService;TSource>,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\ServiceExecutionAbstract.cs,TryConvert,The length of the statement  "                                DataObj.Environment.Assign(DataListUtil.AddBracketsToValueIfNotExist(scalarName.RawValue)' UnescapeRawXml(c1.InnerXml)' update); " is 128.
Complex Conditional,Dev2.Services.Execution,DatabaseServiceExecution,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\DatabaseServiceExecution.cs,TranslateDataTableToEnvironment,The conditional expression  "executeService != null && Outputs != null && Outputs.Count != 0 && executeService.Rows != null"  is complex.
Magic Number,Dev2.Services.Execution,ServiceExecutionAbstract<TService;TSource>,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\ServiceExecutionAbstract.cs,ExecuteImpl,The following statement contains a magic number: try              {                  ErrorResultTO invokeErrors;                    var itrs = new List<IWarewolfIterator>(5);                  IWarewolfListIterator itrCollection = new WarewolfListIterator();                  if (string.IsNullOrEmpty(InstanceInputDefinitions) && string.IsNullOrEmpty(InstanceOutputDefintions))                  {                      if (Inputs != null && Inputs.Count == 0)                      {                          ExecuteService(out invokeErrors' update' outputFormatter);                          errors.MergeErrors(invokeErrors);                          return;                      }                      else                      {                          BuildParameterIterators(update' null' itrCollection' itrs);                            while (itrCollection.HasMoreData())                          {                              ExecuteService(itrCollection' itrs' out invokeErrors' update' outputFormatter);                              errors.MergeErrors(invokeErrors);                          }                          return;                      }                  }                  var method = Service.Method;                  var inputs = method.Parameters;                  if (inputs.Count == 0)                  {                      ExecuteService(out invokeErrors' update' outputFormatter);                      errors.MergeErrors(invokeErrors);                  }                  else                  {                      BuildParameterIterators(update' inputs' itrCollection' itrs);                        while (itrCollection.HasMoreData())                      {                          ExecuteService(itrCollection' itrs' out invokeErrors' update' outputFormatter);                          errors.MergeErrors(invokeErrors);                      }                  }              }              finally              {                  var disposable = Service as IDisposable;                  disposable?.Dispose();                    // ensure errors bubble up ;)                  errors.MergeErrors(_errorResult);              }
Magic Number,Dev2.Services.Execution,ServiceExecutionAbstract<TService;TSource>,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\ServiceExecutionAbstract.cs,ODBCParameterIterators,The following statement contains a magic number: var itrs = new List<IWarewolfIterator>(5);
Magic Number,Dev2.Services.Execution,ServiceExecutionAbstract<TService;TSource>,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.Services.Execution\ServiceExecutionAbstract.cs,ODBCParameterIterators,The following statement contains a magic number: if (string.IsNullOrEmpty(InstanceInputDefinitions))              {                  var okay = new List<string>();                  int startindex = 0;                  while (command.IndexOf("[["' startindex' StringComparison.Ordinal) != -1)                  {                      int first = command.IndexOf("[["' startindex' StringComparison.Ordinal);                      int second = command.IndexOf("]]"' first' StringComparison.Ordinal);                      if (second != -1)                      {                          var val = command.Substring(first' (second - first) + 2);                          okay.Add(val);                            var toInject = val;                          var paramIterator = new WarewolfIterator(DataObj.Environment.Eval(toInject' update));                            itrCollection.AddVariableToIterateOn(paramIterator);                          itrs.Add(paramIterator);                          startindex = second;                      }                      else                      {                          startindex = command.Length - 1;                      }                  }                  for (int i = 0; i < itrs.Count; i++)                  {                      var vari = itrCollection.FetchNextValue(itrs[i]);                      command = command.Replace(okay[i]' vari);                  }              }
