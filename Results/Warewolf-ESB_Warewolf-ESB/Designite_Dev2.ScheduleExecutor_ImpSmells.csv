Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Dev2.ScheduleExecutor,Program,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.ScheduleExecutor\Program.cs,Main,The length of the statement  "                        PostDataToWebserverAsRemoteAgent(paramters["Workflow"]' paramters["TaskName"]' Guid.NewGuid()' paramters["ResourceId"]); " is 120.
Long Statement,Dev2.ScheduleExecutor,Program,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.ScheduleExecutor\Program.cs,CreateDebugState,The length of the statement  "                $"{OutputPath}DebugItems_{workflowName.Replace("\\"' "_")}_{DateTime.Now.ToString("yyyy-MM-dd")}_{correlation}_{user}.txt"' " is 123.
Long Statement,Dev2.ScheduleExecutor,Program,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.ScheduleExecutor\Program.cs,WriteDebugItems,The length of the statement  "                $"{OutputPath}DebugItems_{workflowName.Replace("\\"' "_")}_{DateTime.Now.ToString("yyyy-MM-dd")}_{correlation}_{user}.txt"' " is 123.
Long Statement,Dev2.ScheduleExecutor,Program,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.ScheduleExecutor\Program.cs,ProcessRecordSet,The length of the statement  "                        Variable = DataListUtil.AddBracketsToValueIfNotExist(DataListUtil.CreateRecordsetDisplayValue(recSetName' xElement.Name.LocalName' index))' " is 139.
Empty Catch Block,Dev2.ScheduleExecutor,Program,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.ScheduleExecutor\Program.cs,Log,The method has an empty catch block.
Empty Catch Block,Dev2.ScheduleExecutor,Program,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.ScheduleExecutor\Program.cs,SetupForLogging,The method has an empty catch block.
Magic Number,Dev2.ScheduleExecutor,Program,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.ScheduleExecutor\Program.cs,Main,The following statement contains a magic number: try              {                    SetupForLogging();                    Stopwatch.Start();                    AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);                  Log("Info"' "Task Started");                  if (args.Length < 2)                  {                      Log("Error"' ErrorResource.InvalidArguments);                      return;                  }                  var paramters = new Dictionary<string' string>();                  for (int i = 0; i < args.Length; i++)                  {                      var singleParameters = args[i].Split(':');                        paramters.Add(singleParameters[0]'                                    singleParameters.Skip(1).Aggregate((a' b) => $"{a}:{b}"));                  }                  Log("Info"' $"Start execution of {paramters["Workflow"]}");                  try                  {                      if (paramters.ContainsKey("ResourceId"))                      {                          PostDataToWebserverAsRemoteAgent(paramters["Workflow"]' paramters["TaskName"]' Guid.NewGuid()' paramters["ResourceId"]);                      }                      else                      {                          PostDataToWebserverAsRemoteAgent(paramters["Workflow"]' paramters["TaskName"]' Guid.NewGuid());                        }                  }                  catch                  {                      CreateDebugState("Warewolf Server Unavailable"' paramters["Workflow"]' paramters["TaskName"]);                      throw;                  }              }              catch (Exception e)              {                  Log("Error"' $"Error from execution: {e.Message}{e.StackTrace}");                    Environment.Exit(1);              }
Magic Number,Dev2.ScheduleExecutor,Program,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.ScheduleExecutor\Program.cs,CreateDebugState,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,Dev2.ScheduleExecutor,Program,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.ScheduleExecutor\Program.cs,WriteDebugItems,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,Dev2.ScheduleExecutor,Program,C:\repos\Warewolf-ESB_Warewolf-ESB\Dev\Dev2.ScheduleExecutor\Program.cs,SetupForLogging,The following statement contains a magic number: if (hasSchedulerLogDirectory)              {                  var directoryInfo = new DirectoryInfo(SchedulerLogDirectory);                  var logFiles = directoryInfo.GetFiles();                  if (logFiles.Length > 20)                  {                      try                      {                          var fileInfo = logFiles.OrderByDescending(f => f.LastWriteTime).First();                          fileInfo.Delete();                      }                        catch                        {                      }                  }              }              else              {                  Directory.CreateDirectory(SchedulerLogDirectory);              }
