Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,scanTask,Cyclomatic complexity of the method is 15
Long Statement,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,pauseButton_Click,The length of the statement  "	//错误	9	无法将类型“System.Windows.Forms.DataGridViewSelectedRowCollection”隐式转换为“System.Collections.Generic.List<System.Windows.Forms.DataGridViewRow>”	E:\program_data\git-hub-project\file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs	202 " is 244.
Long Statement,FileDownloader,Worker,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\Worker.cs,doWork,The length of the statement  "		// System.Diagnostics.Debug.Print(string.Format("thread {0} started.from {1}'to {2}"' System.Threading.Thread.CurrentThread.ManagedThreadId' range.from' range.to)); " is 164.
Empty Catch Block,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,showTasks,The method has an empty catch block.
Empty Catch Block,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The method has an empty catch block.
Empty Catch Block,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,pauseButton_Click,The method has an empty catch block.
Empty Catch Block,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,startButton_Click,The method has an empty catch block.
Empty Catch Block,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,deleteButton_Click,The method has an empty catch block.
Empty Catch Block,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,contextMenuStrip1_ItemClicked,The method has an empty catch block.
Empty Catch Block,FileDownloader,TaskManager,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\TaskManager.cs,Serialize,The method has an empty catch block.
Magic Number,FileDownloader,GlobalUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\GlobalUtil.cs,convert,The following statement contains a magic number: if (task.getSize () == -1 || task.getSize () == 0) {  	percent = "0%";  }  else {  	long curr = task.getCurrent ();  	long size = task.getSize ();  	long lastPos = task.getLastPos ();  	percent = NumberUtil.toFixed (((curr + 0.0) / size) * 100' 1);  	percent = percent == "100.0" ? "100" : percent;  	percent = percent + "%";  	var deltaRate = (curr - lastPos + 0.0) / _1K;  	res.speedL = deltaRate;  	rate = NumberUtil.toFixed (deltaRate' 1) + " k/s";  	if (deltaRate >= _1K) {  		rate = NumberUtil.toFixed (deltaRate / _1K' 2) + " M/s";  	}  	long leftSize = size - curr;  	if (curr == lastPos) {  		leftTime = "";  	}  	else {  		var time = (leftSize) / (curr - lastPos);  		// seconds  		leftTime = HourTimeConverter.convert (time);  	}  }  
Magic Number,FileDownloader,GlobalUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\GlobalUtil.cs,convert,The following statement contains a magic number: if (task.getSize () == -1 || task.getSize () == 0) {  	percent = "0%";  }  else {  	long curr = task.getCurrent ();  	long size = task.getSize ();  	long lastPos = task.getLastPos ();  	percent = NumberUtil.toFixed (((curr + 0.0) / size) * 100' 1);  	percent = percent == "100.0" ? "100" : percent;  	percent = percent + "%";  	var deltaRate = (curr - lastPos + 0.0) / _1K;  	res.speedL = deltaRate;  	rate = NumberUtil.toFixed (deltaRate' 1) + " k/s";  	if (deltaRate >= _1K) {  		rate = NumberUtil.toFixed (deltaRate / _1K' 2) + " M/s";  	}  	long leftSize = size - curr;  	if (curr == lastPos) {  		leftTime = "";  	}  	else {  		var time = (leftSize) / (curr - lastPos);  		// seconds  		leftTime = HourTimeConverter.convert (time);  	}  }  
Magic Number,FileDownloader,GlobalUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\GlobalUtil.cs,convert,The following statement contains a magic number: percent = NumberUtil.toFixed (((curr + 0.0) / size) * 100' 1);  
Magic Number,FileDownloader,GlobalUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\GlobalUtil.cs,convert,The following statement contains a magic number: if (deltaRate >= _1K) {  	rate = NumberUtil.toFixed (deltaRate / _1K' 2) + " M/s";  }  
Magic Number,FileDownloader,GlobalUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\GlobalUtil.cs,convert,The following statement contains a magic number: rate = NumberUtil.toFixed (deltaRate / _1K' 2) + " M/s";  
Magic Number,FileDownloader,DownloadTask,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadTask.cs,OnWorkerStatusChanged,The following statement contains a magic number: if (e.to == WorkerStatus.Finished) {  	int doNum = 0;  	foreach (Worker w in workers) {  		if (w.isDone ())  			doNum++;  	}  	if (doNum == workers.Count) {  		onTaskStatusChanged (new TaskStatusChangedEvent (this' this.status' TaskStatus.Finished));  	}  }  else if (e.to == WorkerStatus.Sicked) {  	errNums++;  	TaskStatus to = errNums < 10 ? TaskStatus.Waiting : TaskStatus.Dead;  	onTaskStatusChanged (new TaskStatusChangedEvent (this' this.status' to));  }  
Magic Number,FileDownloader,DownloadTask,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadTask.cs,OnWorkerStatusChanged,The following statement contains a magic number: if (e.to == WorkerStatus.Sicked) {  	errNums++;  	TaskStatus to = errNums < 10 ? TaskStatus.Waiting : TaskStatus.Dead;  	onTaskStatusChanged (new TaskStatusChangedEvent (this' this.status' to));  }  
Magic Number,FileDownloader,DownloadTask,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadTask.cs,start,The following statement contains a magic number: if (workers == null) {  	try {  		calcSize ();  	}  	catch (Exception e) {  		errNums++;  		workers = null;  		Logger.getLogger ().error ("task " + this.id + " err:" + e.Message + "'task status" + this.status);  		TaskStatus to = errNums < 10 ? TaskStatus.Waiting : TaskStatus.Dead;  		this.onTaskStatusChanged (new TaskStatusChangedEvent (this' this.status' to));  		return;  	}  }  
Magic Number,FileDownloader,DownloadTask,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadTask.cs,start,The following statement contains a magic number: try {  	calcSize ();  }  catch (Exception e) {  	errNums++;  	workers = null;  	Logger.getLogger ().error ("task " + this.id + " err:" + e.Message + "'task status" + this.status);  	TaskStatus to = errNums < 10 ? TaskStatus.Waiting : TaskStatus.Dead;  	this.onTaskStatusChanged (new TaskStatusChangedEvent (this' this.status' to));  	return;  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,initGrid,The following statement contains a magic number: this.taskGrid.ColumnCount = 7;  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,initGrid,The following statement contains a magic number: this.taskGrid.Columns [2].Name = "下载进度";  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,initGrid,The following statement contains a magic number: this.taskGrid.Columns [3].Name = "下载速度";  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,initGrid,The following statement contains a magic number: this.taskGrid.Columns [4].Name = "剩余时间";  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,initGrid,The following statement contains a magic number: this.taskGrid.Columns [5].Name = "完成时间";  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,initGrid,The following statement contains a magic number: this.taskGrid.Columns [6].Name = "下载地址";  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,initGrid,The following statement contains a magic number: this.taskGrid.Columns [6].Visible = false;  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,scanTask,The following statement contains a magic number: while (!exit) {  	List<DownloadTaskEntry> taskList = taskManager.getAllTasks ();  	double speed = 0.0;  	int finishTotal = 0;  	foreach (DownloadTaskEntry taskEntry in taskList) {  		speed += taskEntry.speedL;  		updateGrid (taskEntry);  		if (taskEntry.isDone)  			finishTotal++;  	}  	string speedStr = NumberUtil.toFixed (speed' 1) + " k/s";  	if (speed >= _1K) {  		speedStr = NumberUtil.toFixed (speed / _1K' 2) + " M/s";  	}  	this.speedTxt = "下载速度 " + speedStr;  	this.speedLabel.Text = this.speedTxt;  	this.doneTaskBtn.Text = "已完成(" + finishTotal + ")";  	switch (this.showMode) {  	case ShowMode.All:  		this.showAllTasks ();  		break;  	case ShowMode.Finished:  		this.showFinishedTasks ();  		break;  	case ShowMode.Running:  		this.showRunningTasks ();  		break;  	default:  		break;  	}  	Thread.Sleep (1000);  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,scanTask,The following statement contains a magic number: while (!exit) {  	List<DownloadTaskEntry> taskList = taskManager.getAllTasks ();  	double speed = 0.0;  	int finishTotal = 0;  	foreach (DownloadTaskEntry taskEntry in taskList) {  		speed += taskEntry.speedL;  		updateGrid (taskEntry);  		if (taskEntry.isDone)  			finishTotal++;  	}  	string speedStr = NumberUtil.toFixed (speed' 1) + " k/s";  	if (speed >= _1K) {  		speedStr = NumberUtil.toFixed (speed / _1K' 2) + " M/s";  	}  	this.speedTxt = "下载速度 " + speedStr;  	this.speedLabel.Text = this.speedTxt;  	this.doneTaskBtn.Text = "已完成(" + finishTotal + ")";  	switch (this.showMode) {  	case ShowMode.All:  		this.showAllTasks ();  		break;  	case ShowMode.Finished:  		this.showFinishedTasks ();  		break;  	case ShowMode.Running:  		this.showRunningTasks ();  		break;  	default:  		break;  	}  	Thread.Sleep (1000);  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,scanTask,The following statement contains a magic number: if (speed >= _1K) {  	speedStr = NumberUtil.toFixed (speed / _1K' 2) + " M/s";  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,scanTask,The following statement contains a magic number: speedStr = NumberUtil.toFixed (speed / _1K' 2) + " M/s";  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,scanTask,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	try {  		string id = this.taskGrid.Rows [i].Cells [0].Value.ToString ();  		if (id == taskId) {  			var speed = taskEntry.speed;  			var leftTime = taskEntry.leftTime;  			if (taskEntry.isDone) {  				speed = "";  				leftTime = "";  			}  			//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  			this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  			this.taskGrid.Rows [i].Cells [3].Value = speed;  			this.taskGrid.Rows [i].Cells [4].Value = leftTime;  			this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  			break;  		}  	}  	catch (Exception e) {  	}  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	try {  		string id = this.taskGrid.Rows [i].Cells [0].Value.ToString ();  		if (id == taskId) {  			var speed = taskEntry.speed;  			var leftTime = taskEntry.leftTime;  			if (taskEntry.isDone) {  				speed = "";  				leftTime = "";  			}  			//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  			this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  			this.taskGrid.Rows [i].Cells [3].Value = speed;  			this.taskGrid.Rows [i].Cells [4].Value = leftTime;  			this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  			break;  		}  	}  	catch (Exception e) {  	}  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	try {  		string id = this.taskGrid.Rows [i].Cells [0].Value.ToString ();  		if (id == taskId) {  			var speed = taskEntry.speed;  			var leftTime = taskEntry.leftTime;  			if (taskEntry.isDone) {  				speed = "";  				leftTime = "";  			}  			//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  			this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  			this.taskGrid.Rows [i].Cells [3].Value = speed;  			this.taskGrid.Rows [i].Cells [4].Value = leftTime;  			this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  			break;  		}  	}  	catch (Exception e) {  	}  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	try {  		string id = this.taskGrid.Rows [i].Cells [0].Value.ToString ();  		if (id == taskId) {  			var speed = taskEntry.speed;  			var leftTime = taskEntry.leftTime;  			if (taskEntry.isDone) {  				speed = "";  				leftTime = "";  			}  			//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  			this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  			this.taskGrid.Rows [i].Cells [3].Value = speed;  			this.taskGrid.Rows [i].Cells [4].Value = leftTime;  			this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  			break;  		}  	}  	catch (Exception e) {  	}  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: try {  	string id = this.taskGrid.Rows [i].Cells [0].Value.ToString ();  	if (id == taskId) {  		var speed = taskEntry.speed;  		var leftTime = taskEntry.leftTime;  		if (taskEntry.isDone) {  			speed = "";  			leftTime = "";  		}  		//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  		this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  		this.taskGrid.Rows [i].Cells [3].Value = speed;  		this.taskGrid.Rows [i].Cells [4].Value = leftTime;  		this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  		break;  	}  }  catch (Exception e) {  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: try {  	string id = this.taskGrid.Rows [i].Cells [0].Value.ToString ();  	if (id == taskId) {  		var speed = taskEntry.speed;  		var leftTime = taskEntry.leftTime;  		if (taskEntry.isDone) {  			speed = "";  			leftTime = "";  		}  		//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  		this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  		this.taskGrid.Rows [i].Cells [3].Value = speed;  		this.taskGrid.Rows [i].Cells [4].Value = leftTime;  		this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  		break;  	}  }  catch (Exception e) {  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: try {  	string id = this.taskGrid.Rows [i].Cells [0].Value.ToString ();  	if (id == taskId) {  		var speed = taskEntry.speed;  		var leftTime = taskEntry.leftTime;  		if (taskEntry.isDone) {  			speed = "";  			leftTime = "";  		}  		//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  		this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  		this.taskGrid.Rows [i].Cells [3].Value = speed;  		this.taskGrid.Rows [i].Cells [4].Value = leftTime;  		this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  		break;  	}  }  catch (Exception e) {  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: try {  	string id = this.taskGrid.Rows [i].Cells [0].Value.ToString ();  	if (id == taskId) {  		var speed = taskEntry.speed;  		var leftTime = taskEntry.leftTime;  		if (taskEntry.isDone) {  			speed = "";  			leftTime = "";  		}  		//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  		this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  		this.taskGrid.Rows [i].Cells [3].Value = speed;  		this.taskGrid.Rows [i].Cells [4].Value = leftTime;  		this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  		break;  	}  }  catch (Exception e) {  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: if (id == taskId) {  	var speed = taskEntry.speed;  	var leftTime = taskEntry.leftTime;  	if (taskEntry.isDone) {  		speed = "";  		leftTime = "";  	}  	//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  	this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  	this.taskGrid.Rows [i].Cells [3].Value = speed;  	this.taskGrid.Rows [i].Cells [4].Value = leftTime;  	this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  	break;  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: if (id == taskId) {  	var speed = taskEntry.speed;  	var leftTime = taskEntry.leftTime;  	if (taskEntry.isDone) {  		speed = "";  		leftTime = "";  	}  	//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  	this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  	this.taskGrid.Rows [i].Cells [3].Value = speed;  	this.taskGrid.Rows [i].Cells [4].Value = leftTime;  	this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  	break;  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: if (id == taskId) {  	var speed = taskEntry.speed;  	var leftTime = taskEntry.leftTime;  	if (taskEntry.isDone) {  		speed = "";  		leftTime = "";  	}  	//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  	this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  	this.taskGrid.Rows [i].Cells [3].Value = speed;  	this.taskGrid.Rows [i].Cells [4].Value = leftTime;  	this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  	break;  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: if (id == taskId) {  	var speed = taskEntry.speed;  	var leftTime = taskEntry.leftTime;  	if (taskEntry.isDone) {  		speed = "";  		leftTime = "";  	}  	//this.taskGrid.Rows[i].Cells[1].Value = taskEntry.fileName;  	this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  	this.taskGrid.Rows [i].Cells [3].Value = speed;  	this.taskGrid.Rows [i].Cells [4].Value = leftTime;  	this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  	break;  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: this.taskGrid.Rows [i].Cells [2].Value = taskEntry.percent;  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: this.taskGrid.Rows [i].Cells [3].Value = speed;  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: this.taskGrid.Rows [i].Cells [4].Value = leftTime;  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,updateGrid,The following statement contains a magic number: this.taskGrid.Rows [i].Cells [5].Value = GlobalUtil.formatTime (taskEntry.finishedTime);  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,convert,The following statement contains a magic number: if (task.getSize () == -1 || task.getSize () == 0) {  	percent = "0%";  }  else {  	long curr = task.getCurrent ();  	long size = task.getSize ();  	long lastPos = task.getLastPos ();  	percent = NumberUtil.toFixed (((curr + 0.0) / size) * 100' 1);  	percent = percent == "100.0" ? "100" : percent;  	percent = percent + "%";  	var deltaRate = (curr - lastPos + 0.0) / _1K;  	res.speedL = deltaRate;  	rate = NumberUtil.toFixed (deltaRate' 1) + " k/s";  	if (deltaRate >= _1K) {  		rate = NumberUtil.toFixed (deltaRate / _1K' 2) + " M/s";  	}  	long leftSize = size - curr;  	if (curr == lastPos) {  		leftTime = "";  	}  	else {  		var time = (leftSize) / (curr - lastPos);  		// seconds  		leftTime = HourTimeConverter.convert (time);  	}  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,convert,The following statement contains a magic number: if (task.getSize () == -1 || task.getSize () == 0) {  	percent = "0%";  }  else {  	long curr = task.getCurrent ();  	long size = task.getSize ();  	long lastPos = task.getLastPos ();  	percent = NumberUtil.toFixed (((curr + 0.0) / size) * 100' 1);  	percent = percent == "100.0" ? "100" : percent;  	percent = percent + "%";  	var deltaRate = (curr - lastPos + 0.0) / _1K;  	res.speedL = deltaRate;  	rate = NumberUtil.toFixed (deltaRate' 1) + " k/s";  	if (deltaRate >= _1K) {  		rate = NumberUtil.toFixed (deltaRate / _1K' 2) + " M/s";  	}  	long leftSize = size - curr;  	if (curr == lastPos) {  		leftTime = "";  	}  	else {  		var time = (leftSize) / (curr - lastPos);  		// seconds  		leftTime = HourTimeConverter.convert (time);  	}  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,convert,The following statement contains a magic number: percent = NumberUtil.toFixed (((curr + 0.0) / size) * 100' 1);  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,convert,The following statement contains a magic number: if (deltaRate >= _1K) {  	rate = NumberUtil.toFixed (deltaRate / _1K' 2) + " M/s";  }  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,convert,The following statement contains a magic number: rate = NumberUtil.toFixed (deltaRate / _1K' 2) + " M/s";  
Magic Number,FileDownloader,DownloadWindow,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\DownloadWindow.cs,contextMenuStrip1_ItemClicked,The following statement contains a magic number: try {  	string url = this.taskGrid.Rows [this.rowIndexSelected].Cells [6].Value.ToString ();  	Clipboard.SetDataObject (url);  }  catch (Exception exc) {  }  
Magic Number,FileDownloader,FileUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\FileUtil.cs,streamToFile,The following statement contains a magic number: while ((len = stream.Read (buf' 0' 1024)) > 0) {  	fs.Write (buf' 0' len);  }  
Magic Number,FileDownloader,HttpUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\HttpUtil.cs,get,The following statement contains a magic number: request.Timeout = 30 * 1000;  
Magic Number,FileDownloader,HttpUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\HttpUtil.cs,get,The following statement contains a magic number: request.Timeout = 30 * 1000;  
Magic Number,FileDownloader,HttpUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\HttpUtil.cs,get,The following statement contains a magic number: request.ReadWriteTimeout = 50 * 1000;  
Magic Number,FileDownloader,HttpUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\HttpUtil.cs,get,The following statement contains a magic number: request.ReadWriteTimeout = 50 * 1000;  
Magic Number,FileDownloader,NumberUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\NumberUtil.cs,toFixed,The following statement contains a magic number: if (index < 0) {  	return num + "." + nString ("0"' len);  }  else {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i < num.Length; i++) {  		if (i > index + 2) {  			break;  		}  		sb.Append (num.Substring (i' 1));  	}  	return sb.ToString ();  }  
Magic Number,FileDownloader,NumberUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\NumberUtil.cs,toFixed,The following statement contains a magic number: for (int i = 0; i < num.Length; i++) {  	if (i > index + 2) {  		break;  	}  	sb.Append (num.Substring (i' 1));  }  
Magic Number,FileDownloader,NumberUtil,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\NumberUtil.cs,toFixed,The following statement contains a magic number: if (i > index + 2) {  	break;  }  
Magic Number,FileDownloader,TaskManager,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\TaskManager.cs,scheduleTask,The following statement contains a magic number: while (_ready) {  	lock (lockObj) {  		while (waittingTasks.Count > 0 && runningTasks.Count <= SysConfig.MAX_ACTIVE_TASK) {  			Task task = waittingTasks [0];  			waittingTasks.Remove (task);  			runningTasks.Add (task);  			task.setStatus (TaskStatus.Running);  			new Thread (new ThreadStart (task.start)).Start ();  		}  	}  	Thread.Sleep (1000);  }  
Magic Number,FileDownloader,TaskManager,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\TaskManager.cs,scheduleTask,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,FileDownloader,Worker,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\Worker.cs,doWork,The following statement contains a magic number: try {  	fs = new FileStream (task.dir + task.fileName' FileMode.OpenOrCreate' FileAccess.Write' FileShare.ReadWrite);  	fs.Seek (range.from + current' SeekOrigin.Begin);  	// System.Diagnostics.Debug.Print(string.Format("thread {0} started.from {1}'to {2}"' System.Threading.Thread.CurrentThread.ManagedThreadId' range.from' range.to));  	res = HttpUtil.getInstance ().get (task.url' range.from + current' range.to);  	Stream stream = res.GetResponseStream ();  	byte[] buffer = new byte[SysConfig.DOWNLOAD_UNIT];  	int len;  	bool pause = false;  	while ((len = stream.Read (buffer' 0' SysConfig.DOWNLOAD_UNIT)) > 0) {  		if (task.getStatus () != TaskStatus.Running) {  			pause = true;  			break;  		}  		fs.Write (buffer' 0' len);  		fs.Flush ();  		current += len;  	}  	done = !pause;  	if (done) {  		//  task.fireWorkDone();   		onWorkerStatusChanged (new WorkerStatusChangedEvent (this' WorkerStatus.Working' WorkerStatus.Finished));  	}  }  catch (Exception e) {  	errTimes++;  	string id = this.task.getId ();  	done = false;  	Logger.getLogger ().error ("task " + id + "' worker " + this.id + " got exception " + e.Message);  	if (errTimes < 10) {  		doWork ();  	}  	else {  		onWorkerStatusChanged (new WorkerStatusChangedEvent (this' WorkerStatus.Working' WorkerStatus.Sicked));  	}  }  finally {  	if (fs != null)  		fs.Close ();  	if (res != null) {  		res.GetResponseStream ().Close ();  		res.Close ();  	}  }  
Magic Number,FileDownloader,Worker,C:\repos\rock117_file-downloader\FileDownloader\FileDownloader\Worker.cs,doWork,The following statement contains a magic number: if (errTimes < 10) {  	doWork ();  }  else {  	onWorkerStatusChanged (new WorkerStatusChangedEvent (this' WorkerStatus.Working' WorkerStatus.Sicked));  }  
