Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,Cyclomatic complexity of the method is 10
Complex Method,Pretzel.Logic.Extensions,Sitemap,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Extensions\Sitemap.cs,CompressSitemap,Cyclomatic complexity of the method is 8
Complex Method,Pretzel.Logic.Extensions,YamlExtensions,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Extensions\YamlExtensions.cs,GetValue,Cyclomatic complexity of the method is 10
Complex Method,Pretzel.Logic.Import,HtmlToMarkdownConverter,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Import\HtmlToMarkdownConverter.cs,ProcessNodes,Cyclomatic complexity of the method is 84
Complex Method,Pretzel.Logic.Minification,LessTransform,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Minification\LessTransform.cs,Transform,Cyclomatic complexity of the method is 9
Complex Method,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,Pretzel.Logic.Templating.Context,LinkHelper,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\Context\LinkHelper.cs,EvaluatePermalink,Cyclomatic complexity of the method is 9
Complex Method,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,ProcessFile,Cyclomatic complexity of the method is 16
Long Parameter List,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,Recipe,The method has 7 parameters.
Long Parameter List,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,ProcessFile,The method has 6 parameters.
Long Identifier,Pretzel.Logic.Extensibility.Extensions,WebSequenceDiagrams,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Extensibility\Extensions\WebSequenceDiagrams.cs,Transform,The length of the parameter contentIncludesASequenceDiagram is 31.
Long Statement,Pretzel.Logic.Commands,BaseParameters,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Commands\BaseParameters.cs,SetPath,The length of the statement  "		Path = FileSystem.Path.IsPathRooted (firstArgument) ? firstArgument : FileSystem.Path.Combine (FileSystem.Directory.GetCurrentDirectory ()' firstArgument); " is 155.
Long Statement,Pretzel.Logic.Commands,BaseParameters,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Commands\BaseParameters.cs,SetPath,The length of the statement  "	Path = string.IsNullOrWhiteSpace (Path) ? FileSystem.Directory.GetCurrentDirectory () : FileSystem.Path.GetFullPath (Path); " is 123.
Long Statement,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The length of the statement  "	if (!Win32API.DuplicateHandle (ipProcessHwnd' systemHandleInformation.Handle' Win32API.GetCurrentProcess ()' out ipHandle' 0' false' Win32API.DUPLICATE_SAME_ACCESS)) " is 165.
Long Statement,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The length of the statement  "	Win32API.NtQueryObject (ipHandle' (int)Win32API.ObjectInformationClass.ObjectBasicInformation' ipBasic' Marshal.SizeOf (objBasic)' ref nLength); " is 144.
Long Statement,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The length of the statement  "	while ((uint)(Win32API.NtQueryObject (ipHandle' (int)Win32API.ObjectInformationClass.ObjectTypeInformation' ipObjectType' nLength' ref nLength)) == Win32API.STATUS_INFO_LENGTH_MISMATCH) { " is 187.
Long Statement,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The length of the statement  "	while ((uint)(Win32API.NtQueryObject (ipHandle' (int)Win32API.ObjectInformationClass.ObjectNameInformation' ipObjectName' nLength' ref nLength)) == Win32API.STATUS_INFO_LENGTH_MISMATCH) { " is 187.
Long Statement,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetHandles,The length of the statement  "	while (Win32API.NtQuerySystemInformation (CNST_SYSTEM_HANDLE_INFORMATION' ipHandlePointer' nHandleInfoSize' ref nLength) == Win32API.STATUS_INFO_LENGTH_MISMATCH) { " is 163.
Long Statement,Pretzel.Logic.Extensibility.Extensions,AzureHostSupport,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Extensibility\Extensions\AzureHostSupport.cs,MixIn,The length of the statement  "	foreach (var directoryToMove in fileSystem.Directory.GetDirectories (directory).Where (n => new DirectoryInfo (n).Name != "_source")) { " is 135.
Long Statement,Pretzel.Logic.Extensibility.Extensions,VirtualDirectorySupport,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Extensibility\Extensions\VirtualDirectorySupport.cs,Transform,The length of the statement  "	foreach (var page in siteContext.Pages.Where (p => p.OutputFile.EndsWith (".html") || p.OutputFile.EndsWith (".htm") || p.OutputFile.EndsWith (".css"))) { " is 154.
Long Statement,Pretzel.Logic.Extensions,Sitemap,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Extensions\Sitemap.cs,CompressSitemap,The length of the statement  "				using (var gzip = new System.IO.Compression.GZipStream (compressedMap' System.IO.Compression.CompressionMode.Compress)) { " is 121.
Long Statement,Pretzel.Logic.Extensions,StringExtensions,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Extensions\StringExtensions.cs,ToUnderscoreCase,The length of the statement  "	return string.Concat (str.Select ((x' i) => i > 0 && char.IsUpper (x) ? "_" + x.ToString () : x.ToString ())).ToLowerInvariant (); " is 130.
Long Statement,Pretzel.Logic.Import,BloggerImport,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Import\BloggerImport.cs,Import,The length of the statement  "	//       <category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/> " is 123.
Long Statement,Pretzel.Logic.Import,BloggerImport,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Import\BloggerImport.cs,Import,The length of the statement  "	where e.Elements (atom + "category").Any (x => x.Attribute ("term").Value == "http://schemas.google.com/blogger/2008/kind#post") " is 128.
Long Statement,Pretzel.Logic.Minification,FileSystemExtensions,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Minification\FileSystemExtensions.cs,BundleFiles,The length of the statement  "	var outputCss = filePaths.Select (file => fileSystem.File.ReadAllText (file.FullName)).Aggregate (new StringBuilder ()' (builder' val) => builder.Append (val + "\n")); " is 167.
Long Statement,Pretzel.Logic.Minification,LessTransform,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Minification\LessTransform.cs,Transform,The length of the statement  "	foreach (var file in siteContext.Pages.Where (p => p.OutputFile.EndsWith (".html") && fileSystem.File.Exists (p.OutputFile))) { " is 127.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,Create,The length of the statement  "				fileSystem.File.WriteAllText (Path.Combine (directory' @"_posts"' string.Format ("{0}-myfirstpost.md"' DateTime.Today.ToString ("yyyy-MM-dd")))' Properties.Razor.FirstPost); " is 173.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,Create,The length of the statement  "			fileSystem.File.WriteAllText (Path.Combine (directory' @"_posts"' string.Format ("{0}-myfirstpost.md"' DateTime.Today.ToString ("yyyy-MM-dd")))' Properties.Liquid.FirstPost); " is 174.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"Properties"' "AssemblyInfo.cs")' Properties.RazorCsProject.AssemblyInfo_cs); " is 140.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"PretzelClasses"' "Category.cs")' Properties.RazorCsProject.Category_cs); " is 136.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"LayoutProject.csproj")' Properties.RazorCsProject.LayoutProject_csproj); " is 136.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"layoutSolution.sln")' Properties.RazorCsProject.LayoutSolution_sln); " is 132.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"PretzelClasses"' "NonProcessedPage.cs")' Properties.RazorCsProject.NonProcessedPage_cs); " is 152.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @".nuget"' "NuGet.config")' Properties.RazorCsProject.NuGet_Config); " is 130.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @".nuget"' "NuGet.exe")' Properties.RazorCsProject.NuGet_exe); " is 124.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @".nuget"' "NuGet.targets")' Properties.RazorCsProject.NuGet_targets); " is 132.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"PretzelClasses"' "PageContext.cs")' Properties.RazorCsProject.PageContext_cs); " is 142.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"PretzelClasses"' "Page.cs")' Properties.RazorCsProject.Page_cs); " is 128.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"PretzelClasses"' "Paginator.cs")' Properties.RazorCsProject.Paginator_cs); " is 138.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"PretzelClasses"' "SiteContext.cs")' Properties.RazorCsProject.SiteContext_cs); " is 142.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"PretzelClasses"' "Tag.cs")' Properties.RazorCsProject.Tag_cs); " is 126.
Long Statement,Pretzel.Logic.Recipe,Recipe,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Recipe\Recipe.cs,CreateProject,The length of the statement  "	fileSystem.File.WriteAllBytes (Path.Combine (layoutDirectory' @"packages.config")' Properties.RazorCsProject.packages_config); " is 126.
Long Statement,Pretzel.Logic.Templating.Context,SiteContextGenerator,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\Context\SiteContextGenerator.cs,BuildPosts,The length of the statement  "		posts.AddRange (fileSystem.Directory.GetFiles (postsFolder' "*.*"' SearchOption.AllDirectories).Select (file => CreatePage (context' config' file' true)).Where (post => post != null)); " is 184.
Long Statement,Pretzel.Logic.Templating.Context,SiteContextGenerator,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\Context\SiteContextGenerator.cs,BuildPosts,The length of the statement  "		posts.AddRange (fileSystem.Directory.GetFiles (draftsFolder' "*.*"' SearchOption.AllDirectories).Select (file => CreatePage (context' config' file' true)).Where (post => post != null)); " is 185.
Long Statement,Pretzel.Logic.Templating.Context,SiteContextGenerator,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\Context\SiteContextGenerator.cs,IsSpecialPath,The length of the statement  "	return relativePath.StartsWith ("_") || relativePath.Contains ("_posts") || (relativePath.StartsWith (".") && relativePath != ".htaccess") || relativePath.EndsWith (".TMP"' StringComparison.OrdinalIgnoreCase); " is 209.
Long Statement,Pretzel.Logic.Templating.Context,SiteContextGenerator,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\Context\SiteContextGenerator.cs,CreatePage,The length of the statement  "		if (header.ContainsKey ("published") && header ["published"].ToString ().ToLower (CultureInfo.InvariantCulture) == "false") { " is 125.
Long Statement,Pretzel.Logic.Templating.Context,SiteContextGenerator,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\Context\SiteContextGenerator.cs,ResolveCategories,The length of the statement  "		string rawCategories = postPath.Replace (fileSystem.Path.GetFileName (page.File)' string.Empty).Replace ("_posts"' string.Empty); " is 129.
Long Statement,Pretzel.Logic.Templating.Context,SiteContextGenerator,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\Context\SiteContextGenerator.cs,GetDirectoryPages,The length of the statement  "	return fileSystem.Directory.GetFiles (forDirectory' "*.*"' SearchOption.TopDirectoryOnly).Select (file => CreatePage (context' config' file' isPost)).Where (page => page != null); " is 179.
Long Statement,Pretzel.Logic.Templating.Jekyll,LiquidEngine,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\Jekyll\LiquidEngine.cs,PreProcess,The length of the statement  "		var registerTagMethod = typeof(Template).GetMethod ("RegisterTag"' System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static); " is 146.
Long Statement,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,ProcessFile,The length of the statement  "		var excerptSeparator = context.Bag.ContainsKey ("excerpt_separator") ? context.Bag ["excerpt_separator"].ToString () : Context.ExcerptSeparator; " is 144.
Long Statement,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,ProcessFile,The length of the statement  "					var message = string.Format ("Failed to process layout {0} for {1}' see inner exception for more details"' layout' context.OutputPath); " is 135.
Long Statement,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,ProcessFile,The length of the statement  "				Console.WriteLine (@"Failed to process layout {0} for {1} because '{2}'. Skipping file"' layout' context.OutputPath' ex.Message); " is 129.
Long Statement,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,RenderContent,The length of the statement  "		html = Path.GetExtension (file).IsMarkdownFile () ? _lightweightMarkupEngine.Convert (contentsWithoutHeader).Trim () : contentsWithoutHeader; " is 141.
Long Statement,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,RenderContent,The length of the statement  "		html = String.Format ("<p><b>Error converting markdown:</b><br />{0}</p><p>Original content:<br /><pre>{1}</pre></p>"' e.Message' contents); " is 140.
Long Statement,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,CopyFileIfSourceNewer,The length of the statement  "	if (!FileSystem.File.Exists (destFileName) || FileSystem.File.GetLastWriteTime (sourceFileName) > FileSystem.File.GetLastWriteTime (destFileName)) { " is 148.
Long Statement,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,MapToOutputPath,The length of the statement  "	var temp = file.Replace (Context.SourceFolder' "").TrimStart (Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar); " is 123.
Long Statement,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,CanProcess,The length of the statement  "	var engineInfo = GetType ().GetCustomAttributes (typeof(SiteEngineInfoAttribute)' true).SingleOrDefault () as SiteEngineInfoAttribute; " is 134.
Magic Number,Pretzel.Logic.Commands,CommandParameters,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Commands\CommandParameters.cs,CommandParameters,The following statement contains a magic number: port = 8080;  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetProcessesLockingFile,The following statement contains a magic number: foreach (var process in processListSnapshot) {  	if (process.Id <= 4) {  		continue;  	}  	// system processes  	var files = GetFilesLockedBy (process);  	if (files.Contains (filePath))  		procs.Add (process);  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetProcessesLockingFile,The following statement contains a magic number: if (process.Id <= 4) {  	continue;  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilesLockedBy,The following statement contains a magic number: try {  	t.Start ();  	if (!t.Join (250)) {  		try {  			t.Interrupt ();  			t.Abort ();  		} catch {  			t.Abort ();  		}  	}  } catch {  	t.Abort ();  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilesLockedBy,The following statement contains a magic number: if (!t.Join (250)) {  	try {  		t.Interrupt ();  		t.Abort ();  	} catch {  		t.Abort ();  	}  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The following statement contains a magic number: if (Is64Bits ()) {  	ipTemp = new IntPtr (Convert.ToInt64 (objObjectType.Name.Buffer.ToString ()' 10) >> 32);  } else {  	ipTemp = objObjectType.Name.Buffer;  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The following statement contains a magic number: if (Is64Bits ()) {  	ipTemp = new IntPtr (Convert.ToInt64 (objObjectType.Name.Buffer.ToString ()' 10) >> 32);  } else {  	ipTemp = objObjectType.Name.Buffer;  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The following statement contains a magic number: ipTemp = new IntPtr (Convert.ToInt64 (objObjectType.Name.Buffer.ToString ()' 10) >> 32);  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The following statement contains a magic number: ipTemp = new IntPtr (Convert.ToInt64 (objObjectType.Name.Buffer.ToString ()' 10) >> 32);  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The following statement contains a magic number: if (Is64Bits ()) {  	ipTemp = new IntPtr (Convert.ToInt64 (objObjectName.Name.Buffer.ToString ()' 10) >> 32);  } else {  	ipTemp = objObjectName.Name.Buffer;  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The following statement contains a magic number: if (Is64Bits ()) {  	ipTemp = new IntPtr (Convert.ToInt64 (objObjectName.Name.Buffer.ToString ()' 10) >> 32);  } else {  	ipTemp = objObjectName.Name.Buffer;  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The following statement contains a magic number: ipTemp = new IntPtr (Convert.ToInt64 (objObjectName.Name.Buffer.ToString ()' 10) >> 32);  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetFilePath,The following statement contains a magic number: ipTemp = new IntPtr (Convert.ToInt64 (objObjectName.Name.Buffer.ToString ()' 10) >> 32);  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetRegularFileNameFromDevice,The following statement contains a magic number: foreach (string strDrivePath in Environment.GetLogicalDrives ()) {  	var sbTargetPath = new StringBuilder (Win32API.MAX_PATH);  	if (Win32API.QueryDosDevice (strDrivePath.Substring (0' 2)' sbTargetPath' Win32API.MAX_PATH) == 0) {  		return strRawName;  	}  	string strTargetPath = sbTargetPath.ToString ();  	if (strFileName.StartsWith (strTargetPath)) {  		strFileName = strFileName.Replace (strTargetPath' strDrivePath.Substring (0' 2));  		break;  	}  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetRegularFileNameFromDevice,The following statement contains a magic number: foreach (string strDrivePath in Environment.GetLogicalDrives ()) {  	var sbTargetPath = new StringBuilder (Win32API.MAX_PATH);  	if (Win32API.QueryDosDevice (strDrivePath.Substring (0' 2)' sbTargetPath' Win32API.MAX_PATH) == 0) {  		return strRawName;  	}  	string strTargetPath = sbTargetPath.ToString ();  	if (strFileName.StartsWith (strTargetPath)) {  		strFileName = strFileName.Replace (strTargetPath' strDrivePath.Substring (0' 2));  		break;  	}  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetRegularFileNameFromDevice,The following statement contains a magic number: if (Win32API.QueryDosDevice (strDrivePath.Substring (0' 2)' sbTargetPath' Win32API.MAX_PATH) == 0) {  	return strRawName;  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetRegularFileNameFromDevice,The following statement contains a magic number: if (strFileName.StartsWith (strTargetPath)) {  	strFileName = strFileName.Replace (strTargetPath' strDrivePath.Substring (0' 2));  	break;  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetRegularFileNameFromDevice,The following statement contains a magic number: strFileName = strFileName.Replace (strTargetPath' strDrivePath.Substring (0' 2));  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetHandles,The following statement contains a magic number: if (Is64Bits ()) {  	lHandleCount = Marshal.ReadInt64 (ipHandlePointer);  	ipHandle = new IntPtr (ipHandlePointer.ToInt64 () + 8);  } else {  	lHandleCount = Marshal.ReadInt32 (ipHandlePointer);  	ipHandle = new IntPtr (ipHandlePointer.ToInt32 () + 4);  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetHandles,The following statement contains a magic number: if (Is64Bits ()) {  	lHandleCount = Marshal.ReadInt64 (ipHandlePointer);  	ipHandle = new IntPtr (ipHandlePointer.ToInt64 () + 8);  } else {  	lHandleCount = Marshal.ReadInt32 (ipHandlePointer);  	ipHandle = new IntPtr (ipHandlePointer.ToInt32 () + 4);  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetHandles,The following statement contains a magic number: ipHandle = new IntPtr (ipHandlePointer.ToInt64 () + 8);  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetHandles,The following statement contains a magic number: ipHandle = new IntPtr (ipHandlePointer.ToInt32 () + 4);  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetHandles,The following statement contains a magic number: for (long lIndex = 0; lIndex < lHandleCount; lIndex++) {  	var shHandle = new Win32API.SYSTEM_HANDLE_INFORMATION ();  	if (Is64Bits ()) {  		shHandle = (Win32API.SYSTEM_HANDLE_INFORMATION)Marshal.PtrToStructure (ipHandle' shHandle.GetType ());  		ipHandle = new IntPtr (ipHandle.ToInt64 () + Marshal.SizeOf (shHandle) + 8);  	} else {  		ipHandle = new IntPtr (ipHandle.ToInt64 () + Marshal.SizeOf (shHandle));  		shHandle = (Win32API.SYSTEM_HANDLE_INFORMATION)Marshal.PtrToStructure (ipHandle' shHandle.GetType ());  	}  	if (shHandle.ProcessID != process.Id)  		continue;  	lstHandles.Add (shHandle);  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetHandles,The following statement contains a magic number: if (Is64Bits ()) {  	shHandle = (Win32API.SYSTEM_HANDLE_INFORMATION)Marshal.PtrToStructure (ipHandle' shHandle.GetType ());  	ipHandle = new IntPtr (ipHandle.ToInt64 () + Marshal.SizeOf (shHandle) + 8);  } else {  	ipHandle = new IntPtr (ipHandle.ToInt64 () + Marshal.SizeOf (shHandle));  	shHandle = (Win32API.SYSTEM_HANDLE_INFORMATION)Marshal.PtrToStructure (ipHandle' shHandle.GetType ());  }  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,GetHandles,The following statement contains a magic number: ipHandle = new IntPtr (ipHandle.ToInt64 () + Marshal.SizeOf (shHandle) + 8);  
Magic Number,Pretzel.Logic,Win32Processes,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\SanityCheck.cs,Is64Bits,The following statement contains a magic number: return Marshal.SizeOf (typeof(IntPtr)) == 8;  
Magic Number,Pretzel.Logic.Extensions,StringExtensions,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Extensions\StringExtensions.cs,Datestamp,The following statement contains a magic number: if (tokens.Length < 3) {  	return fs.FileInfo.FromFileName (file).LastWriteTime;  }  
Magic Number,Pretzel.Logic.Import,HtmlToMarkdownConverter,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Import\HtmlToMarkdownConverter.cs,ProcessNodes,The following statement contains a magic number: foreach (var htmlNode in htmlNodes) {  	switch (htmlNode.Name) {  	case "#comment":  		break;  	case "#text":  		markdown.Append (htmlNode.InnerText);  		break;  	case "h1":  	case "h2":  	case "h3":  	case "h4":  	case "h5":  	case "h6":  		var hashes = new string ('#'' htmlNode.Name [1] - '0');  		markdown.AppendLine ();  		markdown.AppendFormat ("{0} {1}"' hashes' htmlNode.InnerText);  		markdown.AppendLine ();  		break;  	case "ul":  	case "ol":  		markdown.AppendLine ();  		listNesting.Push (htmlNode.Name);  		ProcessNodes (markdown' htmlNode.ChildNodes);  		listNesting.Pop ();  		markdown.AppendLine ();  		break;  	case "li":  		markdown.AppendLine ();  		if (listNesting.Count == 0)  			// missing ul  			listNesting.Push ("ul");  		var itemMarker = "*";  		if (listNesting.Peek () == "ol")  			itemMarker = "1.";  		markdown.AppendFormat ("{0}{1} "' new string (' '' 4 * (listNesting.Count - 1))' itemMarker);  		ProcessNodes (markdown' htmlNode.ChildNodes);  		break;  	case "p":  		markdown.AppendLine ();  		ProcessNodes (markdown' htmlNode.ChildNodes);  		markdown.AppendLine ();  		break;  	case "b":  	case "strong":  		var boldText = htmlNode.InnerText;  		bool addSpace = false;  		if (boldText.EndsWith (" ")) {  			boldText = boldText.Substring (0' boldText.Length - 1);  			addSpace = true;  		}  		markdown.AppendFormat ("**{0}**{1}"' boldText' addSpace ? " " : "");  		break;  	case "i":  	case "em":  		markdown.AppendFormat ("*{0}*"' htmlNode.InnerText);  		break;  	case "br":  		markdown.AppendLine ();  		break;  	case "a":  		var href = htmlNode.Attributes ["href"];  		if (href != null) {  			markdown.AppendFormat ("[{0}]({1})"' htmlNode.InnerText' htmlNode.Attributes ["href"].Value);  		} else {  			// anchor missing href' just pass it straight through  			markdown.Append (htmlNode.OuterHtml);  		}  		break;  	case "img":  	case "blockquote":  	case "object":  	case "table":  	case "div":  	case "span":  	case "iframe":  	case "embed":  		// leave html unchanged  		markdown.Append (htmlNode.OuterHtml);  		break;  	case "pre":  	case "code":  		var code = htmlNode.InnerText;  		// a bit hacky' but we need to sort out where lines of code end  		code = code.Replace ("\r\n"' "\n");  		code = code.Replace ("\r"' "\n");  		code = regexBr.Replace (code' "\n");  		var lines = code.Split ('\n');  		markdown.Append (Environment.NewLine + "    ");  		markdown.Append (string.Join (Environment.NewLine + "    "' lines));  		break;  	default:  		ProcessNodes (markdown' htmlNode.ChildNodes);  		Tracing.Info ("{0}"' htmlNode.OuterHtml);  		break;  	}  }  
Magic Number,Pretzel.Logic.Import,HtmlToMarkdownConverter,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Import\HtmlToMarkdownConverter.cs,ProcessNodes,The following statement contains a magic number: switch (htmlNode.Name) {  case "#comment":  	break;  case "#text":  	markdown.Append (htmlNode.InnerText);  	break;  case "h1":  case "h2":  case "h3":  case "h4":  case "h5":  case "h6":  	var hashes = new string ('#'' htmlNode.Name [1] - '0');  	markdown.AppendLine ();  	markdown.AppendFormat ("{0} {1}"' hashes' htmlNode.InnerText);  	markdown.AppendLine ();  	break;  case "ul":  case "ol":  	markdown.AppendLine ();  	listNesting.Push (htmlNode.Name);  	ProcessNodes (markdown' htmlNode.ChildNodes);  	listNesting.Pop ();  	markdown.AppendLine ();  	break;  case "li":  	markdown.AppendLine ();  	if (listNesting.Count == 0)  		// missing ul  		listNesting.Push ("ul");  	var itemMarker = "*";  	if (listNesting.Peek () == "ol")  		itemMarker = "1.";  	markdown.AppendFormat ("{0}{1} "' new string (' '' 4 * (listNesting.Count - 1))' itemMarker);  	ProcessNodes (markdown' htmlNode.ChildNodes);  	break;  case "p":  	markdown.AppendLine ();  	ProcessNodes (markdown' htmlNode.ChildNodes);  	markdown.AppendLine ();  	break;  case "b":  case "strong":  	var boldText = htmlNode.InnerText;  	bool addSpace = false;  	if (boldText.EndsWith (" ")) {  		boldText = boldText.Substring (0' boldText.Length - 1);  		addSpace = true;  	}  	markdown.AppendFormat ("**{0}**{1}"' boldText' addSpace ? " " : "");  	break;  case "i":  case "em":  	markdown.AppendFormat ("*{0}*"' htmlNode.InnerText);  	break;  case "br":  	markdown.AppendLine ();  	break;  case "a":  	var href = htmlNode.Attributes ["href"];  	if (href != null) {  		markdown.AppendFormat ("[{0}]({1})"' htmlNode.InnerText' htmlNode.Attributes ["href"].Value);  	} else {  		// anchor missing href' just pass it straight through  		markdown.Append (htmlNode.OuterHtml);  	}  	break;  case "img":  case "blockquote":  case "object":  case "table":  case "div":  case "span":  case "iframe":  case "embed":  	// leave html unchanged  	markdown.Append (htmlNode.OuterHtml);  	break;  case "pre":  case "code":  	var code = htmlNode.InnerText;  	// a bit hacky' but we need to sort out where lines of code end  	code = code.Replace ("\r\n"' "\n");  	code = code.Replace ("\r"' "\n");  	code = regexBr.Replace (code' "\n");  	var lines = code.Split ('\n');  	markdown.Append (Environment.NewLine + "    ");  	markdown.Append (string.Join (Environment.NewLine + "    "' lines));  	break;  default:  	ProcessNodes (markdown' htmlNode.ChildNodes);  	Tracing.Info ("{0}"' htmlNode.OuterHtml);  	break;  }  
Magic Number,Pretzel.Logic.Import,HtmlToMarkdownConverter,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Import\HtmlToMarkdownConverter.cs,ProcessNodes,The following statement contains a magic number: markdown.AppendFormat ("{0}{1} "' new string (' '' 4 * (listNesting.Count - 1))' itemMarker);  
Magic Number,Pretzel.Logic.Liquid,DateToRfc822FormatFilter,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Liquid\DateToRfc822FormatFilter.cs,date_to_rfc822,The following statement contains a magic number: offset = offset.Substring (0' 6);  
Magic Number,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,ProcessFile,The following statement contains a magic number: if (page.Bag.TryGetValue ("paginate"' out paginateObj)) {  	var paginate = Convert.ToInt32 (paginateObj);  	var totalPages = (int)Math.Ceiling (Context.Posts.Count / Convert.ToDouble (paginateObj));  	var paginator = new Paginator (Context' totalPages' paginate' 1);  	pageContext.Paginator = paginator;  	var paginateLink = "/page/:page/index.html";  	if (page.Bag.ContainsKey ("paginate_link"))  		paginateLink = Convert.ToString (page.Bag ["paginate_link"]);  	var prevLink = page.Url;  	for (var i = 2; i <= totalPages; i++) {  		var newPaginator = new Paginator (Context' totalPages' paginate' i) {  			PreviousPageUrl = prevLink  		};  		var link = paginateLink.Replace (":page"' Convert.ToString (i));  		paginator.NextPageUrl = link;  		paginator = newPaginator;  		prevLink = link;  		var path = Path.Combine (outputDirectory' link.ToRelativeFile ());  		if (path.EndsWith (FileSystem.Path.DirectorySeparatorChar.ToString ())) {  			path = Path.Combine (path' "index.html");  		}  		var context = new PageContext (pageContext) {  			Paginator = newPaginator'  			OutputPath = path  		};  		context.Bag ["url"] = link;  		pageContexts.Add (context);  	}  }  
Magic Number,Pretzel.Logic.Templating,JekyllEngineBase,F:\newReposMay17\Code52_pretzel\src\Pretzel.Logic\Templating\JekyllEngineBase.cs,ProcessFile,The following statement contains a magic number: for (var i = 2; i <= totalPages; i++) {  	var newPaginator = new Paginator (Context' totalPages' paginate' i) {  		PreviousPageUrl = prevLink  	};  	var link = paginateLink.Replace (":page"' Convert.ToString (i));  	paginator.NextPageUrl = link;  	paginator = newPaginator;  	prevLink = link;  	var path = Path.Combine (outputDirectory' link.ToRelativeFile ());  	if (path.EndsWith (FileSystem.Path.DirectorySeparatorChar.ToString ())) {  		path = Path.Combine (path' "index.html");  	}  	var context = new PageContext (pageContext) {  		Paginator = newPaginator'  		OutputPath = path  	};  	context.Bag ["url"] = link;  	pageContexts.Add (context);  }  
