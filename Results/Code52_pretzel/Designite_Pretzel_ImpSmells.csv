Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Pretzel.Commands,RecipeCommand,C:\repos\Code52_pretzel\src\Pretzel\Commands\RecipeCommand.cs,Execute,The length of the statement  "            var recipe = new Recipe(fileSystem' engine' parameters.Path' additionalIngredients' parameters.WithProject' parameters.Wiki' parameters.IncludeDrafts); " is 151.
Long Statement,Pretzel,Program,C:\repos\Code52_pretzel\src\Pretzel\Program.cs,AddScriptCs,The length of the statement  "            var pretzelScriptCsPath = Path.Combine(new FileInfo(Assembly.GetEntryAssembly().Location).DirectoryName' "Pretzel.ScriptCs.dll"); " is 129.
Long Statement,Pretzel,Program,C:\repos\Code52_pretzel\src\Pretzel\Program.cs,AddScriptCs,The length of the statement  "                            Tracing.Debug("Assembly 'Pretzel.ScriptCs.dll' detected and loaded' type 'Pretzel.ScriptCs.ScriptCsCatalogFactory' found but method 'CreateScriptCsCatalog' not found."); " is 169.
Long Statement,Pretzel,Program,C:\repos\Code52_pretzel\src\Pretzel\Program.cs,AddScriptCs,The length of the statement  "                        Tracing.Debug("Assembly 'Pretzel.ScriptCs.dll' detected and loaded but type 'Pretzel.ScriptCs.ScriptCsCatalogFactory' not found."); " is 131.
Empty Catch Block,Pretzel,Program,C:\repos\Code52_pretzel\src\Pretzel\Program.cs,WaitForClose,The method has an empty catch block.
Magic Number,Pretzel,Startup,C:\repos\Code52_pretzel\src\Pretzel\WebHost\WebHost.cs,Configuration,The following statement contains a magic number: app.Run(context =>                  {                      var path = context.Request.Path.Value;                        Tracing.Debug(path);                        if (!Content.IsAvailable(path))                      {                          var path404 = "/404.html";                          context.Response.StatusCode = 404;                            if (Content.IsAvailable(path404))                          {                              context.Response.ContentType = path404.MimeType();                              return context.Response.WriteAsync(Content.GetContent(path404));                          }                            context.Response.ContentType = path.MimeType();                          return context.Response.WriteAsync("Page not found: " + path);                      }                        if (path.MimeType().IsBinaryMime())                      {                          context.Response.ContentType = path.MimeType();                          var fileContents = Content.GetBinaryContent(path);                          context.Response.Headers["Content-Range"] = string.Format("bytes 0-{0}"' (fileContents.Length - 1));                          context.Response.Headers["Content-Length"] = fileContents.Length.ToString(CultureInfo.InvariantCulture);                          return context.Response.WriteAsync(fileContents);                      }                        if (Content.IsDirectory(path) && !path.EndsWith("/"))                      {                          // if path is a directory without trailing slash' redirects to the same url with a trailing slash                          context.Response.StatusCode = 301;                          context.Response.Headers["location"] = String.Format("http://localhost:{0}{1}/"' context.Request.LocalPort' path);                          return Task.Delay(0);                      }                        context.Response.ContentType = path.MimeType();                      return context.Response.WriteAsync(Content.GetContent(path));                  });
Magic Number,Pretzel,Startup,C:\repos\Code52_pretzel\src\Pretzel\WebHost\WebHost.cs,Configuration,The following statement contains a magic number: app.Run(context =>                  {                      var path = context.Request.Path.Value;                        Tracing.Debug(path);                        if (!Content.IsAvailable(path))                      {                          var path404 = "/404.html";                          context.Response.StatusCode = 404;                            if (Content.IsAvailable(path404))                          {                              context.Response.ContentType = path404.MimeType();                              return context.Response.WriteAsync(Content.GetContent(path404));                          }                            context.Response.ContentType = path.MimeType();                          return context.Response.WriteAsync("Page not found: " + path);                      }                        if (path.MimeType().IsBinaryMime())                      {                          context.Response.ContentType = path.MimeType();                          var fileContents = Content.GetBinaryContent(path);                          context.Response.Headers["Content-Range"] = string.Format("bytes 0-{0}"' (fileContents.Length - 1));                          context.Response.Headers["Content-Length"] = fileContents.Length.ToString(CultureInfo.InvariantCulture);                          return context.Response.WriteAsync(fileContents);                      }                        if (Content.IsDirectory(path) && !path.EndsWith("/"))                      {                          // if path is a directory without trailing slash' redirects to the same url with a trailing slash                          context.Response.StatusCode = 301;                          context.Response.Headers["location"] = String.Format("http://localhost:{0}{1}/"' context.Request.LocalPort' path);                          return Task.Delay(0);                      }                        context.Response.ContentType = path.MimeType();                      return context.Response.WriteAsync(Content.GetContent(path));                  });
