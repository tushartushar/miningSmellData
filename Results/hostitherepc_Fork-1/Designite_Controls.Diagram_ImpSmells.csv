Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,Cyclomatic complexity of the method is 13
Complex Method,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,Cyclomatic complexity of the method is 21
Long Parameter List,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The method has 6 parameters.
Long Statement,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The length of the statement  "	Size workingSize = new Size (this.ClientSize.Width - childNodeMargin * 2' this.ClientSize.Height - childNodeMargin * 2); " is 120.
Long Statement,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The length of the statement  "				childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin); " is 121.
Long Statement,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The length of the statement  "				childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2); " is 121.
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DiagramControl,The following statement contains a magic number: arrowPath.AddLine (0' 0' -5' -3);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DiagramControl,The following statement contains a magic number: arrowPath.AddLine (0' 0' -5' -3);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DiagramControl,The following statement contains a magic number: arrowPath.AddLine (-5' -3' -5' 3);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DiagramControl,The following statement contains a magic number: arrowPath.AddLine (-5' -3' -5' 3);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DiagramControl,The following statement contains a magic number: arrowPath.AddLine (-5' -3' -5' 3);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DiagramControl,The following statement contains a magic number: arrowPath.AddLine (-5' -3' -5' 3);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (allowRefresh && rootShape != null) {  	int maxChildSize = 0;  	if (layout == DiagramLayoutDirection.Vertical) {  		maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Width);  		rootShape.Top = childNodeMargin + AutoScrollPosition.Y;  		if (workingSize.Width < maxChildSize)  			rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  		else  			rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  		LayoutChildShapes (rootShape' layout);  	}  	else if (layout == DiagramLayoutDirection.Horizontal) {  		maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Height);  		rootShape.Left = childNodeMargin + AutoScrollPosition.X;  		if (workingSize.Height < maxChildSize)  			rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  		else  			rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  		LayoutChildShapes (rootShape' layout);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (allowRefresh && rootShape != null) {  	int maxChildSize = 0;  	if (layout == DiagramLayoutDirection.Vertical) {  		maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Width);  		rootShape.Top = childNodeMargin + AutoScrollPosition.Y;  		if (workingSize.Width < maxChildSize)  			rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  		else  			rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  		LayoutChildShapes (rootShape' layout);  	}  	else if (layout == DiagramLayoutDirection.Horizontal) {  		maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Height);  		rootShape.Left = childNodeMargin + AutoScrollPosition.X;  		if (workingSize.Height < maxChildSize)  			rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  		else  			rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  		LayoutChildShapes (rootShape' layout);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (allowRefresh && rootShape != null) {  	int maxChildSize = 0;  	if (layout == DiagramLayoutDirection.Vertical) {  		maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Width);  		rootShape.Top = childNodeMargin + AutoScrollPosition.Y;  		if (workingSize.Width < maxChildSize)  			rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  		else  			rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  		LayoutChildShapes (rootShape' layout);  	}  	else if (layout == DiagramLayoutDirection.Horizontal) {  		maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Height);  		rootShape.Left = childNodeMargin + AutoScrollPosition.X;  		if (workingSize.Height < maxChildSize)  			rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  		else  			rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  		LayoutChildShapes (rootShape' layout);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (allowRefresh && rootShape != null) {  	int maxChildSize = 0;  	if (layout == DiagramLayoutDirection.Vertical) {  		maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Width);  		rootShape.Top = childNodeMargin + AutoScrollPosition.Y;  		if (workingSize.Width < maxChildSize)  			rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  		else  			rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  		LayoutChildShapes (rootShape' layout);  	}  	else if (layout == DiagramLayoutDirection.Horizontal) {  		maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Height);  		rootShape.Left = childNodeMargin + AutoScrollPosition.X;  		if (workingSize.Height < maxChildSize)  			rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  		else  			rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  		LayoutChildShapes (rootShape' layout);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (layout == DiagramLayoutDirection.Vertical) {  	maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Width);  	rootShape.Top = childNodeMargin + AutoScrollPosition.Y;  	if (workingSize.Width < maxChildSize)  		rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  	else  		rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  	LayoutChildShapes (rootShape' layout);  }  else if (layout == DiagramLayoutDirection.Horizontal) {  	maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Height);  	rootShape.Left = childNodeMargin + AutoScrollPosition.X;  	if (workingSize.Height < maxChildSize)  		rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	else  		rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	LayoutChildShapes (rootShape' layout);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (layout == DiagramLayoutDirection.Vertical) {  	maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Width);  	rootShape.Top = childNodeMargin + AutoScrollPosition.Y;  	if (workingSize.Width < maxChildSize)  		rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  	else  		rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  	LayoutChildShapes (rootShape' layout);  }  else if (layout == DiagramLayoutDirection.Horizontal) {  	maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Height);  	rootShape.Left = childNodeMargin + AutoScrollPosition.X;  	if (workingSize.Height < maxChildSize)  		rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	else  		rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	LayoutChildShapes (rootShape' layout);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (layout == DiagramLayoutDirection.Vertical) {  	maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Width);  	rootShape.Top = childNodeMargin + AutoScrollPosition.Y;  	if (workingSize.Width < maxChildSize)  		rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  	else  		rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  	LayoutChildShapes (rootShape' layout);  }  else if (layout == DiagramLayoutDirection.Horizontal) {  	maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Height);  	rootShape.Left = childNodeMargin + AutoScrollPosition.X;  	if (workingSize.Height < maxChildSize)  		rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	else  		rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	LayoutChildShapes (rootShape' layout);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (layout == DiagramLayoutDirection.Vertical) {  	maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Width);  	rootShape.Top = childNodeMargin + AutoScrollPosition.Y;  	if (workingSize.Width < maxChildSize)  		rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  	else  		rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  	LayoutChildShapes (rootShape' layout);  }  else if (layout == DiagramLayoutDirection.Horizontal) {  	maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Height);  	rootShape.Left = childNodeMargin + AutoScrollPosition.X;  	if (workingSize.Height < maxChildSize)  		rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	else  		rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	LayoutChildShapes (rootShape' layout);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (workingSize.Width < maxChildSize)  	rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  else  	rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (workingSize.Width < maxChildSize)  	rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  else  	rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: rootShape.Left = (maxChildSize - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: rootShape.Left = (workingSize.Width - rootShape.Width) / 2 + childNodeMargin + AutoScrollPosition.X;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (layout == DiagramLayoutDirection.Horizontal) {  	maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Height);  	rootShape.Left = childNodeMargin + AutoScrollPosition.X;  	if (workingSize.Height < maxChildSize)  		rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	else  		rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	LayoutChildShapes (rootShape' layout);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (layout == DiagramLayoutDirection.Horizontal) {  	maxChildSize = GetMaxExpandedChildNodesSize (rootShape' layout' rootShape.Height);  	rootShape.Left = childNodeMargin + AutoScrollPosition.X;  	if (workingSize.Height < maxChildSize)  		rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	else  		rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  	LayoutChildShapes (rootShape' layout);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (workingSize.Height < maxChildSize)  	rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  else  	rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: if (workingSize.Height < maxChildSize)  	rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  else  	rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: rootShape.Top = (maxChildSize - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,RefreshDiagram,The following statement contains a magic number: rootShape.Top = (workingSize.Height - rootShape.Height) / 2 + childNodeMargin + AutoScrollPosition.Y;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (parentShape != null && parentShape.Expanded) {  	int childPos = 0;  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		int childSize = 0;  		// First of all' get the maximum size of the all the expanded child nodes  		if (direction == DiagramLayoutDirection.Vertical) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Width);  			childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  			childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  		}  		childPos += childSize + peerNodeMargin;  	}  	childPos -= peerNodeMargin;  	int shift = 0;  	if (direction == DiagramLayoutDirection.Vertical)  		shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	else if (direction == DiagramLayoutDirection.Horizontal)  		shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	// Now center our child nodes  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical)  			childShape.newLocation.Offset (shift' 0);  		else if (direction == DiagramLayoutDirection.Horizontal)  			childShape.newLocation.Offset (0' shift);  		childShape.Location = childShape.newLocation;  		childShape.Visible = true;  		LayoutChildShapes (childShape' direction);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (parentShape != null && parentShape.Expanded) {  	int childPos = 0;  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		int childSize = 0;  		// First of all' get the maximum size of the all the expanded child nodes  		if (direction == DiagramLayoutDirection.Vertical) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Width);  			childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  			childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  		}  		childPos += childSize + peerNodeMargin;  	}  	childPos -= peerNodeMargin;  	int shift = 0;  	if (direction == DiagramLayoutDirection.Vertical)  		shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	else if (direction == DiagramLayoutDirection.Horizontal)  		shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	// Now center our child nodes  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical)  			childShape.newLocation.Offset (shift' 0);  		else if (direction == DiagramLayoutDirection.Horizontal)  			childShape.newLocation.Offset (0' shift);  		childShape.Location = childShape.newLocation;  		childShape.Visible = true;  		LayoutChildShapes (childShape' direction);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (parentShape != null && parentShape.Expanded) {  	int childPos = 0;  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		int childSize = 0;  		// First of all' get the maximum size of the all the expanded child nodes  		if (direction == DiagramLayoutDirection.Vertical) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Width);  			childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  			childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  		}  		childPos += childSize + peerNodeMargin;  	}  	childPos -= peerNodeMargin;  	int shift = 0;  	if (direction == DiagramLayoutDirection.Vertical)  		shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	else if (direction == DiagramLayoutDirection.Horizontal)  		shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	// Now center our child nodes  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical)  			childShape.newLocation.Offset (shift' 0);  		else if (direction == DiagramLayoutDirection.Horizontal)  			childShape.newLocation.Offset (0' shift);  		childShape.Location = childShape.newLocation;  		childShape.Visible = true;  		LayoutChildShapes (childShape' direction);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (parentShape != null && parentShape.Expanded) {  	int childPos = 0;  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		int childSize = 0;  		// First of all' get the maximum size of the all the expanded child nodes  		if (direction == DiagramLayoutDirection.Vertical) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Width);  			childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  			childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  		}  		childPos += childSize + peerNodeMargin;  	}  	childPos -= peerNodeMargin;  	int shift = 0;  	if (direction == DiagramLayoutDirection.Vertical)  		shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	else if (direction == DiagramLayoutDirection.Horizontal)  		shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	// Now center our child nodes  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical)  			childShape.newLocation.Offset (shift' 0);  		else if (direction == DiagramLayoutDirection.Horizontal)  			childShape.newLocation.Offset (0' shift);  		childShape.Location = childShape.newLocation;  		childShape.Visible = true;  		LayoutChildShapes (childShape' direction);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (parentShape != null && parentShape.Expanded) {  	int childPos = 0;  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		int childSize = 0;  		// First of all' get the maximum size of the all the expanded child nodes  		if (direction == DiagramLayoutDirection.Vertical) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Width);  			childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  			childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  		}  		childPos += childSize + peerNodeMargin;  	}  	childPos -= peerNodeMargin;  	int shift = 0;  	if (direction == DiagramLayoutDirection.Vertical)  		shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	else if (direction == DiagramLayoutDirection.Horizontal)  		shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	// Now center our child nodes  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical)  			childShape.newLocation.Offset (shift' 0);  		else if (direction == DiagramLayoutDirection.Horizontal)  			childShape.newLocation.Offset (0' shift);  		childShape.Location = childShape.newLocation;  		childShape.Visible = true;  		LayoutChildShapes (childShape' direction);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (parentShape != null && parentShape.Expanded) {  	int childPos = 0;  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		int childSize = 0;  		// First of all' get the maximum size of the all the expanded child nodes  		if (direction == DiagramLayoutDirection.Vertical) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Width);  			childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  			childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  		}  		childPos += childSize + peerNodeMargin;  	}  	childPos -= peerNodeMargin;  	int shift = 0;  	if (direction == DiagramLayoutDirection.Vertical)  		shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	else if (direction == DiagramLayoutDirection.Horizontal)  		shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  	//(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  	// Now center our child nodes  	foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical)  			childShape.newLocation.Offset (shift' 0);  		else if (direction == DiagramLayoutDirection.Horizontal)  			childShape.newLocation.Offset (0' shift);  		childShape.Location = childShape.newLocation;  		childShape.Visible = true;  		LayoutChildShapes (childShape' direction);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  	int childSize = 0;  	// First of all' get the maximum size of the all the expanded child nodes  	if (direction == DiagramLayoutDirection.Vertical) {  		childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Width);  		childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  		childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  	}  	childPos += childSize + peerNodeMargin;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: foreach (DiagramShapeControlBase childShape in parentShape.childShapes) {  	int childSize = 0;  	// First of all' get the maximum size of the all the expanded child nodes  	if (direction == DiagramLayoutDirection.Vertical) {  		childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Width);  		childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  		childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  	}  	childPos += childSize + peerNodeMargin;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Width);  	childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  	childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Width);  	childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  	childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: childShape.newLocation = new Point (childPos + (childSize - childShape.Width) / 2' parentShape.Bottom + childNodeMargin);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Horizontal) {  	childSize = GetMaxExpandedChildNodesSize (childShape' direction' childShape.Height);  	childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: childShape.newLocation = new Point (parentShape.Right + childNodeMargin' childPos + (childSize - childShape.Height) / 2);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical)  	shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  //(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  else if (direction == DiagramLayoutDirection.Horizontal)  	shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical)  	shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  //(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  else if (direction == DiagramLayoutDirection.Horizontal)  	shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical)  	shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  //(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  else if (direction == DiagramLayoutDirection.Horizontal)  	shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical)  	shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  //(this.Width - childPos) / 2 - (rootShape.Left - parentShape.Left);  else if (direction == DiagramLayoutDirection.Horizontal)  	shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: shift = parentShape.Left + parentShape.Width / 2 - childPos / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Horizontal)  	shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Horizontal)  	shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: shift = parentShape.Top + parentShape.Height / 2 - childPos / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (parentShape != null) {  	// Update our expander  	if (direction == DiagramLayoutDirection.Vertical) {  		parentShape.expander.Left = parentShape.Left + (parentShape.Width - parentShape.expander.Width) / 2;  		parentShape.expander.Top = parentShape.Bottom;  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		parentShape.expander.Left = parentShape.Right;  		parentShape.expander.Top = parentShape.Top + (parentShape.Height - parentShape.expander.Height) / 2;  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (parentShape != null) {  	// Update our expander  	if (direction == DiagramLayoutDirection.Vertical) {  		parentShape.expander.Left = parentShape.Left + (parentShape.Width - parentShape.expander.Width) / 2;  		parentShape.expander.Top = parentShape.Bottom;  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		parentShape.expander.Left = parentShape.Right;  		parentShape.expander.Top = parentShape.Top + (parentShape.Height - parentShape.expander.Height) / 2;  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	parentShape.expander.Left = parentShape.Left + (parentShape.Width - parentShape.expander.Width) / 2;  	parentShape.expander.Top = parentShape.Bottom;  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	parentShape.expander.Left = parentShape.Right;  	parentShape.expander.Top = parentShape.Top + (parentShape.Height - parentShape.expander.Height) / 2;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	parentShape.expander.Left = parentShape.Left + (parentShape.Width - parentShape.expander.Width) / 2;  	parentShape.expander.Top = parentShape.Bottom;  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	parentShape.expander.Left = parentShape.Right;  	parentShape.expander.Top = parentShape.Top + (parentShape.Height - parentShape.expander.Height) / 2;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: parentShape.expander.Left = parentShape.Left + (parentShape.Width - parentShape.expander.Width) / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Horizontal) {  	parentShape.expander.Left = parentShape.Right;  	parentShape.expander.Top = parentShape.Top + (parentShape.Height - parentShape.expander.Height) / 2;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,LayoutChildShapes,The following statement contains a magic number: parentShape.expander.Top = parentShape.Top + (parentShape.Height - parentShape.expander.Height) / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (parentShape.Expanded) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (showExpanders) {  		startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  		startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  	}  	else {  		if (direction == DiagramLayoutDirection.Vertical) {  			startPoint.X = parentShape.Left + parentShape.Width / 2;  			startPoint.Y = parentShape.Bottom;  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			startPoint.Y = parentShape.Top + parentShape.Height / 2;  			startPoint.X = parentShape.Right;  		}  	}  	foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  		if (direction == DiagramLayoutDirection.Vertical) {  			endPoint.Y = shape.Top;  			endPoint.X = shape.Left + (shape.Width / 2);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			endPoint.Y = shape.Top + (shape.Height / 2);  			endPoint.X = shape.Left;  		}  		switch (connectorType) {  		case DiagramConnectorType.Standard:  			g.DrawLine (pen' startPoint' endPoint);  			break;  		case DiagramConnectorType.Bezier:  			Point pt1 = Point.Empty;  			Point pt2 = Point.Empty;  			if (direction == DiagramLayoutDirection.Vertical) {  				pt1 = new Point (startPoint.X' startPoint.Y + 20);  				pt2 = new Point (endPoint.X' endPoint.Y - 20);  			}  			else if (direction == DiagramLayoutDirection.Horizontal) {  				pt1 = new Point (startPoint.X + 20' startPoint.Y);  				pt2 = new Point (endPoint.X - 20' endPoint.Y);  			}  			g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  			break;  		}  		// Draw arrows  		if (drawArrows) {  			Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  			float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  			if (connectorType == DiagramConnectorType.Bezier) {  				if (direction == DiagramLayoutDirection.Horizontal)  					angle *= 0.5f;  				else  					angle = 90.0f + (angle - 90.0f) * 0.5f;  			}  			g.TranslateTransform (endPoint.X' endPoint.Y);  			g.RotateTransform (angle);  			g.FillPath (brush' arrowPath);  			g.ResetTransform ();  		}  		DrawConnectors (shape' g' pen' brush' direction' connectorType);  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (showExpanders) {  	startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  	startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  }  else {  	if (direction == DiagramLayoutDirection.Vertical) {  		startPoint.X = parentShape.Left + parentShape.Width / 2;  		startPoint.Y = parentShape.Bottom;  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		startPoint.Y = parentShape.Top + parentShape.Height / 2;  		startPoint.X = parentShape.Right;  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (showExpanders) {  	startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  	startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  }  else {  	if (direction == DiagramLayoutDirection.Vertical) {  		startPoint.X = parentShape.Left + parentShape.Width / 2;  		startPoint.Y = parentShape.Bottom;  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		startPoint.Y = parentShape.Top + parentShape.Height / 2;  		startPoint.X = parentShape.Right;  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (showExpanders) {  	startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  	startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  }  else {  	if (direction == DiagramLayoutDirection.Vertical) {  		startPoint.X = parentShape.Left + parentShape.Width / 2;  		startPoint.Y = parentShape.Bottom;  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		startPoint.Y = parentShape.Top + parentShape.Height / 2;  		startPoint.X = parentShape.Right;  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (showExpanders) {  	startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  	startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  }  else {  	if (direction == DiagramLayoutDirection.Vertical) {  		startPoint.X = parentShape.Left + parentShape.Width / 2;  		startPoint.Y = parentShape.Bottom;  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		startPoint.Y = parentShape.Top + parentShape.Height / 2;  		startPoint.X = parentShape.Right;  	}  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: startPoint.X = parentShape.expander.Left + parentShape.expander.Width / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: startPoint.Y = parentShape.expander.Top + parentShape.expander.Height / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	startPoint.X = parentShape.Left + parentShape.Width / 2;  	startPoint.Y = parentShape.Bottom;  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	startPoint.Y = parentShape.Top + parentShape.Height / 2;  	startPoint.X = parentShape.Right;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	startPoint.X = parentShape.Left + parentShape.Width / 2;  	startPoint.Y = parentShape.Bottom;  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	startPoint.Y = parentShape.Top + parentShape.Height / 2;  	startPoint.X = parentShape.Right;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: startPoint.X = parentShape.Left + parentShape.Width / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Horizontal) {  	startPoint.Y = parentShape.Top + parentShape.Height / 2;  	startPoint.X = parentShape.Right;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: startPoint.Y = parentShape.Top + parentShape.Height / 2;  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  	if (direction == DiagramLayoutDirection.Vertical) {  		endPoint.Y = shape.Top;  		endPoint.X = shape.Left + (shape.Width / 2);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		endPoint.Y = shape.Top + (shape.Height / 2);  		endPoint.X = shape.Left;  	}  	switch (connectorType) {  	case DiagramConnectorType.Standard:  		g.DrawLine (pen' startPoint' endPoint);  		break;  	case DiagramConnectorType.Bezier:  		Point pt1 = Point.Empty;  		Point pt2 = Point.Empty;  		if (direction == DiagramLayoutDirection.Vertical) {  			pt1 = new Point (startPoint.X' startPoint.Y + 20);  			pt2 = new Point (endPoint.X' endPoint.Y - 20);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			pt1 = new Point (startPoint.X + 20' startPoint.Y);  			pt2 = new Point (endPoint.X - 20' endPoint.Y);  		}  		g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  		break;  	}  	// Draw arrows  	if (drawArrows) {  		Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  		float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  		if (connectorType == DiagramConnectorType.Bezier) {  			if (direction == DiagramLayoutDirection.Horizontal)  				angle *= 0.5f;  			else  				angle = 90.0f + (angle - 90.0f) * 0.5f;  		}  		g.TranslateTransform (endPoint.X' endPoint.Y);  		g.RotateTransform (angle);  		g.FillPath (brush' arrowPath);  		g.ResetTransform ();  	}  	DrawConnectors (shape' g' pen' brush' direction' connectorType);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  	if (direction == DiagramLayoutDirection.Vertical) {  		endPoint.Y = shape.Top;  		endPoint.X = shape.Left + (shape.Width / 2);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		endPoint.Y = shape.Top + (shape.Height / 2);  		endPoint.X = shape.Left;  	}  	switch (connectorType) {  	case DiagramConnectorType.Standard:  		g.DrawLine (pen' startPoint' endPoint);  		break;  	case DiagramConnectorType.Bezier:  		Point pt1 = Point.Empty;  		Point pt2 = Point.Empty;  		if (direction == DiagramLayoutDirection.Vertical) {  			pt1 = new Point (startPoint.X' startPoint.Y + 20);  			pt2 = new Point (endPoint.X' endPoint.Y - 20);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			pt1 = new Point (startPoint.X + 20' startPoint.Y);  			pt2 = new Point (endPoint.X - 20' endPoint.Y);  		}  		g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  		break;  	}  	// Draw arrows  	if (drawArrows) {  		Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  		float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  		if (connectorType == DiagramConnectorType.Bezier) {  			if (direction == DiagramLayoutDirection.Horizontal)  				angle *= 0.5f;  			else  				angle = 90.0f + (angle - 90.0f) * 0.5f;  		}  		g.TranslateTransform (endPoint.X' endPoint.Y);  		g.RotateTransform (angle);  		g.FillPath (brush' arrowPath);  		g.ResetTransform ();  	}  	DrawConnectors (shape' g' pen' brush' direction' connectorType);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  	if (direction == DiagramLayoutDirection.Vertical) {  		endPoint.Y = shape.Top;  		endPoint.X = shape.Left + (shape.Width / 2);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		endPoint.Y = shape.Top + (shape.Height / 2);  		endPoint.X = shape.Left;  	}  	switch (connectorType) {  	case DiagramConnectorType.Standard:  		g.DrawLine (pen' startPoint' endPoint);  		break;  	case DiagramConnectorType.Bezier:  		Point pt1 = Point.Empty;  		Point pt2 = Point.Empty;  		if (direction == DiagramLayoutDirection.Vertical) {  			pt1 = new Point (startPoint.X' startPoint.Y + 20);  			pt2 = new Point (endPoint.X' endPoint.Y - 20);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			pt1 = new Point (startPoint.X + 20' startPoint.Y);  			pt2 = new Point (endPoint.X - 20' endPoint.Y);  		}  		g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  		break;  	}  	// Draw arrows  	if (drawArrows) {  		Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  		float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  		if (connectorType == DiagramConnectorType.Bezier) {  			if (direction == DiagramLayoutDirection.Horizontal)  				angle *= 0.5f;  			else  				angle = 90.0f + (angle - 90.0f) * 0.5f;  		}  		g.TranslateTransform (endPoint.X' endPoint.Y);  		g.RotateTransform (angle);  		g.FillPath (brush' arrowPath);  		g.ResetTransform ();  	}  	DrawConnectors (shape' g' pen' brush' direction' connectorType);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  	if (direction == DiagramLayoutDirection.Vertical) {  		endPoint.Y = shape.Top;  		endPoint.X = shape.Left + (shape.Width / 2);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		endPoint.Y = shape.Top + (shape.Height / 2);  		endPoint.X = shape.Left;  	}  	switch (connectorType) {  	case DiagramConnectorType.Standard:  		g.DrawLine (pen' startPoint' endPoint);  		break;  	case DiagramConnectorType.Bezier:  		Point pt1 = Point.Empty;  		Point pt2 = Point.Empty;  		if (direction == DiagramLayoutDirection.Vertical) {  			pt1 = new Point (startPoint.X' startPoint.Y + 20);  			pt2 = new Point (endPoint.X' endPoint.Y - 20);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			pt1 = new Point (startPoint.X + 20' startPoint.Y);  			pt2 = new Point (endPoint.X - 20' endPoint.Y);  		}  		g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  		break;  	}  	// Draw arrows  	if (drawArrows) {  		Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  		float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  		if (connectorType == DiagramConnectorType.Bezier) {  			if (direction == DiagramLayoutDirection.Horizontal)  				angle *= 0.5f;  			else  				angle = 90.0f + (angle - 90.0f) * 0.5f;  		}  		g.TranslateTransform (endPoint.X' endPoint.Y);  		g.RotateTransform (angle);  		g.FillPath (brush' arrowPath);  		g.ResetTransform ();  	}  	DrawConnectors (shape' g' pen' brush' direction' connectorType);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  	if (direction == DiagramLayoutDirection.Vertical) {  		endPoint.Y = shape.Top;  		endPoint.X = shape.Left + (shape.Width / 2);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		endPoint.Y = shape.Top + (shape.Height / 2);  		endPoint.X = shape.Left;  	}  	switch (connectorType) {  	case DiagramConnectorType.Standard:  		g.DrawLine (pen' startPoint' endPoint);  		break;  	case DiagramConnectorType.Bezier:  		Point pt1 = Point.Empty;  		Point pt2 = Point.Empty;  		if (direction == DiagramLayoutDirection.Vertical) {  			pt1 = new Point (startPoint.X' startPoint.Y + 20);  			pt2 = new Point (endPoint.X' endPoint.Y - 20);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			pt1 = new Point (startPoint.X + 20' startPoint.Y);  			pt2 = new Point (endPoint.X - 20' endPoint.Y);  		}  		g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  		break;  	}  	// Draw arrows  	if (drawArrows) {  		Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  		float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  		if (connectorType == DiagramConnectorType.Bezier) {  			if (direction == DiagramLayoutDirection.Horizontal)  				angle *= 0.5f;  			else  				angle = 90.0f + (angle - 90.0f) * 0.5f;  		}  		g.TranslateTransform (endPoint.X' endPoint.Y);  		g.RotateTransform (angle);  		g.FillPath (brush' arrowPath);  		g.ResetTransform ();  	}  	DrawConnectors (shape' g' pen' brush' direction' connectorType);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  	if (direction == DiagramLayoutDirection.Vertical) {  		endPoint.Y = shape.Top;  		endPoint.X = shape.Left + (shape.Width / 2);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		endPoint.Y = shape.Top + (shape.Height / 2);  		endPoint.X = shape.Left;  	}  	switch (connectorType) {  	case DiagramConnectorType.Standard:  		g.DrawLine (pen' startPoint' endPoint);  		break;  	case DiagramConnectorType.Bezier:  		Point pt1 = Point.Empty;  		Point pt2 = Point.Empty;  		if (direction == DiagramLayoutDirection.Vertical) {  			pt1 = new Point (startPoint.X' startPoint.Y + 20);  			pt2 = new Point (endPoint.X' endPoint.Y - 20);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			pt1 = new Point (startPoint.X + 20' startPoint.Y);  			pt2 = new Point (endPoint.X - 20' endPoint.Y);  		}  		g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  		break;  	}  	// Draw arrows  	if (drawArrows) {  		Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  		float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  		if (connectorType == DiagramConnectorType.Bezier) {  			if (direction == DiagramLayoutDirection.Horizontal)  				angle *= 0.5f;  			else  				angle = 90.0f + (angle - 90.0f) * 0.5f;  		}  		g.TranslateTransform (endPoint.X' endPoint.Y);  		g.RotateTransform (angle);  		g.FillPath (brush' arrowPath);  		g.ResetTransform ();  	}  	DrawConnectors (shape' g' pen' brush' direction' connectorType);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: foreach (DiagramShapeControlBase shape in parentShape.childShapes) {  	if (direction == DiagramLayoutDirection.Vertical) {  		endPoint.Y = shape.Top;  		endPoint.X = shape.Left + (shape.Width / 2);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		endPoint.Y = shape.Top + (shape.Height / 2);  		endPoint.X = shape.Left;  	}  	switch (connectorType) {  	case DiagramConnectorType.Standard:  		g.DrawLine (pen' startPoint' endPoint);  		break;  	case DiagramConnectorType.Bezier:  		Point pt1 = Point.Empty;  		Point pt2 = Point.Empty;  		if (direction == DiagramLayoutDirection.Vertical) {  			pt1 = new Point (startPoint.X' startPoint.Y + 20);  			pt2 = new Point (endPoint.X' endPoint.Y - 20);  		}  		else if (direction == DiagramLayoutDirection.Horizontal) {  			pt1 = new Point (startPoint.X + 20' startPoint.Y);  			pt2 = new Point (endPoint.X - 20' endPoint.Y);  		}  		g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  		break;  	}  	// Draw arrows  	if (drawArrows) {  		Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  		float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  		if (connectorType == DiagramConnectorType.Bezier) {  			if (direction == DiagramLayoutDirection.Horizontal)  				angle *= 0.5f;  			else  				angle = 90.0f + (angle - 90.0f) * 0.5f;  		}  		g.TranslateTransform (endPoint.X' endPoint.Y);  		g.RotateTransform (angle);  		g.FillPath (brush' arrowPath);  		g.ResetTransform ();  	}  	DrawConnectors (shape' g' pen' brush' direction' connectorType);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	endPoint.Y = shape.Top;  	endPoint.X = shape.Left + (shape.Width / 2);  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	endPoint.Y = shape.Top + (shape.Height / 2);  	endPoint.X = shape.Left;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	endPoint.Y = shape.Top;  	endPoint.X = shape.Left + (shape.Width / 2);  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	endPoint.Y = shape.Top + (shape.Height / 2);  	endPoint.X = shape.Left;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: endPoint.X = shape.Left + (shape.Width / 2);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Horizontal) {  	endPoint.Y = shape.Top + (shape.Height / 2);  	endPoint.X = shape.Left;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: endPoint.Y = shape.Top + (shape.Height / 2);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: switch (connectorType) {  case DiagramConnectorType.Standard:  	g.DrawLine (pen' startPoint' endPoint);  	break;  case DiagramConnectorType.Bezier:  	Point pt1 = Point.Empty;  	Point pt2 = Point.Empty;  	if (direction == DiagramLayoutDirection.Vertical) {  		pt1 = new Point (startPoint.X' startPoint.Y + 20);  		pt2 = new Point (endPoint.X' endPoint.Y - 20);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		pt1 = new Point (startPoint.X + 20' startPoint.Y);  		pt2 = new Point (endPoint.X - 20' endPoint.Y);  	}  	g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  	break;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: switch (connectorType) {  case DiagramConnectorType.Standard:  	g.DrawLine (pen' startPoint' endPoint);  	break;  case DiagramConnectorType.Bezier:  	Point pt1 = Point.Empty;  	Point pt2 = Point.Empty;  	if (direction == DiagramLayoutDirection.Vertical) {  		pt1 = new Point (startPoint.X' startPoint.Y + 20);  		pt2 = new Point (endPoint.X' endPoint.Y - 20);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		pt1 = new Point (startPoint.X + 20' startPoint.Y);  		pt2 = new Point (endPoint.X - 20' endPoint.Y);  	}  	g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  	break;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: switch (connectorType) {  case DiagramConnectorType.Standard:  	g.DrawLine (pen' startPoint' endPoint);  	break;  case DiagramConnectorType.Bezier:  	Point pt1 = Point.Empty;  	Point pt2 = Point.Empty;  	if (direction == DiagramLayoutDirection.Vertical) {  		pt1 = new Point (startPoint.X' startPoint.Y + 20);  		pt2 = new Point (endPoint.X' endPoint.Y - 20);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		pt1 = new Point (startPoint.X + 20' startPoint.Y);  		pt2 = new Point (endPoint.X - 20' endPoint.Y);  	}  	g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  	break;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: switch (connectorType) {  case DiagramConnectorType.Standard:  	g.DrawLine (pen' startPoint' endPoint);  	break;  case DiagramConnectorType.Bezier:  	Point pt1 = Point.Empty;  	Point pt2 = Point.Empty;  	if (direction == DiagramLayoutDirection.Vertical) {  		pt1 = new Point (startPoint.X' startPoint.Y + 20);  		pt2 = new Point (endPoint.X' endPoint.Y - 20);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		pt1 = new Point (startPoint.X + 20' startPoint.Y);  		pt2 = new Point (endPoint.X - 20' endPoint.Y);  	}  	g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  	break;  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	pt1 = new Point (startPoint.X' startPoint.Y + 20);  	pt2 = new Point (endPoint.X' endPoint.Y - 20);  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	pt1 = new Point (startPoint.X + 20' startPoint.Y);  	pt2 = new Point (endPoint.X - 20' endPoint.Y);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	pt1 = new Point (startPoint.X' startPoint.Y + 20);  	pt2 = new Point (endPoint.X' endPoint.Y - 20);  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	pt1 = new Point (startPoint.X + 20' startPoint.Y);  	pt2 = new Point (endPoint.X - 20' endPoint.Y);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	pt1 = new Point (startPoint.X' startPoint.Y + 20);  	pt2 = new Point (endPoint.X' endPoint.Y - 20);  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	pt1 = new Point (startPoint.X + 20' startPoint.Y);  	pt2 = new Point (endPoint.X - 20' endPoint.Y);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Vertical) {  	pt1 = new Point (startPoint.X' startPoint.Y + 20);  	pt2 = new Point (endPoint.X' endPoint.Y - 20);  }  else if (direction == DiagramLayoutDirection.Horizontal) {  	pt1 = new Point (startPoint.X + 20' startPoint.Y);  	pt2 = new Point (endPoint.X - 20' endPoint.Y);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: pt1 = new Point (startPoint.X' startPoint.Y + 20);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: pt2 = new Point (endPoint.X' endPoint.Y - 20);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Horizontal) {  	pt1 = new Point (startPoint.X + 20' startPoint.Y);  	pt2 = new Point (endPoint.X - 20' endPoint.Y);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (direction == DiagramLayoutDirection.Horizontal) {  	pt1 = new Point (startPoint.X + 20' startPoint.Y);  	pt2 = new Point (endPoint.X - 20' endPoint.Y);  }  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: pt1 = new Point (startPoint.X + 20' startPoint.Y);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: pt2 = new Point (endPoint.X - 20' endPoint.Y);  
Magic Number,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following statement contains a magic number: if (drawArrows) {  	Point anglePoint = new Point (endPoint.X - startPoint.X' endPoint.Y - startPoint.Y);  	float angle = (float)(Math.Atan2 (anglePoint.Y' anglePoint.X) * (180.0 / Math.PI));  	if (connectorType == DiagramConnectorType.Bezier) {  		if (direction == DiagramLayoutDirection.Horizontal)  			angle *= 0.5f;  		else  			angle = 90.0f + (angle - 90.0f) * 0.5f;  	}  	g.TranslateTransform (endPoint.X' endPoint.Y);  	g.RotateTransform (angle);  	g.FillPath (brush' arrowPath);  	g.ResetTransform ();  }  
Missing Default,Controls.Diagram,DiagramControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls.Diagram\DiagramControl.cs,DrawConnectors,The following switch statement is missing a default case: switch (connectorType) {  case DiagramConnectorType.Standard:  	g.DrawLine (pen' startPoint' endPoint);  	break;  case DiagramConnectorType.Bezier:  	Point pt1 = Point.Empty;  	Point pt2 = Point.Empty;  	if (direction == DiagramLayoutDirection.Vertical) {  		pt1 = new Point (startPoint.X' startPoint.Y + 20);  		pt2 = new Point (endPoint.X' endPoint.Y - 20);  	}  	else if (direction == DiagramLayoutDirection.Horizontal) {  		pt1 = new Point (startPoint.X + 20' startPoint.Y);  		pt2 = new Point (endPoint.X - 20' endPoint.Y);  	}  	g.DrawBezier (pen' startPoint' pt1' pt2' endPoint);  	break;  }  
