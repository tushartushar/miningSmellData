Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WOSI.Utilities,EndpointVolume,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SoundUtils.cs,EndpointVolume,Cyclomatic complexity of the method is 8
Complex Method,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetProperSortText,Cyclomatic complexity of the method is 9
Complex Method,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,ConvertStringToPhoneNumberString,Cyclomatic complexity of the method is 66
Complex Method,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,MouseHookProc,Cyclomatic complexity of the method is 12
Complex Method,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,Cyclomatic complexity of the method is 9
Long Parameter List,WOSI.Utilities,EmailUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\EmailUtils.cs,SendEmail,The method has 9 parameters.
Long Parameter List,WOSI.Utilities,EmailUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\EmailUtils.cs,SendEmailAsync,The method has 10 parameters.
Long Parameter List,WOSI.Utilities,EmailUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\EmailUtils.cs,SendEmailAsync,The method has 12 parameters.
Long Parameter List,WOSI.Utilities,ProcessUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ProcessUtils.cs,CreateProcessAsUser,The method has 11 parameters.
Long Parameter List,WOSI.Utilities,ProcessUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ProcessUtils.cs,DuplicateTokenEx,The method has 6 parameters.
Long Parameter List,WOSI.Utilities,ProcessUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ProcessUtils.cs,LogonUser,The method has 6 parameters.
Long Parameter List,WOSI.Utilities,SoundUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SoundUtils.cs,mixerOpen,The method has 5 parameters.
Long Parameter List,WOSI.Utilities,EndpointVolume,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SoundUtils.cs,CoCreateInstance,The method has 5 parameters.
Long Parameter List,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,ToAscii,The method has 5 parameters.
Long Parameter List,WOSI.Utilities,TimeZoneInfo,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,TimeZoneInfo,The method has 5 parameters.
Long Statement,WOSI.Utilities,ApplicationSettings,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ApplicationSettings.cs,GetSetting,The length of the statement  "			ApplicationSettingsDataset.SettingRow[] settingRows = (ApplicationSettingsDataset.SettingRow[])appSettingsDataset.Setting.Select ("GroupName = '" + settingGroup + "' AND Name = '" + settingName + "'"); " is 201.
Long Statement,WOSI.Utilities,ApplicationSettings,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ApplicationSettings.cs,SetSetting,The length of the statement  "		ApplicationSettingsDataset.SettingsGroupRow settingsGroup = appSettingsDataset.SettingsGroup.FindByGroupName (settingGroup); " is 124.
Long Statement,WOSI.Utilities,ApplicationSettings,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ApplicationSettings.cs,SetSetting,The length of the statement  "		ApplicationSettingsDataset.SettingRow[] settings = (ApplicationSettingsDataset.SettingRow[])appSettingsDataset.Setting.Select ("GroupName = '" + settingGroup + "' AND Name = '" + settingName + "'"); " is 198.
Long Statement,WOSI.Utilities,ApplicationSettings,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ApplicationSettings.cs,AddRecentlyUsedFile,The length of the statement  "	ApplicationSettingsDataset.RecentlyUsedFilesRow existingFilename = appSettingsDataset.RecentlyUsedFiles.FindByFilename (filename); " is 130.
Long Statement,WOSI.Utilities,ApplicationSettingsDataset,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ApplicationSettingsDataset.Designer.cs,InitClass,The length of the statement  "	this.relationSettingsGroup_Setting = new global::System.Data.DataRelation ("SettingsGroup_Setting"' new global::System.Data.DataColumn[] { " is 138.
Long Statement,WOSI.Utilities,ApplicationSettingsDataset,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ApplicationSettingsDataset.Designer.cs,GetTypedDataSetSchema,The length of the statement  "			for (global::System.Collections.IEnumerator schemas = xs.Schemas (dsSchema.TargetNamespace).GetEnumerator (); schemas.MoveNext ();) { " is 133.
Long Statement,WOSI.Utilities,WOSISettingsProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ConfigurationUtils.cs,GetPropertyValues,The length of the statement  "	string settingsFile = string.Format ("{0}\\{1}.settings"' Utilities.FileUtils.GetApplicationRelativePath ("")' ApplicationName); " is 128.
Long Statement,WOSI.Utilities,WOSISettingsProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ConfigurationUtils.cs,SetPropertyValues,The length of the statement  "	XmlTextWriter writer = new XmlTextWriter (string.Format ("{0}\\{1}.settings"' Utilities.FileUtils.GetApplicationRelativePath ("")' ApplicationName)' Encoding.UTF8); " is 164.
Long Statement,WOSI.Utilities,EncryptedResource,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\EncryptedResource.cs,LoadResourceFile,The length of the statement  "	/*System.IO.Compression.GZipStream zipStream = new System.IO.Compression.GZipStream(memStream' System.IO.Compression.CompressionMode.Decompress);" is 145.
Long Statement,WOSI.Utilities,EncryptedResource,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\EncryptedResource.cs,CreateResourceFile,The length of the statement  "            System.IO.Compression.GZipStream zipStream = new System.IO.Compression.GZipStream(zippedMemStream' System.IO.Compression.CompressionMode.Compress);" is 147.
Long Statement,WOSI.Utilities,EncryptedResource,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\EncryptedResource.cs,CreateResourceFile,The length of the statement  "            resourceBytes = Utilities.CryptoUtils.Encrypt(FileUtils.GetStreamBytes(zippedMemStream)' "asdlfa9sd879*Lasldflkajsdf243o8729");" is 127.
Long Statement,WOSI.Utilities,ImageUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ImageUtils.cs,CreateThumbnailImage,The length of the statement  "			g.DrawImage (image' new Rectangle (0' 0' newImage.Width' newImage.Height)' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel); " is 148.
Long Statement,WOSI.Utilities,ObjectUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ObjectUtils.cs,Clone,The length of the statement  "				property.SetValue (dataObject' objectToClone.GetType ().GetProperty (property.Name).GetValue (objectToClone' null)' null); " is 122.
Long Statement,WOSI.Utilities,ProcessUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ProcessUtils.cs,CreateProcessAsUser,The length of the statement  "		bool result = LogonUser (username' domain' password' (int)LOGON32_LOGON_INTERACTIVE' (int)LOGON32_PROVIDER_DEFAULT' ref hToken); " is 128.
Long Statement,WOSI.Utilities,ProcessUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ProcessUtils.cs,CreateProcessAsUser,The length of the statement  "		result = DuplicateTokenEx (hToken' GENERIC_ALL_ACCESS' ref sa' (int)SECURITY_IMPERSONATION_LEVEL.SecurityIdentification' (int)TOKEN_TYPE.TokenPrimary' ref hDupedToken); " is 168.
Long Statement,WOSI.Utilities,ProcessUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ProcessUtils.cs,CreateProcessAsUser,The length of the statement  "		result = CreateProcessAsUser (hDupedToken' null' commandLine' ref sa' ref sa' false' 0x00000400' lpEnvironment' null' ref si' ref pi); " is 134.
Long Statement,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The length of the statement  "	if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) { " is 195.
Long Statement,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The length of the statement  "	if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) { " is 195.
Long Statement,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The length of the statement  "		outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4); " is 128.
Long Statement,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The length of the statement  "		outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4); " is 161.
Long Statement,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,Start,The length of the statement  "		hMouseHook = SetWindowsHookEx (WH_MOUSE_LL' MouseHookProcedure' Marshal.GetHINSTANCE (Assembly.GetExecutingAssembly ().GetModules () [0])' 0); " is 142.
Long Statement,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,Start,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,Start,The length of the statement  "		hKeyboardHook = SetWindowsHookEx (WH_KEYBOARD_LL' KeyboardHookProcedure' Marshal.GetHINSTANCE (Assembly.GetExecutingAssembly ().GetModules () [0])' 0); " is 151.
Long Statement,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,Start,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,Stop,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,Stop,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,KeyboardHookProc,The length of the statement  "		KeyboardHookStruct MyKeyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct)); " is 122.
Long Statement,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,KeyboardHookProc,The length of the statement  "			if (ToAscii (MyKeyboardHookStruct.vkCode' MyKeyboardHookStruct.scanCode' keyState' inBuffer' MyKeyboardHookStruct.flags) == 1) { " is 128.
Complex Conditional,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,KeyboardHookProc,The conditional expression  "(nCode >= 0) && (KeyDown != null || KeyUp != null || KeyPress != null)"  is complex.
Empty Catch Block,WOSI.Utilities,ApplicationSettings,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ApplicationSettings.cs,GetSetting,The method has an empty catch block.
Empty Catch Block,WOSI.Utilities,ApplicationSettings,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ApplicationSettings.cs,GetRecentlyUsedFiles,The method has an empty catch block.
Empty Catch Block,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Decrypt,The method has an empty catch block.
Empty Catch Block,WOSI.Utilities,FileUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\FileUtils.cs,GetStreamBytes,The method has an empty catch block.
Empty Catch Block,WOSI.Utilities,NetworkUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\NetworkUtils.cs,GetHostIPAddress,The method has an empty catch block.
Empty Catch Block,WOSI.Utilities,ObjectUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ObjectUtils.cs,Clone,The method has an empty catch block.
Empty Catch Block,WOSI.Utilities,ObjectUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ObjectUtils.cs,Clone,The method has an empty catch block.
Empty Catch Block,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,IsWellFormedXml,The method has an empty catch block.
Empty Catch Block,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The method has an empty catch block.
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Encrypt,The following statement contains a magic number: return Encrypt (clearData' pdb.GetBytes (32)' pdb.GetBytes (16));  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Encrypt,The following statement contains a magic number: return Encrypt (clearData' pdb.GetBytes (32)' pdb.GetBytes (16));  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Encrypt,The following statement contains a magic number: alg.Key = pdb.GetBytes (32);  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Encrypt,The following statement contains a magic number: alg.IV = pdb.GetBytes (16);  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Decrypt,The following statement contains a magic number: try {  	// First we need to turn the input string into a byte array.   	// We presume that Base64 encoding was used   	byte[] cipherBytes = Convert.FromBase64String (cipherText);  	// Then' we need to turn the password into Key and IV   	// We are using salt to make it harder to guess our key  	// using a dictionary attack -   	// trying to guess a password by enumerating all possible words.   	PasswordDeriveBytes pdb = new PasswordDeriveBytes (Password' new byte[] {  		0x49'  		0x76'  		0x61'  		0x6e'  		0x20'  		0x4d'  		0x65'  		0x64'  		0x76'  		0x65'  		0x64'  		0x65'  		0x76  	});  	// Now get the key/IV and do the decryption using  	// the function that accepts byte arrays.   	// Using PasswordDeriveBytes object we are first  	// getting 32 bytes for the Key   	// (the default Rijndael key length is 256bit = 32bytes)  	// and then 16 bytes for the IV.   	// IV should always be the block size' which is by  	// default 16 bytes (128 bit) for Rijndael.   	// If you are using DES/TripleDES/RC2 the block size is  	// 8 bytes and so should be the IV size.   	// You can also read KeySize/BlockSize properties off  	// the algorithm to find out the sizes.   	byte[] decryptedData = Decrypt (cipherBytes' pdb.GetBytes (32)' pdb.GetBytes (16));  	// Now we need to turn the resulting byte array into a string.   	// A common mistake would be to use an Encoding class for that.  	// It does not work   	// because not all byte values can be represented by characters.   	// We are going to be using Base64 encoding that is   	// designed exactly for what we are trying to do.   	return System.Text.Encoding.Unicode.GetString (decryptedData);  }  catch {  	return null;  }  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Decrypt,The following statement contains a magic number: try {  	// First we need to turn the input string into a byte array.   	// We presume that Base64 encoding was used   	byte[] cipherBytes = Convert.FromBase64String (cipherText);  	// Then' we need to turn the password into Key and IV   	// We are using salt to make it harder to guess our key  	// using a dictionary attack -   	// trying to guess a password by enumerating all possible words.   	PasswordDeriveBytes pdb = new PasswordDeriveBytes (Password' new byte[] {  		0x49'  		0x76'  		0x61'  		0x6e'  		0x20'  		0x4d'  		0x65'  		0x64'  		0x76'  		0x65'  		0x64'  		0x65'  		0x76  	});  	// Now get the key/IV and do the decryption using  	// the function that accepts byte arrays.   	// Using PasswordDeriveBytes object we are first  	// getting 32 bytes for the Key   	// (the default Rijndael key length is 256bit = 32bytes)  	// and then 16 bytes for the IV.   	// IV should always be the block size' which is by  	// default 16 bytes (128 bit) for Rijndael.   	// If you are using DES/TripleDES/RC2 the block size is  	// 8 bytes and so should be the IV size.   	// You can also read KeySize/BlockSize properties off  	// the algorithm to find out the sizes.   	byte[] decryptedData = Decrypt (cipherBytes' pdb.GetBytes (32)' pdb.GetBytes (16));  	// Now we need to turn the resulting byte array into a string.   	// A common mistake would be to use an Encoding class for that.  	// It does not work   	// because not all byte values can be represented by characters.   	// We are going to be using Base64 encoding that is   	// designed exactly for what we are trying to do.   	return System.Text.Encoding.Unicode.GetString (decryptedData);  }  catch {  	return null;  }  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Decrypt,The following statement contains a magic number: return Decrypt (cipherData' pdb.GetBytes (32)' pdb.GetBytes (16));  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Decrypt,The following statement contains a magic number: return Decrypt (cipherData' pdb.GetBytes (32)' pdb.GetBytes (16));  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Decrypt,The following statement contains a magic number: try {  	// First we are going to open the file streams   	FileStream fsIn = new FileStream (fileIn' FileMode.Open' FileAccess.Read);  	FileStream fsOut = new FileStream (fileOut' FileMode.OpenOrCreate' FileAccess.Write);  	// Then we are going to derive a Key and an IV from  	// the Password and create an algorithm   	PasswordDeriveBytes pdb = new PasswordDeriveBytes (Password' new byte[] {  		0x49'  		0x76'  		0x61'  		0x6e'  		0x20'  		0x4d'  		0x65'  		0x64'  		0x76'  		0x65'  		0x64'  		0x65'  		0x76  	});  	Rijndael alg = Rijndael.Create ();  	alg.Key = pdb.GetBytes (32);  	alg.IV = pdb.GetBytes (16);  	// Now create a crypto stream through which we are going  	// to be pumping data.   	// Our fileOut is going to be receiving the Decrypted bytes.   	CryptoStream cs = new CryptoStream (fsOut' alg.CreateDecryptor ()' CryptoStreamMode.Write);  	// Now will will initialize a buffer and will be   	// processing the input file in chunks.   	// This is done to avoid reading the whole file (which can be  	// huge) into memory.   	int bufferLen = 4096;  	byte[] buffer = new byte[bufferLen];  	int bytesRead;  	do {  		// read a chunk of data from the input file   		bytesRead = fsIn.Read (buffer' 0' bufferLen);  		// Decrypt it   		cs.Write (buffer' 0' bytesRead);  	}  	while (bytesRead != 0);  	// close everything   	cs.Close ();  	// this will also close the unrelying fsOut stream   	fsIn.Close ();  }  catch {  }  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Decrypt,The following statement contains a magic number: try {  	// First we are going to open the file streams   	FileStream fsIn = new FileStream (fileIn' FileMode.Open' FileAccess.Read);  	FileStream fsOut = new FileStream (fileOut' FileMode.OpenOrCreate' FileAccess.Write);  	// Then we are going to derive a Key and an IV from  	// the Password and create an algorithm   	PasswordDeriveBytes pdb = new PasswordDeriveBytes (Password' new byte[] {  		0x49'  		0x76'  		0x61'  		0x6e'  		0x20'  		0x4d'  		0x65'  		0x64'  		0x76'  		0x65'  		0x64'  		0x65'  		0x76  	});  	Rijndael alg = Rijndael.Create ();  	alg.Key = pdb.GetBytes (32);  	alg.IV = pdb.GetBytes (16);  	// Now create a crypto stream through which we are going  	// to be pumping data.   	// Our fileOut is going to be receiving the Decrypted bytes.   	CryptoStream cs = new CryptoStream (fsOut' alg.CreateDecryptor ()' CryptoStreamMode.Write);  	// Now will will initialize a buffer and will be   	// processing the input file in chunks.   	// This is done to avoid reading the whole file (which can be  	// huge) into memory.   	int bufferLen = 4096;  	byte[] buffer = new byte[bufferLen];  	int bytesRead;  	do {  		// read a chunk of data from the input file   		bytesRead = fsIn.Read (buffer' 0' bufferLen);  		// Decrypt it   		cs.Write (buffer' 0' bytesRead);  	}  	while (bytesRead != 0);  	// close everything   	cs.Close ();  	// this will also close the unrelying fsOut stream   	fsIn.Close ();  }  catch {  }  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Decrypt,The following statement contains a magic number: try {  	// First we are going to open the file streams   	FileStream fsIn = new FileStream (fileIn' FileMode.Open' FileAccess.Read);  	FileStream fsOut = new FileStream (fileOut' FileMode.OpenOrCreate' FileAccess.Write);  	// Then we are going to derive a Key and an IV from  	// the Password and create an algorithm   	PasswordDeriveBytes pdb = new PasswordDeriveBytes (Password' new byte[] {  		0x49'  		0x76'  		0x61'  		0x6e'  		0x20'  		0x4d'  		0x65'  		0x64'  		0x76'  		0x65'  		0x64'  		0x65'  		0x76  	});  	Rijndael alg = Rijndael.Create ();  	alg.Key = pdb.GetBytes (32);  	alg.IV = pdb.GetBytes (16);  	// Now create a crypto stream through which we are going  	// to be pumping data.   	// Our fileOut is going to be receiving the Decrypted bytes.   	CryptoStream cs = new CryptoStream (fsOut' alg.CreateDecryptor ()' CryptoStreamMode.Write);  	// Now will will initialize a buffer and will be   	// processing the input file in chunks.   	// This is done to avoid reading the whole file (which can be  	// huge) into memory.   	int bufferLen = 4096;  	byte[] buffer = new byte[bufferLen];  	int bytesRead;  	do {  		// read a chunk of data from the input file   		bytesRead = fsIn.Read (buffer' 0' bufferLen);  		// Decrypt it   		cs.Write (buffer' 0' bytesRead);  	}  	while (bytesRead != 0);  	// close everything   	cs.Close ();  	// this will also close the unrelying fsOut stream   	fsIn.Close ();  }  catch {  }  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Decrypt,The following statement contains a magic number: alg.Key = pdb.GetBytes (32);  
Magic Number,WOSI.Utilities,CryptoUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\CryptoUtils.cs,Decrypt,The following statement contains a magic number: alg.IV = pdb.GetBytes (16);  
Magic Number,WOSI.Utilities,EventUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\EventUtils.cs,FireSyncEvent,The following statement contains a magic number: if (eventDelegate != null) {  	object[] argsObj = new object[2];  	argsObj [0] = sender;  	argsObj [1] = args;  	Delegate[] delegates = eventDelegate.GetInvocationList ();  	foreach (Delegate sink in delegates) {  		//try  		//{  		InvokeDelegate (sink' argsObj);  		//}  		//catch  		//{ }  	}  }  
Magic Number,WOSI.Utilities,EventUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\EventUtils.cs,FireAsyncEvent,The following statement contains a magic number: if (eventDelegate != null) {  	object[] argsObj = new object[2];  	argsObj [0] = sender;  	argsObj [1] = args;  	Delegate[] delegates = eventDelegate.GetInvocationList ();  	AsyncInvokeDelegate invoker = new AsyncInvokeDelegate (InvokeDelegate);  	AsyncCallback cleanUp = new AsyncCallback (AsyncDelegateCleanup);  	foreach (Delegate sink in delegates) {  		invoker.BeginInvoke (sink' argsObj' cleanUp' null);  	}  }  
Magic Number,WOSI.Utilities,ImageUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ImageUtils.cs,CreateThumbnailImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (newImage)) {  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	if (center && image.Width != image.Height) {  		Rectangle srcRect = new Rectangle ();  		if (image.Width > image.Height) {  			srcRect.Width = image.Height;  			srcRect.Height = image.Height;  			srcRect.X = (image.Width - image.Height) / 2;  			srcRect.Y = 0;  		}  		else {  			srcRect.Width = image.Width;  			srcRect.Height = image.Width;  			srcRect.Y = (image.Height - image.Width) / 2;  			srcRect.X = 0;  		}  		g.DrawImage (image' new Rectangle (0' 0' newImage.Width' newImage.Height)' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel);  	}  	else {  		g.DrawImage (image' 0' 0' width' height);  	}  }  
Magic Number,WOSI.Utilities,ImageUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ImageUtils.cs,CreateThumbnailImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (newImage)) {  	g.InterpolationMode = InterpolationMode.HighQualityBicubic;  	if (center && image.Width != image.Height) {  		Rectangle srcRect = new Rectangle ();  		if (image.Width > image.Height) {  			srcRect.Width = image.Height;  			srcRect.Height = image.Height;  			srcRect.X = (image.Width - image.Height) / 2;  			srcRect.Y = 0;  		}  		else {  			srcRect.Width = image.Width;  			srcRect.Height = image.Width;  			srcRect.Y = (image.Height - image.Width) / 2;  			srcRect.X = 0;  		}  		g.DrawImage (image' new Rectangle (0' 0' newImage.Width' newImage.Height)' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel);  	}  	else {  		g.DrawImage (image' 0' 0' width' height);  	}  }  
Magic Number,WOSI.Utilities,ImageUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ImageUtils.cs,CreateThumbnailImage,The following statement contains a magic number: if (center && image.Width != image.Height) {  	Rectangle srcRect = new Rectangle ();  	if (image.Width > image.Height) {  		srcRect.Width = image.Height;  		srcRect.Height = image.Height;  		srcRect.X = (image.Width - image.Height) / 2;  		srcRect.Y = 0;  	}  	else {  		srcRect.Width = image.Width;  		srcRect.Height = image.Width;  		srcRect.Y = (image.Height - image.Width) / 2;  		srcRect.X = 0;  	}  	g.DrawImage (image' new Rectangle (0' 0' newImage.Width' newImage.Height)' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel);  }  else {  	g.DrawImage (image' 0' 0' width' height);  }  
Magic Number,WOSI.Utilities,ImageUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ImageUtils.cs,CreateThumbnailImage,The following statement contains a magic number: if (center && image.Width != image.Height) {  	Rectangle srcRect = new Rectangle ();  	if (image.Width > image.Height) {  		srcRect.Width = image.Height;  		srcRect.Height = image.Height;  		srcRect.X = (image.Width - image.Height) / 2;  		srcRect.Y = 0;  	}  	else {  		srcRect.Width = image.Width;  		srcRect.Height = image.Width;  		srcRect.Y = (image.Height - image.Width) / 2;  		srcRect.X = 0;  	}  	g.DrawImage (image' new Rectangle (0' 0' newImage.Width' newImage.Height)' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel);  }  else {  	g.DrawImage (image' 0' 0' width' height);  }  
Magic Number,WOSI.Utilities,ImageUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ImageUtils.cs,CreateThumbnailImage,The following statement contains a magic number: if (image.Width > image.Height) {  	srcRect.Width = image.Height;  	srcRect.Height = image.Height;  	srcRect.X = (image.Width - image.Height) / 2;  	srcRect.Y = 0;  }  else {  	srcRect.Width = image.Width;  	srcRect.Height = image.Width;  	srcRect.Y = (image.Height - image.Width) / 2;  	srcRect.X = 0;  }  
Magic Number,WOSI.Utilities,ImageUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ImageUtils.cs,CreateThumbnailImage,The following statement contains a magic number: if (image.Width > image.Height) {  	srcRect.Width = image.Height;  	srcRect.Height = image.Height;  	srcRect.X = (image.Width - image.Height) / 2;  	srcRect.Y = 0;  }  else {  	srcRect.Width = image.Width;  	srcRect.Height = image.Width;  	srcRect.Y = (image.Height - image.Width) / 2;  	srcRect.X = 0;  }  
Magic Number,WOSI.Utilities,ImageUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ImageUtils.cs,CreateThumbnailImage,The following statement contains a magic number: srcRect.X = (image.Width - image.Height) / 2;  
Magic Number,WOSI.Utilities,ImageUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\ImageUtils.cs,CreateThumbnailImage,The following statement contains a magic number: srcRect.Y = (image.Height - image.Width) / 2;  
Magic Number,WOSI.Utilities,NetworkUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\NetworkUtils.cs,ParseHostString,The following statement contains a magic number: if (hostString.Contains (":")) {  	string[] hostParts = hostString.Split (':');  	if (hostParts.Length == 2) {  		hostName = hostParts [0];  		int.TryParse (hostParts [1]' out port);  	}  }  
Magic Number,WOSI.Utilities,NetworkUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\NetworkUtils.cs,ParseHostString,The following statement contains a magic number: if (hostParts.Length == 2) {  	hostName = hostParts [0];  	int.TryParse (hostParts [1]' out port);  }  
Magic Number,WOSI.Utilities,SoundUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SoundUtils.cs,Mute,The following statement contains a magic number: if (System.Environment.OSVersion.Version.Major >= 6) {  	EndpointVolume epVol = new EndpointVolume ();  	epVol.Mute = mute;  	epVol.Dispose ();  }  else {  	int mixerID = 0;  	if (mixerOpen (out mixerID' 0' 0' 0' 0) == MMSYSERR_NOERROR) {  		MIXERLINE line = new MIXERLINE ();  		line.cbStruct = Marshal.SizeOf (line);  		line.dwComponentType = MIXERLINE_COMPONENTTYPE_DST_SPEAKERS;  		if (mixerGetLineInfoA (mixerID' ref line' MIXER_GETLINEINFOF_COMPONENTTYPE) == MMSYSERR_NOERROR) {  			int sizeofMIXERCONTROL = 152;  			MIXERCONTROL mixerControl = new MIXERCONTROL ();  			MIXERLINECONTROLS lineControl = new MIXERLINECONTROLS ();  			lineControl.pamxctrl = Marshal.AllocCoTaskMem (sizeofMIXERCONTROL);  			lineControl.cbStruct = Marshal.SizeOf (lineControl);  			lineControl.dwLineID = line.dwLineID;  			lineControl.dwControl = MIXERCONTROL_CONTROLTYPE_MUTE;  			lineControl.cControls = 1;  			lineControl.cbmxctrl = sizeofMIXERCONTROL;  			mixerControl.cbStruct = sizeofMIXERCONTROL;  			if (mixerGetLineControlsA (mixerID' ref lineControl' MIXER_GETLINECONTROLSF_ONEBYTYPE) == MMSYSERR_NOERROR) {  				mixerControl = (MIXERCONTROL)Marshal.PtrToStructure (lineControl.pamxctrl' typeof(MIXERCONTROL));  				MIXERCONTROLDETAILS controlDetails = new MIXERCONTROLDETAILS ();  				MIXERCONTROLDETAILS_BOOLEAN muteValue = new MIXERCONTROLDETAILS_BOOLEAN ();  				controlDetails.item = 0;  				controlDetails.dwControlID = mixerControl.dwControlID;  				controlDetails.cbStruct = Marshal.SizeOf (controlDetails);  				controlDetails.cbDetails = Marshal.SizeOf (muteValue);  				controlDetails.cChannels = 1;  				muteValue.dwValue = Convert.ToInt32 (mute);  				controlDetails.paDetails = Marshal.AllocCoTaskMem (Marshal.SizeOf (muteValue));  				Marshal.StructureToPtr (muteValue' controlDetails.paDetails' false);  				int rc = mixerSetControlDetails (mixerID' ref controlDetails' MIXER_SETCONTROLDETAILSF_VALUE);  				Marshal.FreeCoTaskMem (controlDetails.paDetails);  				Marshal.FreeCoTaskMem (lineControl.pamxctrl);  			}  		}  	}  }  
Magic Number,WOSI.Utilities,SoundUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SoundUtils.cs,Mute,The following statement contains a magic number: if (System.Environment.OSVersion.Version.Major >= 6) {  	EndpointVolume epVol = new EndpointVolume ();  	epVol.Mute = mute;  	epVol.Dispose ();  }  else {  	int mixerID = 0;  	if (mixerOpen (out mixerID' 0' 0' 0' 0) == MMSYSERR_NOERROR) {  		MIXERLINE line = new MIXERLINE ();  		line.cbStruct = Marshal.SizeOf (line);  		line.dwComponentType = MIXERLINE_COMPONENTTYPE_DST_SPEAKERS;  		if (mixerGetLineInfoA (mixerID' ref line' MIXER_GETLINEINFOF_COMPONENTTYPE) == MMSYSERR_NOERROR) {  			int sizeofMIXERCONTROL = 152;  			MIXERCONTROL mixerControl = new MIXERCONTROL ();  			MIXERLINECONTROLS lineControl = new MIXERLINECONTROLS ();  			lineControl.pamxctrl = Marshal.AllocCoTaskMem (sizeofMIXERCONTROL);  			lineControl.cbStruct = Marshal.SizeOf (lineControl);  			lineControl.dwLineID = line.dwLineID;  			lineControl.dwControl = MIXERCONTROL_CONTROLTYPE_MUTE;  			lineControl.cControls = 1;  			lineControl.cbmxctrl = sizeofMIXERCONTROL;  			mixerControl.cbStruct = sizeofMIXERCONTROL;  			if (mixerGetLineControlsA (mixerID' ref lineControl' MIXER_GETLINECONTROLSF_ONEBYTYPE) == MMSYSERR_NOERROR) {  				mixerControl = (MIXERCONTROL)Marshal.PtrToStructure (lineControl.pamxctrl' typeof(MIXERCONTROL));  				MIXERCONTROLDETAILS controlDetails = new MIXERCONTROLDETAILS ();  				MIXERCONTROLDETAILS_BOOLEAN muteValue = new MIXERCONTROLDETAILS_BOOLEAN ();  				controlDetails.item = 0;  				controlDetails.dwControlID = mixerControl.dwControlID;  				controlDetails.cbStruct = Marshal.SizeOf (controlDetails);  				controlDetails.cbDetails = Marshal.SizeOf (muteValue);  				controlDetails.cChannels = 1;  				muteValue.dwValue = Convert.ToInt32 (mute);  				controlDetails.paDetails = Marshal.AllocCoTaskMem (Marshal.SizeOf (muteValue));  				Marshal.StructureToPtr (muteValue' controlDetails.paDetails' false);  				int rc = mixerSetControlDetails (mixerID' ref controlDetails' MIXER_SETCONTROLDETAILSF_VALUE);  				Marshal.FreeCoTaskMem (controlDetails.paDetails);  				Marshal.FreeCoTaskMem (lineControl.pamxctrl);  			}  		}  	}  }  
Magic Number,WOSI.Utilities,SoundUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SoundUtils.cs,Mute,The following statement contains a magic number: if (mixerOpen (out mixerID' 0' 0' 0' 0) == MMSYSERR_NOERROR) {  	MIXERLINE line = new MIXERLINE ();  	line.cbStruct = Marshal.SizeOf (line);  	line.dwComponentType = MIXERLINE_COMPONENTTYPE_DST_SPEAKERS;  	if (mixerGetLineInfoA (mixerID' ref line' MIXER_GETLINEINFOF_COMPONENTTYPE) == MMSYSERR_NOERROR) {  		int sizeofMIXERCONTROL = 152;  		MIXERCONTROL mixerControl = new MIXERCONTROL ();  		MIXERLINECONTROLS lineControl = new MIXERLINECONTROLS ();  		lineControl.pamxctrl = Marshal.AllocCoTaskMem (sizeofMIXERCONTROL);  		lineControl.cbStruct = Marshal.SizeOf (lineControl);  		lineControl.dwLineID = line.dwLineID;  		lineControl.dwControl = MIXERCONTROL_CONTROLTYPE_MUTE;  		lineControl.cControls = 1;  		lineControl.cbmxctrl = sizeofMIXERCONTROL;  		mixerControl.cbStruct = sizeofMIXERCONTROL;  		if (mixerGetLineControlsA (mixerID' ref lineControl' MIXER_GETLINECONTROLSF_ONEBYTYPE) == MMSYSERR_NOERROR) {  			mixerControl = (MIXERCONTROL)Marshal.PtrToStructure (lineControl.pamxctrl' typeof(MIXERCONTROL));  			MIXERCONTROLDETAILS controlDetails = new MIXERCONTROLDETAILS ();  			MIXERCONTROLDETAILS_BOOLEAN muteValue = new MIXERCONTROLDETAILS_BOOLEAN ();  			controlDetails.item = 0;  			controlDetails.dwControlID = mixerControl.dwControlID;  			controlDetails.cbStruct = Marshal.SizeOf (controlDetails);  			controlDetails.cbDetails = Marshal.SizeOf (muteValue);  			controlDetails.cChannels = 1;  			muteValue.dwValue = Convert.ToInt32 (mute);  			controlDetails.paDetails = Marshal.AllocCoTaskMem (Marshal.SizeOf (muteValue));  			Marshal.StructureToPtr (muteValue' controlDetails.paDetails' false);  			int rc = mixerSetControlDetails (mixerID' ref controlDetails' MIXER_SETCONTROLDETAILSF_VALUE);  			Marshal.FreeCoTaskMem (controlDetails.paDetails);  			Marshal.FreeCoTaskMem (lineControl.pamxctrl);  		}  	}  }  
Magic Number,WOSI.Utilities,SoundUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SoundUtils.cs,Mute,The following statement contains a magic number: if (mixerGetLineInfoA (mixerID' ref line' MIXER_GETLINEINFOF_COMPONENTTYPE) == MMSYSERR_NOERROR) {  	int sizeofMIXERCONTROL = 152;  	MIXERCONTROL mixerControl = new MIXERCONTROL ();  	MIXERLINECONTROLS lineControl = new MIXERLINECONTROLS ();  	lineControl.pamxctrl = Marshal.AllocCoTaskMem (sizeofMIXERCONTROL);  	lineControl.cbStruct = Marshal.SizeOf (lineControl);  	lineControl.dwLineID = line.dwLineID;  	lineControl.dwControl = MIXERCONTROL_CONTROLTYPE_MUTE;  	lineControl.cControls = 1;  	lineControl.cbmxctrl = sizeofMIXERCONTROL;  	mixerControl.cbStruct = sizeofMIXERCONTROL;  	if (mixerGetLineControlsA (mixerID' ref lineControl' MIXER_GETLINECONTROLSF_ONEBYTYPE) == MMSYSERR_NOERROR) {  		mixerControl = (MIXERCONTROL)Marshal.PtrToStructure (lineControl.pamxctrl' typeof(MIXERCONTROL));  		MIXERCONTROLDETAILS controlDetails = new MIXERCONTROLDETAILS ();  		MIXERCONTROLDETAILS_BOOLEAN muteValue = new MIXERCONTROLDETAILS_BOOLEAN ();  		controlDetails.item = 0;  		controlDetails.dwControlID = mixerControl.dwControlID;  		controlDetails.cbStruct = Marshal.SizeOf (controlDetails);  		controlDetails.cbDetails = Marshal.SizeOf (muteValue);  		controlDetails.cChannels = 1;  		muteValue.dwValue = Convert.ToInt32 (mute);  		controlDetails.paDetails = Marshal.AllocCoTaskMem (Marshal.SizeOf (muteValue));  		Marshal.StructureToPtr (muteValue' controlDetails.paDetails' false);  		int rc = mixerSetControlDetails (mixerID' ref controlDetails' MIXER_SETCONTROLDETAILSF_VALUE);  		Marshal.FreeCoTaskMem (controlDetails.paDetails);  		Marshal.FreeCoTaskMem (lineControl.pamxctrl);  	}  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	return "";  }  else if (numberCount == 7) {  	return "";  }  else if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	return "";  }  else if (numberCount == 7) {  	return "";  }  else if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	return "";  }  else if (numberCount == 7) {  	return "";  }  else if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	return "";  }  else if (numberCount == 7) {  	return "";  }  else if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	return "";  }  else if (numberCount == 7) {  	return "";  }  else if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 7) {  	return "";  }  else if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 7) {  	return "";  }  else if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 7) {  	return "";  }  else if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 7) {  	return "";  }  else if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 7) {  	return "";  }  else if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 10) {  	return numberString.Substring (0' 3);  }  else if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: return numberString.Substring (0' 3);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: if (numberCount == 11) {  	return numberString.Substring (1' 3);  }  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetAreaCode,The following statement contains a magic number: return numberString.Substring (1' 3);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (Regex.IsMatch (inputString' @"(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)")) {  	outputNumber = inputString;  }  else if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 7) {  	outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  }  else if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = numberString.Substring (0' 3) + "-" + numberString.Substring (3' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 10) {  	outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  }  else if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = "(" + numberString.Substring (0' 3) + ") " + numberString.Substring (3' 3) + "-" + numberString.Substring (6' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: if (numberCount == 11) {  	outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  }  else  	outputNumber = inputString;  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  
Magic Number,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,FormatPhoneNumber,The following statement contains a magic number: outputNumber = numberString.Substring (0' 1) + " (" + numberString.Substring (1' 3) + ") " + numberString.Substring (4' 3) + "-" + numberString.Substring (7' 4);  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,MouseHookProc,The following statement contains a magic number: if ((nCode >= 0) && (OnMouseActivity != null)) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		//case WM_LBUTTONUP:   		//case WM_LBUTTONDBLCLK:   		button = MouseButtons.Left;  		break;  	case WM_RBUTTONDOWN:  		//case WM_RBUTTONUP:   		//case WM_RBUTTONDBLCLK:   		button = MouseButtons.Right;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of mouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.mouseData >> 16) & 0xffff);  		//TODO: X BUTTONS (I havent them so was unable to test)  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' mouseData is not used.   		break;  	}  	//double clicks  	int clickCount = 0;  	if (button != MouseButtons.None)  		if (wParam == WM_LBUTTONDBLCLK || wParam == WM_RBUTTONDBLCLK)  			clickCount = 2;  		else  			clickCount = 1;  	//generate event   	MouseEventArgs e = new MouseEventArgs (button' clickCount' mouseHookStruct.pt.x' mouseHookStruct.pt.y' mouseDelta);  	//raise it  	OnMouseActivity (this' e);  }  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,MouseHookProc,The following statement contains a magic number: if ((nCode >= 0) && (OnMouseActivity != null)) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		//case WM_LBUTTONUP:   		//case WM_LBUTTONDBLCLK:   		button = MouseButtons.Left;  		break;  	case WM_RBUTTONDOWN:  		//case WM_RBUTTONUP:   		//case WM_RBUTTONDBLCLK:   		button = MouseButtons.Right;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of mouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.mouseData >> 16) & 0xffff);  		//TODO: X BUTTONS (I havent them so was unable to test)  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' mouseData is not used.   		break;  	}  	//double clicks  	int clickCount = 0;  	if (button != MouseButtons.None)  		if (wParam == WM_LBUTTONDBLCLK || wParam == WM_RBUTTONDBLCLK)  			clickCount = 2;  		else  			clickCount = 1;  	//generate event   	MouseEventArgs e = new MouseEventArgs (button' clickCount' mouseHookStruct.pt.x' mouseHookStruct.pt.y' mouseDelta);  	//raise it  	OnMouseActivity (this' e);  }  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,MouseHookProc,The following statement contains a magic number: switch (wParam) {  case WM_LBUTTONDOWN:  	//case WM_LBUTTONUP:   	//case WM_LBUTTONDBLCLK:   	button = MouseButtons.Left;  	break;  case WM_RBUTTONDOWN:  	//case WM_RBUTTONUP:   	//case WM_RBUTTONDBLCLK:   	button = MouseButtons.Right;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of mouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.mouseData >> 16) & 0xffff);  	//TODO: X BUTTONS (I havent them so was unable to test)  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' mouseData is not used.   	break;  }  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,MouseHookProc,The following statement contains a magic number: mouseDelta = (short)((mouseHookStruct.mouseData >> 16) & 0xffff);  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,MouseHookProc,The following statement contains a magic number: if (button != MouseButtons.None)  	if (wParam == WM_LBUTTONDBLCLK || wParam == WM_RBUTTONDBLCLK)  		clickCount = 2;  	else  		clickCount = 1;  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,MouseHookProc,The following statement contains a magic number: if (wParam == WM_LBUTTONDBLCLK || wParam == WM_RBUTTONDBLCLK)  	clickCount = 2;  else  	clickCount = 1;  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,MouseHookProc,The following statement contains a magic number: clickCount = 2;  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,KeyboardHookProc,The following statement contains a magic number: if ((nCode >= 0) && (KeyDown != null || KeyUp != null || KeyPress != null)) {  	//read structure KeyboardHookStruct at lParam  	KeyboardHookStruct MyKeyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct));  	//raise KeyDown  	if (KeyDown != null && (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.vkCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		KeyDown (this' e);  		handled = handled || e.Handled;  	}  	// raise KeyPress  	if (KeyPress != null && wParam == WM_KEYDOWN) {  		bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  		bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  		byte[] keyState = new byte[256];  		GetKeyboardState (keyState);  		byte[] inBuffer = new byte[2];  		if (ToAscii (MyKeyboardHookStruct.vkCode' MyKeyboardHookStruct.scanCode' keyState' inBuffer' MyKeyboardHookStruct.flags) == 1) {  			char key = (char)inBuffer [0];  			if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  				key = Char.ToUpper (key);  			KeyPressEventArgs e = new KeyPressEventArgs (key);  			KeyPress (this' e);  			handled = handled || e.Handled;  		}  	}  	// raise KeyUp  	if (KeyUp != null && (wParam == WM_KEYUP || wParam == WM_SYSKEYUP)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.vkCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		KeyUp (this' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,KeyboardHookProc,The following statement contains a magic number: if ((nCode >= 0) && (KeyDown != null || KeyUp != null || KeyPress != null)) {  	//read structure KeyboardHookStruct at lParam  	KeyboardHookStruct MyKeyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct));  	//raise KeyDown  	if (KeyDown != null && (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.vkCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		KeyDown (this' e);  		handled = handled || e.Handled;  	}  	// raise KeyPress  	if (KeyPress != null && wParam == WM_KEYDOWN) {  		bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  		bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  		byte[] keyState = new byte[256];  		GetKeyboardState (keyState);  		byte[] inBuffer = new byte[2];  		if (ToAscii (MyKeyboardHookStruct.vkCode' MyKeyboardHookStruct.scanCode' keyState' inBuffer' MyKeyboardHookStruct.flags) == 1) {  			char key = (char)inBuffer [0];  			if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  				key = Char.ToUpper (key);  			KeyPressEventArgs e = new KeyPressEventArgs (key);  			KeyPress (this' e);  			handled = handled || e.Handled;  		}  	}  	// raise KeyUp  	if (KeyUp != null && (wParam == WM_KEYUP || wParam == WM_SYSKEYUP)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.vkCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		KeyUp (this' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,KeyboardHookProc,The following statement contains a magic number: if (KeyPress != null && wParam == WM_KEYDOWN) {  	bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  	bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  	byte[] keyState = new byte[256];  	GetKeyboardState (keyState);  	byte[] inBuffer = new byte[2];  	if (ToAscii (MyKeyboardHookStruct.vkCode' MyKeyboardHookStruct.scanCode' keyState' inBuffer' MyKeyboardHookStruct.flags) == 1) {  		char key = (char)inBuffer [0];  		if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  			key = Char.ToUpper (key);  		KeyPressEventArgs e = new KeyPressEventArgs (key);  		KeyPress (this' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,KeyboardHookProc,The following statement contains a magic number: if (KeyPress != null && wParam == WM_KEYDOWN) {  	bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  	bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  	byte[] keyState = new byte[256];  	GetKeyboardState (keyState);  	byte[] inBuffer = new byte[2];  	if (ToAscii (MyKeyboardHookStruct.vkCode' MyKeyboardHookStruct.scanCode' keyState' inBuffer' MyKeyboardHookStruct.flags) == 1) {  		char key = (char)inBuffer [0];  		if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  			key = Char.ToUpper (key);  		KeyPressEventArgs e = new KeyPressEventArgs (key);  		KeyPress (this' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The following statement contains a magic number: if (regKey != null) {  	string[] timezoneKeyNames = regKey.GetSubKeyNames ();  	foreach (string timezoneKeyName in timezoneKeyNames) {  		try {  			RegistryKey timezoneKey = regKey.OpenSubKey (timezoneKeyName);  			if (timezoneKey != null) {  				string displayName = "";  				string daylightName = "";  				string standardName = "";  				if (timezoneKey.GetValue ("Display") != null)  					displayName = (string)timezoneKey.GetValue ("Display");  				if (timezoneKey.GetValue ("Dlt") != null)  					daylightName = (string)timezoneKey.GetValue ("Dlt");  				if (timezoneKey.GetValue ("Std") != null)  					standardName = (string)timezoneKey.GetValue ("Std");  				// Calculate our offsets  				if (timezoneKey.GetValue ("TZI") != null) {  					byte[] tzi = (byte[])timezoneKey.GetValue ("TZI");  					int bias = -BitConverter.ToInt32 (tzi' 0);  					int stdBias = -BitConverter.ToInt32 (tzi' 4);  					int dltBias = -BitConverter.ToInt32 (tzi' 8);  					TimeSpan standardOffset = new TimeSpan (0' bias + stdBias' 0);  					TimeSpan daylightOffset = new TimeSpan (0' bias + dltBias' 0);  					timeZones.Add (new TimeZoneInfo (displayName' daylightName' standardName' standardOffset' daylightOffset));  				}  			}  		}  		catch {  		}  	}  }  
Magic Number,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The following statement contains a magic number: if (regKey != null) {  	string[] timezoneKeyNames = regKey.GetSubKeyNames ();  	foreach (string timezoneKeyName in timezoneKeyNames) {  		try {  			RegistryKey timezoneKey = regKey.OpenSubKey (timezoneKeyName);  			if (timezoneKey != null) {  				string displayName = "";  				string daylightName = "";  				string standardName = "";  				if (timezoneKey.GetValue ("Display") != null)  					displayName = (string)timezoneKey.GetValue ("Display");  				if (timezoneKey.GetValue ("Dlt") != null)  					daylightName = (string)timezoneKey.GetValue ("Dlt");  				if (timezoneKey.GetValue ("Std") != null)  					standardName = (string)timezoneKey.GetValue ("Std");  				// Calculate our offsets  				if (timezoneKey.GetValue ("TZI") != null) {  					byte[] tzi = (byte[])timezoneKey.GetValue ("TZI");  					int bias = -BitConverter.ToInt32 (tzi' 0);  					int stdBias = -BitConverter.ToInt32 (tzi' 4);  					int dltBias = -BitConverter.ToInt32 (tzi' 8);  					TimeSpan standardOffset = new TimeSpan (0' bias + stdBias' 0);  					TimeSpan daylightOffset = new TimeSpan (0' bias + dltBias' 0);  					timeZones.Add (new TimeZoneInfo (displayName' daylightName' standardName' standardOffset' daylightOffset));  				}  			}  		}  		catch {  		}  	}  }  
Magic Number,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The following statement contains a magic number: foreach (string timezoneKeyName in timezoneKeyNames) {  	try {  		RegistryKey timezoneKey = regKey.OpenSubKey (timezoneKeyName);  		if (timezoneKey != null) {  			string displayName = "";  			string daylightName = "";  			string standardName = "";  			if (timezoneKey.GetValue ("Display") != null)  				displayName = (string)timezoneKey.GetValue ("Display");  			if (timezoneKey.GetValue ("Dlt") != null)  				daylightName = (string)timezoneKey.GetValue ("Dlt");  			if (timezoneKey.GetValue ("Std") != null)  				standardName = (string)timezoneKey.GetValue ("Std");  			// Calculate our offsets  			if (timezoneKey.GetValue ("TZI") != null) {  				byte[] tzi = (byte[])timezoneKey.GetValue ("TZI");  				int bias = -BitConverter.ToInt32 (tzi' 0);  				int stdBias = -BitConverter.ToInt32 (tzi' 4);  				int dltBias = -BitConverter.ToInt32 (tzi' 8);  				TimeSpan standardOffset = new TimeSpan (0' bias + stdBias' 0);  				TimeSpan daylightOffset = new TimeSpan (0' bias + dltBias' 0);  				timeZones.Add (new TimeZoneInfo (displayName' daylightName' standardName' standardOffset' daylightOffset));  			}  		}  	}  	catch {  	}  }  
Magic Number,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The following statement contains a magic number: foreach (string timezoneKeyName in timezoneKeyNames) {  	try {  		RegistryKey timezoneKey = regKey.OpenSubKey (timezoneKeyName);  		if (timezoneKey != null) {  			string displayName = "";  			string daylightName = "";  			string standardName = "";  			if (timezoneKey.GetValue ("Display") != null)  				displayName = (string)timezoneKey.GetValue ("Display");  			if (timezoneKey.GetValue ("Dlt") != null)  				daylightName = (string)timezoneKey.GetValue ("Dlt");  			if (timezoneKey.GetValue ("Std") != null)  				standardName = (string)timezoneKey.GetValue ("Std");  			// Calculate our offsets  			if (timezoneKey.GetValue ("TZI") != null) {  				byte[] tzi = (byte[])timezoneKey.GetValue ("TZI");  				int bias = -BitConverter.ToInt32 (tzi' 0);  				int stdBias = -BitConverter.ToInt32 (tzi' 4);  				int dltBias = -BitConverter.ToInt32 (tzi' 8);  				TimeSpan standardOffset = new TimeSpan (0' bias + stdBias' 0);  				TimeSpan daylightOffset = new TimeSpan (0' bias + dltBias' 0);  				timeZones.Add (new TimeZoneInfo (displayName' daylightName' standardName' standardOffset' daylightOffset));  			}  		}  	}  	catch {  	}  }  
Magic Number,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The following statement contains a magic number: try {  	RegistryKey timezoneKey = regKey.OpenSubKey (timezoneKeyName);  	if (timezoneKey != null) {  		string displayName = "";  		string daylightName = "";  		string standardName = "";  		if (timezoneKey.GetValue ("Display") != null)  			displayName = (string)timezoneKey.GetValue ("Display");  		if (timezoneKey.GetValue ("Dlt") != null)  			daylightName = (string)timezoneKey.GetValue ("Dlt");  		if (timezoneKey.GetValue ("Std") != null)  			standardName = (string)timezoneKey.GetValue ("Std");  		// Calculate our offsets  		if (timezoneKey.GetValue ("TZI") != null) {  			byte[] tzi = (byte[])timezoneKey.GetValue ("TZI");  			int bias = -BitConverter.ToInt32 (tzi' 0);  			int stdBias = -BitConverter.ToInt32 (tzi' 4);  			int dltBias = -BitConverter.ToInt32 (tzi' 8);  			TimeSpan standardOffset = new TimeSpan (0' bias + stdBias' 0);  			TimeSpan daylightOffset = new TimeSpan (0' bias + dltBias' 0);  			timeZones.Add (new TimeZoneInfo (displayName' daylightName' standardName' standardOffset' daylightOffset));  		}  	}  }  catch {  }  
Magic Number,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The following statement contains a magic number: try {  	RegistryKey timezoneKey = regKey.OpenSubKey (timezoneKeyName);  	if (timezoneKey != null) {  		string displayName = "";  		string daylightName = "";  		string standardName = "";  		if (timezoneKey.GetValue ("Display") != null)  			displayName = (string)timezoneKey.GetValue ("Display");  		if (timezoneKey.GetValue ("Dlt") != null)  			daylightName = (string)timezoneKey.GetValue ("Dlt");  		if (timezoneKey.GetValue ("Std") != null)  			standardName = (string)timezoneKey.GetValue ("Std");  		// Calculate our offsets  		if (timezoneKey.GetValue ("TZI") != null) {  			byte[] tzi = (byte[])timezoneKey.GetValue ("TZI");  			int bias = -BitConverter.ToInt32 (tzi' 0);  			int stdBias = -BitConverter.ToInt32 (tzi' 4);  			int dltBias = -BitConverter.ToInt32 (tzi' 8);  			TimeSpan standardOffset = new TimeSpan (0' bias + stdBias' 0);  			TimeSpan daylightOffset = new TimeSpan (0' bias + dltBias' 0);  			timeZones.Add (new TimeZoneInfo (displayName' daylightName' standardName' standardOffset' daylightOffset));  		}  	}  }  catch {  }  
Magic Number,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The following statement contains a magic number: if (timezoneKey != null) {  	string displayName = "";  	string daylightName = "";  	string standardName = "";  	if (timezoneKey.GetValue ("Display") != null)  		displayName = (string)timezoneKey.GetValue ("Display");  	if (timezoneKey.GetValue ("Dlt") != null)  		daylightName = (string)timezoneKey.GetValue ("Dlt");  	if (timezoneKey.GetValue ("Std") != null)  		standardName = (string)timezoneKey.GetValue ("Std");  	// Calculate our offsets  	if (timezoneKey.GetValue ("TZI") != null) {  		byte[] tzi = (byte[])timezoneKey.GetValue ("TZI");  		int bias = -BitConverter.ToInt32 (tzi' 0);  		int stdBias = -BitConverter.ToInt32 (tzi' 4);  		int dltBias = -BitConverter.ToInt32 (tzi' 8);  		TimeSpan standardOffset = new TimeSpan (0' bias + stdBias' 0);  		TimeSpan daylightOffset = new TimeSpan (0' bias + dltBias' 0);  		timeZones.Add (new TimeZoneInfo (displayName' daylightName' standardName' standardOffset' daylightOffset));  	}  }  
Magic Number,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The following statement contains a magic number: if (timezoneKey != null) {  	string displayName = "";  	string daylightName = "";  	string standardName = "";  	if (timezoneKey.GetValue ("Display") != null)  		displayName = (string)timezoneKey.GetValue ("Display");  	if (timezoneKey.GetValue ("Dlt") != null)  		daylightName = (string)timezoneKey.GetValue ("Dlt");  	if (timezoneKey.GetValue ("Std") != null)  		standardName = (string)timezoneKey.GetValue ("Std");  	// Calculate our offsets  	if (timezoneKey.GetValue ("TZI") != null) {  		byte[] tzi = (byte[])timezoneKey.GetValue ("TZI");  		int bias = -BitConverter.ToInt32 (tzi' 0);  		int stdBias = -BitConverter.ToInt32 (tzi' 4);  		int dltBias = -BitConverter.ToInt32 (tzi' 8);  		TimeSpan standardOffset = new TimeSpan (0' bias + stdBias' 0);  		TimeSpan daylightOffset = new TimeSpan (0' bias + dltBias' 0);  		timeZones.Add (new TimeZoneInfo (displayName' daylightName' standardName' standardOffset' daylightOffset));  	}  }  
Magic Number,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The following statement contains a magic number: if (timezoneKey.GetValue ("TZI") != null) {  	byte[] tzi = (byte[])timezoneKey.GetValue ("TZI");  	int bias = -BitConverter.ToInt32 (tzi' 0);  	int stdBias = -BitConverter.ToInt32 (tzi' 4);  	int dltBias = -BitConverter.ToInt32 (tzi' 8);  	TimeSpan standardOffset = new TimeSpan (0' bias + stdBias' 0);  	TimeSpan daylightOffset = new TimeSpan (0' bias + dltBias' 0);  	timeZones.Add (new TimeZoneInfo (displayName' daylightName' standardName' standardOffset' daylightOffset));  }  
Magic Number,WOSI.Utilities,TimeUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\TimeUtils.cs,GetSystemTimeZones,The following statement contains a magic number: if (timezoneKey.GetValue ("TZI") != null) {  	byte[] tzi = (byte[])timezoneKey.GetValue ("TZI");  	int bias = -BitConverter.ToInt32 (tzi' 0);  	int stdBias = -BitConverter.ToInt32 (tzi' 4);  	int dltBias = -BitConverter.ToInt32 (tzi' 8);  	TimeSpan standardOffset = new TimeSpan (0' bias + stdBias' 0);  	TimeSpan daylightOffset = new TimeSpan (0' bias + dltBias' 0);  	timeZones.Add (new TimeZoneInfo (displayName' daylightName' standardName' standardOffset' daylightOffset));  }  
Missing Default,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,GetProperSortText,The following switch statement is missing a default case: switch (order) {  case (SortOrder.Ascending):  	text += " ASC";  	break;  case (SortOrder.Descending):  	text += " DESC";  	break;  case (SortOrder.None):  	text = "";  	break;  }  
Missing Default,WOSI.Utilities,StringUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\StringUtils.cs,ConvertStringToPhoneNumberString,The following switch statement is missing a default case: switch (strChar) {  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  	outputStr += strChar.ToString ();  	break;  case 'A':  case 'B':  case 'C':  	outputStr += '2';  	break;  case 'D':  case 'E':  case 'F':  	outputStr += '3';  	break;  case 'G':  case 'H':  case 'I':  	outputStr += '4';  	break;  case 'J':  case 'K':  case 'L':  	outputStr += '5';  	break;  case 'M':  case 'N':  case 'O':  	outputStr += '6';  	break;  case 'P':  case 'Q':  case 'R':  case 'S':  	outputStr += '7';  	break;  case 'T':  case 'U':  case 'V':  	outputStr += '8';  	break;  case 'W':  case 'X':  case 'Y':  case 'Z':  	outputStr += '9';  	break;  case '0':  	outputStr += '0';  	break;  case '*':  	outputStr += '*';  	break;  case '#':  	outputStr += '#';  	break;  case '+':  	outputStr += '+';  	break;  }  
Missing Default,WOSI.Utilities,UserActivityHook,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Utilities\SystemUtilities.cs,MouseHookProc,The following switch statement is missing a default case: switch (wParam) {  case WM_LBUTTONDOWN:  	//case WM_LBUTTONUP:   	//case WM_LBUTTONDBLCLK:   	button = MouseButtons.Left;  	break;  case WM_RBUTTONDOWN:  	//case WM_RBUTTONUP:   	//case WM_RBUTTONDBLCLK:   	button = MouseButtons.Right;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of mouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.mouseData >> 16) & 0xffff);  	//TODO: X BUTTONS (I havent them so was unable to test)  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' mouseData is not used.   	break;  }  
