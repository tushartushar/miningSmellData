Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NET.Remoting.ChannelSinks,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureClientChannelSink.cs,AsyncProcessResponse,Cyclomatic complexity of the method is 9
Complex Method,NET.Remoting.ChannelSinks,SecureClientChannelSinkProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureClientChannelSinkProvider.cs,SecureClientChannelSinkProvider,Cyclomatic complexity of the method is 13
Complex Method,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,ProcessMessage,Cyclomatic complexity of the method is 14
Complex Method,NET.Remoting.ChannelSinks,SecureServerChannelSinkProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSinkProvider.cs,SecureServerChannelSinkProvider,Cyclomatic complexity of the method is 29
Complex Method,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,GetNewSymmetricProvider,Cyclomatic complexity of the method is 10
Complex Method,NET.Remoting.Channels,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureClientChannelSink.cs,AsyncProcessResponse,Cyclomatic complexity of the method is 8
Complex Method,NET.Remoting.Channels,SecureClientChannelSinkProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureClientChannelSinkProvider.cs,SecureClientChannelSinkProvider,Cyclomatic complexity of the method is 21
Complex Method,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,ProcessMessage,Cyclomatic complexity of the method is 12
Complex Method,NET.Remoting.Channels,SecureServerChannelSinkProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSinkProvider.cs,SecureServerChannelSinkProvider,Cyclomatic complexity of the method is 19
Complex Method,NET.Remoting,PipeClientChannel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeClientChannel.cs,InitProperties,Cyclomatic complexity of the method is 11
Complex Method,NET.Remoting,PipeServerChannel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeServerChannel.cs,InitProperties,Cyclomatic complexity of the method is 16
Complex Method,NET.Remoting,PipeServerChannel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeServerChannel.cs,ServerMain,Cyclomatic complexity of the method is 11
Long Parameter List,NET.Remoting.ChannelSinks,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureClientChannelSink.cs,ProcessEncryptedMessage,The method has 5 parameters.
Long Parameter List,NET.Remoting.ChannelSinks,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureClientChannelSink.cs,ProcessMessage,The method has 5 parameters.
Long Parameter List,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,SecureServerChannelSink,The method has 7 parameters.
Long Parameter List,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,MakeSharedKey,The method has 5 parameters.
Long Parameter List,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,ProcessEncryptedMessage,The method has 8 parameters.
Long Parameter List,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,ProcessMessage,The method has 7 parameters.
Long Parameter List,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,AsyncProcessResponse,The method has 5 parameters.
Long Parameter List,NET.Remoting.Channels,Authenticate,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\Authenticate.cs,LogonUser,The method has 6 parameters.
Long Parameter List,NET.Remoting.Channels,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureClientChannelSink.cs,SecureClientChannelSink,The method has 6 parameters.
Long Parameter List,NET.Remoting.Channels,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureClientChannelSink.cs,ProcessEncryptedMessage,The method has 5 parameters.
Long Parameter List,NET.Remoting.Channels,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureClientChannelSink.cs,ProcessMessage,The method has 5 parameters.
Long Parameter List,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,SecureServerChannelSink,The method has 5 parameters.
Long Parameter List,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,MakeSharedKey,The method has 5 parameters.
Long Parameter List,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,ProcessEncryptedMessage,The method has 8 parameters.
Long Parameter List,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,ProcessMessage,The method has 7 parameters.
Long Parameter List,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,AsyncProcessResponse,The method has 5 parameters.
Long Parameter List,NET.Remoting,PipeClientTransportSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeClientChannel.cs,ProcessMessage,The method has 5 parameters.
Long Parameter List,NET.Remoting,PipeNative,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,CreateNamedPipe,The method has 8 parameters.
Long Parameter List,NET.Remoting,PipeNative,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,CreateFile,The method has 7 parameters.
Long Parameter List,NET.Remoting,PipeNative,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,ReadFile,The method has 5 parameters.
Long Parameter List,NET.Remoting,PipeNative,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,WriteFile,The method has 5 parameters.
Long Parameter List,NET.Remoting,PipeServerTransportSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeServerChannel.cs,ProcessMessage,The method has 7 parameters.
Long Parameter List,NET.Remoting,PipeServerTransportSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeServerChannel.cs,AsyncProcessResponse,The method has 5 parameters.
Long Parameter List,NET.Remoting,IpcRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\IpcRemotingClient.cs,IpcRemotingClient,The method has 6 parameters.
Long Parameter List,NET.Remoting,PipeRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\PipeRemotingClient.cs,PipeRemotingClient,The method has 6 parameters.
Long Parameter List,NET.Remoting,TcpRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TcpRemotingClient.cs,TcpRemotingClient,The method has 7 parameters.
Long Parameter List,NET.Remoting.TwoWay,HTTPTwoWayRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingClient.cs,Connect,The method has 5 parameters.
Long Parameter List,NET.Remoting.TwoWay,HTTPTwoWayRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingClient.cs,Connect,The method has 7 parameters.
Long Parameter List,NET.Remoting.TwoWay,ITwoWayRemotingServer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\ITwoWayRemotingServer.cs,Connect,The method has 5 parameters.
Long Parameter List,NET.Remoting.TwoWay,TwoWayRemotingClientBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingClientBase.cs,InitializeConnect,The method has 5 parameters.
Long Parameter List,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,InternalCallClientMethodAsync,The method has 5 parameters.
Long Parameter List,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,InvokeClientMethod,The method has 6 parameters.
Long Parameter List,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,Connect,The method has 5 parameters.
Long Identifier,NET.Remoting.TwoWay,HTTPTwoWayRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingClient.cs,HTTPTwoWayRemotingClient,The length of the parameter binaryServerFormatSinkProvider is 30.
Long Identifier,NET.Remoting.TwoWay,HTTPTwoWayRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingClient.cs,HTTPTwoWayRemotingClient,The length of the parameter binaryClientFormatSinkProvider is 30.
Long Identifier,NET.Remoting.TwoWay,HTTPTwoWayRemotingServer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingServer.cs,HTTPTwoWayRemotingServer,The length of the parameter binaryServerFormatSinkProvider is 30.
Long Identifier,NET.Remoting.TwoWay,HTTPTwoWayRemotingServer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingServer.cs,HTTPTwoWayRemotingServer,The length of the parameter binaryClientFormatSinkProvider is 30.
Long Statement,NET.Remoting.ChannelSinks,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureClientChannelSink.cs,DecryptResponse,The length of the statement  "		if (responseHeaders != null && SecureTransaction.SendingEncryptedResult == (SecureTransaction)Convert.ToInt32 ((string)responseHeaders [CommonHeaders.Transaction])) { " is 166.
Long Statement,NET.Remoting.ChannelSinks,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureClientChannelSink.cs,AsyncProcessResponse,The length of the statement  "			throw new SecureRemotingException ("The server sink was unable to identify the client' " + "most likely due to the connection information timing out."); " is 152.
Long Statement,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,ProcessEncryptedMessage,The length of the statement  "	ServerProcessing processingResult = _next.ProcessMessage (sinkStack' requestMsg' requestHeaders' decryptedStream' out responseMsg' out responseHeaders' out responseStream); " is 172.
Long Statement,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,ProcessMessage,The length of the statement  "	SecureTransaction transactType = (SecureTransaction)Convert.ToInt32 ((string)requestHeaders [CommonHeaders.Transaction]); " is 121.
Long Statement,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,ProcessMessage,The length of the statement  "		processingResult = MakeSharedKey (transactID' requestHeaders' out responseMsg' out responseHeaders' out responseStream); " is 120.
Long Statement,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,ProcessMessage,The length of the statement  "			processingResult = ProcessEncryptedMessage (transactID' sinkStack' requestMsg' requestHeaders' requestStream' out responseMsg' out responseHeaders' out responseStream); " is 168.
Long Statement,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,ProcessMessage,The length of the statement  "			processingResult = SendEmptyToClient (SecureTransaction.UnknownIdentifier' out responseMsg' out responseHeaders' out responseStream); " is 133.
Long Statement,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,ProcessMessage,The length of the statement  "			processingResult = _next.ProcessMessage (sinkStack' requestMsg' requestHeaders' requestStream' out responseMsg' out responseHeaders' out responseStream); " is 153.
Long Statement,NET.Remoting.ChannelSinks,SecureServerChannelSinkProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSinkProvider.cs,CreateSink,The length of the statement  "	return new SecureServerChannelSink (nextSink' _algorithm' _oaep' _connectionAgeLimit' _sweepFrequency' _requireSecurity' _securityExemptionList); " is 145.
Long Statement,NET.Remoting.Channels,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureClientChannelSink.cs,DecryptResponse,The length of the statement  "		if (responseHeaders != null && SecureTransaction.SendingEncryptedResult == (SecureTransaction)Convert.ToInt32 ((string)responseHeaders [CommonHeaders.Transaction])) { " is 166.
Long Statement,NET.Remoting.Channels,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureClientChannelSink.cs,AsyncProcessResponse,The length of the statement  "			throw new SecureRemotingException ("The server sink was unable to identify the client' most likely due to the connection information timing out."); " is 147.
Long Statement,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,ProcessEncryptedMessage,The length of the statement  "	ServerProcessing processingResult = _next.ProcessMessage (sinkStack' requestMsg' requestHeaders' decryptedStream' out responseMsg' out responseHeaders' out responseStream); " is 172.
Long Statement,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,ProcessMessage,The length of the statement  "	SecureTransaction transactType = (SecureTransaction)Convert.ToInt32 ((string)requestHeaders [CommonHeaders.Transaction]); " is 121.
Long Statement,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,ProcessMessage,The length of the statement  "		processingResult = MakeSharedKey (transactID' requestHeaders' out responseMsg' out responseHeaders' out responseStream); " is 120.
Long Statement,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,ProcessMessage,The length of the statement  "			processingResult = ProcessEncryptedMessage (transactID' sinkStack' requestMsg' requestHeaders' requestStream' out responseMsg' out responseHeaders' out responseStream); " is 168.
Long Statement,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,ProcessMessage,The length of the statement  "			processingResult = SendEmptyToClient (SecureTransaction.UnknownIdentifier' out responseMsg' out responseHeaders' out responseStream); " is 133.
Long Statement,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,ProcessMessage,The length of the statement  "			processingResult = _next.ProcessMessage (sinkStack' requestMsg' requestHeaders' requestStream' out responseMsg' out responseHeaders' out responseStream); " is 153.
Long Statement,NET.Remoting.Channels,SecureServerChannelSinkProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSinkProvider.cs,CreateSink,The length of the statement  "	SecureServerChannelSink sSink = new SecureServerChannelSink (nextSink' _algorithm' _connectionAgeLimit' _sweepFrequency' _requireSecurity); " is 139.
Long Statement,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,Connect,The length of the statement  "		_handle = PipeNative.CreateFile (_pipeName' PipeNative.GENERIC_READ | PipeNative.GENERIC_WRITE' 0' null' PipeNative.OPEN_EXISTING' 0' 0); " is 137.
Long Statement,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,Create,The length of the statement  "	_handle = PipeNative.CreateNamedPipe (_pipeName' PipeNative.PIPE_ACCESS_DUPLEX' PipeNative.PIPE_TYPE_BYTE | PipeNative.PIPE_READMODE_BYTE | PipeNative.PIPE_WAIT' PipeNative.PIPE_UNLIMITED_INSTANCES' 8192' 8192' PipeNative.NMPWAIT_WAIT_FOREVER' pipeSecurityDescriptor); " is 268.
Long Statement,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,Create,The length of the statement  "		throw new PipeIOException ("Could not create the pipe (" + _pipeName + ") - os returned " + PipeNative.GetLastError ()); " is 120.
Long Statement,NET.Remoting,PipeServerChannel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeServerChannel.cs,ServerMain,The length of the statement  "			ServerProcessing processing = _transportSink.NextChannelSink.ProcessMessage (stack' null' headers' request' out responseMsg' out responseHeaders' out responseStream); " is 166.
Long Statement,NET.Remoting,TcpRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TcpRemotingClient.cs,ActivateObjects,The length of the statement  "	remotingObject = (ObjectType)Activator.GetObject (typeof(ObjectType)' "tcp://" + server + ":" + port + "/" + serviceUri); " is 121.
Long Statement,NET.Remoting.TwoWay,HTTPTwoWayRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingClient.cs,Connect,The length of the statement  "		objRef = System.Runtime.Remoting.RemotingServices.Marshal (this' string.Format ("{0}.rem"' Guid.NewGuid ().ToString ())' typeof(ITwoWayRemotingClient)); " is 152.
Long Statement,NET.Remoting.TwoWay,HTTPTwoWayRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingClient.cs,Connect,The length of the statement  "		//serverInterface = (ITwoWayRemotingServer)Activator.GetObject(typeof(ITwoWayRemotingServer)' string.Format("http://{0}:{1}/{2}"' host' port' channelName)); " is 156.
Long Statement,NET.Remoting.TwoWay,HTTPTwoWayRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingClient.cs,Connect,The length of the statement  "		serverInterface = (ITwoWayRemotingServer)Activator.GetObject (typeof(ITwoWayRemotingServer)' string.Format ("tcp://{0}:{1}/{2}"' host' port' channelName)); " is 155.
Long Statement,NET.Remoting.TwoWay,HTTPTwoWayRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingClient.cs,Connect,The length of the statement  "		//serverInterface = (ITwoWayRemotingServer)Activator.GetObject(typeof(ITwoWayRemotingServer)' string.Format("gtcp://{0}:{1}/{2}"' host' port' channelName)); " is 156.
Long Statement,NET.Remoting.TwoWay,HTTPTwoWayRemotingServer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingServer.cs,OnStart,The length of the statement  "	//Belikov.GenuineChannels.Security.SecuritySessionServices.SetCurrentSecurityContext(new Belikov.GenuineChannels.Security.SecuritySessionParameters(Belikov.GenuineChannels.Security.SecuritySessionServices.DefaultContext.Name' Belikov.GenuineChannels.Security.SecuritySessionAttributes.ForceSync' TimeSpan.FromSeconds(5)' Belikov.GenuineChannels.Connection.GenuineConnectionType.Persistent' null' TimeSpan.FromMinutes(5))); " is 422.
Long Statement,NET.Remoting.TwoWay,HTTPTwoWayRemotingServer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingServer.cs,OnStart,The length of the statement  "	objRef = System.Runtime.Remoting.RemotingServices.Marshal (this' string.Format ("{0}"' channelName)' typeof(ITwoWayRemotingServer)); " is 132.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingClientBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingClientBase.cs,InitializeConnect,The length of the statement  "		System.Threading.Thread connectThread = new System.Threading.Thread (new System.Threading.ParameterizedThreadStart (InitializeConnectProc)); " is 140.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingClientBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingClientBase.cs,InitializeConnectProc,The length of the statement  "		rClient.serverInterface.Connect (rClient' rClient.responseChannelName' rClient.sessionKey' rClient.username' rClient.password); " is 127.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingClientBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingClientBase.cs,InitializeConnectProc,The length of the statement  "		WOSI.Utilities.EventUtils.FireAsyncEvent (rClient.ConnectionDenied' rClient' new ConnectionRequestResultEventArgs (false' "The server is currently unavailable or does not exist.")); " is 181.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingClientBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingClientBase.cs,OnConnectionAccepted,The length of the statement  "		keepAliveTimer = new System.Threading.Timer (new System.Threading.TimerCallback (KeepAliveTimerProc)' this' keepAliveInterval' keepAliveInterval); " is 146.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,Start,The length of the statement  "		keepAliveTimer = new System.Threading.Timer (new System.Threading.TimerCallback (KeepAliveTimerProc)' this' keepAliveInterval' keepAliveInterval); " is 146.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,KeepAliveTimerProc,The length of the statement  "			server.InternalCallClientMethodAsync (server.connectedClients [key].ClientObject' server.connectedClients [key].RemoteUri' "Ping"' true); " is 137.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,AcceptConnection,The length of the statement  "		InternalCallClientMethodAsync (connectionArgs.ClientObject' connectionArgs.ClientUri' "OnConnectionAccepted"' false' cr); " is 121.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,AcceptConnection,The length of the statement  "		TwoWayRemotingClientConnectionInfo ci = new TwoWayRemotingClientConnectionInfo (connectionArgs.ClientObject' connectionArgs.SessionKey); " is 136.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,InternalCallClientMethodAsync,The length of the statement  "	IAsyncResult ar = invoker.BeginInvoke (this' clientObject' clientUri' methodName' disconnectOnException' methodArgs' cleanUp' null); " is 132.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,CallClientMethodAsync,The length of the statement  "		InternalCallClientMethodAsync (clientObject' ci.RemoteUri' "CallClientMethod"' disconnectOnException' ci.SessionKey' methodName' methodArgs); " is 141.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,InvokeClientMethod,The length of the statement  "		System.Net.IPAddress address = (System.Net.IPAddress)System.Runtime.Remoting.Messaging.CallContext.GetData ("ClientIP"); " is 120.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,InvokeClientMethod,The length of the statement  "		System.Diagnostics.Trace.WriteLine ("*** Remoting Error: " + server.GetClientID (clientObject) + "\r\n\r\n" + e.ToString ()); " is 125.
Long Statement,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,Connect,The length of the statement  "	ITwoWayRemotingClient client = (ITwoWayRemotingClient)Activator.GetObject (typeof(ITwoWayRemotingClient)' string.Format ("{0}"' RemotingServices.GetObjectUri ((MarshalByRefObject)remotingClient)' responseChannelName)); " is 218.
Empty Catch Block,NET.Remoting.ChannelSinks,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureClientChannelSink.cs,DecryptResponse,The method has an empty catch block.
Empty Catch Block,NET.Remoting.Channels,SecureClientChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureClientChannelSink.cs,DecryptResponse,The method has an empty catch block.
Empty Catch Block,NET.Remoting,PipeClientTransportSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeClientChannel.cs,ReceiveCallback,The method has an empty catch block.
Empty Catch Block,NET.Remoting,PipeServerChannel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeServerChannel.cs,WriteExceptionResponse,The method has an empty catch block.
Empty Catch Block,NET.Remoting,IpcRemotingServer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\IpcRemotingServer.cs,StopServer,The method has an empty catch block.
Empty Catch Block,NET.Remoting,PipeRemotingServer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\PipeRemotingServer.cs,StopServer,The method has an empty catch block.
Empty Catch Block,NET.Remoting,TcpRemotingServer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TcpRemotingServer.cs,StopServer,The method has an empty catch block.
Empty Catch Block,NET.Remoting.TwoWay,TwoWayRemotingConnectionEventArgs,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\EventArgs.cs,Initialize,The method has an empty catch block.
Empty Catch Block,NET.Remoting.TwoWay,HTTPTwoWayRemotingClient,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingClient.cs,InternalOnDisconnected,The method has an empty catch block.
Empty Catch Block,NET.Remoting.TwoWay,HTTPTwoWayRemotingServer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\HTTPTwoWayRemotingServer.cs,OnStop,The method has an empty catch block.
Empty Catch Block,NET.Remoting.TwoWay,TwoWayRemotingClientBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingClientBase.cs,Disconnect,The method has an empty catch block.
Magic Number,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,SecureServerChannelSink,The following statement contains a magic number: _connections = new Hashtable (103' 0.5F);  
Magic Number,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,StartConnectionSweeper,The following statement contains a magic number: if (_sweepTimer == null) {  	_sweepTimer = new System.Timers.Timer (_sweepFrequency * 1000);  	_sweepTimer.Elapsed += new ElapsedEventHandler (SweepConnections);  	_sweepTimer.Start ();  }  
Magic Number,NET.Remoting.ChannelSinks,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureServerChannelSink.cs,StartConnectionSweeper,The following statement contains a magic number: _sweepTimer = new System.Timers.Timer (_sweepFrequency * 1000);  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,GetEncryptedStream,The following statement contains a magic number: do {  	bytesRead = compStream.Read (buffer' 0' 1024);  	if (bytesRead > 0)  		encryptStream.Write (buffer' 0' bytesRead);  }  while (bytesRead > 0);  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,GetEncryptedStream,The following statement contains a magic number: bytesRead = compStream.Read (buffer' 0' 1024);  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,GetDecryptedStream,The following statement contains a magic number: do {  	bytesRead = decryptStream.Read (buffer' 0' 1024);  	if (bytesRead > 0)  		outStream.Write (buffer' 0' bytesRead);  }  while (bytesRead > 0);  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,GetDecryptedStream,The following statement contains a magic number: bytesRead = decryptStream.Read (buffer' 0' 1024);  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,CompressStream,The following statement contains a magic number: using (GZipStream compressedStream = new GZipStream (outStream' CompressionMode.Compress' true)) {  	// Read the in stream in 1024 byte chunks  	byte[] buffer = new byte[1024];  	int bytesRead = 0;  	do {  		bytesRead = inStream.Read (buffer' 0' 1024);  		if (bytesRead > 0)  			compressedStream.Write (buffer' 0' bytesRead);  	}  	while (bytesRead > 0);  }  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,CompressStream,The following statement contains a magic number: using (GZipStream compressedStream = new GZipStream (outStream' CompressionMode.Compress' true)) {  	// Read the in stream in 1024 byte chunks  	byte[] buffer = new byte[1024];  	int bytesRead = 0;  	do {  		bytesRead = inStream.Read (buffer' 0' 1024);  		if (bytesRead > 0)  			compressedStream.Write (buffer' 0' bytesRead);  	}  	while (bytesRead > 0);  }  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,CompressStream,The following statement contains a magic number: do {  	bytesRead = inStream.Read (buffer' 0' 1024);  	if (bytesRead > 0)  		compressedStream.Write (buffer' 0' bytesRead);  }  while (bytesRead > 0);  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,CompressStream,The following statement contains a magic number: bytesRead = inStream.Read (buffer' 0' 1024);  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,DecompressStream,The following statement contains a magic number: using (GZipStream decompressedStream = new GZipStream (inStream' CompressionMode.Decompress)) {  	// Read the in stream in 1024 byte chunks  	byte[] buffer = new byte[1024];  	int bytesRead = 0;  	do {  		bytesRead = decompressedStream.Read (buffer' 0' 1024);  		if (bytesRead > 0)  			outStream.Write (buffer' 0' bytesRead);  	}  	while (bytesRead > 0);  }  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,DecompressStream,The following statement contains a magic number: using (GZipStream decompressedStream = new GZipStream (inStream' CompressionMode.Decompress)) {  	// Read the in stream in 1024 byte chunks  	byte[] buffer = new byte[1024];  	int bytesRead = 0;  	do {  		bytesRead = decompressedStream.Read (buffer' 0' 1024);  		if (bytesRead > 0)  			outStream.Write (buffer' 0' bytesRead);  	}  	while (bytesRead > 0);  }  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,DecompressStream,The following statement contains a magic number: do {  	bytesRead = decompressedStream.Read (buffer' 0' 1024);  	if (bytesRead > 0)  		outStream.Write (buffer' 0' bytesRead);  }  while (bytesRead > 0);  
Magic Number,NET.Remoting.Channels,CryptoHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\CryptoHelper.cs,DecompressStream,The following statement contains a magic number: bytesRead = decompressedStream.Read (buffer' 0' 1024);  
Magic Number,NET.Remoting.Channels,RijndaelHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\RijndaelHelper.cs,Encrypt,The following statement contains a magic number: try {  	byte[] initVectorBytes = Encoding.ASCII.GetBytes (InitVector);  	byte[] saltValueBytes = Encoding.ASCII.GetBytes (SaltValue);  	byte[] plainTextBytes = Encoding.UTF8.GetBytes (text);  	PasswordDeriveBytes password = new PasswordDeriveBytes (Key' saltValueBytes' HashAlgorithm' PasswordIterations);  	byte[] keyBytes = password.GetBytes (KeySize / 8);  	RijndaelManaged symmetricKey = new RijndaelManaged ();  	symmetricKey.Mode = CipherMode.CBC;  	ICryptoTransform encryptor = symmetricKey.CreateEncryptor (keyBytes' initVectorBytes);  	memoryStream = new MemoryStream ();  	cryptoStream = new CryptoStream (memoryStream' encryptor' CryptoStreamMode.Write);  	cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  	cryptoStream.FlushFinalBlock ();  	byte[] cipherTextBytes = memoryStream.ToArray ();  	string cipherText = Convert.ToBase64String (cipherTextBytes);  	return cipherText;  }  finally {  	if (memoryStream != null) {  		memoryStream.Close ();  	}  	if (cryptoStream != null) {  		cryptoStream.Close ();  	}  }  
Magic Number,NET.Remoting.Channels,RijndaelHelper,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\RijndaelHelper.cs,Decrypt,The following statement contains a magic number: try {  	byte[] initVectorBytes = Encoding.ASCII.GetBytes (InitVector);  	byte[] saltValueBytes = Encoding.ASCII.GetBytes (SaltValue);  	byte[] cipherTextBytes = Convert.FromBase64String (text);  	PasswordDeriveBytes password = new PasswordDeriveBytes (Key' saltValueBytes' HashAlgorithm' PasswordIterations);  	byte[] keyBytes = password.GetBytes (KeySize / 8);  	RijndaelManaged symmetricKey = new RijndaelManaged ();  	symmetricKey.Mode = CipherMode.CBC;  	ICryptoTransform decryptor = symmetricKey.CreateDecryptor (keyBytes' initVectorBytes);  	memoryStream = new MemoryStream (cipherTextBytes);  	cryptoStream = new CryptoStream (memoryStream' decryptor' CryptoStreamMode.Read);  	byte[] plainTextBytes = new byte[cipherTextBytes.Length];  	int decryptedByteCount = cryptoStream.Read (plainTextBytes' 0' plainTextBytes.Length);  	string plainText = Encoding.UTF8.GetString (plainTextBytes' 0' decryptedByteCount);  	return plainText;  }  finally {  	if (memoryStream != null) {  		memoryStream.Close ();  	}  	if (cryptoStream != null) {  		cryptoStream.Close ();  	}  }  
Magic Number,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,SecureServerChannelSink,The following statement contains a magic number: _connections = new Hashtable (103' 0.5F);  
Magic Number,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,StartConnectionSweeper,The following statement contains a magic number: if (_sweepTimer == null) {  	_sweepTimer = new System.Timers.Timer (_sweepFrequency * 1000);  	_sweepTimer.Elapsed += new ElapsedEventHandler (SweepConnections);  	_sweepTimer.Elapsed += new ElapsedEventHandler (SweepAuthentication);  	_sweepTimer.Start ();  }  
Magic Number,NET.Remoting.Channels,SecureServerChannelSink,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\SecureServerChannelSink.cs,StartConnectionSweeper,The following statement contains a magic number: _sweepTimer = new System.Timers.Timer (_sweepFrequency * 1000);  
Magic Number,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,Connect,The following statement contains a magic number: while (true) {  	_handle = PipeNative.CreateFile (_pipeName' PipeNative.GENERIC_READ | PipeNative.GENERIC_WRITE' 0' null' PipeNative.OPEN_EXISTING' 0' 0);  	if (_handle != PipeNative.INVALID_HANDLE_VALUE)  		return;  	if (PipeNative.GetLastError () != PipeNative.ERROR_PIPE_BUSY) {  		throw new PipeIOException ("Could not open pipe: " + _pipeName);  	}  	if (!PipeNative.WaitNamedPipe (_pipeName' 20000))  		throw new PipeIOException ("Specified pipe was over-burdened: " + _pipeName);  }  
Magic Number,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,Connect,The following statement contains a magic number: if (!PipeNative.WaitNamedPipe (_pipeName' 20000))  	throw new PipeIOException ("Specified pipe was over-burdened: " + _pipeName);  
Magic Number,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,Create,The following statement contains a magic number: _handle = PipeNative.CreateNamedPipe (_pipeName' PipeNative.PIPE_ACCESS_DUPLEX' PipeNative.PIPE_TYPE_BYTE | PipeNative.PIPE_READMODE_BYTE | PipeNative.PIPE_WAIT' PipeNative.PIPE_UNLIMITED_INSTANCES' 8192' 8192' PipeNative.NMPWAIT_WAIT_FOREVER' pipeSecurityDescriptor);  
Magic Number,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,Create,The following statement contains a magic number: _handle = PipeNative.CreateNamedPipe (_pipeName' PipeNative.PIPE_ACCESS_DUPLEX' PipeNative.PIPE_TYPE_BYTE | PipeNative.PIPE_READMODE_BYTE | PipeNative.PIPE_WAIT' PipeNative.PIPE_UNLIMITED_INSTANCES' 8192' 8192' PipeNative.NMPWAIT_WAIT_FOREVER' pipeSecurityDescriptor);  
Magic Number,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,BeginWriteMessage,The following statement contains a magic number: _stream = new MemoryStream (128);  
Magic Number,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,Parse,The following statement contains a magic number: start += 3;  
Magic Number,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,WriteHeaders,The following statement contains a magic number: foreach (DictionaryEntry header in head) {  	String headerName = (String)header.Key;  	//if (!headerName.StartsWith("__")) // exclude special headers  	if ((headerName.Length < 2) || ((headerName [0] != '_') && (headerName [1] != '_'))) {  		Write (PipeConnection.HeaderMarker);  		Write (headerName);  		Write (header.Value.ToString ());  	}  }  
Magic Number,NET.Remoting,PipeConnection,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeConnection.cs,WriteHeaders,The following statement contains a magic number: if ((headerName.Length < 2) || ((headerName [0] != '_') && (headerName [1] != '_'))) {  	Write (PipeConnection.HeaderMarker);  	Write (headerName);  	Write (header.Value.ToString ());  }  
Magic Number,NET.Remoting.TwoWay,TwoWayRemotingClientBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingClientBase.cs,TwoWayRemotingClientBase,The following statement contains a magic number: keepAliveInterval = keepAliveIntervalSeconds * 1000;  
Magic Number,NET.Remoting.TwoWay,TwoWayRemotingClientBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingClientBase.cs,CallClientMethod,The following statement contains a magic number: if (this.sessionKey != sessionKey)  	throw new System.Net.Sockets.SocketException (10061);  
Magic Number,NET.Remoting.TwoWay,TwoWayRemotingClientBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingClientBase.cs,CallClientMethod,The following statement contains a magic number: throw new System.Net.Sockets.SocketException (10061);  
Magic Number,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,TwoWayRemotingServerBase,The following statement contains a magic number: keepAliveInterval = keepAliveIntervalSeconds * 1000;  
Magic Number,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,CallServerMethod,The following statement contains a magic number: if (!IsClientConnected (remotingClient))  	throw new System.Net.Sockets.SocketException (10061);  
Magic Number,NET.Remoting.TwoWay,TwoWayRemotingServerBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\TwoWay\TwoWayRemotingServerBase.cs,CallServerMethod,The following statement contains a magic number: throw new System.Net.Sockets.SocketException (10061);  
Missing Default,NET.Remoting.ChannelSinks,SecureClientChannelSinkProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\ChannelSinks\SecureClientChannelSinkProvider.cs,SecureClientChannelSinkProvider,The following switch statement is missing a default case: switch ((String)entry.Key) {  case "algorithm":  	_algorithm = (string)entry.Value;  	break;  case "oaep":  	_oaep = bool.Parse ((string)entry.Value);  	break;  case "maxRetries":  	_maxAttempts = Convert.ToInt32 ((string)entry.Value);  	if (_maxAttempts < 1)  		throw new ArgumentException ("Maximum number of attempts must be at least 1."' "maxAttempts");  	_maxAttempts++;  	// number of attempts should include the first try  	break;  //default:   //	throw new ArgumentException("Invalid configuration entry: " + (String)entry.Key);  }  
Missing Default,NET.Remoting,PipeClientChannel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeClientChannel.cs,InitProperties,The following switch statement is missing a default case: switch ((String)entry.Key) {  case "name":  	m_ChannelName = (String)entry.Value;  	break;  case "priority":  	m_ChannelPriority = Convert.ToInt32 (entry.Value);  	break;  case "pipe":  	m_pipeName = (String)entry.Value;  	break;  }  
Missing Default,NET.Remoting,PipeServerChannel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeServerChannel.cs,InitProperties,The following switch statement is missing a default case: switch ((String)entry.Key) {  case "name":  	m_ChannelName = (String)entry.Value;  	break;  case "priority":  	m_ChannelPriority = Convert.ToInt32 (entry.Value);  	break;  case "pipe":  	m_pipeName = (String)entry.Value;  	if (String.Compare (m_pipeName' "Auto"' true) == 0) {  		m_pipeName = Guid.NewGuid ().ToString ();  	}  	break;  case "securityDescriptor":  	m_pipeSecurityDescriptor = (IntPtr)entry.Value;  	break;  }  
Missing Default,NET.Remoting,PipeServerChannel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Remoting\Channels\PipeServerChannel.cs,ServerMain,The following switch statement is missing a default case: switch (processing) {  case ServerProcessing.Complete:  	// Send the response. Call completed synchronously.  	stack.Pop (_transportSink);  	WriteClientResponse (pipe' responseHeaders' responseStream);  	break;  case ServerProcessing.OneWay:  	break;  case ServerProcessing.Async:  	stack.StoreAndDispatch (_transportSink' null);  	break;  }  
