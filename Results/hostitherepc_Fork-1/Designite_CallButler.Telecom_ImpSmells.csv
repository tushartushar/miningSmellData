Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,Call,The method has 8 parameters.
Long Parameter List,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,Call,The method has 6 parameters.
Long Parameter List,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,CallBlast,The method has 5 parameters.
Long Parameter List,CallButler.Telecom,CallEventArgs,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\TelecomProviderBase.cs,CallEventArgs,The method has 10 parameters.
Long Parameter List,CallButler.Telecom,TransferEventArgs,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\TelecomProviderBase.cs,TransferEventArgs,The method has 12 parameters.
Long Parameter List,CallButler.Telecom,BusyCallEventArgs,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\TelecomProviderBase.cs,BusyCallEventArgs,The method has 10 parameters.
Long Parameter List,CallButler.Telecom,TelecomProviderBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\TelecomProviderBase.cs,Call,The method has 6 parameters.
Long Parameter List,CallButler.Telecom,TelecomProviderBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\TelecomProviderBase.cs,Call,The method has 8 parameters.
Long Parameter List,CallButler.Telecom,TelecomProviderBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\TelecomProviderBase.cs,CallBlast,The method has 5 parameters.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,Call,The length of the statement  "		if (provider.OutboundUsernamePrefix != null && provider.OutboundUsernamePrefix.Length > 0 && !callerNumber.StartsWith (provider.OutboundUsernamePrefix)) " is 152.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,ConvertProfile,The length of the statement  "	callProfile.AuthPassword = WOSI.Utilities.CryptoUtils.Decrypt (provider.AuthPassword' WOSI.CallButler.Data.Constants.EncryptionPassword); " is 137.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,ipClient_CallTemporarilyMoved,The length of the statement  "	RaiseCallTemporarilyMoved (new CallEventArgs (e.LineNumber' e.LocalUserName' e.LocalHost' e.RemoteDisplayName' e.RemoteUserName' e.RemoteIP' e.RemotePort' e.RemoteHost' e.Outbound' e.SIPProfile)); " is 196.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,ipClient_IncomingBusyCall,The length of the statement  "	RaiseIncomingBusyCall (new BusyCallEventArgs (e.CallID' e.LocalUserName' e.LocalHost' e.RemoteDisplayName' e.RemoteUserName' e.RemoteIP' e.RemotePort' e.RemoteHost' e.Outbound' e.SIPProfile)); " is 192.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,ipClient_CallConnected,The length of the statement  "		RaiseCallConnected (new CallEventArgs (e.LineNumber' e.RemoteUserName' e.RemoteHost' e.LocalDisplayName' e.LocalUserName' e.RemoteIP' e.RemotePort' e.LocalHost' e.Outbound' e.SIPProfile)); " is 188.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,ipClient_CallConnected,The length of the statement  "		RaiseCallConnected (new CallEventArgs (e.LineNumber' e.LocalUserName' e.LocalHost' e.RemoteDisplayName' e.RemoteUserName' e.RemoteIP' e.RemotePort' e.RemoteHost' e.Outbound' e.SIPProfile)); " is 189.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,ipClient_IncomingTransfer,The length of the statement  "	RaiseIncomingTransfer (new TransferEventArgs (e.LineNumber' e.RemoteUserName' e.RemoteHost' e.RemoteDisplayName' e.LocalUserName' e.RemoteIP' e.RemotePort' e.LocalHost' e.ReplacementLine' e.ReplacesID' e.Outbound' e.SIPProfile)); " is 229.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,ipClient_IncomingCall,The length of the statement  "	RaiseIncomingCall (new CallEventArgs (e.LineNumber' e.LocalUserName' e.LocalHost' e.RemoteDisplayName' e.RemoteUserName' e.RemoteIP' e.RemotePort' e.RemoteHost' e.Outbound' e.SIPProfile)); " is 188.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,ipClient_ProfileRegistrationError,The length of the statement  "	string erDetail = string.Format ("Provider: {0}\r\nError Code:{1}\r\n\r\n{2}"' e.SIPProfile.DomainRealm' e.ResponseCode' e.ResponsePhrase); " is 139.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,Register,The length of the statement  "	if (currentProfiles.ContainsKey (registrationID) && currentProfiles [registrationID].ProfileState == SIPProfileState.Registered) " is 128.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,Register,The length of the statement  "	WOSI.CallButler.Data.CallButlerDataset.ProvidersRow provider = registrationParams as WOSI.CallButler.Data.CallButlerDataset.ProvidersRow; " is 137.
Long Statement,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,Register,The length of the statement  "			profile.AuthPassword = WOSI.Utilities.CryptoUtils.Decrypt (provider.AuthPassword' WOSI.CallButler.Data.Constants.EncryptionPassword); " is 133.
Long Statement,CallButler.Telecom.Forms,RequestLineCountForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\Forms\RequestLineCountForm.cs,OnPaintBackground,The length of the statement  "	using (LinearGradientBrush brush = new LinearGradientBrush (new Point (0' 0)' new Point (0' this.Height)' Color.WhiteSmoke' Color.Gainsboro)) { " is 143.
Complex Conditional,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,Call,The conditional expression  "provider != null && !provider.SupressOutboundUsername && fromCallerNumber != null && fromCallerNumber.Length > 0"  is complex.
Empty Catch Block,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,inTELIPhoneTelecomProvider,The method has an empty catch block.
Empty Catch Block,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,Call,The method has an empty catch block.
Empty Catch Block,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,RedirectCall,The method has an empty catch block.
Empty Catch Block,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,RedirectBusyCall,The method has an empty catch block.
Empty Catch Block,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,DeclineBusyCall,The method has an empty catch block.
Empty Catch Block,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The method has an empty catch block.
Empty Catch Block,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,AddDTMFEvent,The method has an empty catch block.
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,inTELIPhoneTelecomProvider,The following statement contains a magic number: ipClient.UseLocalAddressForSipMessages = (bool)initializationParams [4];  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,inTELIPhoneTelecomProvider,The following statement contains a magic number: for (int index = 1; index <= ipClient.LineCount; index++) {  	// Enable DTMF recognition for each line  	ipClient.StartInBandDTMFRecognition (index);  	// Create a DTMF event holder to cut down on echos  	dtmfEvents [index] = new List<DTMFEventData> (10);  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,inTELIPhoneTelecomProvider,The following statement contains a magic number: dtmfEvents [index] = new List<DTMFEventData> (10);  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,SendDTMF,The following statement contains a magic number: if (inAudio) {  	ipClient.SendInBandDTMF (lineNumber' dtmfString' 150' 100);  }  else {  	ipClient.SendRTPOutofBandDTMF (lineNumber' dtmfString);  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,SendDTMF,The following statement contains a magic number: if (inAudio) {  	ipClient.SendInBandDTMF (lineNumber' dtmfString' 150' 100);  }  else {  	ipClient.SendRTPOutofBandDTMF (lineNumber' dtmfString);  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,SendDTMF,The following statement contains a magic number: ipClient.SendInBandDTMF (lineNumber' dtmfString' 150' 100);  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,SendDTMF,The following statement contains a magic number: ipClient.SendInBandDTMF (lineNumber' dtmfString' 150' 100);  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The following statement contains a magic number: try {  	bool inAudio = e.DTMFType == DTMFType.InAudio ? true : false;  	foreach (DTMFEventData dtmfData in dtmfEvents [e.LineNumber]) {  		// Are the digits the same?  		if (dtmfData.DTMFString == e.DTMFString) {  			// Is it a different type of dtmf event?  			if (dtmfData.InAudio != inAudio) {  				// Is the timestamp difference within 3 seconds?  				if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalSeconds <= 3) {  					// If we get here' this is probably an echo  					return true;  				}  			}  			else {  				// Is the timestamp differnce within 50 ms?  				if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalMilliseconds <= 50) {  					// If we get here' this is probably an echo  					return true;  				}  			}  		}  	}  }  catch {  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The following statement contains a magic number: try {  	bool inAudio = e.DTMFType == DTMFType.InAudio ? true : false;  	foreach (DTMFEventData dtmfData in dtmfEvents [e.LineNumber]) {  		// Are the digits the same?  		if (dtmfData.DTMFString == e.DTMFString) {  			// Is it a different type of dtmf event?  			if (dtmfData.InAudio != inAudio) {  				// Is the timestamp difference within 3 seconds?  				if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalSeconds <= 3) {  					// If we get here' this is probably an echo  					return true;  				}  			}  			else {  				// Is the timestamp differnce within 50 ms?  				if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalMilliseconds <= 50) {  					// If we get here' this is probably an echo  					return true;  				}  			}  		}  	}  }  catch {  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The following statement contains a magic number: foreach (DTMFEventData dtmfData in dtmfEvents [e.LineNumber]) {  	// Are the digits the same?  	if (dtmfData.DTMFString == e.DTMFString) {  		// Is it a different type of dtmf event?  		if (dtmfData.InAudio != inAudio) {  			// Is the timestamp difference within 3 seconds?  			if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalSeconds <= 3) {  				// If we get here' this is probably an echo  				return true;  			}  		}  		else {  			// Is the timestamp differnce within 50 ms?  			if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalMilliseconds <= 50) {  				// If we get here' this is probably an echo  				return true;  			}  		}  	}  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The following statement contains a magic number: foreach (DTMFEventData dtmfData in dtmfEvents [e.LineNumber]) {  	// Are the digits the same?  	if (dtmfData.DTMFString == e.DTMFString) {  		// Is it a different type of dtmf event?  		if (dtmfData.InAudio != inAudio) {  			// Is the timestamp difference within 3 seconds?  			if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalSeconds <= 3) {  				// If we get here' this is probably an echo  				return true;  			}  		}  		else {  			// Is the timestamp differnce within 50 ms?  			if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalMilliseconds <= 50) {  				// If we get here' this is probably an echo  				return true;  			}  		}  	}  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The following statement contains a magic number: if (dtmfData.DTMFString == e.DTMFString) {  	// Is it a different type of dtmf event?  	if (dtmfData.InAudio != inAudio) {  		// Is the timestamp difference within 3 seconds?  		if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalSeconds <= 3) {  			// If we get here' this is probably an echo  			return true;  		}  	}  	else {  		// Is the timestamp differnce within 50 ms?  		if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalMilliseconds <= 50) {  			// If we get here' this is probably an echo  			return true;  		}  	}  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The following statement contains a magic number: if (dtmfData.DTMFString == e.DTMFString) {  	// Is it a different type of dtmf event?  	if (dtmfData.InAudio != inAudio) {  		// Is the timestamp difference within 3 seconds?  		if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalSeconds <= 3) {  			// If we get here' this is probably an echo  			return true;  		}  	}  	else {  		// Is the timestamp differnce within 50 ms?  		if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalMilliseconds <= 50) {  			// If we get here' this is probably an echo  			return true;  		}  	}  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The following statement contains a magic number: if (dtmfData.InAudio != inAudio) {  	// Is the timestamp difference within 3 seconds?  	if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalSeconds <= 3) {  		// If we get here' this is probably an echo  		return true;  	}  }  else {  	// Is the timestamp differnce within 50 ms?  	if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalMilliseconds <= 50) {  		// If we get here' this is probably an echo  		return true;  	}  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The following statement contains a magic number: if (dtmfData.InAudio != inAudio) {  	// Is the timestamp difference within 3 seconds?  	if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalSeconds <= 3) {  		// If we get here' this is probably an echo  		return true;  	}  }  else {  	// Is the timestamp differnce within 50 ms?  	if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalMilliseconds <= 50) {  		// If we get here' this is probably an echo  		return true;  	}  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The following statement contains a magic number: if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalSeconds <= 3) {  	// If we get here' this is probably an echo  	return true;  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,IsDTMFEcho,The following statement contains a magic number: if (((TimeSpan)(DateTime.Now - dtmfData.Time)).TotalMilliseconds <= 50) {  	// If we get here' this is probably an echo  	return true;  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,AddDTMFEvent,The following statement contains a magic number: try {  	// Update our DTMF event data for this line  	DTMFEventData newDTMFData = new DTMFEventData ();  	newDTMFData.DTMFString = e.DTMFString;  	newDTMFData.InAudio = e.DTMFType == DTMFType.InAudio ? true : false;  	newDTMFData.Time = DateTime.Now;  	dtmfEvents [e.LineNumber].Add (newDTMFData);  	// Only hold a maximum of the last 10 digits  	if (dtmfEvents [e.LineNumber].Count > 10)  		dtmfEvents [e.LineNumber].RemoveAt (0);  }  catch {  }  
Magic Number,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,AddDTMFEvent,The following statement contains a magic number: if (dtmfEvents [e.LineNumber].Count > 10)  	dtmfEvents [e.LineNumber].RemoveAt (0);  
Missing Default,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,ipClient_AnsweringMachineDetection,The following switch statement is missing a default case: switch (e.Result) {  case AnsweringMachineDetectionResult.AnsweringMachine:  	RaiseAnswerDetectMachine (new LineEventArgs (e.LineNumber));  	break;  case AnsweringMachineDetectionResult.Human:  	RaiseAnswerDetectHuman (new LineEventArgs (e.LineNumber));  	break;  }  
Missing Default,CallButler.Telecom,inTELIPhoneTelecomProvider,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\CallButler.Telecom\inTELIPhoneTelecomProvider.cs,GetRegistrationState,The following switch statement is missing a default case: switch (profile.ProfileState) {  case SIPProfileState.Registered:  	return "Registered";  case SIPProfileState.RegistrationError: {  	return string.Format ("Registration Error - {0}"' profile.ProfileStateDescription);  }  case SIPProfileState.Unregistered:  	return "Unregistered";  }  
