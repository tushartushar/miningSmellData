Implementation smell,Namespace,Class,File,Method,Description
Long Method,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The method has 113 lines of code.
Long Method,Controls,CountryComboBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\CountryComboBox.cs,CountryComboBox,The method has 248 lines of code.
Long Method,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The method has 117 lines of code.
Long Method,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The method has 157 lines of code.
Complex Method,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,Cyclomatic complexity of the method is 15
Complex Method,Controls,CredentialsDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\CredentialDialog.cs,GetDialogResult,Cyclomatic complexity of the method is 20
Complex Method,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,Cyclomatic complexity of the method is 14
Complex Method,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,ReCreateShadowImage,Cyclomatic complexity of the method is 13
Complex Method,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateImage,Cyclomatic complexity of the method is 20
Complex Method,Controls,ImageButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ImageButton.cs,UpdateImage,Cyclomatic complexity of the method is 13
Complex Method,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,HighlightSyntax,Cyclomatic complexity of the method is 11
Complex Method,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,Cyclomatic complexity of the method is 15
Complex Method,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,Cyclomatic complexity of the method is 8
Complex Method,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,Cyclomatic complexity of the method is 16
Complex Method,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,OnPaint,Cyclomatic complexity of the method is 8
Complex Method,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,Cyclomatic complexity of the method is 11
Complex Method,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,NumberEdit_KeyPress,Cyclomatic complexity of the method is 8
Complex Method,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,OnPaint,Cyclomatic complexity of the method is 10
Complex Method,Controls,SmoothLabel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\SmoothLabel.cs,OnTextAlignChanged,Cyclomatic complexity of the method is 23
Complex Method,Controls,ToolStripLabelEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripLabelEx.cs,ProcessTextAlignment,Cyclomatic complexity of the method is 23
Complex Method,Controls,TrackBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TrackBarEx.cs,pbTracker_MouseMove,Cyclomatic complexity of the method is 8
Complex Method,Controls.AppBar,AppBar,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AppBar\AppBar.cs,UpdateDockedAppBarPosition,Cyclomatic complexity of the method is 13
Complex Method,Controls.AppBar,NativeMethods,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AppBar\NativeMethods.cs,DockAppBar,Cyclomatic complexity of the method is 15
Complex Method,Controls.Popup,Popup,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Popup\Popup.cs,OnNcHitTest,Cyclomatic complexity of the method is 10
Complex Method,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,Cyclomatic complexity of the method is 14
Complex Method,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,Cyclomatic complexity of the method is 9
Long Parameter List,Controls,CREDUI,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\CredentialDialog.cs,PromptForCredentials,The method has 10 parameters.
Long Parameter List,Controls,LoadingDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LoadingDialog.cs,ShowDialog,The method has 5 parameters.
Long Parameter List,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,GetMapImage,The method has 5 parameters.
Long Parameter List,Controls,ControlUtilities,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Utilities.cs,CreateReflectionImage,The method has 5 parameters.
Long Parameter List,Controls.AppBar,NativeMethods,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AppBar\NativeMethods.cs,MoveWindow,The method has 6 parameters.
Long Parameter List,Controls.Popup,Popup,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Popup\Popup.cs,Popup,The method has 7 parameters.
Long Statement,Controls,CredentialsDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\CredentialDialog.cs,ShowDialog,The length of the statement  "	CREDUI.ReturnCodes code = CREDUI.PromptForCredentials (ref info' this.Target' IntPtr.Zero' 0' name' CREDUI.MAX_USERNAME_LENGTH' password' CREDUI.MAX_PASSWORD_LENGTH' ref saveChecked' flags); " is 190.
Long Statement,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The length of the statement  "		using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' gradientWidth)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) { " is 209.
Long Statement,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The length of the statement  "		using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' this.Height - gradientWidth)' new Point (0' this.Height)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) { " is 233.
Long Statement,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The length of the statement  "		using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (gradientWidth' 0)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) { " is 209.
Long Statement,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The length of the statement  "		using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (this.Width - gradientWidth' 0)' new Point (this.Width' 0)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) { " is 231.
Long Statement,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,CalculateBackColors,The length of the statement  "	hilightColor = Color.FromArgb (backColor.A' Math.Min (255' (int)((float)backColor.R + hilightBrightness))' Math.Min (255' (int)((float)backColor.G + hilightBrightness))' Math.Min (255' (int)((float)backColor.B + hilightBrightness))); " is 233.
Long Statement,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,CalculateBackColors,The length of the statement  "	//hilightColor = Color.FromArgb(backColor.A' Math.Min(255' (int)((float)backColor.R + 21))' Math.Min(255' (int)((float)backColor.G + 21))' Math.Min(255' (int)((float)backColor.B + 21))); " is 186.
Long Statement,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,GetImageAlphaAttributes,The length of the statement  "	imgAttrs.SetColorMatrix (clrMatrix' System.Drawing.Imaging.ColorMatrixFlag.Default' System.Drawing.Imaging.ColorAdjustType.Bitmap); " is 131.
Long Statement,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The length of the statement  "	Rectangle br = new Rectangle (this.Width - cornerRadius - borderOffset - 1' this.Height - cornerRadius - borderOffset - 1' cornerRadius' cornerRadius); " is 151.
Long Statement,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateImage,The length of the statement  "		og.DrawImage (backgroundImage' new Rectangle (0' 0' this.Width' this.Height)' 0' 0' this.Width' this.Height' GraphicsUnit.Pixel' backgroundImageAttributes); " is 156.
Long Statement,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateImage,The length of the statement  "				bg.DrawImage (bevelOverlayImage' new Rectangle (0' 0' this.Width' this.Height)' 0' 0' bevelOverlayImage.Width' bevelOverlayImage.Height' GraphicsUnit.Pixel' overlayImageAttributes); " is 181.
Long Statement,Controls,GradientPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GradientPanel.cs,OnPaint,The length of the statement  "		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (this.ClientRectangle' this.BackColor' this.ForeColor' gradientAngle)) { " is 139.
Long Statement,Controls,GradientPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GradientPanel.cs,OnPaint,The length of the statement  "				e.Graphics.DrawRectangle (borderPen' halfBorderWidth' halfBorderWidth' this.Width - halfBorderWidth - 1' this.Height - halfBorderWidth - 1); " is 140.
Long Statement,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The length of the statement  "	LinearGradientBrush horizHeaderGradient = new LinearGradientBrush (new Point (cornerRadius - 1' 0)' new Point (this.Width' 0)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)); " is 205.
Long Statement,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The length of the statement  "		vertHeaderGradient = new LinearGradientBrush (new Point (0' cornerRadius)' new Point (0' headerHeight)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)); " is 182.
Long Statement,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The length of the statement  "			horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor); " is 172.
Long Statement,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The length of the statement  "		vertHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' headerHeight - cornerRadius + 1)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor); " is 190.
Long Statement,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The length of the statement  "			horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor); " is 172.
Long Statement,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The length of the statement  "	this.Font = new System.Drawing.Font ("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 136.
Long Statement,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,HighlightSyntax,The length of the statement  "		System.Text.RegularExpressions.MatchCollection matches = System.Text.RegularExpressions.Regex.Matches (line' string.Format ("[{0}].+?[{0}]"' triggerCharsString)); " is 162.
Long Statement,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The length of the statement  "				FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar); " is 124.
Long Statement,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The length of the statement  "			FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar); " is 124.
Long Statement,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The length of the statement  "			textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2); " is 179.
Long Statement,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The length of the statement  "					itemHeight += (int)TextRenderer.MeasureText (g' caption' captionFont' new Size (this.Width' 0)' TextFormatFlags.Left | TextFormatFlags.WordBreak).Height; " is 153.
Long Statement,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The length of the statement  "			Rectangle imageRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top + (mainItemHeight - itemImage.Height) / 2' itemImage.Width' itemImage.Height); " is 156.
Long Statement,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The length of the statement  "			stringRect = new Rectangle (imageRect.Right + 2' e.Bounds.Top' e.Bounds.Width - imageRect.Right - itemMargin' mainItemHeight); " is 126.
Long Statement,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The length of the statement  "				TextRenderer.DrawText (e.Graphics' GetItemText (Items [e.Index])' e.Font' stringRect' ForeColor' TextFormatFlags.EndEllipsis | TextFormatFlags.SingleLine | TextFormatFlags.VerticalCenter); " is 188.
Long Statement,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The length of the statement  "					TextRenderer.DrawText (e.Graphics' caption' captionFont' stringRect' captionColor' TextFormatFlags.Left | TextFormatFlags.Top | TextFormatFlags.WordBreak); " is 155.
Long Statement,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,LoadLocation,The length of the statement  "	string url = new System.Uri (string.Format ("http://maps.google.com/maps/geo?q={0}&output=xml&key={1}"' location' googleAPIKey)).AbsoluteUri; " is 141.
Long Statement,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,LoadLocation,The length of the statement  "		System.Net.HttpWebResponse response = (System.Net.HttpWebResponse)System.Net.HttpWebRequest.Create (url).GetResponse (); " is 120.
Long Statement,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,ReloadMap,The length of the statement  "	string url = string.Format ("http://maps.google.com/staticmap?center={0}'{1}&zoom={2}&size={3}x{4}&key={5}"' Latitude' Longitude' Zoom' this.Width' this.Height' googleAPIKey); " is 175.
Long Statement,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,GetMapImage,The length of the statement  "		string url = string.Format ("http://maps.google.com/staticmap?center={0}'{1}&zoom={2}&size={3}x{4}&key={5}"' latitude' longitude' Math.Min (Math.Max (zoom' 0)' 19)' width' height' googleAPIKey); " is 194.
Long Statement,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,GetMapImage,The length of the statement  "	string url = new System.Uri (string.Format ("http://maps.google.com/maps/geo?q={0}&output=xml&key={1}"' location' googleAPIKey)).AbsoluteUri; " is 141.
Long Statement,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,GetMapImage,The length of the statement  "		System.Net.HttpWebResponse response = (System.Net.HttpWebResponse)System.Net.HttpWebRequest.Create (url).GetResponse (); " is 120.
Long Statement,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The length of the statement  "		ControlPaint.DrawScrollButton (e.Graphics' 0' 0' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Up' ButtonState.Pushed); " is 127.
Long Statement,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The length of the statement  "		ControlPaint.DrawScrollButton (e.Graphics' 0' 0' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Up' ButtonState.Normal); " is 127.
Long Statement,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The length of the statement  "		ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Pushed); " is 149.
Long Statement,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The length of the statement  "		ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Normal); " is 149.
Long Statement,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,OnPaint,The length of the statement  "			using (LinearGradientBrush gradientBrush = new LinearGradientBrush (this.ClientRectangle' minColor' maxColor' 0' false)) { " is 122.
Long Statement,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,CreateReflectionImage,The length of the statement  "	reflectionImage = ControlUtilities.CreateReflectionImage (image' reflectionHeight' alpha' autoOffsetThreshold' out offsetVal); " is 126.
Long Statement,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,OnPaint,The length of the statement  "		e.Graphics.DrawImage (reflectionImage' (this.Width - image.Width) / 2' mainImageY + image.Height + offset' reflectionImage.Width' reflectionImage.Height); " is 154.
Long Statement,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The length of the statement  "		path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90); " is 137.
Long Statement,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The length of the statement  "		path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90); " is 185.
Long Statement,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The length of the statement  "		path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90); " is 137.
Long Statement,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The length of the statement  "		path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90); " is 122.
Long Statement,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The length of the statement  "		path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90); " is 155.
Long Statement,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The length of the statement  "		path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90); " is 122.
Long Statement,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The length of the statement  "		path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90); " is 137.
Long Statement,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The length of the statement  "		path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90); " is 122.
Long Statement,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The length of the statement  "		using (LinearGradientBrush gradBrush = new LinearGradientBrush (new Point (this.Width - 6' 0)' new Point (this.Width' 0)' Color.FromArgb (0' 0' 0' 0)' Color.FromArgb (100' 0' 0' 0))) { " is 184.
Long Statement,Controls,ToolStripLabelEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripLabelEx.cs,OnPaint,The length of the statement  "		if (this.Image != null && (DisplayStyle == ToolStripItemDisplayStyle.ImageAndText || DisplayStyle == ToolStripItemDisplayStyle.Image)) { " is 136.
Long Statement,Controls,ToolStripLabelEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripLabelEx.cs,OnPaint,The length of the statement  "			e.Graphics.DrawString (this.Text' this.Font' textBrush' new RectangleF (this.Image.Width' 0' this.Width - this.Image.Width' this.Height)' stringFormat); " is 152.
Long Statement,Controls,TrackBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TrackBarEx.cs,UpdateValue,The length of the statement  "		this.value = this.maxValue - ((int)((float)pbTracker.Top / (float)(this.Height - pbTracker.Height) * (float)valueRange) + this.MinValue); " is 137.
Long Statement,Controls.MultiPanel,MultiPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MultiPanel\MultiPanel.cs,InitializeComponent,The length of the statement  "	this.Font = new System.Drawing.Font ("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 136.
Long Statement,Controls.Popup,Popup,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Popup\Popup.cs,OnGetMinMaxInfo,The length of the statement  "	NativeMethods.MINMAXINFO minmax = (NativeMethods.MINMAXINFO)Marshal.PtrToStructure (m.LParam' typeof(NativeMethods.MINMAXINFO)); " is 128.
Long Statement,Controls.Popup,Popup,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Popup\Popup.cs,PaintSizeGrip,The length of the statement  "		this.sizeGripRenderer.DrawBackground (e.Graphics' new Rectangle (clientSize.Width - 0x10' clientSize.Height - 0x10' 0x10' 0x10)); " is 129.
Long Statement,Controls.Popup,Popup,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Popup\Popup.cs,PaintSizeGrip,The length of the statement  "		ControlPaint.DrawSizeGrip (e.Graphics' content.BackColor' clientSize.Width - 0x10' clientSize.Height - 0x10' 0x10' 0x10); " is 121.
Long Statement,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The length of the statement  "	this.pnlDockPadding.Font = new System.Drawing.Font ("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 151.
Long Statement,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The length of the statement  "	this.lblTitle.Font = new System.Drawing.Font ("Tahoma"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 142.
Long Statement,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The length of the statement  "	this.lblDescription.Font = new System.Drawing.Font ("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 151.
Long Statement,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The length of the statement  "	this.lblTitle.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 187.
Long Statement,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The length of the statement  "	this.lblTitle.Font = new System.Drawing.Font ("Tahoma"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 147.
Long Statement,Controls.Wizard,InfoPage,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoPage.cs,InitializeComponent,The length of the statement  "	this.lblDescription.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 238.
Long Statement,Controls.Wizard,InfoPage,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoPage.cs,InitializeComponent,The length of the statement  "	this.lblDescription.Font = new System.Drawing.Font ("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 158.
Long Statement,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The length of the statement  "	this.Font = new System.Drawing.Font ("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 136.
Long Statement,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,UpdateTabPanelSize,The length of the statement  "	pnlTabs.Padding = new Padding (TabPanelWidth - tabWidth' pnlTabs.Padding.Top' pnlTabs.Padding.Right' pnlTabs.Padding.Bottom); " is 125.
Long Statement,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,The length of the statement  "	Color nonSelectedColor = Color.FromArgb ((int)(page.BackColor.R * 0.95f)' (int)(page.BackColor.G * 0.95f)' (int)(page.BackColor.B * 0.95f)); " is 140.
Long Statement,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,Back,The length of the statement  "	Debug.Assert (this.PageIndex > 0 && this.PageIndex < vPages.Count' "Attempted to go back to a page that doesn't exist"); " is 120.
Long Statement,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The length of the statement  "					e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10)); " is 180.
Long Statement,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The length of the statement  "		RectangleF layout = new RectangleF ((this.Width - textSize.Width) / 2' (this.pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height); " is 149.
Complex Conditional,Controls.Popup,Popup,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Popup\Popup.cs,InternalProcessResizing,The conditional expression  "m.Msg == NativeMethods.WM_NCACTIVATE && m.WParam != IntPtr.Zero && childPopup != null && childPopup.Visible"  is complex.
Empty Catch Block,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,OnCreateControl,The method has an empty catch block.
Empty Catch Block,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,ProcessListBoxSelection,The method has an empty catch block.
Empty Catch Block,Controls,LoadingDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LoadingDialog.cs,DialogThreadProc,The method has an empty catch block.
Empty Catch Block,Controls,LoadingDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LoadingDialog.cs,ShowDialog,The method has an empty catch block.
Empty Catch Block,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,LoadLocation,The method has an empty catch block.
Empty Catch Block,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,ReloadMap,The method has an empty catch block.
Empty Catch Block,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,GetMapImage,The method has an empty catch block.
Empty Catch Block,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,GetMapImage,The method has an empty catch block.
Empty Catch Block,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,SetStringValue,The method has an empty catch block.
Empty Catch Block,Controls,RichTextBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RichTextBoxEx.cs,OnLinkClicked,The method has an empty catch block.
Magic Number,Controls,AnimatedProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AnimatedProgressBarEx.cs,AnimatedProgressBarEx,The following statement contains a magic number: this.Speed = 99;  
Magic Number,Controls,AnimatedProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AnimatedProgressBarEx.cs,InitializeComponent,The following statement contains a magic number: this.progressBarEx.MaxValue = 100;  
Magic Number,Controls,AnimatedProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AnimatedProgressBarEx.cs,InitializeComponent,The following statement contains a magic number: this.progressBarEx.Size = new System.Drawing.Size (200' 8);  
Magic Number,Controls,AnimatedProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AnimatedProgressBarEx.cs,InitializeComponent,The following statement contains a magic number: this.progressBarEx.Size = new System.Drawing.Size (200' 8);  
Magic Number,Controls,AnimatedProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AnimatedProgressBarEx.cs,InitializeComponent,The following statement contains a magic number: this.tmrAnim.Interval = 50;  
Magic Number,Controls,AnimatedProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AnimatedProgressBarEx.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (200' 8);  
Magic Number,Controls,AnimatedProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AnimatedProgressBarEx.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (200' 8);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineWidth > 0) {  	pe.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	float arwLength = lineWidth * arrowLength;  	//pe.Graphics.TranslateTransform(this.Width / 2' this.Height / 2);  	// Draw Line  	using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  		Point startPoint = new Point ();  		Point endPoint = new Point ();  		if (lineOrientation == LineOrientation.Horizontal) {  			startPoint.X = 0;  			startPoint.Y = this.Height / 2;  			endPoint.X = this.Width;  			endPoint.Y = this.Height / 2;  			if (arrowAtStart)  				startPoint.X += (int)arwLength;  			if (arrowAtEnd)  				endPoint.X -= (int)arwLength;  		}  		else {  			startPoint.X = this.Width / 2;  			startPoint.Y = 0;  			endPoint.X = this.Width / 2;  			endPoint.Y = this.Height;  			if (arrowAtStart)  				startPoint.Y += (int)arwLength;  			if (arrowAtEnd)  				endPoint.Y -= (int)arwLength;  		}  		pe.Graphics.DrawLine (linePen' startPoint' endPoint);  		using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  			if (arrowAtEnd) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  					pe.Graphics.RotateTransform (90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  			pe.Graphics.ResetTransform ();  			if (arrowAtStart) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (0' this.Height / 2);  					pe.Graphics.RotateTransform (180.0f);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' 0);  					pe.Graphics.RotateTransform (-90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  		}  	}  }  else  	base.OnPaint (pe);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineWidth > 0) {  	pe.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	float arwLength = lineWidth * arrowLength;  	//pe.Graphics.TranslateTransform(this.Width / 2' this.Height / 2);  	// Draw Line  	using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  		Point startPoint = new Point ();  		Point endPoint = new Point ();  		if (lineOrientation == LineOrientation.Horizontal) {  			startPoint.X = 0;  			startPoint.Y = this.Height / 2;  			endPoint.X = this.Width;  			endPoint.Y = this.Height / 2;  			if (arrowAtStart)  				startPoint.X += (int)arwLength;  			if (arrowAtEnd)  				endPoint.X -= (int)arwLength;  		}  		else {  			startPoint.X = this.Width / 2;  			startPoint.Y = 0;  			endPoint.X = this.Width / 2;  			endPoint.Y = this.Height;  			if (arrowAtStart)  				startPoint.Y += (int)arwLength;  			if (arrowAtEnd)  				endPoint.Y -= (int)arwLength;  		}  		pe.Graphics.DrawLine (linePen' startPoint' endPoint);  		using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  			if (arrowAtEnd) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  					pe.Graphics.RotateTransform (90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  			pe.Graphics.ResetTransform ();  			if (arrowAtStart) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (0' this.Height / 2);  					pe.Graphics.RotateTransform (180.0f);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' 0);  					pe.Graphics.RotateTransform (-90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  		}  	}  }  else  	base.OnPaint (pe);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineWidth > 0) {  	pe.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	float arwLength = lineWidth * arrowLength;  	//pe.Graphics.TranslateTransform(this.Width / 2' this.Height / 2);  	// Draw Line  	using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  		Point startPoint = new Point ();  		Point endPoint = new Point ();  		if (lineOrientation == LineOrientation.Horizontal) {  			startPoint.X = 0;  			startPoint.Y = this.Height / 2;  			endPoint.X = this.Width;  			endPoint.Y = this.Height / 2;  			if (arrowAtStart)  				startPoint.X += (int)arwLength;  			if (arrowAtEnd)  				endPoint.X -= (int)arwLength;  		}  		else {  			startPoint.X = this.Width / 2;  			startPoint.Y = 0;  			endPoint.X = this.Width / 2;  			endPoint.Y = this.Height;  			if (arrowAtStart)  				startPoint.Y += (int)arwLength;  			if (arrowAtEnd)  				endPoint.Y -= (int)arwLength;  		}  		pe.Graphics.DrawLine (linePen' startPoint' endPoint);  		using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  			if (arrowAtEnd) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  					pe.Graphics.RotateTransform (90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  			pe.Graphics.ResetTransform ();  			if (arrowAtStart) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (0' this.Height / 2);  					pe.Graphics.RotateTransform (180.0f);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' 0);  					pe.Graphics.RotateTransform (-90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  		}  	}  }  else  	base.OnPaint (pe);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineWidth > 0) {  	pe.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	float arwLength = lineWidth * arrowLength;  	//pe.Graphics.TranslateTransform(this.Width / 2' this.Height / 2);  	// Draw Line  	using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  		Point startPoint = new Point ();  		Point endPoint = new Point ();  		if (lineOrientation == LineOrientation.Horizontal) {  			startPoint.X = 0;  			startPoint.Y = this.Height / 2;  			endPoint.X = this.Width;  			endPoint.Y = this.Height / 2;  			if (arrowAtStart)  				startPoint.X += (int)arwLength;  			if (arrowAtEnd)  				endPoint.X -= (int)arwLength;  		}  		else {  			startPoint.X = this.Width / 2;  			startPoint.Y = 0;  			endPoint.X = this.Width / 2;  			endPoint.Y = this.Height;  			if (arrowAtStart)  				startPoint.Y += (int)arwLength;  			if (arrowAtEnd)  				endPoint.Y -= (int)arwLength;  		}  		pe.Graphics.DrawLine (linePen' startPoint' endPoint);  		using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  			if (arrowAtEnd) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  					pe.Graphics.RotateTransform (90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  			pe.Graphics.ResetTransform ();  			if (arrowAtStart) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (0' this.Height / 2);  					pe.Graphics.RotateTransform (180.0f);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' 0);  					pe.Graphics.RotateTransform (-90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  		}  	}  }  else  	base.OnPaint (pe);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineWidth > 0) {  	pe.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	float arwLength = lineWidth * arrowLength;  	//pe.Graphics.TranslateTransform(this.Width / 2' this.Height / 2);  	// Draw Line  	using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  		Point startPoint = new Point ();  		Point endPoint = new Point ();  		if (lineOrientation == LineOrientation.Horizontal) {  			startPoint.X = 0;  			startPoint.Y = this.Height / 2;  			endPoint.X = this.Width;  			endPoint.Y = this.Height / 2;  			if (arrowAtStart)  				startPoint.X += (int)arwLength;  			if (arrowAtEnd)  				endPoint.X -= (int)arwLength;  		}  		else {  			startPoint.X = this.Width / 2;  			startPoint.Y = 0;  			endPoint.X = this.Width / 2;  			endPoint.Y = this.Height;  			if (arrowAtStart)  				startPoint.Y += (int)arwLength;  			if (arrowAtEnd)  				endPoint.Y -= (int)arwLength;  		}  		pe.Graphics.DrawLine (linePen' startPoint' endPoint);  		using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  			if (arrowAtEnd) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  					pe.Graphics.RotateTransform (90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  			pe.Graphics.ResetTransform ();  			if (arrowAtStart) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (0' this.Height / 2);  					pe.Graphics.RotateTransform (180.0f);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' 0);  					pe.Graphics.RotateTransform (-90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  		}  	}  }  else  	base.OnPaint (pe);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineWidth > 0) {  	pe.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	float arwLength = lineWidth * arrowLength;  	//pe.Graphics.TranslateTransform(this.Width / 2' this.Height / 2);  	// Draw Line  	using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  		Point startPoint = new Point ();  		Point endPoint = new Point ();  		if (lineOrientation == LineOrientation.Horizontal) {  			startPoint.X = 0;  			startPoint.Y = this.Height / 2;  			endPoint.X = this.Width;  			endPoint.Y = this.Height / 2;  			if (arrowAtStart)  				startPoint.X += (int)arwLength;  			if (arrowAtEnd)  				endPoint.X -= (int)arwLength;  		}  		else {  			startPoint.X = this.Width / 2;  			startPoint.Y = 0;  			endPoint.X = this.Width / 2;  			endPoint.Y = this.Height;  			if (arrowAtStart)  				startPoint.Y += (int)arwLength;  			if (arrowAtEnd)  				endPoint.Y -= (int)arwLength;  		}  		pe.Graphics.DrawLine (linePen' startPoint' endPoint);  		using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  			if (arrowAtEnd) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  					pe.Graphics.RotateTransform (90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  			pe.Graphics.ResetTransform ();  			if (arrowAtStart) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (0' this.Height / 2);  					pe.Graphics.RotateTransform (180.0f);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' 0);  					pe.Graphics.RotateTransform (-90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  		}  	}  }  else  	base.OnPaint (pe);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineWidth > 0) {  	pe.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	float arwLength = lineWidth * arrowLength;  	//pe.Graphics.TranslateTransform(this.Width / 2' this.Height / 2);  	// Draw Line  	using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  		Point startPoint = new Point ();  		Point endPoint = new Point ();  		if (lineOrientation == LineOrientation.Horizontal) {  			startPoint.X = 0;  			startPoint.Y = this.Height / 2;  			endPoint.X = this.Width;  			endPoint.Y = this.Height / 2;  			if (arrowAtStart)  				startPoint.X += (int)arwLength;  			if (arrowAtEnd)  				endPoint.X -= (int)arwLength;  		}  		else {  			startPoint.X = this.Width / 2;  			startPoint.Y = 0;  			endPoint.X = this.Width / 2;  			endPoint.Y = this.Height;  			if (arrowAtStart)  				startPoint.Y += (int)arwLength;  			if (arrowAtEnd)  				endPoint.Y -= (int)arwLength;  		}  		pe.Graphics.DrawLine (linePen' startPoint' endPoint);  		using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  			if (arrowAtEnd) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  					pe.Graphics.RotateTransform (90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  			pe.Graphics.ResetTransform ();  			if (arrowAtStart) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (0' this.Height / 2);  					pe.Graphics.RotateTransform (180.0f);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' 0);  					pe.Graphics.RotateTransform (-90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  		}  	}  }  else  	base.OnPaint (pe);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineWidth > 0) {  	pe.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	float arwLength = lineWidth * arrowLength;  	//pe.Graphics.TranslateTransform(this.Width / 2' this.Height / 2);  	// Draw Line  	using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  		Point startPoint = new Point ();  		Point endPoint = new Point ();  		if (lineOrientation == LineOrientation.Horizontal) {  			startPoint.X = 0;  			startPoint.Y = this.Height / 2;  			endPoint.X = this.Width;  			endPoint.Y = this.Height / 2;  			if (arrowAtStart)  				startPoint.X += (int)arwLength;  			if (arrowAtEnd)  				endPoint.X -= (int)arwLength;  		}  		else {  			startPoint.X = this.Width / 2;  			startPoint.Y = 0;  			endPoint.X = this.Width / 2;  			endPoint.Y = this.Height;  			if (arrowAtStart)  				startPoint.Y += (int)arwLength;  			if (arrowAtEnd)  				endPoint.Y -= (int)arwLength;  		}  		pe.Graphics.DrawLine (linePen' startPoint' endPoint);  		using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  			if (arrowAtEnd) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  					pe.Graphics.RotateTransform (90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  			pe.Graphics.ResetTransform ();  			if (arrowAtStart) {  				if (lineOrientation == LineOrientation.Horizontal) {  					pe.Graphics.TranslateTransform (0' this.Height / 2);  					pe.Graphics.RotateTransform (180.0f);  				}  				else {  					pe.Graphics.TranslateTransform (this.Width / 2' 0);  					pe.Graphics.RotateTransform (-90.0f);  				}  				pe.Graphics.FillPath (arrowBrush' arrowPath);  			}  		}  	}  }  else  	base.OnPaint (pe);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (lineOrientation == LineOrientation.Horizontal) {  		startPoint.X = 0;  		startPoint.Y = this.Height / 2;  		endPoint.X = this.Width;  		endPoint.Y = this.Height / 2;  		if (arrowAtStart)  			startPoint.X += (int)arwLength;  		if (arrowAtEnd)  			endPoint.X -= (int)arwLength;  	}  	else {  		startPoint.X = this.Width / 2;  		startPoint.Y = 0;  		endPoint.X = this.Width / 2;  		endPoint.Y = this.Height;  		if (arrowAtStart)  			startPoint.Y += (int)arwLength;  		if (arrowAtEnd)  			endPoint.Y -= (int)arwLength;  	}  	pe.Graphics.DrawLine (linePen' startPoint' endPoint);  	using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  		if (arrowAtEnd) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  				pe.Graphics.RotateTransform (90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  		pe.Graphics.ResetTransform ();  		if (arrowAtStart) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (0' this.Height / 2);  				pe.Graphics.RotateTransform (180.0f);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' 0);  				pe.Graphics.RotateTransform (-90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (lineOrientation == LineOrientation.Horizontal) {  		startPoint.X = 0;  		startPoint.Y = this.Height / 2;  		endPoint.X = this.Width;  		endPoint.Y = this.Height / 2;  		if (arrowAtStart)  			startPoint.X += (int)arwLength;  		if (arrowAtEnd)  			endPoint.X -= (int)arwLength;  	}  	else {  		startPoint.X = this.Width / 2;  		startPoint.Y = 0;  		endPoint.X = this.Width / 2;  		endPoint.Y = this.Height;  		if (arrowAtStart)  			startPoint.Y += (int)arwLength;  		if (arrowAtEnd)  			endPoint.Y -= (int)arwLength;  	}  	pe.Graphics.DrawLine (linePen' startPoint' endPoint);  	using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  		if (arrowAtEnd) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  				pe.Graphics.RotateTransform (90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  		pe.Graphics.ResetTransform ();  		if (arrowAtStart) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (0' this.Height / 2);  				pe.Graphics.RotateTransform (180.0f);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' 0);  				pe.Graphics.RotateTransform (-90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (lineOrientation == LineOrientation.Horizontal) {  		startPoint.X = 0;  		startPoint.Y = this.Height / 2;  		endPoint.X = this.Width;  		endPoint.Y = this.Height / 2;  		if (arrowAtStart)  			startPoint.X += (int)arwLength;  		if (arrowAtEnd)  			endPoint.X -= (int)arwLength;  	}  	else {  		startPoint.X = this.Width / 2;  		startPoint.Y = 0;  		endPoint.X = this.Width / 2;  		endPoint.Y = this.Height;  		if (arrowAtStart)  			startPoint.Y += (int)arwLength;  		if (arrowAtEnd)  			endPoint.Y -= (int)arwLength;  	}  	pe.Graphics.DrawLine (linePen' startPoint' endPoint);  	using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  		if (arrowAtEnd) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  				pe.Graphics.RotateTransform (90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  		pe.Graphics.ResetTransform ();  		if (arrowAtStart) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (0' this.Height / 2);  				pe.Graphics.RotateTransform (180.0f);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' 0);  				pe.Graphics.RotateTransform (-90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (lineOrientation == LineOrientation.Horizontal) {  		startPoint.X = 0;  		startPoint.Y = this.Height / 2;  		endPoint.X = this.Width;  		endPoint.Y = this.Height / 2;  		if (arrowAtStart)  			startPoint.X += (int)arwLength;  		if (arrowAtEnd)  			endPoint.X -= (int)arwLength;  	}  	else {  		startPoint.X = this.Width / 2;  		startPoint.Y = 0;  		endPoint.X = this.Width / 2;  		endPoint.Y = this.Height;  		if (arrowAtStart)  			startPoint.Y += (int)arwLength;  		if (arrowAtEnd)  			endPoint.Y -= (int)arwLength;  	}  	pe.Graphics.DrawLine (linePen' startPoint' endPoint);  	using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  		if (arrowAtEnd) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  				pe.Graphics.RotateTransform (90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  		pe.Graphics.ResetTransform ();  		if (arrowAtStart) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (0' this.Height / 2);  				pe.Graphics.RotateTransform (180.0f);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' 0);  				pe.Graphics.RotateTransform (-90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (lineOrientation == LineOrientation.Horizontal) {  		startPoint.X = 0;  		startPoint.Y = this.Height / 2;  		endPoint.X = this.Width;  		endPoint.Y = this.Height / 2;  		if (arrowAtStart)  			startPoint.X += (int)arwLength;  		if (arrowAtEnd)  			endPoint.X -= (int)arwLength;  	}  	else {  		startPoint.X = this.Width / 2;  		startPoint.Y = 0;  		endPoint.X = this.Width / 2;  		endPoint.Y = this.Height;  		if (arrowAtStart)  			startPoint.Y += (int)arwLength;  		if (arrowAtEnd)  			endPoint.Y -= (int)arwLength;  	}  	pe.Graphics.DrawLine (linePen' startPoint' endPoint);  	using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  		if (arrowAtEnd) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  				pe.Graphics.RotateTransform (90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  		pe.Graphics.ResetTransform ();  		if (arrowAtStart) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (0' this.Height / 2);  				pe.Graphics.RotateTransform (180.0f);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' 0);  				pe.Graphics.RotateTransform (-90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (lineOrientation == LineOrientation.Horizontal) {  		startPoint.X = 0;  		startPoint.Y = this.Height / 2;  		endPoint.X = this.Width;  		endPoint.Y = this.Height / 2;  		if (arrowAtStart)  			startPoint.X += (int)arwLength;  		if (arrowAtEnd)  			endPoint.X -= (int)arwLength;  	}  	else {  		startPoint.X = this.Width / 2;  		startPoint.Y = 0;  		endPoint.X = this.Width / 2;  		endPoint.Y = this.Height;  		if (arrowAtStart)  			startPoint.Y += (int)arwLength;  		if (arrowAtEnd)  			endPoint.Y -= (int)arwLength;  	}  	pe.Graphics.DrawLine (linePen' startPoint' endPoint);  	using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  		if (arrowAtEnd) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  				pe.Graphics.RotateTransform (90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  		pe.Graphics.ResetTransform ();  		if (arrowAtStart) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (0' this.Height / 2);  				pe.Graphics.RotateTransform (180.0f);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' 0);  				pe.Graphics.RotateTransform (-90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (lineOrientation == LineOrientation.Horizontal) {  		startPoint.X = 0;  		startPoint.Y = this.Height / 2;  		endPoint.X = this.Width;  		endPoint.Y = this.Height / 2;  		if (arrowAtStart)  			startPoint.X += (int)arwLength;  		if (arrowAtEnd)  			endPoint.X -= (int)arwLength;  	}  	else {  		startPoint.X = this.Width / 2;  		startPoint.Y = 0;  		endPoint.X = this.Width / 2;  		endPoint.Y = this.Height;  		if (arrowAtStart)  			startPoint.Y += (int)arwLength;  		if (arrowAtEnd)  			endPoint.Y -= (int)arwLength;  	}  	pe.Graphics.DrawLine (linePen' startPoint' endPoint);  	using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  		if (arrowAtEnd) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  				pe.Graphics.RotateTransform (90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  		pe.Graphics.ResetTransform ();  		if (arrowAtStart) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (0' this.Height / 2);  				pe.Graphics.RotateTransform (180.0f);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' 0);  				pe.Graphics.RotateTransform (-90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (Pen linePen = new Pen (this.ForeColor' lineWidth)) {  	Point startPoint = new Point ();  	Point endPoint = new Point ();  	if (lineOrientation == LineOrientation.Horizontal) {  		startPoint.X = 0;  		startPoint.Y = this.Height / 2;  		endPoint.X = this.Width;  		endPoint.Y = this.Height / 2;  		if (arrowAtStart)  			startPoint.X += (int)arwLength;  		if (arrowAtEnd)  			endPoint.X -= (int)arwLength;  	}  	else {  		startPoint.X = this.Width / 2;  		startPoint.Y = 0;  		endPoint.X = this.Width / 2;  		endPoint.Y = this.Height;  		if (arrowAtStart)  			startPoint.Y += (int)arwLength;  		if (arrowAtEnd)  			endPoint.Y -= (int)arwLength;  	}  	pe.Graphics.DrawLine (linePen' startPoint' endPoint);  	using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  		if (arrowAtEnd) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  				pe.Graphics.RotateTransform (90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  		pe.Graphics.ResetTransform ();  		if (arrowAtStart) {  			if (lineOrientation == LineOrientation.Horizontal) {  				pe.Graphics.TranslateTransform (0' this.Height / 2);  				pe.Graphics.RotateTransform (180.0f);  			}  			else {  				pe.Graphics.TranslateTransform (this.Width / 2' 0);  				pe.Graphics.RotateTransform (-90.0f);  			}  			pe.Graphics.FillPath (arrowBrush' arrowPath);  		}  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineOrientation == LineOrientation.Horizontal) {  	startPoint.X = 0;  	startPoint.Y = this.Height / 2;  	endPoint.X = this.Width;  	endPoint.Y = this.Height / 2;  	if (arrowAtStart)  		startPoint.X += (int)arwLength;  	if (arrowAtEnd)  		endPoint.X -= (int)arwLength;  }  else {  	startPoint.X = this.Width / 2;  	startPoint.Y = 0;  	endPoint.X = this.Width / 2;  	endPoint.Y = this.Height;  	if (arrowAtStart)  		startPoint.Y += (int)arwLength;  	if (arrowAtEnd)  		endPoint.Y -= (int)arwLength;  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineOrientation == LineOrientation.Horizontal) {  	startPoint.X = 0;  	startPoint.Y = this.Height / 2;  	endPoint.X = this.Width;  	endPoint.Y = this.Height / 2;  	if (arrowAtStart)  		startPoint.X += (int)arwLength;  	if (arrowAtEnd)  		endPoint.X -= (int)arwLength;  }  else {  	startPoint.X = this.Width / 2;  	startPoint.Y = 0;  	endPoint.X = this.Width / 2;  	endPoint.Y = this.Height;  	if (arrowAtStart)  		startPoint.Y += (int)arwLength;  	if (arrowAtEnd)  		endPoint.Y -= (int)arwLength;  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineOrientation == LineOrientation.Horizontal) {  	startPoint.X = 0;  	startPoint.Y = this.Height / 2;  	endPoint.X = this.Width;  	endPoint.Y = this.Height / 2;  	if (arrowAtStart)  		startPoint.X += (int)arwLength;  	if (arrowAtEnd)  		endPoint.X -= (int)arwLength;  }  else {  	startPoint.X = this.Width / 2;  	startPoint.Y = 0;  	endPoint.X = this.Width / 2;  	endPoint.Y = this.Height;  	if (arrowAtStart)  		startPoint.Y += (int)arwLength;  	if (arrowAtEnd)  		endPoint.Y -= (int)arwLength;  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineOrientation == LineOrientation.Horizontal) {  	startPoint.X = 0;  	startPoint.Y = this.Height / 2;  	endPoint.X = this.Width;  	endPoint.Y = this.Height / 2;  	if (arrowAtStart)  		startPoint.X += (int)arwLength;  	if (arrowAtEnd)  		endPoint.X -= (int)arwLength;  }  else {  	startPoint.X = this.Width / 2;  	startPoint.Y = 0;  	endPoint.X = this.Width / 2;  	endPoint.Y = this.Height;  	if (arrowAtStart)  		startPoint.Y += (int)arwLength;  	if (arrowAtEnd)  		endPoint.Y -= (int)arwLength;  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: startPoint.Y = this.Height / 2;  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: endPoint.Y = this.Height / 2;  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: startPoint.X = this.Width / 2;  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: endPoint.X = this.Width / 2;  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  	if (arrowAtEnd) {  		if (lineOrientation == LineOrientation.Horizontal) {  			pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  		}  		else {  			pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  			pe.Graphics.RotateTransform (90.0f);  		}  		pe.Graphics.FillPath (arrowBrush' arrowPath);  	}  	pe.Graphics.ResetTransform ();  	if (arrowAtStart) {  		if (lineOrientation == LineOrientation.Horizontal) {  			pe.Graphics.TranslateTransform (0' this.Height / 2);  			pe.Graphics.RotateTransform (180.0f);  		}  		else {  			pe.Graphics.TranslateTransform (this.Width / 2' 0);  			pe.Graphics.RotateTransform (-90.0f);  		}  		pe.Graphics.FillPath (arrowBrush' arrowPath);  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  	if (arrowAtEnd) {  		if (lineOrientation == LineOrientation.Horizontal) {  			pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  		}  		else {  			pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  			pe.Graphics.RotateTransform (90.0f);  		}  		pe.Graphics.FillPath (arrowBrush' arrowPath);  	}  	pe.Graphics.ResetTransform ();  	if (arrowAtStart) {  		if (lineOrientation == LineOrientation.Horizontal) {  			pe.Graphics.TranslateTransform (0' this.Height / 2);  			pe.Graphics.RotateTransform (180.0f);  		}  		else {  			pe.Graphics.TranslateTransform (this.Width / 2' 0);  			pe.Graphics.RotateTransform (-90.0f);  		}  		pe.Graphics.FillPath (arrowBrush' arrowPath);  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  	if (arrowAtEnd) {  		if (lineOrientation == LineOrientation.Horizontal) {  			pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  		}  		else {  			pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  			pe.Graphics.RotateTransform (90.0f);  		}  		pe.Graphics.FillPath (arrowBrush' arrowPath);  	}  	pe.Graphics.ResetTransform ();  	if (arrowAtStart) {  		if (lineOrientation == LineOrientation.Horizontal) {  			pe.Graphics.TranslateTransform (0' this.Height / 2);  			pe.Graphics.RotateTransform (180.0f);  		}  		else {  			pe.Graphics.TranslateTransform (this.Width / 2' 0);  			pe.Graphics.RotateTransform (-90.0f);  		}  		pe.Graphics.FillPath (arrowBrush' arrowPath);  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: using (SolidBrush arrowBrush = new SolidBrush (this.ForeColor)) {  	if (arrowAtEnd) {  		if (lineOrientation == LineOrientation.Horizontal) {  			pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  		}  		else {  			pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  			pe.Graphics.RotateTransform (90.0f);  		}  		pe.Graphics.FillPath (arrowBrush' arrowPath);  	}  	pe.Graphics.ResetTransform ();  	if (arrowAtStart) {  		if (lineOrientation == LineOrientation.Horizontal) {  			pe.Graphics.TranslateTransform (0' this.Height / 2);  			pe.Graphics.RotateTransform (180.0f);  		}  		else {  			pe.Graphics.TranslateTransform (this.Width / 2' 0);  			pe.Graphics.RotateTransform (-90.0f);  		}  		pe.Graphics.FillPath (arrowBrush' arrowPath);  	}  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (arrowAtEnd) {  	if (lineOrientation == LineOrientation.Horizontal) {  		pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  	}  	else {  		pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  		pe.Graphics.RotateTransform (90.0f);  	}  	pe.Graphics.FillPath (arrowBrush' arrowPath);  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (arrowAtEnd) {  	if (lineOrientation == LineOrientation.Horizontal) {  		pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  	}  	else {  		pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  		pe.Graphics.RotateTransform (90.0f);  	}  	pe.Graphics.FillPath (arrowBrush' arrowPath);  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineOrientation == LineOrientation.Horizontal) {  	pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  }  else {  	pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  	pe.Graphics.RotateTransform (90.0f);  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineOrientation == LineOrientation.Horizontal) {  	pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  }  else {  	pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  	pe.Graphics.RotateTransform (90.0f);  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: pe.Graphics.TranslateTransform (this.Width - 1' this.Height / 2);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: pe.Graphics.TranslateTransform (this.Width / 2' this.Height - 1);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (arrowAtStart) {  	if (lineOrientation == LineOrientation.Horizontal) {  		pe.Graphics.TranslateTransform (0' this.Height / 2);  		pe.Graphics.RotateTransform (180.0f);  	}  	else {  		pe.Graphics.TranslateTransform (this.Width / 2' 0);  		pe.Graphics.RotateTransform (-90.0f);  	}  	pe.Graphics.FillPath (arrowBrush' arrowPath);  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (arrowAtStart) {  	if (lineOrientation == LineOrientation.Horizontal) {  		pe.Graphics.TranslateTransform (0' this.Height / 2);  		pe.Graphics.RotateTransform (180.0f);  	}  	else {  		pe.Graphics.TranslateTransform (this.Width / 2' 0);  		pe.Graphics.RotateTransform (-90.0f);  	}  	pe.Graphics.FillPath (arrowBrush' arrowPath);  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineOrientation == LineOrientation.Horizontal) {  	pe.Graphics.TranslateTransform (0' this.Height / 2);  	pe.Graphics.RotateTransform (180.0f);  }  else {  	pe.Graphics.TranslateTransform (this.Width / 2' 0);  	pe.Graphics.RotateTransform (-90.0f);  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: if (lineOrientation == LineOrientation.Horizontal) {  	pe.Graphics.TranslateTransform (0' this.Height / 2);  	pe.Graphics.RotateTransform (180.0f);  }  else {  	pe.Graphics.TranslateTransform (this.Width / 2' 0);  	pe.Graphics.RotateTransform (-90.0f);  }  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: pe.Graphics.TranslateTransform (0' this.Height / 2);  
Magic Number,Controls,ArrowLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ArrowLine.cs,OnPaint,The following statement contains a magic number: pe.Graphics.TranslateTransform (this.Width / 2' 0);  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,PreCalculateSomeStuff,The following statement contains a magic number: _multable = new int[sz' 256];  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,PreCalculateSomeStuff,The following statement contains a magic number: for (int i = 1; i <= _radius; i++) {  	int szi = _radius - i;  	int szj = _radius + i;  	_kernel [szj] = _kernel [szi] = (szi + 1) * (szi + 1);  	_kernelSum += (_kernel [szj] + _kernel [szi]);  	for (int j = 0; j < 256; j++) {  		_multable [szj' j] = _multable [szi' j] = _kernel [szj] * j;  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,PreCalculateSomeStuff,The following statement contains a magic number: for (int j = 0; j < 256; j++) {  	_multable [szj' j] = _multable [szi' j] = _kernel [szj] * j;  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,PreCalculateSomeStuff,The following statement contains a magic number: for (int j = 0; j < 256; j++) {  	_multable [_radius' j] = _kernel [_radius] * j;  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: using (RawBitmap src = new RawBitmap (origin)) {  	using (RawBitmap dest = new RawBitmap (blurred)) {  		int pixelCount = src.Width * src.Height;  		int[] b = new int[pixelCount];  		int[] g = new int[pixelCount];  		int[] r = new int[pixelCount];  		int[] a = new int[pixelCount];  		int[] b2 = new int[pixelCount];  		int[] g2 = new int[pixelCount];  		int[] r2 = new int[pixelCount];  		int[] a2 = new int[pixelCount];  		int offset = src.GetOffset ();  		int index = 0;  		unsafe {  			byte* ptr = src.Begin;  			for (int i = 0; i < src.Height; i++) {  				for (int j = 0; j < src.Width; j++) {  					b [index] = *ptr;  					ptr++;  					g [index] = *ptr;  					ptr++;  					r [index] = *ptr;  					ptr++;  					a [index] = *ptr;  					ptr++;  					++index;  				}  				ptr += offset;  			}  			int bsum;  			int gsum;  			int rsum;  			int asum;  			int sum;  			int read;  			int start = 0;  			index = 0;  			if (_blurType != BlurType.VerticalOnly) {  				for (int i = 0; i < src.Height; i++) {  					for (int j = 0; j < src.Width; j++) {  						bsum = gsum = rsum = asum = sum = 0;  						read = index - _radius;  						for (int z = 0; z < _kernel.Length; z++) {  							if (read >= start && read < start + src.Width) {  								bsum += _multable [z' b [read]];  								gsum += _multable [z' g [read]];  								rsum += _multable [z' r [read]];  								asum += _multable [z' a [read]];  								sum += _kernel [z];  							}  							++read;  						}  						b2 [index] = (bsum / sum);  						g2 [index] = (gsum / sum);  						r2 [index] = (rsum / sum);  						a2 [index] = (asum / sum);  						if (_blurType == BlurType.HorizontalOnly) {  							byte* pcell = dest [j' i];  							pcell [0] = (byte)(bsum / sum);  							pcell [1] = (byte)(gsum / sum);  							pcell [2] = (byte)(rsum / sum);  							pcell [3] = (byte)(asum / sum);  						}  						++index;  					}  					start += src.Width;  				}  			}  			if (_blurType == BlurType.HorizontalOnly) {  				return blurred;  			}  			int tempy;  			for (int i = 0; i < src.Height; i++) {  				int y = i - _radius;  				start = y * src.Width;  				for (int j = 0; j < src.Width; j++) {  					bsum = gsum = rsum = asum = sum = 0;  					read = start + j;  					tempy = y;  					for (int z = 0; z < _kernel.Length; z++) {  						if (tempy >= 0 && tempy < src.Height) {  							if (_blurType == BlurType.VerticalOnly) {  								bsum += _multable [z' b [read]];  								gsum += _multable [z' g [read]];  								rsum += _multable [z' r [read]];  								asum += _multable [z' a [read]];  							}  							else {  								bsum += _multable [z' b2 [read]];  								gsum += _multable [z' g2 [read]];  								rsum += _multable [z' r2 [read]];  								asum += _multable [z' a2 [read]];  							}  							sum += _kernel [z];  						}  						read += src.Width;  						++tempy;  					}  					byte* pcell = dest [j' i];  					pcell [0] = (byte)(bsum / sum);  					pcell [1] = (byte)(gsum / sum);  					pcell [2] = (byte)(rsum / sum);  					pcell [3] = (byte)(asum / sum);  				}  			}  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: using (RawBitmap src = new RawBitmap (origin)) {  	using (RawBitmap dest = new RawBitmap (blurred)) {  		int pixelCount = src.Width * src.Height;  		int[] b = new int[pixelCount];  		int[] g = new int[pixelCount];  		int[] r = new int[pixelCount];  		int[] a = new int[pixelCount];  		int[] b2 = new int[pixelCount];  		int[] g2 = new int[pixelCount];  		int[] r2 = new int[pixelCount];  		int[] a2 = new int[pixelCount];  		int offset = src.GetOffset ();  		int index = 0;  		unsafe {  			byte* ptr = src.Begin;  			for (int i = 0; i < src.Height; i++) {  				for (int j = 0; j < src.Width; j++) {  					b [index] = *ptr;  					ptr++;  					g [index] = *ptr;  					ptr++;  					r [index] = *ptr;  					ptr++;  					a [index] = *ptr;  					ptr++;  					++index;  				}  				ptr += offset;  			}  			int bsum;  			int gsum;  			int rsum;  			int asum;  			int sum;  			int read;  			int start = 0;  			index = 0;  			if (_blurType != BlurType.VerticalOnly) {  				for (int i = 0; i < src.Height; i++) {  					for (int j = 0; j < src.Width; j++) {  						bsum = gsum = rsum = asum = sum = 0;  						read = index - _radius;  						for (int z = 0; z < _kernel.Length; z++) {  							if (read >= start && read < start + src.Width) {  								bsum += _multable [z' b [read]];  								gsum += _multable [z' g [read]];  								rsum += _multable [z' r [read]];  								asum += _multable [z' a [read]];  								sum += _kernel [z];  							}  							++read;  						}  						b2 [index] = (bsum / sum);  						g2 [index] = (gsum / sum);  						r2 [index] = (rsum / sum);  						a2 [index] = (asum / sum);  						if (_blurType == BlurType.HorizontalOnly) {  							byte* pcell = dest [j' i];  							pcell [0] = (byte)(bsum / sum);  							pcell [1] = (byte)(gsum / sum);  							pcell [2] = (byte)(rsum / sum);  							pcell [3] = (byte)(asum / sum);  						}  						++index;  					}  					start += src.Width;  				}  			}  			if (_blurType == BlurType.HorizontalOnly) {  				return blurred;  			}  			int tempy;  			for (int i = 0; i < src.Height; i++) {  				int y = i - _radius;  				start = y * src.Width;  				for (int j = 0; j < src.Width; j++) {  					bsum = gsum = rsum = asum = sum = 0;  					read = start + j;  					tempy = y;  					for (int z = 0; z < _kernel.Length; z++) {  						if (tempy >= 0 && tempy < src.Height) {  							if (_blurType == BlurType.VerticalOnly) {  								bsum += _multable [z' b [read]];  								gsum += _multable [z' g [read]];  								rsum += _multable [z' r [read]];  								asum += _multable [z' a [read]];  							}  							else {  								bsum += _multable [z' b2 [read]];  								gsum += _multable [z' g2 [read]];  								rsum += _multable [z' r2 [read]];  								asum += _multable [z' a2 [read]];  							}  							sum += _kernel [z];  						}  						read += src.Width;  						++tempy;  					}  					byte* pcell = dest [j' i];  					pcell [0] = (byte)(bsum / sum);  					pcell [1] = (byte)(gsum / sum);  					pcell [2] = (byte)(rsum / sum);  					pcell [3] = (byte)(asum / sum);  				}  			}  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: using (RawBitmap src = new RawBitmap (origin)) {  	using (RawBitmap dest = new RawBitmap (blurred)) {  		int pixelCount = src.Width * src.Height;  		int[] b = new int[pixelCount];  		int[] g = new int[pixelCount];  		int[] r = new int[pixelCount];  		int[] a = new int[pixelCount];  		int[] b2 = new int[pixelCount];  		int[] g2 = new int[pixelCount];  		int[] r2 = new int[pixelCount];  		int[] a2 = new int[pixelCount];  		int offset = src.GetOffset ();  		int index = 0;  		unsafe {  			byte* ptr = src.Begin;  			for (int i = 0; i < src.Height; i++) {  				for (int j = 0; j < src.Width; j++) {  					b [index] = *ptr;  					ptr++;  					g [index] = *ptr;  					ptr++;  					r [index] = *ptr;  					ptr++;  					a [index] = *ptr;  					ptr++;  					++index;  				}  				ptr += offset;  			}  			int bsum;  			int gsum;  			int rsum;  			int asum;  			int sum;  			int read;  			int start = 0;  			index = 0;  			if (_blurType != BlurType.VerticalOnly) {  				for (int i = 0; i < src.Height; i++) {  					for (int j = 0; j < src.Width; j++) {  						bsum = gsum = rsum = asum = sum = 0;  						read = index - _radius;  						for (int z = 0; z < _kernel.Length; z++) {  							if (read >= start && read < start + src.Width) {  								bsum += _multable [z' b [read]];  								gsum += _multable [z' g [read]];  								rsum += _multable [z' r [read]];  								asum += _multable [z' a [read]];  								sum += _kernel [z];  							}  							++read;  						}  						b2 [index] = (bsum / sum);  						g2 [index] = (gsum / sum);  						r2 [index] = (rsum / sum);  						a2 [index] = (asum / sum);  						if (_blurType == BlurType.HorizontalOnly) {  							byte* pcell = dest [j' i];  							pcell [0] = (byte)(bsum / sum);  							pcell [1] = (byte)(gsum / sum);  							pcell [2] = (byte)(rsum / sum);  							pcell [3] = (byte)(asum / sum);  						}  						++index;  					}  					start += src.Width;  				}  			}  			if (_blurType == BlurType.HorizontalOnly) {  				return blurred;  			}  			int tempy;  			for (int i = 0; i < src.Height; i++) {  				int y = i - _radius;  				start = y * src.Width;  				for (int j = 0; j < src.Width; j++) {  					bsum = gsum = rsum = asum = sum = 0;  					read = start + j;  					tempy = y;  					for (int z = 0; z < _kernel.Length; z++) {  						if (tempy >= 0 && tempy < src.Height) {  							if (_blurType == BlurType.VerticalOnly) {  								bsum += _multable [z' b [read]];  								gsum += _multable [z' g [read]];  								rsum += _multable [z' r [read]];  								asum += _multable [z' a [read]];  							}  							else {  								bsum += _multable [z' b2 [read]];  								gsum += _multable [z' g2 [read]];  								rsum += _multable [z' r2 [read]];  								asum += _multable [z' a2 [read]];  							}  							sum += _kernel [z];  						}  						read += src.Width;  						++tempy;  					}  					byte* pcell = dest [j' i];  					pcell [0] = (byte)(bsum / sum);  					pcell [1] = (byte)(gsum / sum);  					pcell [2] = (byte)(rsum / sum);  					pcell [3] = (byte)(asum / sum);  				}  			}  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: using (RawBitmap src = new RawBitmap (origin)) {  	using (RawBitmap dest = new RawBitmap (blurred)) {  		int pixelCount = src.Width * src.Height;  		int[] b = new int[pixelCount];  		int[] g = new int[pixelCount];  		int[] r = new int[pixelCount];  		int[] a = new int[pixelCount];  		int[] b2 = new int[pixelCount];  		int[] g2 = new int[pixelCount];  		int[] r2 = new int[pixelCount];  		int[] a2 = new int[pixelCount];  		int offset = src.GetOffset ();  		int index = 0;  		unsafe {  			byte* ptr = src.Begin;  			for (int i = 0; i < src.Height; i++) {  				for (int j = 0; j < src.Width; j++) {  					b [index] = *ptr;  					ptr++;  					g [index] = *ptr;  					ptr++;  					r [index] = *ptr;  					ptr++;  					a [index] = *ptr;  					ptr++;  					++index;  				}  				ptr += offset;  			}  			int bsum;  			int gsum;  			int rsum;  			int asum;  			int sum;  			int read;  			int start = 0;  			index = 0;  			if (_blurType != BlurType.VerticalOnly) {  				for (int i = 0; i < src.Height; i++) {  					for (int j = 0; j < src.Width; j++) {  						bsum = gsum = rsum = asum = sum = 0;  						read = index - _radius;  						for (int z = 0; z < _kernel.Length; z++) {  							if (read >= start && read < start + src.Width) {  								bsum += _multable [z' b [read]];  								gsum += _multable [z' g [read]];  								rsum += _multable [z' r [read]];  								asum += _multable [z' a [read]];  								sum += _kernel [z];  							}  							++read;  						}  						b2 [index] = (bsum / sum);  						g2 [index] = (gsum / sum);  						r2 [index] = (rsum / sum);  						a2 [index] = (asum / sum);  						if (_blurType == BlurType.HorizontalOnly) {  							byte* pcell = dest [j' i];  							pcell [0] = (byte)(bsum / sum);  							pcell [1] = (byte)(gsum / sum);  							pcell [2] = (byte)(rsum / sum);  							pcell [3] = (byte)(asum / sum);  						}  						++index;  					}  					start += src.Width;  				}  			}  			if (_blurType == BlurType.HorizontalOnly) {  				return blurred;  			}  			int tempy;  			for (int i = 0; i < src.Height; i++) {  				int y = i - _radius;  				start = y * src.Width;  				for (int j = 0; j < src.Width; j++) {  					bsum = gsum = rsum = asum = sum = 0;  					read = start + j;  					tempy = y;  					for (int z = 0; z < _kernel.Length; z++) {  						if (tempy >= 0 && tempy < src.Height) {  							if (_blurType == BlurType.VerticalOnly) {  								bsum += _multable [z' b [read]];  								gsum += _multable [z' g [read]];  								rsum += _multable [z' r [read]];  								asum += _multable [z' a [read]];  							}  							else {  								bsum += _multable [z' b2 [read]];  								gsum += _multable [z' g2 [read]];  								rsum += _multable [z' r2 [read]];  								asum += _multable [z' a2 [read]];  							}  							sum += _kernel [z];  						}  						read += src.Width;  						++tempy;  					}  					byte* pcell = dest [j' i];  					pcell [0] = (byte)(bsum / sum);  					pcell [1] = (byte)(gsum / sum);  					pcell [2] = (byte)(rsum / sum);  					pcell [3] = (byte)(asum / sum);  				}  			}  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: using (RawBitmap dest = new RawBitmap (blurred)) {  	int pixelCount = src.Width * src.Height;  	int[] b = new int[pixelCount];  	int[] g = new int[pixelCount];  	int[] r = new int[pixelCount];  	int[] a = new int[pixelCount];  	int[] b2 = new int[pixelCount];  	int[] g2 = new int[pixelCount];  	int[] r2 = new int[pixelCount];  	int[] a2 = new int[pixelCount];  	int offset = src.GetOffset ();  	int index = 0;  	unsafe {  		byte* ptr = src.Begin;  		for (int i = 0; i < src.Height; i++) {  			for (int j = 0; j < src.Width; j++) {  				b [index] = *ptr;  				ptr++;  				g [index] = *ptr;  				ptr++;  				r [index] = *ptr;  				ptr++;  				a [index] = *ptr;  				ptr++;  				++index;  			}  			ptr += offset;  		}  		int bsum;  		int gsum;  		int rsum;  		int asum;  		int sum;  		int read;  		int start = 0;  		index = 0;  		if (_blurType != BlurType.VerticalOnly) {  			for (int i = 0; i < src.Height; i++) {  				for (int j = 0; j < src.Width; j++) {  					bsum = gsum = rsum = asum = sum = 0;  					read = index - _radius;  					for (int z = 0; z < _kernel.Length; z++) {  						if (read >= start && read < start + src.Width) {  							bsum += _multable [z' b [read]];  							gsum += _multable [z' g [read]];  							rsum += _multable [z' r [read]];  							asum += _multable [z' a [read]];  							sum += _kernel [z];  						}  						++read;  					}  					b2 [index] = (bsum / sum);  					g2 [index] = (gsum / sum);  					r2 [index] = (rsum / sum);  					a2 [index] = (asum / sum);  					if (_blurType == BlurType.HorizontalOnly) {  						byte* pcell = dest [j' i];  						pcell [0] = (byte)(bsum / sum);  						pcell [1] = (byte)(gsum / sum);  						pcell [2] = (byte)(rsum / sum);  						pcell [3] = (byte)(asum / sum);  					}  					++index;  				}  				start += src.Width;  			}  		}  		if (_blurType == BlurType.HorizontalOnly) {  			return blurred;  		}  		int tempy;  		for (int i = 0; i < src.Height; i++) {  			int y = i - _radius;  			start = y * src.Width;  			for (int j = 0; j < src.Width; j++) {  				bsum = gsum = rsum = asum = sum = 0;  				read = start + j;  				tempy = y;  				for (int z = 0; z < _kernel.Length; z++) {  					if (tempy >= 0 && tempy < src.Height) {  						if (_blurType == BlurType.VerticalOnly) {  							bsum += _multable [z' b [read]];  							gsum += _multable [z' g [read]];  							rsum += _multable [z' r [read]];  							asum += _multable [z' a [read]];  						}  						else {  							bsum += _multable [z' b2 [read]];  							gsum += _multable [z' g2 [read]];  							rsum += _multable [z' r2 [read]];  							asum += _multable [z' a2 [read]];  						}  						sum += _kernel [z];  					}  					read += src.Width;  					++tempy;  				}  				byte* pcell = dest [j' i];  				pcell [0] = (byte)(bsum / sum);  				pcell [1] = (byte)(gsum / sum);  				pcell [2] = (byte)(rsum / sum);  				pcell [3] = (byte)(asum / sum);  			}  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: using (RawBitmap dest = new RawBitmap (blurred)) {  	int pixelCount = src.Width * src.Height;  	int[] b = new int[pixelCount];  	int[] g = new int[pixelCount];  	int[] r = new int[pixelCount];  	int[] a = new int[pixelCount];  	int[] b2 = new int[pixelCount];  	int[] g2 = new int[pixelCount];  	int[] r2 = new int[pixelCount];  	int[] a2 = new int[pixelCount];  	int offset = src.GetOffset ();  	int index = 0;  	unsafe {  		byte* ptr = src.Begin;  		for (int i = 0; i < src.Height; i++) {  			for (int j = 0; j < src.Width; j++) {  				b [index] = *ptr;  				ptr++;  				g [index] = *ptr;  				ptr++;  				r [index] = *ptr;  				ptr++;  				a [index] = *ptr;  				ptr++;  				++index;  			}  			ptr += offset;  		}  		int bsum;  		int gsum;  		int rsum;  		int asum;  		int sum;  		int read;  		int start = 0;  		index = 0;  		if (_blurType != BlurType.VerticalOnly) {  			for (int i = 0; i < src.Height; i++) {  				for (int j = 0; j < src.Width; j++) {  					bsum = gsum = rsum = asum = sum = 0;  					read = index - _radius;  					for (int z = 0; z < _kernel.Length; z++) {  						if (read >= start && read < start + src.Width) {  							bsum += _multable [z' b [read]];  							gsum += _multable [z' g [read]];  							rsum += _multable [z' r [read]];  							asum += _multable [z' a [read]];  							sum += _kernel [z];  						}  						++read;  					}  					b2 [index] = (bsum / sum);  					g2 [index] = (gsum / sum);  					r2 [index] = (rsum / sum);  					a2 [index] = (asum / sum);  					if (_blurType == BlurType.HorizontalOnly) {  						byte* pcell = dest [j' i];  						pcell [0] = (byte)(bsum / sum);  						pcell [1] = (byte)(gsum / sum);  						pcell [2] = (byte)(rsum / sum);  						pcell [3] = (byte)(asum / sum);  					}  					++index;  				}  				start += src.Width;  			}  		}  		if (_blurType == BlurType.HorizontalOnly) {  			return blurred;  		}  		int tempy;  		for (int i = 0; i < src.Height; i++) {  			int y = i - _radius;  			start = y * src.Width;  			for (int j = 0; j < src.Width; j++) {  				bsum = gsum = rsum = asum = sum = 0;  				read = start + j;  				tempy = y;  				for (int z = 0; z < _kernel.Length; z++) {  					if (tempy >= 0 && tempy < src.Height) {  						if (_blurType == BlurType.VerticalOnly) {  							bsum += _multable [z' b [read]];  							gsum += _multable [z' g [read]];  							rsum += _multable [z' r [read]];  							asum += _multable [z' a [read]];  						}  						else {  							bsum += _multable [z' b2 [read]];  							gsum += _multable [z' g2 [read]];  							rsum += _multable [z' r2 [read]];  							asum += _multable [z' a2 [read]];  						}  						sum += _kernel [z];  					}  					read += src.Width;  					++tempy;  				}  				byte* pcell = dest [j' i];  				pcell [0] = (byte)(bsum / sum);  				pcell [1] = (byte)(gsum / sum);  				pcell [2] = (byte)(rsum / sum);  				pcell [3] = (byte)(asum / sum);  			}  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: using (RawBitmap dest = new RawBitmap (blurred)) {  	int pixelCount = src.Width * src.Height;  	int[] b = new int[pixelCount];  	int[] g = new int[pixelCount];  	int[] r = new int[pixelCount];  	int[] a = new int[pixelCount];  	int[] b2 = new int[pixelCount];  	int[] g2 = new int[pixelCount];  	int[] r2 = new int[pixelCount];  	int[] a2 = new int[pixelCount];  	int offset = src.GetOffset ();  	int index = 0;  	unsafe {  		byte* ptr = src.Begin;  		for (int i = 0; i < src.Height; i++) {  			for (int j = 0; j < src.Width; j++) {  				b [index] = *ptr;  				ptr++;  				g [index] = *ptr;  				ptr++;  				r [index] = *ptr;  				ptr++;  				a [index] = *ptr;  				ptr++;  				++index;  			}  			ptr += offset;  		}  		int bsum;  		int gsum;  		int rsum;  		int asum;  		int sum;  		int read;  		int start = 0;  		index = 0;  		if (_blurType != BlurType.VerticalOnly) {  			for (int i = 0; i < src.Height; i++) {  				for (int j = 0; j < src.Width; j++) {  					bsum = gsum = rsum = asum = sum = 0;  					read = index - _radius;  					for (int z = 0; z < _kernel.Length; z++) {  						if (read >= start && read < start + src.Width) {  							bsum += _multable [z' b [read]];  							gsum += _multable [z' g [read]];  							rsum += _multable [z' r [read]];  							asum += _multable [z' a [read]];  							sum += _kernel [z];  						}  						++read;  					}  					b2 [index] = (bsum / sum);  					g2 [index] = (gsum / sum);  					r2 [index] = (rsum / sum);  					a2 [index] = (asum / sum);  					if (_blurType == BlurType.HorizontalOnly) {  						byte* pcell = dest [j' i];  						pcell [0] = (byte)(bsum / sum);  						pcell [1] = (byte)(gsum / sum);  						pcell [2] = (byte)(rsum / sum);  						pcell [3] = (byte)(asum / sum);  					}  					++index;  				}  				start += src.Width;  			}  		}  		if (_blurType == BlurType.HorizontalOnly) {  			return blurred;  		}  		int tempy;  		for (int i = 0; i < src.Height; i++) {  			int y = i - _radius;  			start = y * src.Width;  			for (int j = 0; j < src.Width; j++) {  				bsum = gsum = rsum = asum = sum = 0;  				read = start + j;  				tempy = y;  				for (int z = 0; z < _kernel.Length; z++) {  					if (tempy >= 0 && tempy < src.Height) {  						if (_blurType == BlurType.VerticalOnly) {  							bsum += _multable [z' b [read]];  							gsum += _multable [z' g [read]];  							rsum += _multable [z' r [read]];  							asum += _multable [z' a [read]];  						}  						else {  							bsum += _multable [z' b2 [read]];  							gsum += _multable [z' g2 [read]];  							rsum += _multable [z' r2 [read]];  							asum += _multable [z' a2 [read]];  						}  						sum += _kernel [z];  					}  					read += src.Width;  					++tempy;  				}  				byte* pcell = dest [j' i];  				pcell [0] = (byte)(bsum / sum);  				pcell [1] = (byte)(gsum / sum);  				pcell [2] = (byte)(rsum / sum);  				pcell [3] = (byte)(asum / sum);  			}  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: using (RawBitmap dest = new RawBitmap (blurred)) {  	int pixelCount = src.Width * src.Height;  	int[] b = new int[pixelCount];  	int[] g = new int[pixelCount];  	int[] r = new int[pixelCount];  	int[] a = new int[pixelCount];  	int[] b2 = new int[pixelCount];  	int[] g2 = new int[pixelCount];  	int[] r2 = new int[pixelCount];  	int[] a2 = new int[pixelCount];  	int offset = src.GetOffset ();  	int index = 0;  	unsafe {  		byte* ptr = src.Begin;  		for (int i = 0; i < src.Height; i++) {  			for (int j = 0; j < src.Width; j++) {  				b [index] = *ptr;  				ptr++;  				g [index] = *ptr;  				ptr++;  				r [index] = *ptr;  				ptr++;  				a [index] = *ptr;  				ptr++;  				++index;  			}  			ptr += offset;  		}  		int bsum;  		int gsum;  		int rsum;  		int asum;  		int sum;  		int read;  		int start = 0;  		index = 0;  		if (_blurType != BlurType.VerticalOnly) {  			for (int i = 0; i < src.Height; i++) {  				for (int j = 0; j < src.Width; j++) {  					bsum = gsum = rsum = asum = sum = 0;  					read = index - _radius;  					for (int z = 0; z < _kernel.Length; z++) {  						if (read >= start && read < start + src.Width) {  							bsum += _multable [z' b [read]];  							gsum += _multable [z' g [read]];  							rsum += _multable [z' r [read]];  							asum += _multable [z' a [read]];  							sum += _kernel [z];  						}  						++read;  					}  					b2 [index] = (bsum / sum);  					g2 [index] = (gsum / sum);  					r2 [index] = (rsum / sum);  					a2 [index] = (asum / sum);  					if (_blurType == BlurType.HorizontalOnly) {  						byte* pcell = dest [j' i];  						pcell [0] = (byte)(bsum / sum);  						pcell [1] = (byte)(gsum / sum);  						pcell [2] = (byte)(rsum / sum);  						pcell [3] = (byte)(asum / sum);  					}  					++index;  				}  				start += src.Width;  			}  		}  		if (_blurType == BlurType.HorizontalOnly) {  			return blurred;  		}  		int tempy;  		for (int i = 0; i < src.Height; i++) {  			int y = i - _radius;  			start = y * src.Width;  			for (int j = 0; j < src.Width; j++) {  				bsum = gsum = rsum = asum = sum = 0;  				read = start + j;  				tempy = y;  				for (int z = 0; z < _kernel.Length; z++) {  					if (tempy >= 0 && tempy < src.Height) {  						if (_blurType == BlurType.VerticalOnly) {  							bsum += _multable [z' b [read]];  							gsum += _multable [z' g [read]];  							rsum += _multable [z' r [read]];  							asum += _multable [z' a [read]];  						}  						else {  							bsum += _multable [z' b2 [read]];  							gsum += _multable [z' g2 [read]];  							rsum += _multable [z' r2 [read]];  							asum += _multable [z' a2 [read]];  						}  						sum += _kernel [z];  					}  					read += src.Width;  					++tempy;  				}  				byte* pcell = dest [j' i];  				pcell [0] = (byte)(bsum / sum);  				pcell [1] = (byte)(gsum / sum);  				pcell [2] = (byte)(rsum / sum);  				pcell [3] = (byte)(asum / sum);  			}  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: unsafe {  	byte* ptr = src.Begin;  	for (int i = 0; i < src.Height; i++) {  		for (int j = 0; j < src.Width; j++) {  			b [index] = *ptr;  			ptr++;  			g [index] = *ptr;  			ptr++;  			r [index] = *ptr;  			ptr++;  			a [index] = *ptr;  			ptr++;  			++index;  		}  		ptr += offset;  	}  	int bsum;  	int gsum;  	int rsum;  	int asum;  	int sum;  	int read;  	int start = 0;  	index = 0;  	if (_blurType != BlurType.VerticalOnly) {  		for (int i = 0; i < src.Height; i++) {  			for (int j = 0; j < src.Width; j++) {  				bsum = gsum = rsum = asum = sum = 0;  				read = index - _radius;  				for (int z = 0; z < _kernel.Length; z++) {  					if (read >= start && read < start + src.Width) {  						bsum += _multable [z' b [read]];  						gsum += _multable [z' g [read]];  						rsum += _multable [z' r [read]];  						asum += _multable [z' a [read]];  						sum += _kernel [z];  					}  					++read;  				}  				b2 [index] = (bsum / sum);  				g2 [index] = (gsum / sum);  				r2 [index] = (rsum / sum);  				a2 [index] = (asum / sum);  				if (_blurType == BlurType.HorizontalOnly) {  					byte* pcell = dest [j' i];  					pcell [0] = (byte)(bsum / sum);  					pcell [1] = (byte)(gsum / sum);  					pcell [2] = (byte)(rsum / sum);  					pcell [3] = (byte)(asum / sum);  				}  				++index;  			}  			start += src.Width;  		}  	}  	if (_blurType == BlurType.HorizontalOnly) {  		return blurred;  	}  	int tempy;  	for (int i = 0; i < src.Height; i++) {  		int y = i - _radius;  		start = y * src.Width;  		for (int j = 0; j < src.Width; j++) {  			bsum = gsum = rsum = asum = sum = 0;  			read = start + j;  			tempy = y;  			for (int z = 0; z < _kernel.Length; z++) {  				if (tempy >= 0 && tempy < src.Height) {  					if (_blurType == BlurType.VerticalOnly) {  						bsum += _multable [z' b [read]];  						gsum += _multable [z' g [read]];  						rsum += _multable [z' r [read]];  						asum += _multable [z' a [read]];  					}  					else {  						bsum += _multable [z' b2 [read]];  						gsum += _multable [z' g2 [read]];  						rsum += _multable [z' r2 [read]];  						asum += _multable [z' a2 [read]];  					}  					sum += _kernel [z];  				}  				read += src.Width;  				++tempy;  			}  			byte* pcell = dest [j' i];  			pcell [0] = (byte)(bsum / sum);  			pcell [1] = (byte)(gsum / sum);  			pcell [2] = (byte)(rsum / sum);  			pcell [3] = (byte)(asum / sum);  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: unsafe {  	byte* ptr = src.Begin;  	for (int i = 0; i < src.Height; i++) {  		for (int j = 0; j < src.Width; j++) {  			b [index] = *ptr;  			ptr++;  			g [index] = *ptr;  			ptr++;  			r [index] = *ptr;  			ptr++;  			a [index] = *ptr;  			ptr++;  			++index;  		}  		ptr += offset;  	}  	int bsum;  	int gsum;  	int rsum;  	int asum;  	int sum;  	int read;  	int start = 0;  	index = 0;  	if (_blurType != BlurType.VerticalOnly) {  		for (int i = 0; i < src.Height; i++) {  			for (int j = 0; j < src.Width; j++) {  				bsum = gsum = rsum = asum = sum = 0;  				read = index - _radius;  				for (int z = 0; z < _kernel.Length; z++) {  					if (read >= start && read < start + src.Width) {  						bsum += _multable [z' b [read]];  						gsum += _multable [z' g [read]];  						rsum += _multable [z' r [read]];  						asum += _multable [z' a [read]];  						sum += _kernel [z];  					}  					++read;  				}  				b2 [index] = (bsum / sum);  				g2 [index] = (gsum / sum);  				r2 [index] = (rsum / sum);  				a2 [index] = (asum / sum);  				if (_blurType == BlurType.HorizontalOnly) {  					byte* pcell = dest [j' i];  					pcell [0] = (byte)(bsum / sum);  					pcell [1] = (byte)(gsum / sum);  					pcell [2] = (byte)(rsum / sum);  					pcell [3] = (byte)(asum / sum);  				}  				++index;  			}  			start += src.Width;  		}  	}  	if (_blurType == BlurType.HorizontalOnly) {  		return blurred;  	}  	int tempy;  	for (int i = 0; i < src.Height; i++) {  		int y = i - _radius;  		start = y * src.Width;  		for (int j = 0; j < src.Width; j++) {  			bsum = gsum = rsum = asum = sum = 0;  			read = start + j;  			tempy = y;  			for (int z = 0; z < _kernel.Length; z++) {  				if (tempy >= 0 && tempy < src.Height) {  					if (_blurType == BlurType.VerticalOnly) {  						bsum += _multable [z' b [read]];  						gsum += _multable [z' g [read]];  						rsum += _multable [z' r [read]];  						asum += _multable [z' a [read]];  					}  					else {  						bsum += _multable [z' b2 [read]];  						gsum += _multable [z' g2 [read]];  						rsum += _multable [z' r2 [read]];  						asum += _multable [z' a2 [read]];  					}  					sum += _kernel [z];  				}  				read += src.Width;  				++tempy;  			}  			byte* pcell = dest [j' i];  			pcell [0] = (byte)(bsum / sum);  			pcell [1] = (byte)(gsum / sum);  			pcell [2] = (byte)(rsum / sum);  			pcell [3] = (byte)(asum / sum);  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: unsafe {  	byte* ptr = src.Begin;  	for (int i = 0; i < src.Height; i++) {  		for (int j = 0; j < src.Width; j++) {  			b [index] = *ptr;  			ptr++;  			g [index] = *ptr;  			ptr++;  			r [index] = *ptr;  			ptr++;  			a [index] = *ptr;  			ptr++;  			++index;  		}  		ptr += offset;  	}  	int bsum;  	int gsum;  	int rsum;  	int asum;  	int sum;  	int read;  	int start = 0;  	index = 0;  	if (_blurType != BlurType.VerticalOnly) {  		for (int i = 0; i < src.Height; i++) {  			for (int j = 0; j < src.Width; j++) {  				bsum = gsum = rsum = asum = sum = 0;  				read = index - _radius;  				for (int z = 0; z < _kernel.Length; z++) {  					if (read >= start && read < start + src.Width) {  						bsum += _multable [z' b [read]];  						gsum += _multable [z' g [read]];  						rsum += _multable [z' r [read]];  						asum += _multable [z' a [read]];  						sum += _kernel [z];  					}  					++read;  				}  				b2 [index] = (bsum / sum);  				g2 [index] = (gsum / sum);  				r2 [index] = (rsum / sum);  				a2 [index] = (asum / sum);  				if (_blurType == BlurType.HorizontalOnly) {  					byte* pcell = dest [j' i];  					pcell [0] = (byte)(bsum / sum);  					pcell [1] = (byte)(gsum / sum);  					pcell [2] = (byte)(rsum / sum);  					pcell [3] = (byte)(asum / sum);  				}  				++index;  			}  			start += src.Width;  		}  	}  	if (_blurType == BlurType.HorizontalOnly) {  		return blurred;  	}  	int tempy;  	for (int i = 0; i < src.Height; i++) {  		int y = i - _radius;  		start = y * src.Width;  		for (int j = 0; j < src.Width; j++) {  			bsum = gsum = rsum = asum = sum = 0;  			read = start + j;  			tempy = y;  			for (int z = 0; z < _kernel.Length; z++) {  				if (tempy >= 0 && tempy < src.Height) {  					if (_blurType == BlurType.VerticalOnly) {  						bsum += _multable [z' b [read]];  						gsum += _multable [z' g [read]];  						rsum += _multable [z' r [read]];  						asum += _multable [z' a [read]];  					}  					else {  						bsum += _multable [z' b2 [read]];  						gsum += _multable [z' g2 [read]];  						rsum += _multable [z' r2 [read]];  						asum += _multable [z' a2 [read]];  					}  					sum += _kernel [z];  				}  				read += src.Width;  				++tempy;  			}  			byte* pcell = dest [j' i];  			pcell [0] = (byte)(bsum / sum);  			pcell [1] = (byte)(gsum / sum);  			pcell [2] = (byte)(rsum / sum);  			pcell [3] = (byte)(asum / sum);  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: unsafe {  	byte* ptr = src.Begin;  	for (int i = 0; i < src.Height; i++) {  		for (int j = 0; j < src.Width; j++) {  			b [index] = *ptr;  			ptr++;  			g [index] = *ptr;  			ptr++;  			r [index] = *ptr;  			ptr++;  			a [index] = *ptr;  			ptr++;  			++index;  		}  		ptr += offset;  	}  	int bsum;  	int gsum;  	int rsum;  	int asum;  	int sum;  	int read;  	int start = 0;  	index = 0;  	if (_blurType != BlurType.VerticalOnly) {  		for (int i = 0; i < src.Height; i++) {  			for (int j = 0; j < src.Width; j++) {  				bsum = gsum = rsum = asum = sum = 0;  				read = index - _radius;  				for (int z = 0; z < _kernel.Length; z++) {  					if (read >= start && read < start + src.Width) {  						bsum += _multable [z' b [read]];  						gsum += _multable [z' g [read]];  						rsum += _multable [z' r [read]];  						asum += _multable [z' a [read]];  						sum += _kernel [z];  					}  					++read;  				}  				b2 [index] = (bsum / sum);  				g2 [index] = (gsum / sum);  				r2 [index] = (rsum / sum);  				a2 [index] = (asum / sum);  				if (_blurType == BlurType.HorizontalOnly) {  					byte* pcell = dest [j' i];  					pcell [0] = (byte)(bsum / sum);  					pcell [1] = (byte)(gsum / sum);  					pcell [2] = (byte)(rsum / sum);  					pcell [3] = (byte)(asum / sum);  				}  				++index;  			}  			start += src.Width;  		}  	}  	if (_blurType == BlurType.HorizontalOnly) {  		return blurred;  	}  	int tempy;  	for (int i = 0; i < src.Height; i++) {  		int y = i - _radius;  		start = y * src.Width;  		for (int j = 0; j < src.Width; j++) {  			bsum = gsum = rsum = asum = sum = 0;  			read = start + j;  			tempy = y;  			for (int z = 0; z < _kernel.Length; z++) {  				if (tempy >= 0 && tempy < src.Height) {  					if (_blurType == BlurType.VerticalOnly) {  						bsum += _multable [z' b [read]];  						gsum += _multable [z' g [read]];  						rsum += _multable [z' r [read]];  						asum += _multable [z' a [read]];  					}  					else {  						bsum += _multable [z' b2 [read]];  						gsum += _multable [z' g2 [read]];  						rsum += _multable [z' r2 [read]];  						asum += _multable [z' a2 [read]];  					}  					sum += _kernel [z];  				}  				read += src.Width;  				++tempy;  			}  			byte* pcell = dest [j' i];  			pcell [0] = (byte)(bsum / sum);  			pcell [1] = (byte)(gsum / sum);  			pcell [2] = (byte)(rsum / sum);  			pcell [3] = (byte)(asum / sum);  		}  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: if (_blurType != BlurType.VerticalOnly) {  	for (int i = 0; i < src.Height; i++) {  		for (int j = 0; j < src.Width; j++) {  			bsum = gsum = rsum = asum = sum = 0;  			read = index - _radius;  			for (int z = 0; z < _kernel.Length; z++) {  				if (read >= start && read < start + src.Width) {  					bsum += _multable [z' b [read]];  					gsum += _multable [z' g [read]];  					rsum += _multable [z' r [read]];  					asum += _multable [z' a [read]];  					sum += _kernel [z];  				}  				++read;  			}  			b2 [index] = (bsum / sum);  			g2 [index] = (gsum / sum);  			r2 [index] = (rsum / sum);  			a2 [index] = (asum / sum);  			if (_blurType == BlurType.HorizontalOnly) {  				byte* pcell = dest [j' i];  				pcell [0] = (byte)(bsum / sum);  				pcell [1] = (byte)(gsum / sum);  				pcell [2] = (byte)(rsum / sum);  				pcell [3] = (byte)(asum / sum);  			}  			++index;  		}  		start += src.Width;  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: if (_blurType != BlurType.VerticalOnly) {  	for (int i = 0; i < src.Height; i++) {  		for (int j = 0; j < src.Width; j++) {  			bsum = gsum = rsum = asum = sum = 0;  			read = index - _radius;  			for (int z = 0; z < _kernel.Length; z++) {  				if (read >= start && read < start + src.Width) {  					bsum += _multable [z' b [read]];  					gsum += _multable [z' g [read]];  					rsum += _multable [z' r [read]];  					asum += _multable [z' a [read]];  					sum += _kernel [z];  				}  				++read;  			}  			b2 [index] = (bsum / sum);  			g2 [index] = (gsum / sum);  			r2 [index] = (rsum / sum);  			a2 [index] = (asum / sum);  			if (_blurType == BlurType.HorizontalOnly) {  				byte* pcell = dest [j' i];  				pcell [0] = (byte)(bsum / sum);  				pcell [1] = (byte)(gsum / sum);  				pcell [2] = (byte)(rsum / sum);  				pcell [3] = (byte)(asum / sum);  			}  			++index;  		}  		start += src.Width;  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < src.Height; i++) {  	for (int j = 0; j < src.Width; j++) {  		bsum = gsum = rsum = asum = sum = 0;  		read = index - _radius;  		for (int z = 0; z < _kernel.Length; z++) {  			if (read >= start && read < start + src.Width) {  				bsum += _multable [z' b [read]];  				gsum += _multable [z' g [read]];  				rsum += _multable [z' r [read]];  				asum += _multable [z' a [read]];  				sum += _kernel [z];  			}  			++read;  		}  		b2 [index] = (bsum / sum);  		g2 [index] = (gsum / sum);  		r2 [index] = (rsum / sum);  		a2 [index] = (asum / sum);  		if (_blurType == BlurType.HorizontalOnly) {  			byte* pcell = dest [j' i];  			pcell [0] = (byte)(bsum / sum);  			pcell [1] = (byte)(gsum / sum);  			pcell [2] = (byte)(rsum / sum);  			pcell [3] = (byte)(asum / sum);  		}  		++index;  	}  	start += src.Width;  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < src.Height; i++) {  	for (int j = 0; j < src.Width; j++) {  		bsum = gsum = rsum = asum = sum = 0;  		read = index - _radius;  		for (int z = 0; z < _kernel.Length; z++) {  			if (read >= start && read < start + src.Width) {  				bsum += _multable [z' b [read]];  				gsum += _multable [z' g [read]];  				rsum += _multable [z' r [read]];  				asum += _multable [z' a [read]];  				sum += _kernel [z];  			}  			++read;  		}  		b2 [index] = (bsum / sum);  		g2 [index] = (gsum / sum);  		r2 [index] = (rsum / sum);  		a2 [index] = (asum / sum);  		if (_blurType == BlurType.HorizontalOnly) {  			byte* pcell = dest [j' i];  			pcell [0] = (byte)(bsum / sum);  			pcell [1] = (byte)(gsum / sum);  			pcell [2] = (byte)(rsum / sum);  			pcell [3] = (byte)(asum / sum);  		}  		++index;  	}  	start += src.Width;  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < src.Width; j++) {  	bsum = gsum = rsum = asum = sum = 0;  	read = index - _radius;  	for (int z = 0; z < _kernel.Length; z++) {  		if (read >= start && read < start + src.Width) {  			bsum += _multable [z' b [read]];  			gsum += _multable [z' g [read]];  			rsum += _multable [z' r [read]];  			asum += _multable [z' a [read]];  			sum += _kernel [z];  		}  		++read;  	}  	b2 [index] = (bsum / sum);  	g2 [index] = (gsum / sum);  	r2 [index] = (rsum / sum);  	a2 [index] = (asum / sum);  	if (_blurType == BlurType.HorizontalOnly) {  		byte* pcell = dest [j' i];  		pcell [0] = (byte)(bsum / sum);  		pcell [1] = (byte)(gsum / sum);  		pcell [2] = (byte)(rsum / sum);  		pcell [3] = (byte)(asum / sum);  	}  	++index;  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < src.Width; j++) {  	bsum = gsum = rsum = asum = sum = 0;  	read = index - _radius;  	for (int z = 0; z < _kernel.Length; z++) {  		if (read >= start && read < start + src.Width) {  			bsum += _multable [z' b [read]];  			gsum += _multable [z' g [read]];  			rsum += _multable [z' r [read]];  			asum += _multable [z' a [read]];  			sum += _kernel [z];  		}  		++read;  	}  	b2 [index] = (bsum / sum);  	g2 [index] = (gsum / sum);  	r2 [index] = (rsum / sum);  	a2 [index] = (asum / sum);  	if (_blurType == BlurType.HorizontalOnly) {  		byte* pcell = dest [j' i];  		pcell [0] = (byte)(bsum / sum);  		pcell [1] = (byte)(gsum / sum);  		pcell [2] = (byte)(rsum / sum);  		pcell [3] = (byte)(asum / sum);  	}  	++index;  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: if (_blurType == BlurType.HorizontalOnly) {  	byte* pcell = dest [j' i];  	pcell [0] = (byte)(bsum / sum);  	pcell [1] = (byte)(gsum / sum);  	pcell [2] = (byte)(rsum / sum);  	pcell [3] = (byte)(asum / sum);  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: if (_blurType == BlurType.HorizontalOnly) {  	byte* pcell = dest [j' i];  	pcell [0] = (byte)(bsum / sum);  	pcell [1] = (byte)(gsum / sum);  	pcell [2] = (byte)(rsum / sum);  	pcell [3] = (byte)(asum / sum);  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: pcell [2] = (byte)(rsum / sum);  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: pcell [3] = (byte)(asum / sum);  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < src.Height; i++) {  	int y = i - _radius;  	start = y * src.Width;  	for (int j = 0; j < src.Width; j++) {  		bsum = gsum = rsum = asum = sum = 0;  		read = start + j;  		tempy = y;  		for (int z = 0; z < _kernel.Length; z++) {  			if (tempy >= 0 && tempy < src.Height) {  				if (_blurType == BlurType.VerticalOnly) {  					bsum += _multable [z' b [read]];  					gsum += _multable [z' g [read]];  					rsum += _multable [z' r [read]];  					asum += _multable [z' a [read]];  				}  				else {  					bsum += _multable [z' b2 [read]];  					gsum += _multable [z' g2 [read]];  					rsum += _multable [z' r2 [read]];  					asum += _multable [z' a2 [read]];  				}  				sum += _kernel [z];  			}  			read += src.Width;  			++tempy;  		}  		byte* pcell = dest [j' i];  		pcell [0] = (byte)(bsum / sum);  		pcell [1] = (byte)(gsum / sum);  		pcell [2] = (byte)(rsum / sum);  		pcell [3] = (byte)(asum / sum);  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < src.Height; i++) {  	int y = i - _radius;  	start = y * src.Width;  	for (int j = 0; j < src.Width; j++) {  		bsum = gsum = rsum = asum = sum = 0;  		read = start + j;  		tempy = y;  		for (int z = 0; z < _kernel.Length; z++) {  			if (tempy >= 0 && tempy < src.Height) {  				if (_blurType == BlurType.VerticalOnly) {  					bsum += _multable [z' b [read]];  					gsum += _multable [z' g [read]];  					rsum += _multable [z' r [read]];  					asum += _multable [z' a [read]];  				}  				else {  					bsum += _multable [z' b2 [read]];  					gsum += _multable [z' g2 [read]];  					rsum += _multable [z' r2 [read]];  					asum += _multable [z' a2 [read]];  				}  				sum += _kernel [z];  			}  			read += src.Width;  			++tempy;  		}  		byte* pcell = dest [j' i];  		pcell [0] = (byte)(bsum / sum);  		pcell [1] = (byte)(gsum / sum);  		pcell [2] = (byte)(rsum / sum);  		pcell [3] = (byte)(asum / sum);  	}  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < src.Width; j++) {  	bsum = gsum = rsum = asum = sum = 0;  	read = start + j;  	tempy = y;  	for (int z = 0; z < _kernel.Length; z++) {  		if (tempy >= 0 && tempy < src.Height) {  			if (_blurType == BlurType.VerticalOnly) {  				bsum += _multable [z' b [read]];  				gsum += _multable [z' g [read]];  				rsum += _multable [z' r [read]];  				asum += _multable [z' a [read]];  			}  			else {  				bsum += _multable [z' b2 [read]];  				gsum += _multable [z' g2 [read]];  				rsum += _multable [z' r2 [read]];  				asum += _multable [z' a2 [read]];  			}  			sum += _kernel [z];  		}  		read += src.Width;  		++tempy;  	}  	byte* pcell = dest [j' i];  	pcell [0] = (byte)(bsum / sum);  	pcell [1] = (byte)(gsum / sum);  	pcell [2] = (byte)(rsum / sum);  	pcell [3] = (byte)(asum / sum);  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < src.Width; j++) {  	bsum = gsum = rsum = asum = sum = 0;  	read = start + j;  	tempy = y;  	for (int z = 0; z < _kernel.Length; z++) {  		if (tempy >= 0 && tempy < src.Height) {  			if (_blurType == BlurType.VerticalOnly) {  				bsum += _multable [z' b [read]];  				gsum += _multable [z' g [read]];  				rsum += _multable [z' r [read]];  				asum += _multable [z' a [read]];  			}  			else {  				bsum += _multable [z' b2 [read]];  				gsum += _multable [z' g2 [read]];  				rsum += _multable [z' r2 [read]];  				asum += _multable [z' a2 [read]];  			}  			sum += _kernel [z];  		}  		read += src.Width;  		++tempy;  	}  	byte* pcell = dest [j' i];  	pcell [0] = (byte)(bsum / sum);  	pcell [1] = (byte)(gsum / sum);  	pcell [2] = (byte)(rsum / sum);  	pcell [3] = (byte)(asum / sum);  }  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: pcell [2] = (byte)(rsum / sum);  
Magic Number,Controls,Blur,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Blur.cs,ProcessImage,The following statement contains a magic number: pcell [3] = (byte)(asum / sum);  
Magic Number,Controls,CredentialsDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\CredentialDialog.cs,Show,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 5) {  	throw new ApplicationException ("The Credential Management API requires Windows XP / Windows Server 2003 or later.");  }  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The following statement contains a magic number: if (vertical) {  	int halfHeight = (this.Width / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' gradientWidth)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' 0' lineWidth' gradientWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' this.Height - gradientWidth)' new Point (0' this.Height)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' this.Height - gradientWidth' lineWidth' gradientWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' halfHeight' gradientWidth' lineWidth' this.Height - (gradientWidth * 2));  	}  }  else {  	int halfHeight = (this.Height / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (gradientWidth' 0)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' 0' halfHeight' gradientWidth' lineWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (this.Width - gradientWidth' 0)' new Point (this.Width' 0)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' this.Width - gradientWidth' halfHeight' gradientWidth' lineWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' gradientWidth' halfHeight' this.Width - (gradientWidth * 2)' lineWidth);  	}  }  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The following statement contains a magic number: if (vertical) {  	int halfHeight = (this.Width / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' gradientWidth)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' 0' lineWidth' gradientWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' this.Height - gradientWidth)' new Point (0' this.Height)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' this.Height - gradientWidth' lineWidth' gradientWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' halfHeight' gradientWidth' lineWidth' this.Height - (gradientWidth * 2));  	}  }  else {  	int halfHeight = (this.Height / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (gradientWidth' 0)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' 0' halfHeight' gradientWidth' lineWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (this.Width - gradientWidth' 0)' new Point (this.Width' 0)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' this.Width - gradientWidth' halfHeight' gradientWidth' lineWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' gradientWidth' halfHeight' this.Width - (gradientWidth * 2)' lineWidth);  	}  }  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The following statement contains a magic number: if (vertical) {  	int halfHeight = (this.Width / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' gradientWidth)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' 0' lineWidth' gradientWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' this.Height - gradientWidth)' new Point (0' this.Height)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' this.Height - gradientWidth' lineWidth' gradientWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' halfHeight' gradientWidth' lineWidth' this.Height - (gradientWidth * 2));  	}  }  else {  	int halfHeight = (this.Height / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (gradientWidth' 0)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' 0' halfHeight' gradientWidth' lineWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (this.Width - gradientWidth' 0)' new Point (this.Width' 0)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' this.Width - gradientWidth' halfHeight' gradientWidth' lineWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' gradientWidth' halfHeight' this.Width - (gradientWidth * 2)' lineWidth);  	}  }  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The following statement contains a magic number: if (vertical) {  	int halfHeight = (this.Width / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' gradientWidth)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' 0' lineWidth' gradientWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' this.Height - gradientWidth)' new Point (0' this.Height)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' this.Height - gradientWidth' lineWidth' gradientWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' halfHeight' gradientWidth' lineWidth' this.Height - (gradientWidth * 2));  	}  }  else {  	int halfHeight = (this.Height / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (gradientWidth' 0)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' 0' halfHeight' gradientWidth' lineWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (this.Width - gradientWidth' 0)' new Point (this.Width' 0)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' this.Width - gradientWidth' halfHeight' gradientWidth' lineWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' gradientWidth' halfHeight' this.Width - (gradientWidth * 2)' lineWidth);  	}  }  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The following statement contains a magic number: if (vertical) {  	int halfHeight = (this.Width / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' gradientWidth)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' 0' lineWidth' gradientWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' this.Height - gradientWidth)' new Point (0' this.Height)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' this.Height - gradientWidth' lineWidth' gradientWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' halfHeight' gradientWidth' lineWidth' this.Height - (gradientWidth * 2));  	}  }  else {  	int halfHeight = (this.Height / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (gradientWidth' 0)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' 0' halfHeight' gradientWidth' lineWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (this.Width - gradientWidth' 0)' new Point (this.Width' 0)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' this.Width - gradientWidth' halfHeight' gradientWidth' lineWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' gradientWidth' halfHeight' this.Width - (gradientWidth * 2)' lineWidth);  	}  }  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The following statement contains a magic number: if (vertical) {  	int halfHeight = (this.Width / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' gradientWidth)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' 0' lineWidth' gradientWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' this.Height - gradientWidth)' new Point (0' this.Height)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' halfHeight' this.Height - gradientWidth' lineWidth' gradientWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' halfHeight' gradientWidth' lineWidth' this.Height - (gradientWidth * 2));  	}  }  else {  	int halfHeight = (this.Height / 2) - (lineWidth / 2);  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (0' 0)' new Point (gradientWidth' 0)' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B)' this.ForeColor)) {  		e.Graphics.FillRectangle (headerGradient' 0' halfHeight' gradientWidth' lineWidth);  	}  	using (LinearGradientBrush headerGradient = new LinearGradientBrush (new Point (this.Width - gradientWidth' 0)' new Point (this.Width' 0)' this.ForeColor' Color.FromArgb (0' this.ForeColor.R' this.ForeColor.G' this.ForeColor.B))) {  		e.Graphics.FillRectangle (headerGradient' this.Width - gradientWidth' halfHeight' gradientWidth' lineWidth);  	}  	using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  		e.Graphics.FillRectangle (headerBrush' gradientWidth' halfHeight' this.Width - (gradientWidth * 2)' lineWidth);  	}  }  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The following statement contains a magic number: using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  	e.Graphics.FillRectangle (headerBrush' halfHeight' gradientWidth' lineWidth' this.Height - (gradientWidth * 2));  }  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (headerBrush' halfHeight' gradientWidth' lineWidth' this.Height - (gradientWidth * 2));  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The following statement contains a magic number: using (SolidBrush headerBrush = new SolidBrush (this.ForeColor)) {  	e.Graphics.FillRectangle (headerBrush' gradientWidth' halfHeight' this.Width - (gradientWidth * 2)' lineWidth);  }  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (headerBrush' gradientWidth' halfHeight' this.Width - (gradientWidth * 2)' lineWidth);  
Magic Number,Controls,DividerLine,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\DividerLine.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (280' 1);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,GlassPanel,The following statement contains a magic number: CalculateBackColors (Color.FromArgb (125' 44' 61' 90));  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,GlassPanel,The following statement contains a magic number: CalculateBackColors (Color.FromArgb (125' 44' 61' 90));  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,GlassPanel,The following statement contains a magic number: CalculateBackColors (Color.FromArgb (125' 44' 61' 90));  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,GlassPanel,The following statement contains a magic number: CalculateBackColors (Color.FromArgb (125' 44' 61' 90));  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,CalculateBackColors,The following statement contains a magic number: hilightColor = Color.FromArgb (backColor.A' Math.Min (255' (int)((float)backColor.R + hilightBrightness))' Math.Min (255' (int)((float)backColor.G + hilightBrightness))' Math.Min (255' (int)((float)backColor.B + hilightBrightness)));  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,CalculateBackColors,The following statement contains a magic number: hilightColor = Color.FromArgb (backColor.A' Math.Min (255' (int)((float)backColor.R + hilightBrightness))' Math.Min (255' (int)((float)backColor.G + hilightBrightness))' Math.Min (255' (int)((float)backColor.B + hilightBrightness)));  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,CalculateBackColors,The following statement contains a magic number: hilightColor = Color.FromArgb (backColor.A' Math.Min (255' (int)((float)backColor.R + hilightBrightness))' Math.Min (255' (int)((float)backColor.G + hilightBrightness))' Math.Min (255' (int)((float)backColor.B + hilightBrightness)));  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: borderRectPath.AddArc (tl' 180' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: borderRectPath.AddArc (tl' 180' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: borderRectPath.AddArc (tr' 270' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: borderRectPath.AddArc (tr' 270' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: borderRectPath.AddArc (br' 360' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: borderRectPath.AddArc (br' 360' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: borderRectPath.AddArc (bl' 90' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: borderRectPath.AddArc (bl' 90' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: topArcPath.AddArc (tl' 180' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: topArcPath.AddArc (tl' 180' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: topArcPath.AddArc (tr' 270' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: topArcPath.AddArc (tr' 270' 90);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: if (pressed) {  	topArcPath.AddArc (dividerArc' 0' -180);  }  else {  	topArcPath.AddArc (dividerArc' 360' 180);  }  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: if (pressed) {  	topArcPath.AddArc (dividerArc' 0' -180);  }  else {  	topArcPath.AddArc (dividerArc' 360' 180);  }  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: if (pressed) {  	topArcPath.AddArc (dividerArc' 0' -180);  }  else {  	topArcPath.AddArc (dividerArc' 360' 180);  }  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: topArcPath.AddArc (dividerArc' 0' -180);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: topArcPath.AddArc (dividerArc' 360' 180);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateBorderRectPath,The following statement contains a magic number: topArcPath.AddArc (dividerArc' 360' 180);  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (backgroundImage)) {  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	// Draw our background  	using (SolidBrush backBrush = new SolidBrush (Color.FromArgb (255' pressed ? hilightColor : backColor))) {  		g.FillPath (backBrush' borderRectPath);  	}  	// Draw our hilight  	using (SolidBrush topBrush = new SolidBrush (Color.FromArgb (255' pressed ? backColor : hilightColor))) {  		g.FillPath (topBrush' topArcPath);  	}  }  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (backgroundImage)) {  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	// Draw our background  	using (SolidBrush backBrush = new SolidBrush (Color.FromArgb (255' pressed ? hilightColor : backColor))) {  		g.FillPath (backBrush' borderRectPath);  	}  	// Draw our hilight  	using (SolidBrush topBrush = new SolidBrush (Color.FromArgb (255' pressed ? backColor : hilightColor))) {  		g.FillPath (topBrush' topArcPath);  	}  }  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateImage,The following statement contains a magic number: using (SolidBrush backBrush = new SolidBrush (Color.FromArgb (255' pressed ? hilightColor : backColor))) {  	g.FillPath (backBrush' borderRectPath);  }  
Magic Number,Controls,GlassPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GlassPanel.cs,RecreateImage,The following statement contains a magic number: using (SolidBrush topBrush = new SolidBrush (Color.FromArgb (255' pressed ? backColor : hilightColor))) {  	g.FillPath (topBrush' topArcPath);  }  
Magic Number,Controls,GradientPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GradientPanel.cs,OnPaint,The following statement contains a magic number: if (this.ClientRectangle.Width > 0 && this.ClientRectangle.Height > 0) {  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (this.ClientRectangle' this.BackColor' this.ForeColor' gradientAngle)) {  		e.Graphics.FillRectangle (gradientBrush' this.ClientRectangle);  	}  	if (drawBorder) {  		using (Pen borderPen = new Pen (borderColor' borderWidth)) {  			int halfBorderWidth = (int)(borderPen.Width / 2);  			e.Graphics.DrawRectangle (borderPen' halfBorderWidth' halfBorderWidth' this.Width - halfBorderWidth - 1' this.Height - halfBorderWidth - 1);  		}  	}  }  
Magic Number,Controls,GradientPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GradientPanel.cs,OnPaint,The following statement contains a magic number: if (drawBorder) {  	using (Pen borderPen = new Pen (borderColor' borderWidth)) {  		int halfBorderWidth = (int)(borderPen.Width / 2);  		e.Graphics.DrawRectangle (borderPen' halfBorderWidth' halfBorderWidth' this.Width - halfBorderWidth - 1' this.Height - halfBorderWidth - 1);  	}  }  
Magic Number,Controls,GradientPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GradientPanel.cs,OnPaint,The following statement contains a magic number: using (Pen borderPen = new Pen (borderColor' borderWidth)) {  	int halfBorderWidth = (int)(borderPen.Width / 2);  	e.Graphics.DrawRectangle (borderPen' halfBorderWidth' halfBorderWidth' this.Width - halfBorderWidth - 1' this.Height - halfBorderWidth - 1);  }  
Magic Number,Controls,GradientPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GradientPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (256' 48);  
Magic Number,Controls,GradientPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GradientPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (256' 48);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (dividerAbove) {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' cornerRadius)' new Point (0' headerHeight)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B));  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  	}  }  else {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' headerHeight - cornerRadius + 1)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  	}  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (dividerAbove) {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' cornerRadius)' new Point (0' headerHeight)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B));  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  	}  }  else {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' headerHeight - cornerRadius + 1)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  	}  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (dividerAbove) {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' cornerRadius)' new Point (0' headerHeight)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B));  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  	}  }  else {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' headerHeight - cornerRadius + 1)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  	}  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (dividerAbove) {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' cornerRadius)' new Point (0' headerHeight)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B));  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  	}  }  else {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' headerHeight - cornerRadius + 1)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  	}  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (dividerAbove) {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' cornerRadius)' new Point (0' headerHeight)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B));  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  	}  }  else {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' headerHeight - cornerRadius + 1)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  	}  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (dividerAbove) {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' cornerRadius)' new Point (0' headerHeight)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B));  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  	}  }  else {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' headerHeight - cornerRadius + 1)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  	}  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (dividerAbove) {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' cornerRadius)' new Point (0' headerHeight)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B));  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  	}  }  else {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' headerHeight - cornerRadius + 1)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  	}  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (dividerAbove) {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' cornerRadius)' new Point (0' headerHeight)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B));  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  	}  }  else {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' headerHeight - cornerRadius + 1)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  	}  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (dividerAbove) {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' cornerRadius)' new Point (0' headerHeight)' headerColor' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B));  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  	}  }  else {  	vertHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (0' headerHeight - cornerRadius + 1)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	if (drawLeftDivider) {  		g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  		g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  	}  	else {  		g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  		horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  		g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  	}  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (drawLeftDivider) {  	g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  	g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  }  else {  	g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  	horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (drawLeftDivider) {  	g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  	g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  }  else {  	g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  	horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (drawLeftDivider) {  	g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  	g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  }  else {  	g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  	horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (drawLeftDivider) {  	g.FillRectangle (horizHeaderGradient' cornerRadius' 0' this.Width - cornerRadius' 1);  	g.FillRectangle (vertHeaderGradient' 0' cornerRadius' 1' headerHeight - cornerRadius);  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  }  else {  	g.FillRectangle (horizHeaderGradient' cornerRadius - 1' 0' this.Width - cornerRadius' 1);  	horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	g.FillRectangle (horizHeaderGradient' 0' 0' cornerRadius' 1);  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: g.DrawArc (headerPen' 0' 0' cornerRadius * 2' cornerRadius * 2' 180' 90);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (drawLeftDivider) {  	g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  	g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  }  else {  	g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  	horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (drawLeftDivider) {  	g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  	g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  }  else {  	g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  	horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (drawLeftDivider) {  	g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  	g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  }  else {  	g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  	horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (drawLeftDivider) {  	g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  	g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  }  else {  	g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  	horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: if (drawLeftDivider) {  	g.FillRectangle (horizHeaderGradient' cornerRadius' headerHeight' this.Width - cornerRadius' 1);  	g.FillRectangle (vertHeaderGradient' 0' 0' 1' headerHeight - cornerRadius + 1);  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  }  else {  	g.FillRectangle (horizHeaderGradient' cornerRadius - 1' headerHeight' this.Width - cornerRadius' 1);  	horizHeaderGradient = new LinearGradientBrush (new Point (0' 0)' new Point (cornerRadius' 0)' Color.FromArgb (0' headerColor.R' headerColor.G' headerColor.B)' headerColor);  	g.FillRectangle (horizHeaderGradient' 0' headerHeight' cornerRadius' 1);  }  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,Draw,The following statement contains a magic number: g.DrawArc (headerPen' 0' headerHeight - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (304' 192);  
Magic Number,Controls,GroupBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\GroupBoxEx.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (304' 192);  
Magic Number,Controls,ImageButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ImageButton.cs,CreateGrayscaleImage,The following statement contains a magic number: for (int h = 0; h < grayBitmap.Width; h++) {  	for (int v = 0; v < grayBitmap.Height; v++) {  		Color color = grayBitmap.GetPixel (h' v);  		int colorValue = (int)(color.R * 0.3 + color.G * 0.59 + color.B * 0.11);  		minLevel = Math.Min (minLevel' colorValue);  		maxLevel = Math.Max (maxLevel' colorValue);  		grayBitmap.SetPixel (h' v' Color.FromArgb (color.A' colorValue' colorValue' colorValue));  	}  }  
Magic Number,Controls,ImageButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ImageButton.cs,CreateGrayscaleImage,The following statement contains a magic number: for (int h = 0; h < grayBitmap.Width; h++) {  	for (int v = 0; v < grayBitmap.Height; v++) {  		Color color = grayBitmap.GetPixel (h' v);  		int colorValue = (int)(color.R * 0.3 + color.G * 0.59 + color.B * 0.11);  		minLevel = Math.Min (minLevel' colorValue);  		maxLevel = Math.Max (maxLevel' colorValue);  		grayBitmap.SetPixel (h' v' Color.FromArgb (color.A' colorValue' colorValue' colorValue));  	}  }  
Magic Number,Controls,ImageButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ImageButton.cs,CreateGrayscaleImage,The following statement contains a magic number: for (int h = 0; h < grayBitmap.Width; h++) {  	for (int v = 0; v < grayBitmap.Height; v++) {  		Color color = grayBitmap.GetPixel (h' v);  		int colorValue = (int)(color.R * 0.3 + color.G * 0.59 + color.B * 0.11);  		minLevel = Math.Min (minLevel' colorValue);  		maxLevel = Math.Max (maxLevel' colorValue);  		grayBitmap.SetPixel (h' v' Color.FromArgb (color.A' colorValue' colorValue' colorValue));  	}  }  
Magic Number,Controls,ImageButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ImageButton.cs,CreateGrayscaleImage,The following statement contains a magic number: for (int v = 0; v < grayBitmap.Height; v++) {  	Color color = grayBitmap.GetPixel (h' v);  	int colorValue = (int)(color.R * 0.3 + color.G * 0.59 + color.B * 0.11);  	minLevel = Math.Min (minLevel' colorValue);  	maxLevel = Math.Max (maxLevel' colorValue);  	grayBitmap.SetPixel (h' v' Color.FromArgb (color.A' colorValue' colorValue' colorValue));  }  
Magic Number,Controls,ImageButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ImageButton.cs,CreateGrayscaleImage,The following statement contains a magic number: for (int v = 0; v < grayBitmap.Height; v++) {  	Color color = grayBitmap.GetPixel (h' v);  	int colorValue = (int)(color.R * 0.3 + color.G * 0.59 + color.B * 0.11);  	minLevel = Math.Min (minLevel' colorValue);  	maxLevel = Math.Max (maxLevel' colorValue);  	grayBitmap.SetPixel (h' v' Color.FromArgb (color.A' colorValue' colorValue' colorValue));  }  
Magic Number,Controls,ImageButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ImageButton.cs,CreateGrayscaleImage,The following statement contains a magic number: for (int v = 0; v < grayBitmap.Height; v++) {  	Color color = grayBitmap.GetPixel (h' v);  	int colorValue = (int)(color.R * 0.3 + color.G * 0.59 + color.B * 0.11);  	minLevel = Math.Min (minLevel' colorValue);  	maxLevel = Math.Max (maxLevel' colorValue);  	grayBitmap.SetPixel (h' v' Color.FromArgb (color.A' colorValue' colorValue' colorValue));  }  
Magic Number,Controls,ImageButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ImageButton.cs,CreateGrayscaleImage,The following statement contains a magic number: for (int h = 0; h < grayBitmap.Width; h++) {  	for (int v = 0; v < grayBitmap.Height; v++) {  		Color color = grayBitmap.GetPixel (h' v);  		int colorValue = color.R;  		//colorValue = 255   		colorValue = Math.Min (255' colorValue);  		grayBitmap.SetPixel (h' v' Color.FromArgb (color.A' colorValue' colorValue' colorValue));  	}  }  
Magic Number,Controls,ImageButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ImageButton.cs,CreateGrayscaleImage,The following statement contains a magic number: for (int v = 0; v < grayBitmap.Height; v++) {  	Color color = grayBitmap.GetPixel (h' v);  	int colorValue = color.R;  	//colorValue = 255   	colorValue = Math.Min (255' colorValue);  	grayBitmap.SetPixel (h' v' Color.FromArgb (color.A' colorValue' colorValue' colorValue));  }  
Magic Number,Controls,ImageButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ImageButton.cs,CreateGrayscaleImage,The following statement contains a magic number: colorValue = Math.Min (255' colorValue);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (0' 88);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (378' 40);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (378' 40);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (288' 8);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (288' 8);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (208' 8);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (208' 8);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point (0' 64);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Padding = new System.Windows.Forms.Padding (10' 0' 10' 0);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Padding = new System.Windows.Forms.Padding (10' 0' 10' 0);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size (378' 24);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size (378' 24);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.txtInput.Location = new System.Drawing.Point (10' 0);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.txtInput.Size = new System.Drawing.Size (358' 21);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.txtInput.Size = new System.Drawing.Size (358' 21);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Location = new System.Drawing.Point (10' 0);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Size = new System.Drawing.Size (67' 64);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Size = new System.Drawing.Size (67' 64);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.TabIndex = 2;  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.lblCaption.Location = new System.Drawing.Point (77' 0);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.lblCaption.Size = new System.Drawing.Size (291' 64);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.lblCaption.Size = new System.Drawing.Size (291' 64);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.lblCaption.TabIndex = 3;  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlCaption.Padding = new System.Windows.Forms.Padding (10' 0' 10' 0);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlCaption.Padding = new System.Windows.Forms.Padding (10' 0' 10' 0);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlCaption.Size = new System.Drawing.Size (378' 64);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlCaption.Size = new System.Drawing.Size (378' 64);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.pnlCaption.TabIndex = 4;  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 14);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 14);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (378' 128);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (378' 128);  
Magic Number,Controls,InputBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\InputBox.cs,txtInput_KeyPress,The following statement contains a magic number: if ((int)e.KeyChar == 13) {  	e.Handled = true;  	this.DialogResult = DialogResult.OK;  	this.Close ();  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox,The following statement contains a magic number: listBox.ItemMargin = 2;  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox,The following statement contains a magic number: listBox.Width = 200;  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,ShowListBox,The following statement contains a magic number: point.Y += (int)Math.Ceiling (this.Font.GetHeight ()) + 2;  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if (!DesignMode) {  	if (IsTriggerCharacter (e.KeyChar)) {  		int charCount = FindCharacterCount (this.Text.Substring (0' this.SelectionStart)' e.KeyChar);  		if (!popupWindow.Visible && charCount % 2 == 0) {  			startChar = e.KeyChar;  			listBox.Items.Clear ();  			if (TriggerCharacterEntered != null) {  				TriggerCharacterEntered (this' new TriggerCharacterEventArgs (e.KeyChar' listBox));  			}  			if (listBox.Items.Count > 0)  				ShowListBox ();  		}  		else if (e.KeyChar == startChar) {  			HideListBox ();  		}  	}  	else if (e.KeyChar == ' ') {  		if (this.SelectionStart == startSelectionPos + 1)  			HideListBox ();  	}  	else if ((int)e.KeyChar == 8) {  		if (this.SelectionStart <= startSelectionPos)  			HideListBox ();  		else if (popupWindow.Visible)  			FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  	}  	else if ((int)e.KeyChar == 13) {  		if (popupWindow.Visible) {  			ProcessListBoxSelection ();  		}  		else {  			HideListBox ();  		}  		e.Handled = true;  	}  	else if (popupWindow.Visible) {  		FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  	}  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if (!DesignMode) {  	if (IsTriggerCharacter (e.KeyChar)) {  		int charCount = FindCharacterCount (this.Text.Substring (0' this.SelectionStart)' e.KeyChar);  		if (!popupWindow.Visible && charCount % 2 == 0) {  			startChar = e.KeyChar;  			listBox.Items.Clear ();  			if (TriggerCharacterEntered != null) {  				TriggerCharacterEntered (this' new TriggerCharacterEventArgs (e.KeyChar' listBox));  			}  			if (listBox.Items.Count > 0)  				ShowListBox ();  		}  		else if (e.KeyChar == startChar) {  			HideListBox ();  		}  	}  	else if (e.KeyChar == ' ') {  		if (this.SelectionStart == startSelectionPos + 1)  			HideListBox ();  	}  	else if ((int)e.KeyChar == 8) {  		if (this.SelectionStart <= startSelectionPos)  			HideListBox ();  		else if (popupWindow.Visible)  			FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  	}  	else if ((int)e.KeyChar == 13) {  		if (popupWindow.Visible) {  			ProcessListBoxSelection ();  		}  		else {  			HideListBox ();  		}  		e.Handled = true;  	}  	else if (popupWindow.Visible) {  		FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  	}  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if (!DesignMode) {  	if (IsTriggerCharacter (e.KeyChar)) {  		int charCount = FindCharacterCount (this.Text.Substring (0' this.SelectionStart)' e.KeyChar);  		if (!popupWindow.Visible && charCount % 2 == 0) {  			startChar = e.KeyChar;  			listBox.Items.Clear ();  			if (TriggerCharacterEntered != null) {  				TriggerCharacterEntered (this' new TriggerCharacterEventArgs (e.KeyChar' listBox));  			}  			if (listBox.Items.Count > 0)  				ShowListBox ();  		}  		else if (e.KeyChar == startChar) {  			HideListBox ();  		}  	}  	else if (e.KeyChar == ' ') {  		if (this.SelectionStart == startSelectionPos + 1)  			HideListBox ();  	}  	else if ((int)e.KeyChar == 8) {  		if (this.SelectionStart <= startSelectionPos)  			HideListBox ();  		else if (popupWindow.Visible)  			FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  	}  	else if ((int)e.KeyChar == 13) {  		if (popupWindow.Visible) {  			ProcessListBoxSelection ();  		}  		else {  			HideListBox ();  		}  		e.Handled = true;  	}  	else if (popupWindow.Visible) {  		FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  	}  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if (IsTriggerCharacter (e.KeyChar)) {  	int charCount = FindCharacterCount (this.Text.Substring (0' this.SelectionStart)' e.KeyChar);  	if (!popupWindow.Visible && charCount % 2 == 0) {  		startChar = e.KeyChar;  		listBox.Items.Clear ();  		if (TriggerCharacterEntered != null) {  			TriggerCharacterEntered (this' new TriggerCharacterEventArgs (e.KeyChar' listBox));  		}  		if (listBox.Items.Count > 0)  			ShowListBox ();  	}  	else if (e.KeyChar == startChar) {  		HideListBox ();  	}  }  else if (e.KeyChar == ' ') {  	if (this.SelectionStart == startSelectionPos + 1)  		HideListBox ();  }  else if ((int)e.KeyChar == 8) {  	if (this.SelectionStart <= startSelectionPos)  		HideListBox ();  	else if (popupWindow.Visible)  		FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  else if ((int)e.KeyChar == 13) {  	if (popupWindow.Visible) {  		ProcessListBoxSelection ();  	}  	else {  		HideListBox ();  	}  	e.Handled = true;  }  else if (popupWindow.Visible) {  	FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if (IsTriggerCharacter (e.KeyChar)) {  	int charCount = FindCharacterCount (this.Text.Substring (0' this.SelectionStart)' e.KeyChar);  	if (!popupWindow.Visible && charCount % 2 == 0) {  		startChar = e.KeyChar;  		listBox.Items.Clear ();  		if (TriggerCharacterEntered != null) {  			TriggerCharacterEntered (this' new TriggerCharacterEventArgs (e.KeyChar' listBox));  		}  		if (listBox.Items.Count > 0)  			ShowListBox ();  	}  	else if (e.KeyChar == startChar) {  		HideListBox ();  	}  }  else if (e.KeyChar == ' ') {  	if (this.SelectionStart == startSelectionPos + 1)  		HideListBox ();  }  else if ((int)e.KeyChar == 8) {  	if (this.SelectionStart <= startSelectionPos)  		HideListBox ();  	else if (popupWindow.Visible)  		FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  else if ((int)e.KeyChar == 13) {  	if (popupWindow.Visible) {  		ProcessListBoxSelection ();  	}  	else {  		HideListBox ();  	}  	e.Handled = true;  }  else if (popupWindow.Visible) {  	FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if (IsTriggerCharacter (e.KeyChar)) {  	int charCount = FindCharacterCount (this.Text.Substring (0' this.SelectionStart)' e.KeyChar);  	if (!popupWindow.Visible && charCount % 2 == 0) {  		startChar = e.KeyChar;  		listBox.Items.Clear ();  		if (TriggerCharacterEntered != null) {  			TriggerCharacterEntered (this' new TriggerCharacterEventArgs (e.KeyChar' listBox));  		}  		if (listBox.Items.Count > 0)  			ShowListBox ();  	}  	else if (e.KeyChar == startChar) {  		HideListBox ();  	}  }  else if (e.KeyChar == ' ') {  	if (this.SelectionStart == startSelectionPos + 1)  		HideListBox ();  }  else if ((int)e.KeyChar == 8) {  	if (this.SelectionStart <= startSelectionPos)  		HideListBox ();  	else if (popupWindow.Visible)  		FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  else if ((int)e.KeyChar == 13) {  	if (popupWindow.Visible) {  		ProcessListBoxSelection ();  	}  	else {  		HideListBox ();  	}  	e.Handled = true;  }  else if (popupWindow.Visible) {  	FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if (!popupWindow.Visible && charCount % 2 == 0) {  	startChar = e.KeyChar;  	listBox.Items.Clear ();  	if (TriggerCharacterEntered != null) {  		TriggerCharacterEntered (this' new TriggerCharacterEventArgs (e.KeyChar' listBox));  	}  	if (listBox.Items.Count > 0)  		ShowListBox ();  }  else if (e.KeyChar == startChar) {  	HideListBox ();  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == ' ') {  	if (this.SelectionStart == startSelectionPos + 1)  		HideListBox ();  }  else if ((int)e.KeyChar == 8) {  	if (this.SelectionStart <= startSelectionPos)  		HideListBox ();  	else if (popupWindow.Visible)  		FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  else if ((int)e.KeyChar == 13) {  	if (popupWindow.Visible) {  		ProcessListBoxSelection ();  	}  	else {  		HideListBox ();  	}  	e.Handled = true;  }  else if (popupWindow.Visible) {  	FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == ' ') {  	if (this.SelectionStart == startSelectionPos + 1)  		HideListBox ();  }  else if ((int)e.KeyChar == 8) {  	if (this.SelectionStart <= startSelectionPos)  		HideListBox ();  	else if (popupWindow.Visible)  		FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  else if ((int)e.KeyChar == 13) {  	if (popupWindow.Visible) {  		ProcessListBoxSelection ();  	}  	else {  		HideListBox ();  	}  	e.Handled = true;  }  else if (popupWindow.Visible) {  	FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if ((int)e.KeyChar == 8) {  	if (this.SelectionStart <= startSelectionPos)  		HideListBox ();  	else if (popupWindow.Visible)  		FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  else if ((int)e.KeyChar == 13) {  	if (popupWindow.Visible) {  		ProcessListBoxSelection ();  	}  	else {  		HideListBox ();  	}  	e.Handled = true;  }  else if (popupWindow.Visible) {  	FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if ((int)e.KeyChar == 8) {  	if (this.SelectionStart <= startSelectionPos)  		HideListBox ();  	else if (popupWindow.Visible)  		FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  else if ((int)e.KeyChar == 13) {  	if (popupWindow.Visible) {  		ProcessListBoxSelection ();  	}  	else {  		HideListBox ();  	}  	e.Handled = true;  }  else if (popupWindow.Visible) {  	FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,IntelliTextBox_KeyPress,The following statement contains a magic number: if ((int)e.KeyChar == 13) {  	if (popupWindow.Visible) {  		ProcessListBoxSelection ();  	}  	else {  		HideListBox ();  	}  	e.Handled = true;  }  else if (popupWindow.Visible) {  	FindListBoxSelection (this.Text.Substring (startSelectionPos + 1' this.SelectionStart - startSelectionPos - 1) + e.KeyChar);  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,ProcessListBoxSelection,The following statement contains a magic number: try {  	if (listBox.SelectedItem != null) {  		string newText = this.Text.Remove (startSelectionPos' this.SelectionStart - startSelectionPos);  		newText = newText.Insert (startSelectionPos' startChar + listBox.SelectedItem.ToString () + startChar);  		this.Text = newText;  		this.SelectionStart = startSelectionPos + listBox.SelectedItem.ToString ().Length + 2;  	}  }  catch {  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,ProcessListBoxSelection,The following statement contains a magic number: if (listBox.SelectedItem != null) {  	string newText = this.Text.Remove (startSelectionPos' this.SelectionStart - startSelectionPos);  	newText = newText.Insert (startSelectionPos' startChar + listBox.SelectedItem.ToString () + startChar);  	this.Text = newText;  	this.SelectionStart = startSelectionPos + listBox.SelectedItem.ToString ().Length + 2;  }  
Magic Number,Controls,IntelliTextBox,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\IntelliTextBox.cs,ProcessListBoxSelection,The following statement contains a magic number: this.SelectionStart = startSelectionPos + listBox.SelectedItem.ToString ().Length + 2;  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,CreateGrayedImage,The following statement contains a magic number: for (int x = 0; x < grayBitmap.Width; x++) {  	for (int y = 0; y < grayBitmap.Height; y++) {  		Color color = grayBitmap.GetPixel (x' y);  		int avgColor = (color.R + color.G + color.B) / 3;  		grayBitmap.SetPixel (x' y' Color.FromArgb ((int)(color.A * 0.5)' avgColor' avgColor' avgColor));  	}  }  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,CreateGrayedImage,The following statement contains a magic number: for (int x = 0; x < grayBitmap.Width; x++) {  	for (int y = 0; y < grayBitmap.Height; y++) {  		Color color = grayBitmap.GetPixel (x' y);  		int avgColor = (color.R + color.G + color.B) / 3;  		grayBitmap.SetPixel (x' y' Color.FromArgb ((int)(color.A * 0.5)' avgColor' avgColor' avgColor));  	}  }  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,CreateGrayedImage,The following statement contains a magic number: for (int y = 0; y < grayBitmap.Height; y++) {  	Color color = grayBitmap.GetPixel (x' y);  	int avgColor = (color.R + color.G + color.B) / 3;  	grayBitmap.SetPixel (x' y' Color.FromArgb ((int)(color.A * 0.5)' avgColor' avgColor' avgColor));  }  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,CreateGrayedImage,The following statement contains a magic number: for (int y = 0; y < grayBitmap.Height; y++) {  	Color color = grayBitmap.GetPixel (x' y);  	int avgColor = (color.R + color.G + color.B) / 3;  	grayBitmap.SetPixel (x' y' Color.FromArgb ((int)(color.A * 0.5)' avgColor' avgColor' avgColor));  }  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,CreateGrayedImage,The following statement contains a magic number: grayBitmap.SetPixel (x' y' Color.FromArgb ((int)(color.A * 0.5)' avgColor' avgColor' avgColor));  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,InitializeComponent,The following statement contains a magic number: this.pbImage.Size = new System.Drawing.Size (24' 16);  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,InitializeComponent,The following statement contains a magic number: this.pbImage.Size = new System.Drawing.Size (24' 16);  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,InitializeComponent,The following statement contains a magic number: this.lblLink.Location = new System.Drawing.Point (24' 0);  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,InitializeComponent,The following statement contains a magic number: this.lblLink.Size = new System.Drawing.Size (126' 16);  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,InitializeComponent,The following statement contains a magic number: this.lblLink.Size = new System.Drawing.Size (126' 16);  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (150' 16);  
Magic Number,Controls,LinkButton,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LinkButton.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (150' 16);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: if (itemImage != null)  	imageHeight = itemImage.Height + (itemMargin * 2);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: imageHeight = itemImage.Height + (itemMargin * 2);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: using (Graphics g = this.CreateGraphics ()) {  	if (antiAlias)  		textHeight = (int)g.MeasureString (GetItemText (item)' this.Font' 1000' stringFormat).Height + (itemMargin * 2);  	else  		textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2);  	itemHeight = Math.Max (Math.Max (imageHeight' textHeight)' minHeight);  	if (includeCaption) {  		string caption = GetItemCaption (item);  		if (caption.Length > 0) {  			if (antiAlias)  				itemHeight += (int)g.MeasureString (caption' captionFont' this.Width).Height;  			else  				itemHeight += (int)TextRenderer.MeasureText (g' caption' captionFont' new Size (this.Width' 0)' TextFormatFlags.Left | TextFormatFlags.WordBreak).Height;  		}  	}  }  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: using (Graphics g = this.CreateGraphics ()) {  	if (antiAlias)  		textHeight = (int)g.MeasureString (GetItemText (item)' this.Font' 1000' stringFormat).Height + (itemMargin * 2);  	else  		textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2);  	itemHeight = Math.Max (Math.Max (imageHeight' textHeight)' minHeight);  	if (includeCaption) {  		string caption = GetItemCaption (item);  		if (caption.Length > 0) {  			if (antiAlias)  				itemHeight += (int)g.MeasureString (caption' captionFont' this.Width).Height;  			else  				itemHeight += (int)TextRenderer.MeasureText (g' caption' captionFont' new Size (this.Width' 0)' TextFormatFlags.Left | TextFormatFlags.WordBreak).Height;  		}  	}  }  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: using (Graphics g = this.CreateGraphics ()) {  	if (antiAlias)  		textHeight = (int)g.MeasureString (GetItemText (item)' this.Font' 1000' stringFormat).Height + (itemMargin * 2);  	else  		textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2);  	itemHeight = Math.Max (Math.Max (imageHeight' textHeight)' minHeight);  	if (includeCaption) {  		string caption = GetItemCaption (item);  		if (caption.Length > 0) {  			if (antiAlias)  				itemHeight += (int)g.MeasureString (caption' captionFont' this.Width).Height;  			else  				itemHeight += (int)TextRenderer.MeasureText (g' caption' captionFont' new Size (this.Width' 0)' TextFormatFlags.Left | TextFormatFlags.WordBreak).Height;  		}  	}  }  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: using (Graphics g = this.CreateGraphics ()) {  	if (antiAlias)  		textHeight = (int)g.MeasureString (GetItemText (item)' this.Font' 1000' stringFormat).Height + (itemMargin * 2);  	else  		textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2);  	itemHeight = Math.Max (Math.Max (imageHeight' textHeight)' minHeight);  	if (includeCaption) {  		string caption = GetItemCaption (item);  		if (caption.Length > 0) {  			if (antiAlias)  				itemHeight += (int)g.MeasureString (caption' captionFont' this.Width).Height;  			else  				itemHeight += (int)TextRenderer.MeasureText (g' caption' captionFont' new Size (this.Width' 0)' TextFormatFlags.Left | TextFormatFlags.WordBreak).Height;  		}  	}  }  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: if (antiAlias)  	textHeight = (int)g.MeasureString (GetItemText (item)' this.Font' 1000' stringFormat).Height + (itemMargin * 2);  else  	textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: if (antiAlias)  	textHeight = (int)g.MeasureString (GetItemText (item)' this.Font' 1000' stringFormat).Height + (itemMargin * 2);  else  	textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: if (antiAlias)  	textHeight = (int)g.MeasureString (GetItemText (item)' this.Font' 1000' stringFormat).Height + (itemMargin * 2);  else  	textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: if (antiAlias)  	textHeight = (int)g.MeasureString (GetItemText (item)' this.Font' 1000' stringFormat).Height + (itemMargin * 2);  else  	textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: textHeight = (int)g.MeasureString (GetItemText (item)' this.Font' 1000' stringFormat).Height + (itemMargin * 2);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: textHeight = (int)g.MeasureString (GetItemText (item)' this.Font' 1000' stringFormat).Height + (itemMargin * 2);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,MeasureItemHeight,The following statement contains a magic number: textHeight = (int)TextRenderer.MeasureText (g' GetItemText (item)' this.Font' new Size (1000' 0)' TextFormatFlags.VerticalCenter | TextFormatFlags.Left).Height + (itemMargin * 2);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0) {  	Rectangle stringRect;  	Image itemImage = GetItemImage (Items [e.Index]);  	string caption = GetItemCaption (Items [e.Index]);  	int mainItemHeight = MeasureItemHeight (this.Items [e.Index]' false);  	if (itemImage == null)  		itemImage = this.itemImage;  	if (itemImage != null) {  		Rectangle imageRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top + (mainItemHeight - itemImage.Height) / 2' itemImage.Width' itemImage.Height);  		e.Graphics.DrawImage (itemImage' imageRect);  		stringRect = new Rectangle (imageRect.Right + 2' e.Bounds.Top' e.Bounds.Width - imageRect.Right - itemMargin' mainItemHeight);  	}  	else {  		stringRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top' e.Bounds.Width - itemMargin * 2' mainItemHeight);  	}  	using (SolidBrush textBrush = new SolidBrush (ForeColor)) {  		string itemText = Items [e.Index].ToString ();  		if (this.DisplayMember != null && Items [e.Index] is System.Data.DataRowView) {  			itemText = ((DataRowView)Items [e.Index]).Row [this.DisplayMember].ToString ();  		}  		if (antiAlias) {  			e.Graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  			e.Graphics.DrawString (GetItemText (Items [e.Index])' e.Font' textBrush' stringRect' stringFormat);  		}  		else {  			e.Graphics.TextRenderingHint = TextRenderingHint.SystemDefault;  			TextRenderer.DrawText (e.Graphics' GetItemText (Items [e.Index])' e.Font' stringRect' ForeColor' TextFormatFlags.EndEllipsis | TextFormatFlags.SingleLine | TextFormatFlags.VerticalCenter);  		}  		// Draw caption  		if (caption.Length > 0) {  			textBrush.Color = captionColor;  			stringRect.Y = stringRect.Bottom - itemMargin;  			stringRect.Height = e.Bounds.Bottom - stringRect.Y - itemMargin;  			if (antiAlias) {  				e.Graphics.DrawString (caption' captionFont' textBrush' stringRect);  			}  			else {  				TextRenderer.DrawText (e.Graphics' caption' captionFont' stringRect' captionColor' TextFormatFlags.Left | TextFormatFlags.Top | TextFormatFlags.WordBreak);  			}  		}  	}  }  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0) {  	Rectangle stringRect;  	Image itemImage = GetItemImage (Items [e.Index]);  	string caption = GetItemCaption (Items [e.Index]);  	int mainItemHeight = MeasureItemHeight (this.Items [e.Index]' false);  	if (itemImage == null)  		itemImage = this.itemImage;  	if (itemImage != null) {  		Rectangle imageRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top + (mainItemHeight - itemImage.Height) / 2' itemImage.Width' itemImage.Height);  		e.Graphics.DrawImage (itemImage' imageRect);  		stringRect = new Rectangle (imageRect.Right + 2' e.Bounds.Top' e.Bounds.Width - imageRect.Right - itemMargin' mainItemHeight);  	}  	else {  		stringRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top' e.Bounds.Width - itemMargin * 2' mainItemHeight);  	}  	using (SolidBrush textBrush = new SolidBrush (ForeColor)) {  		string itemText = Items [e.Index].ToString ();  		if (this.DisplayMember != null && Items [e.Index] is System.Data.DataRowView) {  			itemText = ((DataRowView)Items [e.Index]).Row [this.DisplayMember].ToString ();  		}  		if (antiAlias) {  			e.Graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  			e.Graphics.DrawString (GetItemText (Items [e.Index])' e.Font' textBrush' stringRect' stringFormat);  		}  		else {  			e.Graphics.TextRenderingHint = TextRenderingHint.SystemDefault;  			TextRenderer.DrawText (e.Graphics' GetItemText (Items [e.Index])' e.Font' stringRect' ForeColor' TextFormatFlags.EndEllipsis | TextFormatFlags.SingleLine | TextFormatFlags.VerticalCenter);  		}  		// Draw caption  		if (caption.Length > 0) {  			textBrush.Color = captionColor;  			stringRect.Y = stringRect.Bottom - itemMargin;  			stringRect.Height = e.Bounds.Bottom - stringRect.Y - itemMargin;  			if (antiAlias) {  				e.Graphics.DrawString (caption' captionFont' textBrush' stringRect);  			}  			else {  				TextRenderer.DrawText (e.Graphics' caption' captionFont' stringRect' captionColor' TextFormatFlags.Left | TextFormatFlags.Top | TextFormatFlags.WordBreak);  			}  		}  	}  }  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The following statement contains a magic number: if (Items.Count > 0 && e.Index >= 0) {  	Rectangle stringRect;  	Image itemImage = GetItemImage (Items [e.Index]);  	string caption = GetItemCaption (Items [e.Index]);  	int mainItemHeight = MeasureItemHeight (this.Items [e.Index]' false);  	if (itemImage == null)  		itemImage = this.itemImage;  	if (itemImage != null) {  		Rectangle imageRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top + (mainItemHeight - itemImage.Height) / 2' itemImage.Width' itemImage.Height);  		e.Graphics.DrawImage (itemImage' imageRect);  		stringRect = new Rectangle (imageRect.Right + 2' e.Bounds.Top' e.Bounds.Width - imageRect.Right - itemMargin' mainItemHeight);  	}  	else {  		stringRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top' e.Bounds.Width - itemMargin * 2' mainItemHeight);  	}  	using (SolidBrush textBrush = new SolidBrush (ForeColor)) {  		string itemText = Items [e.Index].ToString ();  		if (this.DisplayMember != null && Items [e.Index] is System.Data.DataRowView) {  			itemText = ((DataRowView)Items [e.Index]).Row [this.DisplayMember].ToString ();  		}  		if (antiAlias) {  			e.Graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  			e.Graphics.DrawString (GetItemText (Items [e.Index])' e.Font' textBrush' stringRect' stringFormat);  		}  		else {  			e.Graphics.TextRenderingHint = TextRenderingHint.SystemDefault;  			TextRenderer.DrawText (e.Graphics' GetItemText (Items [e.Index])' e.Font' stringRect' ForeColor' TextFormatFlags.EndEllipsis | TextFormatFlags.SingleLine | TextFormatFlags.VerticalCenter);  		}  		// Draw caption  		if (caption.Length > 0) {  			textBrush.Color = captionColor;  			stringRect.Y = stringRect.Bottom - itemMargin;  			stringRect.Height = e.Bounds.Bottom - stringRect.Y - itemMargin;  			if (antiAlias) {  				e.Graphics.DrawString (caption' captionFont' textBrush' stringRect);  			}  			else {  				TextRenderer.DrawText (e.Graphics' caption' captionFont' stringRect' captionColor' TextFormatFlags.Left | TextFormatFlags.Top | TextFormatFlags.WordBreak);  			}  		}  	}  }  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The following statement contains a magic number: if (itemImage != null) {  	Rectangle imageRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top + (mainItemHeight - itemImage.Height) / 2' itemImage.Width' itemImage.Height);  	e.Graphics.DrawImage (itemImage' imageRect);  	stringRect = new Rectangle (imageRect.Right + 2' e.Bounds.Top' e.Bounds.Width - imageRect.Right - itemMargin' mainItemHeight);  }  else {  	stringRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top' e.Bounds.Width - itemMargin * 2' mainItemHeight);  }  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The following statement contains a magic number: if (itemImage != null) {  	Rectangle imageRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top + (mainItemHeight - itemImage.Height) / 2' itemImage.Width' itemImage.Height);  	e.Graphics.DrawImage (itemImage' imageRect);  	stringRect = new Rectangle (imageRect.Right + 2' e.Bounds.Top' e.Bounds.Width - imageRect.Right - itemMargin' mainItemHeight);  }  else {  	stringRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top' e.Bounds.Width - itemMargin * 2' mainItemHeight);  }  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The following statement contains a magic number: if (itemImage != null) {  	Rectangle imageRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top + (mainItemHeight - itemImage.Height) / 2' itemImage.Width' itemImage.Height);  	e.Graphics.DrawImage (itemImage' imageRect);  	stringRect = new Rectangle (imageRect.Right + 2' e.Bounds.Top' e.Bounds.Width - imageRect.Right - itemMargin' mainItemHeight);  }  else {  	stringRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top' e.Bounds.Width - itemMargin * 2' mainItemHeight);  }  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The following statement contains a magic number: stringRect = new Rectangle (imageRect.Right + 2' e.Bounds.Top' e.Bounds.Width - imageRect.Right - itemMargin' mainItemHeight);  
Magic Number,Controls,ListBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ListBoxEx.cs,OnDrawItem,The following statement contains a magic number: stringRect = new Rectangle (e.Bounds.Left + itemMargin' e.Bounds.Top' e.Bounds.Width - itemMargin * 2' mainItemHeight);  
Magic Number,Controls,LoadingDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LoadingDialog.cs,DialogThreadProc,The following statement contains a magic number: try {  	if (keepOpen) {  		if (dialog == null) {  			dialogMutex.WaitOne ();  			dialog = new LoadingDialog ();  			dialog.StartPosition = FormStartPosition.CenterScreen;  			dialog.Show ();  			dialogMutex.ReleaseMutex ();  		}  		if (dialog != null) {  			dialog.UpdateData ();  			while (keepOpen) {  				System.Threading.Thread.Sleep (100);  				Application.DoEvents ();  			}  			dialogMutex.WaitOne ();  			dialog.Close ();  			dialog.Dispose ();  			dialog = null;  			dialogMutex.ReleaseMutex ();  		}  	}  }  catch {  }  
Magic Number,Controls,LoadingDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LoadingDialog.cs,DialogThreadProc,The following statement contains a magic number: if (keepOpen) {  	if (dialog == null) {  		dialogMutex.WaitOne ();  		dialog = new LoadingDialog ();  		dialog.StartPosition = FormStartPosition.CenterScreen;  		dialog.Show ();  		dialogMutex.ReleaseMutex ();  	}  	if (dialog != null) {  		dialog.UpdateData ();  		while (keepOpen) {  			System.Threading.Thread.Sleep (100);  			Application.DoEvents ();  		}  		dialogMutex.WaitOne ();  		dialog.Close ();  		dialog.Dispose ();  		dialog = null;  		dialogMutex.ReleaseMutex ();  	}  }  
Magic Number,Controls,LoadingDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LoadingDialog.cs,DialogThreadProc,The following statement contains a magic number: if (dialog != null) {  	dialog.UpdateData ();  	while (keepOpen) {  		System.Threading.Thread.Sleep (100);  		Application.DoEvents ();  	}  	dialogMutex.WaitOne ();  	dialog.Close ();  	dialog.Dispose ();  	dialog = null;  	dialogMutex.ReleaseMutex ();  }  
Magic Number,Controls,LoadingDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LoadingDialog.cs,DialogThreadProc,The following statement contains a magic number: while (keepOpen) {  	System.Threading.Thread.Sleep (100);  	Application.DoEvents ();  }  
Magic Number,Controls,LoadingDialog,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\LoadingDialog.cs,DialogThreadProc,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
Magic Number,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,LoadLocation,The following statement contains a magic number: zoomLevel = Math.Min (Math.Max (zoom' 0)' 19);  
Magic Number,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,LoadLocation,The following statement contains a magic number: zoomLevel = Math.Min (Math.Max (zoom' 0)' 19);  
Magic Number,Controls,MapViewerControl,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MapViewerControl.cs,GetMapImage,The following statement contains a magic number: try {  	string url = string.Format ("http://maps.google.com/staticmap?center={0}'{1}&zoom={2}&size={3}x{4}&key={5}"' latitude' longitude' Math.Min (Math.Max (zoom' 0)' 19)' width' height' googleAPIKey);  	Bitmap bmp = new Bitmap (System.Net.HttpWebRequest.Create (url).GetResponse ().GetResponseStream ());  	return bmp;  }  catch {  }  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Location = new System.Drawing.Point (264' 0);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Size = new System.Drawing.Size (16' 16);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Size = new System.Drawing.Size (16' 16);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (280' 16);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (280' 16);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (keyData == Keys.Left) {  	if (selectedColumn > 0)  		selectedColumn--;  	Redraw ();  	return true;  }  else if (keyData == Keys.Right) {  	if (selectedColumn < intValue.ToString ().Length)  		selectedColumn++;  	Redraw ();  	return true;  }  else if (keyData == Keys.Up || keyData == Keys.Down) {  	string numberString = intValue.ToString ();  	if (selectedColumn >= 0) {  		char columnChar = '0';  		if (selectedColumn < numberString.Length)  			columnChar = numberString [selectedColumn];  		else {  			numberString += "0";  		}  		if (Char.IsNumber (columnChar)) {  			int newValue = Convert.ToInt32 (columnChar.ToString ());  			if (keyData == Keys.Up)  				newValue++;  			else  				newValue--;  			if (newValue > 9)  				newValue = 0;  			else if (newValue < 0)  				newValue = 9;  			numberString = numberString.Remove (selectedColumn' 1);  			numberString = numberString.Insert (selectedColumn' newValue.ToString ());  			SetStringValue (numberString);  		}  	}  	return true;  }  else  	return base.ProcessCmdKey (ref msg' keyData);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (keyData == Keys.Left) {  	if (selectedColumn > 0)  		selectedColumn--;  	Redraw ();  	return true;  }  else if (keyData == Keys.Right) {  	if (selectedColumn < intValue.ToString ().Length)  		selectedColumn++;  	Redraw ();  	return true;  }  else if (keyData == Keys.Up || keyData == Keys.Down) {  	string numberString = intValue.ToString ();  	if (selectedColumn >= 0) {  		char columnChar = '0';  		if (selectedColumn < numberString.Length)  			columnChar = numberString [selectedColumn];  		else {  			numberString += "0";  		}  		if (Char.IsNumber (columnChar)) {  			int newValue = Convert.ToInt32 (columnChar.ToString ());  			if (keyData == Keys.Up)  				newValue++;  			else  				newValue--;  			if (newValue > 9)  				newValue = 0;  			else if (newValue < 0)  				newValue = 9;  			numberString = numberString.Remove (selectedColumn' 1);  			numberString = numberString.Insert (selectedColumn' newValue.ToString ());  			SetStringValue (numberString);  		}  	}  	return true;  }  else  	return base.ProcessCmdKey (ref msg' keyData);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (keyData == Keys.Right) {  	if (selectedColumn < intValue.ToString ().Length)  		selectedColumn++;  	Redraw ();  	return true;  }  else if (keyData == Keys.Up || keyData == Keys.Down) {  	string numberString = intValue.ToString ();  	if (selectedColumn >= 0) {  		char columnChar = '0';  		if (selectedColumn < numberString.Length)  			columnChar = numberString [selectedColumn];  		else {  			numberString += "0";  		}  		if (Char.IsNumber (columnChar)) {  			int newValue = Convert.ToInt32 (columnChar.ToString ());  			if (keyData == Keys.Up)  				newValue++;  			else  				newValue--;  			if (newValue > 9)  				newValue = 0;  			else if (newValue < 0)  				newValue = 9;  			numberString = numberString.Remove (selectedColumn' 1);  			numberString = numberString.Insert (selectedColumn' newValue.ToString ());  			SetStringValue (numberString);  		}  	}  	return true;  }  else  	return base.ProcessCmdKey (ref msg' keyData);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (keyData == Keys.Right) {  	if (selectedColumn < intValue.ToString ().Length)  		selectedColumn++;  	Redraw ();  	return true;  }  else if (keyData == Keys.Up || keyData == Keys.Down) {  	string numberString = intValue.ToString ();  	if (selectedColumn >= 0) {  		char columnChar = '0';  		if (selectedColumn < numberString.Length)  			columnChar = numberString [selectedColumn];  		else {  			numberString += "0";  		}  		if (Char.IsNumber (columnChar)) {  			int newValue = Convert.ToInt32 (columnChar.ToString ());  			if (keyData == Keys.Up)  				newValue++;  			else  				newValue--;  			if (newValue > 9)  				newValue = 0;  			else if (newValue < 0)  				newValue = 9;  			numberString = numberString.Remove (selectedColumn' 1);  			numberString = numberString.Insert (selectedColumn' newValue.ToString ());  			SetStringValue (numberString);  		}  	}  	return true;  }  else  	return base.ProcessCmdKey (ref msg' keyData);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (keyData == Keys.Up || keyData == Keys.Down) {  	string numberString = intValue.ToString ();  	if (selectedColumn >= 0) {  		char columnChar = '0';  		if (selectedColumn < numberString.Length)  			columnChar = numberString [selectedColumn];  		else {  			numberString += "0";  		}  		if (Char.IsNumber (columnChar)) {  			int newValue = Convert.ToInt32 (columnChar.ToString ());  			if (keyData == Keys.Up)  				newValue++;  			else  				newValue--;  			if (newValue > 9)  				newValue = 0;  			else if (newValue < 0)  				newValue = 9;  			numberString = numberString.Remove (selectedColumn' 1);  			numberString = numberString.Insert (selectedColumn' newValue.ToString ());  			SetStringValue (numberString);  		}  	}  	return true;  }  else  	return base.ProcessCmdKey (ref msg' keyData);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (keyData == Keys.Up || keyData == Keys.Down) {  	string numberString = intValue.ToString ();  	if (selectedColumn >= 0) {  		char columnChar = '0';  		if (selectedColumn < numberString.Length)  			columnChar = numberString [selectedColumn];  		else {  			numberString += "0";  		}  		if (Char.IsNumber (columnChar)) {  			int newValue = Convert.ToInt32 (columnChar.ToString ());  			if (keyData == Keys.Up)  				newValue++;  			else  				newValue--;  			if (newValue > 9)  				newValue = 0;  			else if (newValue < 0)  				newValue = 9;  			numberString = numberString.Remove (selectedColumn' 1);  			numberString = numberString.Insert (selectedColumn' newValue.ToString ());  			SetStringValue (numberString);  		}  	}  	return true;  }  else  	return base.ProcessCmdKey (ref msg' keyData);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (selectedColumn >= 0) {  	char columnChar = '0';  	if (selectedColumn < numberString.Length)  		columnChar = numberString [selectedColumn];  	else {  		numberString += "0";  	}  	if (Char.IsNumber (columnChar)) {  		int newValue = Convert.ToInt32 (columnChar.ToString ());  		if (keyData == Keys.Up)  			newValue++;  		else  			newValue--;  		if (newValue > 9)  			newValue = 0;  		else if (newValue < 0)  			newValue = 9;  		numberString = numberString.Remove (selectedColumn' 1);  		numberString = numberString.Insert (selectedColumn' newValue.ToString ());  		SetStringValue (numberString);  	}  }  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (selectedColumn >= 0) {  	char columnChar = '0';  	if (selectedColumn < numberString.Length)  		columnChar = numberString [selectedColumn];  	else {  		numberString += "0";  	}  	if (Char.IsNumber (columnChar)) {  		int newValue = Convert.ToInt32 (columnChar.ToString ());  		if (keyData == Keys.Up)  			newValue++;  		else  			newValue--;  		if (newValue > 9)  			newValue = 0;  		else if (newValue < 0)  			newValue = 9;  		numberString = numberString.Remove (selectedColumn' 1);  		numberString = numberString.Insert (selectedColumn' newValue.ToString ());  		SetStringValue (numberString);  	}  }  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (Char.IsNumber (columnChar)) {  	int newValue = Convert.ToInt32 (columnChar.ToString ());  	if (keyData == Keys.Up)  		newValue++;  	else  		newValue--;  	if (newValue > 9)  		newValue = 0;  	else if (newValue < 0)  		newValue = 9;  	numberString = numberString.Remove (selectedColumn' 1);  	numberString = numberString.Insert (selectedColumn' newValue.ToString ());  	SetStringValue (numberString);  }  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (Char.IsNumber (columnChar)) {  	int newValue = Convert.ToInt32 (columnChar.ToString ());  	if (keyData == Keys.Up)  		newValue++;  	else  		newValue--;  	if (newValue > 9)  		newValue = 0;  	else if (newValue < 0)  		newValue = 9;  	numberString = numberString.Remove (selectedColumn' 1);  	numberString = numberString.Insert (selectedColumn' newValue.ToString ());  	SetStringValue (numberString);  }  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (newValue > 9)  	newValue = 0;  else if (newValue < 0)  	newValue = 9;  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (newValue > 9)  	newValue = 0;  else if (newValue < 0)  	newValue = 9;  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: if (newValue < 0)  	newValue = 9;  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,ProcessCmdKey,The following statement contains a magic number: newValue = 9;  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,NumberEdit_KeyPress,The following statement contains a magic number: if (Char.IsNumber (e.KeyChar) || e.KeyChar == '-') {  	string numberString = intValue.ToString ();  	if (selectedColumn >= 0) {  		if (selectedColumn > numberString.Length - 1)  			numberString += e.KeyChar;  		else {  			numberString = numberString.Remove (selectedColumn' 1);  			numberString = numberString.Insert (selectedColumn' e.KeyChar.ToString ());  		}  	}  	SetStringValue (numberString);  	if (numberString [0] != '0' && selectedColumn + 1 <= intValue.ToString ().Length)  		selectedColumn++;  }  // Backspace key  else if (e.KeyChar == 8) {  	if (selectedColumn >= 1) {  		string numberString = intValue.ToString ();  		if (selectedColumn == 0)  			numberString = numberString.Remove (0' 1);  		else  			numberString = numberString.Remove (selectedColumn - 1' 1);  		SetStringValue (numberString);  		selectedColumn--;  		Redraw ();  	}  }  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,NumberEdit_KeyPress,The following statement contains a magic number: if (e.KeyChar == 8) {  	if (selectedColumn >= 1) {  		string numberString = intValue.ToString ();  		if (selectedColumn == 0)  			numberString = numberString.Remove (0' 1);  		else  			numberString = numberString.Remove (selectedColumn - 1' 1);  		SetStringValue (numberString);  		selectedColumn--;  		Redraw ();  	}  }  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: if (upButton)  	ControlPaint.DrawScrollButton (e.Graphics' 0' 0' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Up' ButtonState.Pushed);  else  	ControlPaint.DrawScrollButton (e.Graphics' 0' 0' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Up' ButtonState.Normal);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: if (upButton)  	ControlPaint.DrawScrollButton (e.Graphics' 0' 0' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Up' ButtonState.Pushed);  else  	ControlPaint.DrawScrollButton (e.Graphics' 0' 0' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Up' ButtonState.Normal);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: ControlPaint.DrawScrollButton (e.Graphics' 0' 0' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Up' ButtonState.Pushed);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: ControlPaint.DrawScrollButton (e.Graphics' 0' 0' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Up' ButtonState.Normal);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: if (downButton)  	ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Pushed);  else  	ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Normal);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: if (downButton)  	ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Pushed);  else  	ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Normal);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: if (downButton)  	ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Pushed);  else  	ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Normal);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: if (downButton)  	ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Pushed);  else  	ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Normal);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Pushed);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Pushed);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Normal);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_Paint,The following statement contains a magic number: ControlPaint.DrawScrollButton (e.Graphics' 0' pnlButtons.Height / 2' pnlButtons.Width' pnlButtons.Height / 2' ScrollButton.Down' ButtonState.Normal);  
Magic Number,Controls,NumberEdit,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberEdit.cs,pnlButtons_MouseDown,The following statement contains a magic number: if (e.Y <= this.Height / 2) {  	upButton = true;  	SetValue (this.Value + 1);  }  else {  	downButton = true;  	SetValue (this.Value - 1);  }  
Magic Number,Controls,NumberPad,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\NumberPad.cs,NumberPad,The following statement contains a magic number: this.KeyPadding = 3;  
Magic Number,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,OnPaint,The following statement contains a magic number: if (allowDraw) {  	// Draw rects  	using (Pen borderPen = new Pen (this.ForeColor' 1)) {  		using (LinearGradientBrush gradientBrush = new LinearGradientBrush (this.ClientRectangle' minColor' maxColor' 0' false)) {  			int range = maxValue - minValue;  			int lowerAdj = lowerValue - minValue;  			int upperAdj = lowerAdj + (upperValue - lowerValue);  			if (drawBoxes) {  				for (int x = 0; x < this.Width - rectSize.Width; x += rectSize.Width + 2) {  					if (range > 0) {  						int lowerX = (int)((float)lowerAdj / (float)range * (float)this.Width);  						int upperX = (int)((float)upperAdj / (float)range * (float)this.Width);  						// Only draw the fill if it's within our range  						if (upperAdj > 0 && x >= lowerX && x <= upperX - rectSize.Width)  							e.Graphics.FillRectangle (gradientBrush' x' 0' rectSize.Width' rectSize.Height);  					}  					e.Graphics.DrawRectangle (borderPen' x' 0' rectSize.Width' rectSize.Height);  				}  			}  			else {  				int lowerX = (int)((float)lowerAdj / (float)range * (float)this.Width);  				int upperX = (int)((float)upperAdj / (float)range * (float)this.Width);  				e.Graphics.FillRectangle (gradientBrush' lowerX' 0' upperX' rectSize.Height);  				e.Graphics.DrawRectangle (borderPen' 0' 0' this.Width - 1' this.Height - 1);  			}  		}  	}  }  
Magic Number,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,OnPaint,The following statement contains a magic number: using (Pen borderPen = new Pen (this.ForeColor' 1)) {  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (this.ClientRectangle' minColor' maxColor' 0' false)) {  		int range = maxValue - minValue;  		int lowerAdj = lowerValue - minValue;  		int upperAdj = lowerAdj + (upperValue - lowerValue);  		if (drawBoxes) {  			for (int x = 0; x < this.Width - rectSize.Width; x += rectSize.Width + 2) {  				if (range > 0) {  					int lowerX = (int)((float)lowerAdj / (float)range * (float)this.Width);  					int upperX = (int)((float)upperAdj / (float)range * (float)this.Width);  					// Only draw the fill if it's within our range  					if (upperAdj > 0 && x >= lowerX && x <= upperX - rectSize.Width)  						e.Graphics.FillRectangle (gradientBrush' x' 0' rectSize.Width' rectSize.Height);  				}  				e.Graphics.DrawRectangle (borderPen' x' 0' rectSize.Width' rectSize.Height);  			}  		}  		else {  			int lowerX = (int)((float)lowerAdj / (float)range * (float)this.Width);  			int upperX = (int)((float)upperAdj / (float)range * (float)this.Width);  			e.Graphics.FillRectangle (gradientBrush' lowerX' 0' upperX' rectSize.Height);  			e.Graphics.DrawRectangle (borderPen' 0' 0' this.Width - 1' this.Height - 1);  		}  	}  }  
Magic Number,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,OnPaint,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (this.ClientRectangle' minColor' maxColor' 0' false)) {  	int range = maxValue - minValue;  	int lowerAdj = lowerValue - minValue;  	int upperAdj = lowerAdj + (upperValue - lowerValue);  	if (drawBoxes) {  		for (int x = 0; x < this.Width - rectSize.Width; x += rectSize.Width + 2) {  			if (range > 0) {  				int lowerX = (int)((float)lowerAdj / (float)range * (float)this.Width);  				int upperX = (int)((float)upperAdj / (float)range * (float)this.Width);  				// Only draw the fill if it's within our range  				if (upperAdj > 0 && x >= lowerX && x <= upperX - rectSize.Width)  					e.Graphics.FillRectangle (gradientBrush' x' 0' rectSize.Width' rectSize.Height);  			}  			e.Graphics.DrawRectangle (borderPen' x' 0' rectSize.Width' rectSize.Height);  		}  	}  	else {  		int lowerX = (int)((float)lowerAdj / (float)range * (float)this.Width);  		int upperX = (int)((float)upperAdj / (float)range * (float)this.Width);  		e.Graphics.FillRectangle (gradientBrush' lowerX' 0' upperX' rectSize.Height);  		e.Graphics.DrawRectangle (borderPen' 0' 0' this.Width - 1' this.Height - 1);  	}  }  
Magic Number,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,OnPaint,The following statement contains a magic number: if (drawBoxes) {  	for (int x = 0; x < this.Width - rectSize.Width; x += rectSize.Width + 2) {  		if (range > 0) {  			int lowerX = (int)((float)lowerAdj / (float)range * (float)this.Width);  			int upperX = (int)((float)upperAdj / (float)range * (float)this.Width);  			// Only draw the fill if it's within our range  			if (upperAdj > 0 && x >= lowerX && x <= upperX - rectSize.Width)  				e.Graphics.FillRectangle (gradientBrush' x' 0' rectSize.Width' rectSize.Height);  		}  		e.Graphics.DrawRectangle (borderPen' x' 0' rectSize.Width' rectSize.Height);  	}  }  else {  	int lowerX = (int)((float)lowerAdj / (float)range * (float)this.Width);  	int upperX = (int)((float)upperAdj / (float)range * (float)this.Width);  	e.Graphics.FillRectangle (gradientBrush' lowerX' 0' upperX' rectSize.Height);  	e.Graphics.DrawRectangle (borderPen' 0' 0' this.Width - 1' this.Height - 1);  }  
Magic Number,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,OnPaint,The following statement contains a magic number: for (int x = 0; x < this.Width - rectSize.Width; x += rectSize.Width + 2) {  	if (range > 0) {  		int lowerX = (int)((float)lowerAdj / (float)range * (float)this.Width);  		int upperX = (int)((float)upperAdj / (float)range * (float)this.Width);  		// Only draw the fill if it's within our range  		if (upperAdj > 0 && x >= lowerX && x <= upperX - rectSize.Width)  			e.Graphics.FillRectangle (gradientBrush' x' 0' rectSize.Width' rectSize.Height);  	}  	e.Graphics.DrawRectangle (borderPen' x' 0' rectSize.Width' rectSize.Height);  }  
Magic Number,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,OnPaint,The following statement contains a magic number: x += rectSize.Width + 2
Magic Number,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,CalculateRectSize,The following statement contains a magic number: rectSize.Width = rectSize.Height * 2;  
Magic Number,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (200' 8);  
Magic Number,Controls,ProgressBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ProgressBarEx.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (200' 8);  
Magic Number,Controls,RawBitmap,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RawBitmap.cs,GetOffset,The following statement contains a magic number: return _bitmapData.Stride - _bitmapData.Width * 4;  
Magic Number,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,GetPreferredSize,The following statement contains a magic number: if (image != null)  	return new Size (image.Width' image.Height + Math.Min (reflectionHeight' image.Height) + offset);  else  	return new Size (50' 50);  
Magic Number,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,GetPreferredSize,The following statement contains a magic number: if (image != null)  	return new Size (image.Width' image.Height + Math.Min (reflectionHeight' image.Height) + offset);  else  	return new Size (50' 50);  
Magic Number,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,GetPreferredSize,The following statement contains a magic number: return new Size (50' 50);  
Magic Number,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,GetPreferredSize,The following statement contains a magic number: return new Size (50' 50);  
Magic Number,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,OnPaint,The following statement contains a magic number: if (image != null) {  	int mainImageY = (this.Height - (image.Height + reflectionImage.Height + offset)) / 2;  	// Draw the reflection image  	e.Graphics.DrawImage (reflectionImage' (this.Width - image.Width) / 2' mainImageY + image.Height + offset' reflectionImage.Width' reflectionImage.Height);  	// Draw the main image  	e.Graphics.DrawImage (image' (this.Width - image.Width) / 2' mainImageY' image.Width' image.Height);  }  
Magic Number,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,OnPaint,The following statement contains a magic number: if (image != null) {  	int mainImageY = (this.Height - (image.Height + reflectionImage.Height + offset)) / 2;  	// Draw the reflection image  	e.Graphics.DrawImage (reflectionImage' (this.Width - image.Width) / 2' mainImageY + image.Height + offset' reflectionImage.Width' reflectionImage.Height);  	// Draw the main image  	e.Graphics.DrawImage (image' (this.Width - image.Width) / 2' mainImageY' image.Width' image.Height);  }  
Magic Number,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,OnPaint,The following statement contains a magic number: if (image != null) {  	int mainImageY = (this.Height - (image.Height + reflectionImage.Height + offset)) / 2;  	// Draw the reflection image  	e.Graphics.DrawImage (reflectionImage' (this.Width - image.Width) / 2' mainImageY + image.Height + offset' reflectionImage.Width' reflectionImage.Height);  	// Draw the main image  	e.Graphics.DrawImage (image' (this.Width - image.Width) / 2' mainImageY' image.Width' image.Height);  }  
Magic Number,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (reflectionImage' (this.Width - image.Width) / 2' mainImageY + image.Height + offset' reflectionImage.Width' reflectionImage.Height);  
Magic Number,Controls,ReflectionPicture,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ReflectionPicture.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (image' (this.Width - image.Width) / 2' mainImageY' image.Width' image.Height);  
Magic Number,Controls,RichTextBoxEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RichTextBoxEx.cs,GetSelectionStyle,The following statement contains a magic number: cf.szFaceName = new char[32];  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  	path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (this.Width - cornerDiameter - halfBorderWidth - shadowOffset - 1' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 0' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' halfBorderWidth' cornerDiameter' cornerDiameter' 270' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (this.Width - cornerDiameter - halfBorderWidth - 1' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 0' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (144' 88);  
Magic Number,Controls,RoundedCornerPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\RoundedCornerPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (144' 88);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - shadowOffset - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - shadowOffset - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - shadowOffset - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - shadowOffset - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - shadowOffset - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - shadowOffset - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - shadowOffset - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - shadowOffset - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - shadowOffset - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - shadowOffset - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - shadowOffset - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - shadowOffset - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - shadowOffset - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - shadowOffset - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: if (displayShadow) {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - shadowOffset - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - shadowOffset - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  }  else {  	path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  	if (!selected) {  		path.AddLine (this.Width - 1' 0' this.Width - 1' this.Height - 1);  	}  	else {  		path.AddLine (this.Width + 1' 0' this.Width + 1' this.Height - 1);  	}  	path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - shadowOffset - 1' cornerDiameter' cornerDiameter' 90' 90);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' halfBorderWidth' cornerDiameter' cornerDiameter' 180' 90);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,CreateGraphicsPath,The following statement contains a magic number: path.AddArc (halfBorderWidth' this.Height - cornerDiameter - halfBorderWidth - 1' cornerDiameter' cornerDiameter' 90' 90);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The following statement contains a magic number: if (!selected) {  	using (LinearGradientBrush gradBrush = new LinearGradientBrush (new Point (this.Width - 6' 0)' new Point (this.Width' 0)' Color.FromArgb (0' 0' 0' 0)' Color.FromArgb (100' 0' 0' 0))) {  		e.Graphics.FillRectangle (gradBrush' this.Width - 5' 0' 5' this.Height);  	}  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The following statement contains a magic number: if (!selected) {  	using (LinearGradientBrush gradBrush = new LinearGradientBrush (new Point (this.Width - 6' 0)' new Point (this.Width' 0)' Color.FromArgb (0' 0' 0' 0)' Color.FromArgb (100' 0' 0' 0))) {  		e.Graphics.FillRectangle (gradBrush' this.Width - 5' 0' 5' this.Height);  	}  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The following statement contains a magic number: if (!selected) {  	using (LinearGradientBrush gradBrush = new LinearGradientBrush (new Point (this.Width - 6' 0)' new Point (this.Width' 0)' Color.FromArgb (0' 0' 0' 0)' Color.FromArgb (100' 0' 0' 0))) {  		e.Graphics.FillRectangle (gradBrush' this.Width - 5' 0' 5' this.Height);  	}  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The following statement contains a magic number: if (!selected) {  	using (LinearGradientBrush gradBrush = new LinearGradientBrush (new Point (this.Width - 6' 0)' new Point (this.Width' 0)' Color.FromArgb (0' 0' 0' 0)' Color.FromArgb (100' 0' 0' 0))) {  		e.Graphics.FillRectangle (gradBrush' this.Width - 5' 0' 5' this.Height);  	}  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The following statement contains a magic number: using (LinearGradientBrush gradBrush = new LinearGradientBrush (new Point (this.Width - 6' 0)' new Point (this.Width' 0)' Color.FromArgb (0' 0' 0' 0)' Color.FromArgb (100' 0' 0' 0))) {  	e.Graphics.FillRectangle (gradBrush' this.Width - 5' 0' 5' this.Height);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The following statement contains a magic number: using (LinearGradientBrush gradBrush = new LinearGradientBrush (new Point (this.Width - 6' 0)' new Point (this.Width' 0)' Color.FromArgb (0' 0' 0' 0)' Color.FromArgb (100' 0' 0' 0))) {  	e.Graphics.FillRectangle (gradBrush' this.Width - 5' 0' 5' this.Height);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The following statement contains a magic number: using (LinearGradientBrush gradBrush = new LinearGradientBrush (new Point (this.Width - 6' 0)' new Point (this.Width' 0)' Color.FromArgb (0' 0' 0' 0)' Color.FromArgb (100' 0' 0' 0))) {  	e.Graphics.FillRectangle (gradBrush' this.Width - 5' 0' 5' this.Height);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The following statement contains a magic number: using (LinearGradientBrush gradBrush = new LinearGradientBrush (new Point (this.Width - 6' 0)' new Point (this.Width' 0)' Color.FromArgb (0' 0' 0' 0)' Color.FromArgb (100' 0' 0' 0))) {  	e.Graphics.FillRectangle (gradBrush' this.Width - 5' 0' 5' this.Height);  }  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (gradBrush' this.Width - 5' 0' 5' this.Height);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (gradBrush' this.Width - 5' 0' 5' this.Height);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (144' 88);  
Magic Number,Controls,TabPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TabPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (144' 88);  
Magic Number,Controls,ToasterForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToasterForm.cs,ToasterForm,The following statement contains a magic number: fadeInTimer = new System.Timers.Timer (20);  
Magic Number,Controls,ToasterForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToasterForm.cs,ToasterForm,The following statement contains a magic number: fadeOutTimer = new System.Timers.Timer (20);  
Magic Number,Controls,ToasterForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToasterForm.cs,fadeOutTimer_Elapsed,The following statement contains a magic number: this.Opacity -= 0.05;  
Magic Number,Controls,ToasterForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToasterForm.cs,fadeOutTimer_Elapsed,The following statement contains a magic number: if (this.Opacity <= .05) {  	this.Opacity = 0;  	Thread.Sleep (10);  	fadeOutTimer.Enabled = false;  	this.Hide ();  }  
Magic Number,Controls,ToasterForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToasterForm.cs,fadeOutTimer_Elapsed,The following statement contains a magic number: if (this.Opacity <= .05) {  	this.Opacity = 0;  	Thread.Sleep (10);  	fadeOutTimer.Enabled = false;  	this.Hide ();  }  
Magic Number,Controls,ToasterForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToasterForm.cs,fadeOutTimer_Elapsed,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,Controls,ToasterForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToasterForm.cs,fadeTimer_Elapsed,The following statement contains a magic number: this.Opacity += 0.05;  
Magic Number,Controls,ToasterForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToasterForm.cs,fadeTimer_Elapsed,The following statement contains a magic number: if (this.Opacity >= .95) {  	this.Opacity = 1;  	Thread.Sleep (10);  	fadeInTimer.Enabled = false;  }  
Magic Number,Controls,ToasterForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToasterForm.cs,fadeTimer_Elapsed,The following statement contains a magic number: if (this.Opacity >= .95) {  	this.Opacity = 1;  	Thread.Sleep (10);  	fadeInTimer.Enabled = false;  }  
Magic Number,Controls,ToasterForm,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToasterForm.cs,fadeTimer_Elapsed,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,Controls,ToolStripEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripEx.cs,OnPaintBackground,The following statement contains a magic number: if (shadowHeight > 0) {  	Rectangle gradRect = Rectangle.FromLTRB (0' this.Height - shadowHeight - 1' this.Width' this.Height);  	using (LinearGradientBrush gradientBrush = new LinearGradientBrush (gradRect' shadowColor' this.BackColor' 90)) {  		e.Graphics.FillRectangle (gradientBrush' gradRect);  	}  }  
Magic Number,Controls,ToolStripEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripEx.cs,OnPaintBackground,The following statement contains a magic number: using (LinearGradientBrush gradientBrush = new LinearGradientBrush (gradRect' shadowColor' this.BackColor' 90)) {  	e.Graphics.FillRectangle (gradientBrush' gradRect);  }  
Magic Number,Controls,ToolStripLabelEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripLabelEx.cs,OnPaint,The following statement contains a magic number: using (SolidBrush textBrush = new SolidBrush (this.ForeColor)) {  	e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  	if (antiAlias)  		e.Graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  	else  		e.Graphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	if (this.Image != null && (DisplayStyle == ToolStripItemDisplayStyle.ImageAndText || DisplayStyle == ToolStripItemDisplayStyle.Image)) {  		e.Graphics.DrawImage (this.Image' 0' (this.Height - this.Image.Height) / 2' this.Image.Width' this.Image.Height);  	}  	if (this.Image != null && DisplayStyle == ToolStripItemDisplayStyle.ImageAndText)  		e.Graphics.DrawString (this.Text' this.Font' textBrush' new RectangleF (this.Image.Width' 0' this.Width - this.Image.Width' this.Height)' stringFormat);  	else  		e.Graphics.DrawString (this.Text' this.Font' textBrush' new RectangleF (0' 0' this.Width' this.Height)' stringFormat);  }  
Magic Number,Controls,ToolStripLabelEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripLabelEx.cs,OnPaint,The following statement contains a magic number: if (this.Image != null && (DisplayStyle == ToolStripItemDisplayStyle.ImageAndText || DisplayStyle == ToolStripItemDisplayStyle.Image)) {  	e.Graphics.DrawImage (this.Image' 0' (this.Height - this.Image.Height) / 2' this.Image.Width' this.Image.Height);  }  
Magic Number,Controls,ToolStripLabelEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripLabelEx.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (this.Image' 0' (this.Height - this.Image.Height) / 2' this.Image.Width' this.Image.Height);  
Magic Number,Controls,ToolStripTrackBar,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripTrackBar.cs,CreateControlInstance,The following statement contains a magic number: t.Height = 16;  
Magic Number,Controls,TrackBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TrackBarEx.cs,UpdateTracker,The following statement contains a magic number: if (orientation == Orientation.Horizontal) {  	pbTracker.Top = (this.Height - pbTracker.Height) / 2;  	pbTracker.Left = (int)((float)(this.Width - pbTracker.Width) * valuePercentage);  }  else {  	pbTracker.Left = (this.Width - pbTracker.Width) / 2;  	pbTracker.Top = this.Height - pbTracker.Height - (int)((float)(this.Height - pbTracker.Height) * valuePercentage);  }  
Magic Number,Controls,TrackBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TrackBarEx.cs,UpdateTracker,The following statement contains a magic number: if (orientation == Orientation.Horizontal) {  	pbTracker.Top = (this.Height - pbTracker.Height) / 2;  	pbTracker.Left = (int)((float)(this.Width - pbTracker.Width) * valuePercentage);  }  else {  	pbTracker.Left = (this.Width - pbTracker.Width) / 2;  	pbTracker.Top = this.Height - pbTracker.Height - (int)((float)(this.Height - pbTracker.Height) * valuePercentage);  }  
Magic Number,Controls,TrackBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TrackBarEx.cs,UpdateTracker,The following statement contains a magic number: pbTracker.Top = (this.Height - pbTracker.Height) / 2;  
Magic Number,Controls,TrackBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TrackBarEx.cs,UpdateTracker,The following statement contains a magic number: pbTracker.Left = (this.Width - pbTracker.Width) / 2;  
Magic Number,Controls,TrackBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TrackBarEx.cs,TrackBarEx_MouseClick,The following statement contains a magic number: if (orientation == Orientation.Horizontal) {  	int trackerPos = e.X - pbTracker.Width / 2;  	if (trackerPos >= 0 && trackerPos <= this.Width - pbTracker.Width)  		pbTracker.Left = trackerPos;  	else if (trackerPos < 0)  		pbTracker.Left = 0;  	else  		pbTracker.Left = this.Width - pbTracker.Width;  }  else {  	int trackerPos = e.Y - pbTracker.Height / 2;  	if (trackerPos >= 0 && trackerPos <= this.Height - pbTracker.Height)  		pbTracker.Top = trackerPos;  	else if (trackerPos < 0)  		pbTracker.Top = 0;  	else  		pbTracker.Top = this.Height - pbTracker.Height;  }  
Magic Number,Controls,TrackBarEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\TrackBarEx.cs,TrackBarEx_MouseClick,The following statement contains a magic number: if (orientation == Orientation.Horizontal) {  	int trackerPos = e.X - pbTracker.Width / 2;  	if (trackerPos >= 0 && trackerPos <= this.Width - pbTracker.Width)  		pbTracker.Left = trackerPos;  	else if (trackerPos < 0)  		pbTracker.Left = 0;  	else  		pbTracker.Left = this.Width - pbTracker.Width;  }  else {  	int trackerPos = e.Y - pbTracker.Height / 2;  	if (trackerPos >= 0 && trackerPos <= this.Height - pbTracker.Height)  		pbTracker.Top = trackerPos;  	else if (trackerPos < 0)  		pbTracker.Top = 0;  	else  		pbTracker.Top = this.Height - pbTracker.Height;  }  
Magic Number,Controls.AppBar,AppBar,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AppBar\AppBar.cs,UpdateDockedAppBarPosition,The following statement contains a magic number: switch (dockStyle) {  case AppBarDockStyle.None:  	return;  case AppBarDockStyle.ScreenLeft:  	edge = 0;  	break;  case AppBarDockStyle.ScreenTop:  	edge = 1;  	break;  case AppBarDockStyle.ScreenRight:  	edge = 2;  	break;  default:  	edge = 3;  	break;  }  
Magic Number,Controls.AppBar,AppBar,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AppBar\AppBar.cs,UpdateDockedAppBarPosition,The following statement contains a magic number: switch (dockStyle) {  case AppBarDockStyle.None:  	return;  case AppBarDockStyle.ScreenLeft:  	edge = 0;  	break;  case AppBarDockStyle.ScreenTop:  	edge = 1;  	break;  case AppBarDockStyle.ScreenRight:  	edge = 2;  	break;  default:  	edge = 3;  	break;  }  
Magic Number,Controls.AppBar,AppBar,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AppBar\AppBar.cs,UpdateDockedAppBarPosition,The following statement contains a magic number: edge = 2;  
Magic Number,Controls.AppBar,AppBar,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AppBar\AppBar.cs,UpdateDockedAppBarPosition,The following statement contains a magic number: edge = 3;  
Magic Number,Controls.MultiPanel,MultiPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MultiPanel\MultiPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (444' 272);  
Magic Number,Controls.MultiPanel,MultiPanel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\MultiPanel\MultiPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (444' 272);  
Magic Number,Controls.Popup,NativeMethods,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Popup\NativeMethods.cs,HIWORD,The following statement contains a magic number: return (n >> 16) & 0xffff;  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnlDockPadding.Margin = new System.Windows.Forms.Padding (0' 3' 3' 3);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnlDockPadding.Margin = new System.Windows.Forms.Padding (0' 3' 3' 3);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnlDockPadding.Margin = new System.Windows.Forms.Padding (0' 3' 3' 3);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnlDockPadding.Padding = new System.Windows.Forms.Padding (8' 6' 4' 4);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnlDockPadding.Padding = new System.Windows.Forms.Padding (8' 6' 4' 4);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnlDockPadding.Padding = new System.Windows.Forms.Padding (8' 6' 4' 4);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnlDockPadding.Padding = new System.Windows.Forms.Padding (8' 6' 4' 4);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnlDockPadding.Size = new System.Drawing.Size (324' 64);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnlDockPadding.Size = new System.Drawing.Size (324' 64);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnlDockPadding.TabIndex = 6;  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.picIcon.Location = new System.Drawing.Point (268' 6);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.picIcon.Location = new System.Drawing.Point (268' 6);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.picIcon.Size = new System.Drawing.Size (52' 54);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.picIcon.Size = new System.Drawing.Size (52' 54);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.picIcon.TabIndex = 3;  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnl3dDark.Location = new System.Drawing.Point (0' 62);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnl3dDark.Size = new System.Drawing.Size (324' 1);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnl3dDark.TabIndex = 7;  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnl3dBright.Location = new System.Drawing.Point (0' 63);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnl3dBright.Size = new System.Drawing.Size (324' 1);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.pnl3dBright.TabIndex = 8;  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Location = new System.Drawing.Point (8' 6);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Location = new System.Drawing.Point (8' 6);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Size = new System.Drawing.Size (260' 15);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Size = new System.Drawing.Size (260' 15);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.TabIndex = 6;  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Location = new System.Drawing.Point (8' 21);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Location = new System.Drawing.Point (8' 21);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Size = new System.Drawing.Size (260' 39);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Size = new System.Drawing.Size (260' 39);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.TabIndex = 7;  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (324' 64);  
Magic Number,Controls.Wizard,Header,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Header.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (324' 64);  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: this.picImage.Size = new System.Drawing.Size (164' 388);  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: this.picImage.Size = new System.Drawing.Size (164' 388);  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Location = new System.Drawing.Point (172' 4);  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Location = new System.Drawing.Point (172' 4);  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Size = new System.Drawing.Size (304' 48);  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Size = new System.Drawing.Size (304' 48);  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.TabIndex = 7;  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (480' 388);  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (480' 388);  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InfoContainer_Load,The following statement contains a magic number: lblTitle.Left = picImage.Width + 8;  
Magic Number,Controls.Wizard,InfoContainer,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoContainer.cs,InfoContainer_Load,The following statement contains a magic number: lblTitle.Width = (this.Width - 4) - lblTitle.Left;  
Magic Number,Controls.Wizard,InfoPage,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoPage.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Location = new System.Drawing.Point (172' 56);  
Magic Number,Controls.Wizard,InfoPage,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoPage.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Location = new System.Drawing.Point (172' 56);  
Magic Number,Controls.Wizard,InfoPage,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoPage.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Size = new System.Drawing.Size (304' 328);  
Magic Number,Controls.Wizard,InfoPage,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoPage.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Size = new System.Drawing.Size (304' 328);  
Magic Number,Controls.Wizard,InfoPage,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\InfoPage.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.TabIndex = 8;  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Location = new System.Drawing.Point (100' 224);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Location = new System.Drawing.Point (100' 224);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Size = new System.Drawing.Size (344' 48);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Size = new System.Drawing.Size (344' 48);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlBack.Location = new System.Drawing.Point (6' 2);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlBack.Location = new System.Drawing.Point (6' 2);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlBack.Size = new System.Drawing.Size (79' 46);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlBack.Size = new System.Drawing.Size (79' 46);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlBack.TabIndex = 9;  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Location = new System.Drawing.Point (1' 10);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnBack.TabIndex = 3;  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlNext.Location = new System.Drawing.Point (85' 2);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlNext.Location = new System.Drawing.Point (85' 2);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlNext.Size = new System.Drawing.Size (87' 46);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlNext.Size = new System.Drawing.Size (87' 46);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlNext.TabIndex = 7;  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Location = new System.Drawing.Point (3' 10);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Location = new System.Drawing.Point (3' 10);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.TabIndex = 4;  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlFinish.Location = new System.Drawing.Point (172' 2);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlFinish.Location = new System.Drawing.Point (172' 2);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlFinish.Size = new System.Drawing.Size (81' 46);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlFinish.Size = new System.Drawing.Size (81' 46);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlFinish.TabIndex = 8;  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnFinish.Location = new System.Drawing.Point (3' 10);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnFinish.Location = new System.Drawing.Point (3' 10);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnFinish.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnFinish.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnFinish.TabIndex = 4;  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlCancel.Location = new System.Drawing.Point (253' 2);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlCancel.Location = new System.Drawing.Point (253' 2);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlCancel.Size = new System.Drawing.Size (91' 46);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlCancel.Size = new System.Drawing.Size (91' 46);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlCancel.TabIndex = 6;  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (3' 10);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (3' 10);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 5;  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtonBright3d.Size = new System.Drawing.Size (344' 1);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtonDark3d.Size = new System.Drawing.Size (344' 1);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtonDark3d.TabIndex = 2;  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlTabs.Padding = new System.Windows.Forms.Padding (5' 5' 0' 0);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlTabs.Padding = new System.Windows.Forms.Padding (5' 5' 0' 0);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlTabs.Size = new System.Drawing.Size (100' 272);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.pnlTabs.Size = new System.Drawing.Size (100' 272);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (444' 272);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (444' 272);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,The following statement contains a magic number: foreach (WizardPage wizPage in vPages) {  	if (wizPage == page) {  		wizPage.PageTabControl.TabPanel.PanelColor = page.BackColor;  		wizPage.PageTabControl.Padding = new Padding (0' 0' 0' 3);  		wizPage.PageTabControl.TabPanel.Selected = true;  	}  	else {  		wizPage.PageTabControl.TabPanel.PanelColor = nonSelectedColor;  		wizPage.PageTabControl.Padding = new Padding (5' 0' 0' 3);  		wizPage.PageTabControl.TabPanel.Selected = false;  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,The following statement contains a magic number: foreach (WizardPage wizPage in vPages) {  	if (wizPage == page) {  		wizPage.PageTabControl.TabPanel.PanelColor = page.BackColor;  		wizPage.PageTabControl.Padding = new Padding (0' 0' 0' 3);  		wizPage.PageTabControl.TabPanel.Selected = true;  	}  	else {  		wizPage.PageTabControl.TabPanel.PanelColor = nonSelectedColor;  		wizPage.PageTabControl.Padding = new Padding (5' 0' 0' 3);  		wizPage.PageTabControl.TabPanel.Selected = false;  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,The following statement contains a magic number: foreach (WizardPage wizPage in vPages) {  	if (wizPage == page) {  		wizPage.PageTabControl.TabPanel.PanelColor = page.BackColor;  		wizPage.PageTabControl.Padding = new Padding (0' 0' 0' 3);  		wizPage.PageTabControl.TabPanel.Selected = true;  	}  	else {  		wizPage.PageTabControl.TabPanel.PanelColor = nonSelectedColor;  		wizPage.PageTabControl.Padding = new Padding (5' 0' 0' 3);  		wizPage.PageTabControl.TabPanel.Selected = false;  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,The following statement contains a magic number: if (wizPage == page) {  	wizPage.PageTabControl.TabPanel.PanelColor = page.BackColor;  	wizPage.PageTabControl.Padding = new Padding (0' 0' 0' 3);  	wizPage.PageTabControl.TabPanel.Selected = true;  }  else {  	wizPage.PageTabControl.TabPanel.PanelColor = nonSelectedColor;  	wizPage.PageTabControl.Padding = new Padding (5' 0' 0' 3);  	wizPage.PageTabControl.TabPanel.Selected = false;  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,The following statement contains a magic number: if (wizPage == page) {  	wizPage.PageTabControl.TabPanel.PanelColor = page.BackColor;  	wizPage.PageTabControl.Padding = new Padding (0' 0' 0' 3);  	wizPage.PageTabControl.TabPanel.Selected = true;  }  else {  	wizPage.PageTabControl.TabPanel.PanelColor = nonSelectedColor;  	wizPage.PageTabControl.Padding = new Padding (5' 0' 0' 3);  	wizPage.PageTabControl.TabPanel.Selected = false;  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,The following statement contains a magic number: if (wizPage == page) {  	wizPage.PageTabControl.TabPanel.PanelColor = page.BackColor;  	wizPage.PageTabControl.Padding = new Padding (0' 0' 0' 3);  	wizPage.PageTabControl.TabPanel.Selected = true;  }  else {  	wizPage.PageTabControl.TabPanel.PanelColor = nonSelectedColor;  	wizPage.PageTabControl.Padding = new Padding (5' 0' 0' 3);  	wizPage.PageTabControl.TabPanel.Selected = false;  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,The following statement contains a magic number: wizPage.PageTabControl.Padding = new Padding (0' 0' 0' 3);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,The following statement contains a magic number: wizPage.PageTabControl.Padding = new Padding (5' 0' 0' 3);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,ActivatePage,The following statement contains a magic number: wizPage.PageTabControl.Padding = new Padding (5' 0' 0' 3);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: if (ShowTabs) {  	e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	switch (dividerLineType) {  	case WizardTabDividerLineType.Cutout: {  		if (pnlTabs.Controls.Count > 0) {  			using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  				e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  			}  		}  		break;  	}  	case WizardTabDividerLineType.SingleLine:  		using (Pen linePen = new Pen (pnlButtonDark3d.BackColor)) {  			e.Graphics.DrawLine (linePen' pnlTabs.Width - 1' 0' pnlTabs.Width - 1' this.Height);  		}  		break;  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: if (ShowTabs) {  	e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	switch (dividerLineType) {  	case WizardTabDividerLineType.Cutout: {  		if (pnlTabs.Controls.Count > 0) {  			using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  				e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  			}  		}  		break;  	}  	case WizardTabDividerLineType.SingleLine:  		using (Pen linePen = new Pen (pnlButtonDark3d.BackColor)) {  			e.Graphics.DrawLine (linePen' pnlTabs.Width - 1' 0' pnlTabs.Width - 1' this.Height);  		}  		break;  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: if (ShowTabs) {  	e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	switch (dividerLineType) {  	case WizardTabDividerLineType.Cutout: {  		if (pnlTabs.Controls.Count > 0) {  			using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  				e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  			}  		}  		break;  	}  	case WizardTabDividerLineType.SingleLine:  		using (Pen linePen = new Pen (pnlButtonDark3d.BackColor)) {  			e.Graphics.DrawLine (linePen' pnlTabs.Width - 1' 0' pnlTabs.Width - 1' this.Height);  		}  		break;  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: if (ShowTabs) {  	e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;  	switch (dividerLineType) {  	case WizardTabDividerLineType.Cutout: {  		if (pnlTabs.Controls.Count > 0) {  			using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  				e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  			}  		}  		break;  	}  	case WizardTabDividerLineType.SingleLine:  		using (Pen linePen = new Pen (pnlButtonDark3d.BackColor)) {  			e.Graphics.DrawLine (linePen' pnlTabs.Width - 1' 0' pnlTabs.Width - 1' this.Height);  		}  		break;  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: switch (dividerLineType) {  case WizardTabDividerLineType.Cutout: {  	if (pnlTabs.Controls.Count > 0) {  		using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  			e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  		}  	}  	break;  }  case WizardTabDividerLineType.SingleLine:  	using (Pen linePen = new Pen (pnlButtonDark3d.BackColor)) {  		e.Graphics.DrawLine (linePen' pnlTabs.Width - 1' 0' pnlTabs.Width - 1' this.Height);  	}  	break;  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: switch (dividerLineType) {  case WizardTabDividerLineType.Cutout: {  	if (pnlTabs.Controls.Count > 0) {  		using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  			e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  		}  	}  	break;  }  case WizardTabDividerLineType.SingleLine:  	using (Pen linePen = new Pen (pnlButtonDark3d.BackColor)) {  		e.Graphics.DrawLine (linePen' pnlTabs.Width - 1' 0' pnlTabs.Width - 1' this.Height);  	}  	break;  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: switch (dividerLineType) {  case WizardTabDividerLineType.Cutout: {  	if (pnlTabs.Controls.Count > 0) {  		using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  			e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  		}  	}  	break;  }  case WizardTabDividerLineType.SingleLine:  	using (Pen linePen = new Pen (pnlButtonDark3d.BackColor)) {  		e.Graphics.DrawLine (linePen' pnlTabs.Width - 1' 0' pnlTabs.Width - 1' this.Height);  	}  	break;  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: switch (dividerLineType) {  case WizardTabDividerLineType.Cutout: {  	if (pnlTabs.Controls.Count > 0) {  		using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  			e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  		}  	}  	break;  }  case WizardTabDividerLineType.SingleLine:  	using (Pen linePen = new Pen (pnlButtonDark3d.BackColor)) {  		e.Graphics.DrawLine (linePen' pnlTabs.Width - 1' 0' pnlTabs.Width - 1' this.Height);  	}  	break;  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: if (pnlTabs.Controls.Count > 0) {  	using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  		e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: if (pnlTabs.Controls.Count > 0) {  	using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  		e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: if (pnlTabs.Controls.Count > 0) {  	using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  		e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: if (pnlTabs.Controls.Count > 0) {  	using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  		e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  	}  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  	e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  	e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  	e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  	e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode && Pages.Count == 0) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' this.Font);  	RectangleF layout = new RectangleF ((this.Width - textSize.Width) / 2' (this.pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' this.Left + 8' this.Top + 8' this.Width - 17' this.pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' this.Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode && Pages.Count == 0) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' this.Font);  	RectangleF layout = new RectangleF ((this.Width - textSize.Width) / 2' (this.pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' this.Left + 8' this.Top + 8' this.Width - 17' this.pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' this.Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode && Pages.Count == 0) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' this.Font);  	RectangleF layout = new RectangleF ((this.Width - textSize.Width) / 2' (this.pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' this.Left + 8' this.Top + 8' this.Width - 17' this.pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' this.Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode && Pages.Count == 0) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' this.Font);  	RectangleF layout = new RectangleF ((this.Width - textSize.Width) / 2' (this.pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' this.Left + 8' this.Top + 8' this.Width - 17' this.pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' this.Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode && Pages.Count == 0) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' this.Font);  	RectangleF layout = new RectangleF ((this.Width - textSize.Width) / 2' (this.pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' this.Left + 8' this.Top + 8' this.Width - 17' this.pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' this.Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: if (DesignMode && Pages.Count == 0) {  	const string noPagesText = "No wizard pages inside the wizard.";  	SizeF textSize = e.Graphics.MeasureString (noPagesText' this.Font);  	RectangleF layout = new RectangleF ((this.Width - textSize.Width) / 2' (this.pnlButtons.Top - textSize.Height) / 2' textSize.Width' textSize.Height);  	Pen dashPen = (Pen)SystemPens.GrayText.Clone ();  	dashPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;  	e.Graphics.DrawRectangle (dashPen' this.Left + 8' this.Top + 8' this.Width - 17' this.pnlButtons.Top - 17);  	e.Graphics.DrawString (noPagesText' this.Font' new SolidBrush (SystemColors.GrayText)' layout);  }  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (dashPen' this.Left + 8' this.Top + 8' this.Width - 17' this.pnlButtons.Top - 17);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (dashPen' this.Left + 8' this.Top + 8' this.Width - 17' this.pnlButtons.Top - 17);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (dashPen' this.Left + 8' this.Top + 8' this.Width - 17' this.pnlButtons.Top - 17);  
Magic Number,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (dashPen' this.Left + 8' this.Top + 8' this.Width - 17' this.pnlButtons.Top - 17);  
Missing Default,Controls,SmoothLabel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\SmoothLabel.cs,OnTextAlignChanged,The following switch statement is missing a default case: switch (this.TextAlign) {  case ContentAlignment.BottomCenter:  case ContentAlignment.BottomLeft:  case ContentAlignment.BottomRight: {  	stringFormat.LineAlignment = StringAlignment.Far;  	break;  }  case ContentAlignment.TopCenter:  case ContentAlignment.TopLeft:  case ContentAlignment.TopRight: {  	stringFormat.LineAlignment = StringAlignment.Near;  	break;  }  case ContentAlignment.MiddleCenter:  case ContentAlignment.MiddleLeft:  case ContentAlignment.MiddleRight: {  	stringFormat.LineAlignment = StringAlignment.Center;  	break;  }  }  
Missing Default,Controls,SmoothLabel,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\SmoothLabel.cs,OnTextAlignChanged,The following switch statement is missing a default case: switch (this.TextAlign) {  case ContentAlignment.BottomLeft:  case ContentAlignment.MiddleLeft:  case ContentAlignment.TopLeft: {  	stringFormat.Alignment = StringAlignment.Near;  	break;  }  case ContentAlignment.BottomRight:  case ContentAlignment.MiddleRight:  case ContentAlignment.TopRight: {  	stringFormat.Alignment = StringAlignment.Far;  	break;  }  case ContentAlignment.BottomCenter:  case ContentAlignment.MiddleCenter:  case ContentAlignment.TopCenter: {  	stringFormat.Alignment = StringAlignment.Center;  	break;  }  }  
Missing Default,Controls,ToolStripLabelEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripLabelEx.cs,ProcessTextAlignment,The following switch statement is missing a default case: switch (this.TextAlign) {  case ContentAlignment.BottomCenter:  case ContentAlignment.BottomLeft:  case ContentAlignment.BottomRight: {  	stringFormat.LineAlignment = StringAlignment.Far;  	break;  }  case ContentAlignment.TopCenter:  case ContentAlignment.TopLeft:  case ContentAlignment.TopRight: {  	stringFormat.LineAlignment = StringAlignment.Near;  	break;  }  case ContentAlignment.MiddleCenter:  case ContentAlignment.MiddleLeft:  case ContentAlignment.MiddleRight: {  	stringFormat.LineAlignment = StringAlignment.Center;  	break;  }  }  
Missing Default,Controls,ToolStripLabelEx,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\ToolStripLabelEx.cs,ProcessTextAlignment,The following switch statement is missing a default case: switch (this.TextAlign) {  case ContentAlignment.BottomLeft:  case ContentAlignment.MiddleLeft:  case ContentAlignment.TopLeft: {  	stringFormat.Alignment = StringAlignment.Near;  	break;  }  case ContentAlignment.BottomRight:  case ContentAlignment.MiddleRight:  case ContentAlignment.TopRight: {  	stringFormat.Alignment = StringAlignment.Far;  	break;  }  case ContentAlignment.BottomCenter:  case ContentAlignment.MiddleCenter:  case ContentAlignment.TopCenter: {  	stringFormat.Alignment = StringAlignment.Center;  	break;  }  }  
Missing Default,Controls.AppBar,NativeMethods,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\AppBar\NativeMethods.cs,DockAppBar,The following switch statement is missing a default case: switch (edge) {  case ABE_LEFT:  	abd.rc.right = abd.rc.left + idealSize.Width;  	break;  case ABE_RIGHT:  	abd.rc.left = abd.rc.right - idealSize.Width;  	break;  case ABE_TOP:  	abd.rc.bottom = abd.rc.top + idealSize.Height;  	break;  case ABE_BOTTOM:  	abd.rc.top = abd.rc.bottom - idealSize.Height;  	break;  }  
Missing Default,Controls.Wizard,Wizard,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\Common\Controls\Wizard\Wizard.cs,pnlTabs_Paint,The following switch statement is missing a default case: switch (dividerLineType) {  case WizardTabDividerLineType.Cutout: {  	if (pnlTabs.Controls.Count > 0) {  		using (SolidBrush brush = new SolidBrush (pnlButtonDark3d.BackColor)) {  			e.Graphics.FillEllipse (brush' Rectangle.FromLTRB (pnlTabs.Width - 7' pnlTabs.Controls [pnlTabs.Controls.Count - 1].Top - 10' pnlTabs.Width + 7' pnlTabs.Controls [0].Bottom + 10));  		}  	}  	break;  }  case WizardTabDividerLineType.SingleLine:  	using (Pen linePen = new Pen (pnlButtonDark3d.BackColor)) {  		e.Graphics.DrawLine (linePen' pnlTabs.Width - 1' 0' pnlTabs.Width - 1' this.Height);  	}  	break;  }  
