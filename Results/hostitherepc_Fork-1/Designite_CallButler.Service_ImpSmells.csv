Implementation smell,Namespace,Class,File,Method,Description
Long Method,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The method has 119 lines of code.
Long Method,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The method has 182 lines of code.
Long Method,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The method has 159 lines of code.
Long Method,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The method has 135 lines of code.
Long Method,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The method has 102 lines of code.
Complex Method,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,Cyclomatic complexity of the method is 20
Complex Method,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,DeInitialize,Cyclomatic complexity of the method is 11
Complex Method,CallButler.Service,Program,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Program.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,CallButler.Service.ScriptProcessing,Click2CallScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\Click2CallScriptProcessor.cs,OnExternalCommand,Cyclomatic complexity of the method is 17
Complex Method,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnExternalCommand,Cyclomatic complexity of the method is 15
Complex Method,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnExternalCommand,Cyclomatic complexity of the method is 22
Complex Method,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,Cyclomatic complexity of the method is 19
Complex Method,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,Cyclomatic complexity of the method is 43
Complex Method,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnExternalCommand,Cyclomatic complexity of the method is 13
Complex Method,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,Cyclomatic complexity of the method is 64
Complex Method,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,Cyclomatic complexity of the method is 44
Complex Method,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,telecomProvider_CallConnected,Cyclomatic complexity of the method is 9
Complex Method,CallButler.Service.ScriptProcessing.ScriptCompilers,ScriptUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptCompilers\ScriptUtils.cs,ProcessPersonalizedGreeting,Cyclomatic complexity of the method is 34
Complex Method,CallButler.Service.Services,LoggingService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\LoggingService.cs,AddLogEntry,Cyclomatic complexity of the method is 8
Complex Method,CallButler.Service.Services,LoggingService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\LoggingService.cs,CreateLogStorage,Cyclomatic complexity of the method is 11
Complex Method,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PersistLocalizedGreeting,Cyclomatic complexity of the method is 9
Complex Method,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,IsDataValid,Cyclomatic complexity of the method is 13
Complex Method,CallButler.Service.Services,PerformanceCounterService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PerformanceCounterService.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_IncomingCall,Cyclomatic complexity of the method is 16
Complex Method,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ipClient_PreprocessSipRequest,Cyclomatic complexity of the method is 8
Complex Method,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,Cyclomatic complexity of the method is 19
Complex Method,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,Cyclomatic complexity of the method is 16
Complex Method,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,IsRequestAuthorized,Cyclomatic complexity of the method is 10
Complex Method,CallButler.Service.Services,VoicemailMailerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailMailerService.cs,VMQueueTimerProc,Cyclomatic complexity of the method is 14
Long Parameter List,CallButler.Service.ScriptProcessing,AddonModuleScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\AddonModuleScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,AutoDialerProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\AutoDialerProcessor.cs,AutoDialerProcessor,The method has 10 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,Click2CallScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\Click2CallScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,OutboundCalleeScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundCalleeScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnLinkedExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,ReceptionistFinderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ReceptionistFinderScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,TransferConferenceParticipantScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceParticipantScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,TransferConferenceScriptProcessor,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,ExtensionScriptProcessor,The method has 8 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,TryContactNumber,The method has 7 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,TryCallBlast,The method has 7 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The method has 8 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,OnLinkedExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,TelecomScriptInterface,The method has 5 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing,VoicemailScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailScriptProcessor.cs,OnExternalCommand,The method has 6 parameters.
Long Parameter List,CallButler.Service.ScriptProcessing.ScriptCompilers,ScriptUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptCompilers\ScriptUtils.cs,ProcessPersonalizedGreeting,The method has 7 parameters.
Long Parameter List,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,Initialize,The method has 7 parameters.
Long Parameter List,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,SendTestEmail,The method has 9 parameters.
Long Parameter List,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,ScriptService,The method has 6 parameters.
Long Parameter List,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The method has 12 parameters.
Long Parameter List,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The method has 12 parameters.
Long Parameter List,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The method has 12 parameters.
Long Parameter List,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,MakeOutboundCall,The method has 8 parameters.
Long Parameter List,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,CreateVoicemail,The method has 5 parameters.
Long Identifier,CallButler.Service.ScriptProcessing,AutoDialerProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\AutoDialerProcessor.cs,AutoDialerProcessor,The length of the parameter answeringMachineDetectionSettings is 33.
Long Identifier,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnStartProcessing,The length of the parameter scheduleReminderScriptLocation is 30.
Long Identifier,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The length of the parameter answeringMachineDetectionSettings is 33.
Long Identifier,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The length of the parameter answeringMachineDetectionSettings is 33.
Long Identifier,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The length of the parameter answeringMachineDetectionSettings is 33.
Long Statement,CallButler.Service,ProjectInstaller,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ProjectInstaller.cs,Install,The length of the statement  "		// (Note: A published technique to do this by setting a bit in the service's Type registry value (0x100) does not turn this on' so do as follows.) " is 146.
Long Statement,CallButler.Service,ProjectInstaller,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ProjectInstaller.cs,Install,The length of the statement  "		Service.Services.LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (e)' true); " is 148.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,mnuManageCallButler_Click,The length of the statement  "	string callButlerManagerPath = Path.Combine (Path.GetDirectoryName (Application.ExecutablePath)' Properties.Settings.Default.CallButlerManagementAppLocation); " is 158.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,mnuManageCallButler_Click,The length of the statement  "		MessageBox.Show (Services.PrivateLabelService.ReplaceProductName ("The CallButler management application does not appear to be installed on this computer.\r\nPlease run the CallButler setup program again to install it.")' Services.PrivateLabelService.ReplaceProductName ("CallButler Manager Not Found")' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 354.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,CreateManagementChannels,The length of the statement  "		tcpManagementDataServer = new TcpRemotingServer ("CallButler TCP Management Server (" + Properties.Settings.Default.ProductID + ")"' "CallButlerManagementServer"' Properties.Settings.Default.ManagementServicePort' (MarshalByRefObject)managementInterfaceServer); " is 261.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,CreateManagementChannels,The length of the statement  "		tcpManagementDataServer.OnAuthentication += new EventHandler<NET.Remoting.Channels.AuthenticationEventArgs> (managementDataServer_OnAuthentication); " is 148.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,CreateManagementChannels,The length of the statement  "		tcpManagementDataServer.OnManagementAllowed += new EventHandler<NET.Remoting.Channels.ManagementAllowedEventArgs> (managementDataServer_OnManagementAllowed); " is 157.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,CreateManagementChannels,The length of the statement  "	pipeManagementDataServer = new PipeRemotingServer ("CallButler PIPE Management Server (" + Properties.Settings.Default.ProductID + ")"' "CallButlerManagementServer"' Properties.Settings.Default.ManagementServicePort' (MarshalByRefObject)managementInterfaceServer); " is 264.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,CreateManagementChannels,The length of the statement  "	pipeManagementDataServer.OnAuthentication += new EventHandler<NET.Remoting.Channels.AuthenticationEventArgs> (managementDataServer_OnAuthentication); " is 149.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,CreateManagementChannels,The length of the statement  "	pipeManagementDataServer.OnManagementAllowed += new EventHandler<NET.Remoting.Channels.ManagementAllowedEventArgs> (managementDataServer_OnManagementAllowed); " is 158.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "		//Licensing.Management.AppPermissions.LoadPermissionData(Properties.Settings.Default.ProductID' Properties.Resources.Permissions); " is 130.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "		System.Collections.Specialized.NameValueCollection settings = new System.Collections.Specialized.NameValueCollection (); " is 120.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "			settings ["RootDataDirectory"] = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.XmlDataRootDirectory); " is 136.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "			settings ["RootGreetingSoundDirectory"] = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory); " is 151.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "                        settings["RootDataDirectory"] = WOSI.Utilities.FileUtils.GetApplicationRelativePath(Properties.Settings.Default.XmlDataRootDirectory);" is 134.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "                        settings["RootGreetingSoundDirectory"] = WOSI.Utilities.FileUtils.GetApplicationRelativePath(Properties.Settings.Default.GreetingSoundRootDirectory);" is 149.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "		/*' Licensing.Management.AppPermissions.StatGetPermissionScalar("MaxLineCount"));*/switch (Properties.Settings.Default.TelecomProviderType) { " is 141.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "			telecomProvider = new inTELIPhoneTelecomProvider (mnuServiceOptions' notifyIcon' lineCount' Properties.Settings.Default.UseStun' Properties.Settings.Default.StunServer' Properties.Settings.Default.SipPort' Properties.Settings.Default.UseInternalAddressForSIPMessages); " is 268.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.ProvidersDataTable providers = dataProvider.GetProviders (Properties.Settings.Default.CustomerID); " is 137.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "		scriptService = new ScriptService (telecomProvider' dataProvider' vmService' vmMailerService' pluginManager' pbxRegistrar/*' extStateService*/); " is 144.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "		CallButler.Service.Plugin.CallButlerServiceContext serviceContext = new CallButler.Service.Plugin.CallButlerServiceContext (scriptService); " is 139.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "		pluginManager.LoadPlugins (WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.PluginDirectory)' "*.dll"' true' typeof(CallButler.Service.Plugin.CallButlerServicePlugin)); " is 200.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "		managementInterfaceServer.Initialize (this' dataProvider' telecomProvider' scriptService' pluginManager' pbxRegistrar' vmService); " is 130.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsDataTable lgTable = new CallButlerDataset.LocalizedGreetingsDataTable (); " is 130.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "			if (dataProvider.GetGreeting (Properties.Settings.Default.CustomerID' WOSI.CallButler.Data.Constants.WelcomeGreetingGuid) == null) { " is 132.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The length of the statement  "			if (dataProvider.GetGreeting (Properties.Settings.Default.CustomerID' WOSI.CallButler.Data.Constants.MainMenuGreetingGuid) == null) { " is 133.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,tcpClientManagementDataServer_OnManagementAllowed,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow row = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' ext); " is 137.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,managementDataServer_OnManagementAllowed,The length of the statement  "		if (currentIP.Equals (e.IpAddress) || e.IpAddress.Equals ("127.0.0.1") || e.IpAddress.ToLower ().Equals ("localhost")) { " is 120.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,LoggingService_NewLogEntry,The length of the statement  "				smtpPassword = WOSI.Utilities.CryptoUtils.Decrypt (Properties.Settings.Default.SMTPPassword' WOSI.CallButler.Data.Constants.EncryptionPassword); " is 144.
Long Statement,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,LoggingService_NewLogEntry,The length of the statement  "			WOSI.Utilities.EmailUtils.SendEmail (Properties.Settings.Default.SMTPEmailFrom' Properties.Settings.Default.LogErrorEmailAddress' Services.PrivateLabelService.ReplaceProductName ("A CallButler Error Has Been Logged")' e.Message' Properties.Settings.Default.SMTPServer' Properties.Settings.Default.SMTPPort' Properties.Settings.Default.SMTPUseSSL' Properties.Settings.Default.SMTPUsername' smtpPassword); " is 403.
Long Statement,CallButler.Service,Program,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Program.cs,Main,The length of the statement  "		/*if (!Licensing.Management.LicenseManager.LockLicense(Properties.Settings.Default.ProductID' Properties.Settings.Default.LicenseKey' true))" is 140.
Long Statement,CallButler.Service,Program,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Program.cs,Main,The length of the statement  "		Service.Services.LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (ex)' true); " is 149.
Long Statement,CallButler.Service,Program,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Program.cs,CurrentDomain_UnhandledException,The length of the statement  "			Application_ThreadException (sender' new System.Threading.ThreadExceptionEventArgs (new Exception (e.ExceptionObject.ToString ()))); " is 132.
Long Statement,CallButler.Service,Program,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Program.cs,Application_ThreadException,The length of the statement  "	Service.Services.LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (e.Exception)' true); " is 158.
Long Statement,CallButler.Service.ScriptProcessing,AddonModuleScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\AddonModuleScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string moduleData = addonModule.OnStartScript (new CallButler.Service.Plugin.CallButlerScriptContext (tsInterface.IMLInterpreter)); " is 131.
Long Statement,CallButler.Service.ScriptProcessing,AddonModuleScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\AddonModuleScriptProcessor.cs,OnStartProcessing,The length of the statement  "	tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,AddonModuleScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\AddonModuleScriptProcessor.cs,OnExternalCommand,The length of the statement  "	addonModule.OnExternalAction (new CallButler.Service.Plugin.CallButlerScriptContext (tsInterface.IMLInterpreter)' command' commandData); " is 136.
Long Statement,CallButler.Service.ScriptProcessing,AutoDialerProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\AutoDialerProcessor.cs,StartScript,The length of the statement  "	this.tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 166.
Long Statement,CallButler.Service.ScriptProcessing,AutoDialerProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\AutoDialerProcessor.cs,TimeoutTimerProc,The length of the statement  "		adp.dialerPlugin.OnCallStatus (adp.jobID' adp.callID' CallButler.Service.Plugin.CallButlerDialerPlugin.CallStatus.NotAnswered); " is 127.
Long Statement,CallButler.Service.ScriptProcessing,Click2CallScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\Click2CallScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string click2CallScriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Click2Call Handler.xml"; " is 172.
Long Statement,CallButler.Service.ScriptProcessing,Click2CallScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\Click2CallScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,Click2CallScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\Click2CallScriptProcessor.cs,OnExternalCommand,The length of the statement  "					callMakerInterface.ScriptProcessor = new VoicemailManagementScriptProcessor (callMakerExtension' scriptService.registrarService); " is 129.
Long Statement,CallButler.Service.ScriptProcessing,Click2CallScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\Click2CallScriptProcessor.cs,OnExternalCommand,The length of the statement  "					WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' extensionNumber); " is 155.
Long Statement,CallButler.Service.ScriptProcessing,Click2CallScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\Click2CallScriptProcessor.cs,OnExternalCommand,The length of the statement  "				scriptService.MakeOutboundCall (callMakerInterface' numberToDial' string.Format ("{0} {1}"' callMakerExtension.FirstName' callMakerExtension.LastName)' null' null' callMakerExtension.ExtensionNumber' false' true); " is 213.
Long Statement,CallButler.Service.ScriptProcessing,OutboundCalleeScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundCalleeScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string scriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Outbound Callee.xml"; " is 159.
Long Statement,CallButler.Service.ScriptProcessing,OutboundCalleeScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundCalleeScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.SetLocalVariable ("HoldMusicLocation"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.HoldMusicRootDirectory)); " is 172.
Long Statement,CallButler.Service.ScriptProcessing,OutboundCalleeScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundCalleeScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string scriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Outbound Call.xml"; " is 157.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.SetLocalVariable ("HoldMusicLocation"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.HoldMusicRootDirectory)); " is 172.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnStartProcessing,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' outboundExtensionNumber); " is 163.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnStartProcessing,The length of the statement  "		if (outboundTsInterface == null || (outboundExtensionNumber >= 0 && extension != null && !extension.EnableOutboundCalls)) { " is 123.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnExternalCommand,The length of the statement  "		OutboundCalleeScriptProcessor.OutboundCallExternalCommands externalCommand = WOSI.Utilities.EnumUtils<OutboundCalleeScriptProcessor.OutboundCallExternalCommands>.Parse (command); " is 178.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnExternalCommand,The length of the statement  "			outboundTsInterface.IMLInterpreter.SignalExternalEvent (OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_HoldCaller.ToString ()); " is 158.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnExternalCommand,The length of the statement  "			outboundTsInterface.IMLInterpreter.SignalExternalEvent (OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_UnholdCaller.ToString ()); " is 160.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,TransferCaller,The length of the statement  "	outboundTsInterface.IMLInterpreter.SignalExternalEvent (OutboundCallExternalEvents.CALLBUTLERINTERNAL_TransferCall.ToString ()); " is 128.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnLinkedExternalCommand,The length of the statement  "		OutboundCalleeScriptProcessor.OutboundCallExternalCommands externalCommand = WOSI.Utilities.EnumUtils<OutboundCalleeScriptProcessor.OutboundCallExternalCommands>.Parse (command); " is 178.
Long Statement,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnLinkedExternalCommand,The length of the statement  "			this.thisTsInterface.IMLInterpreter.SignalExternalEvent (OutboundCallExternalEvents.CALLBUTLERINTERNAL_ConferenceStarted.ToString ()); " is 134.
Long Statement,CallButler.Service.ScriptProcessing,ReceptionistFinderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ReceptionistFinderScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string scriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Receptionist Finder.xml"; " is 163.
Long Statement,CallButler.Service.ScriptProcessing,ReceptionistFinderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ReceptionistFinderScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,ReceptionistFinderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ReceptionistFinderScriptProcessor.cs,OnExternalCommand,The length of the statement  "		ReceptionistFinderExternalCommands externalCommand = WOSI.Utilities.EnumUtils<ReceptionistFinderExternalCommands>.Parse (command); " is 130.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceParticipantScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceParticipantScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string scriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Transfer Conference Participant.xml"; " is 175.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceParticipantScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceParticipantScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.SetLocalVariable ("HoldMusicLocation"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.HoldMusicRootDirectory)); " is 172.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceParticipantScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceParticipantScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceParticipantScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceParticipantScriptProcessor.cs,OnExternalCommand,The length of the statement  "		TransferConferenceParticipantExternalCommands externalCommand = WOSI.Utilities.EnumUtils<TransferConferenceParticipantExternalCommands>.Parse (command); " is 152.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string scriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Transfer Conference.xml"; " is 163.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.SetLocalVariable ("HoldMusicLocation"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.HoldMusicRootDirectory)); " is 172.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.SetLocalVariable ("RecordingPath"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.CallRecordingSoundPath)); " is 168.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnIncomingTransfer,The length of the statement  "			TransferConferenceScriptProcessor remoteProcessor = (TransferConferenceScriptProcessor)remoteTsInterface.ScriptProcessor; " is 121.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnIncomingTransfer,The length of the statement  "				callerTsInterface.IMLInterpreter.SignalExternalEvent (TransferConferenceExternalEvents.CALLBUTLERINTERNAL_UnholdCall.ToString ()); " is 130.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,TransferCaller,The length of the statement  "	callerTsInterface.IMLInterpreter.SignalExternalEvent (TransferConferenceExternalEvents.CALLBUTLERINTERNAL_TransferCall.ToString ()); " is 132.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnExternalCommand,The length of the statement  "		TransferConferenceExternalCommands externalCommand = WOSI.Utilities.EnumUtils<TransferConferenceExternalCommands>.Parse (command); " is 130.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnExternalCommand,The length of the statement  "			callerTsInterface.IMLInterpreter.SignalExternalEvent (TransferConferenceExternalEvents.CALLBUTLERINTERNAL_RecordingStarted.ToString ()); " is 136.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnExternalCommand,The length of the statement  "			callerTsInterface.IMLInterpreter.SignalExternalEvent (TransferConferenceExternalEvents.CALLBUTLERINTERNAL_RecordingFinished.ToString ()); " is 137.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnExternalCommand,The length of the statement  "			vmMailerService.QueueVoicemailEmail (extension' "Your Call Recording"' "Call Recording"' tsInterface.IMLInterpreter.GetLocalVariable ("RecordingFilename")); " is 156.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnExternalCommand,The length of the statement  "			callerTsInterface.IMLInterpreter.SignalExternalEvent (TransferConferenceExternalEvents.CALLBUTLERINTERNAL_HoldCall.ToString ()); " is 128.
Long Statement,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnExternalCommand,The length of the statement  "			callerTsInterface.IMLInterpreter.SignalExternalEvent (TransferConferenceExternalEvents.CALLBUTLERINTERNAL_UnholdCall.ToString ()); " is 130.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnStartProcessing,The length of the statement  "	string voicemailScriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Voicemail Management.xml"; " is 173.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.SetLocalVariable ("VoicemailRootFolder"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory)); " is 174.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,The length of the statement  "				tsInterface.IMLInterpreter.SignalExternalEvent (VoicemailExternalEvents.CALLBUTLERINTERNAL_InvalidPasscode.ToString ()); " is 120.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow voicemailGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' extension.ExtensionID' Properties.Settings.Default.DefaultLanguage); " is 224.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,The length of the statement  "				string greetingDirectory = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + Properties.Settings.Default.DefaultLanguage; " is 189.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.VoicemailsRow[] voicemails = (WOSI.CallButler.Data.CallButlerDataset.VoicemailsRow[])dataProvider.GetVoicemails (extension.ExtensionID).Select (""' "Timestamp DESC"); " is 205.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,The length of the statement  "				voicemailIntro += "Message received on " + voicemail.Timestamp.ToShortDateString () + " " + voicemail.Timestamp.ToShortTimeString (); " is 133.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,The length of the statement  "				string voicemailFilename = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory) + "\\" + voicemail.ExtensionID.ToString () + "\\" + voicemail.VoicemailID + ".snd"; " is 215.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.VoicemailsRow[] voicemails = (WOSI.CallButler.Data.CallButlerDataset.VoicemailsRow[])dataProvider.GetVoicemails (extension.ExtensionID).Select (""' "Timestamp DESC"); " is 205.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,The length of the statement  "				string voicemailFilename = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory) + "\\" + voicemail.ExtensionID.ToString () + "\\" + voicemail.VoicemailID + ".snd"; " is 215.
Long Statement,CallButler.Service.ScriptProcessing,ExpertScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExpertScriptProcessor.cs,OnStartProcessing,The length of the statement  "	LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Executing custom script at " + customScriptLocation' false); " is 146.
Long Statement,CallButler.Service.ScriptProcessing,ExpertScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExpertScriptProcessor.cs,OnStartProcessing,The length of the statement  "                introPage.Actions.Add(ScriptCompilers.ScriptUtils.CreateExternalAction(ScriptCompilers.BaseExternalCommands.CALLBUTLERINTERNAL_PlayLicenseIntroGreeting.ToString()' ""));" is 169.
Long Statement,CallButler.Service.ScriptProcessing,ExpertScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExpertScriptProcessor.cs,OnStartProcessing,The length of the statement  "            }*/ScriptCompilers.ScriptUtils.ProcessPersonalizedGreeting (dataProvider' ref introPage' Properties.Settings.Default.CustomerID' tsInterface.IMLInterpreter.CallerDisplayName' tsInterface.IMLInterpreter.CallerUsername' tsInterface.IMLInterpreter.CallerHost' tsInterface.IMLInterpreter.DialedUsername); " is 300.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string extensionFinderScriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Extension Finder.xml"; " is 175.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnStartProcessing,The length of the statement  "		onholdTsInterface.IMLInterpreter.SyncExternalAction += new EventHandler<WOSI.IVR.IML.SyncExternalActionEventArgs> (IMLInterpreter_SyncExternalAction); " is 150.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnStartProcessing,The length of the statement  "		//CallInfo callInfo = new CallInfo(tsInterface.CurrentCallID' tsInterface.LineNumber' CallStatus.Incoming' onholdTsInterface.IMLInterpreter.CallerDisplayName' onholdTsInterface.IMLInterpreter.CallerUsername); " is 208.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,IMLInterpreter_SyncExternalAction,The length of the statement  "			tsInterface.IMLInterpreter.SignalExternalEvent (ExtensionExternalEvents.CALLBUTLERINTERNAL_OtherCallerHungUp.ToString ()); " is 122.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,TryContactNumber,The length of the statement  "	if (Properties.Settings.Default.CustomIncomingCallerID != null && Properties.Settings.Default.CustomIncomingCallerID.Length > 0) { " is 130.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,TryContactNumber,The length of the statement  "	if (Properties.Settings.Default.CustomIncomingCallerNumber != null && Properties.Settings.Default.CustomIncomingCallerNumber.Length > 0) { " is 138.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,TryCallBlast,The length of the statement  "	List<WOSI.CallButler.Data.CallButlerDataset.ProvidersRow> providers = new List<WOSI.CallButler.Data.CallButlerDataset.ProvidersRow> (); " is 135.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,TryCallBlast,The length of the statement  "	if (Properties.Settings.Default.CustomIncomingCallerID != null && Properties.Settings.Default.CustomIncomingCallerID.Length > 0) { " is 130.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,TryCallBlast,The length of the statement  "	if (Properties.Settings.Default.CustomIncomingCallerNumber != null && Properties.Settings.Default.CustomIncomingCallerNumber.Length > 0) { " is 138.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,TryCallBlast,The length of the statement  "	telecomProvider.CallBlast (tsInterface.LineNumber' numbersToCall' fromCallerID' fromCallerNumber' providers.ToArray ()); " is 120.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,SetupScriptForCall,The length of the statement  "	if (Properties.Settings.Default.CustomCallScreeningPrompt != null && Properties.Settings.Default.CustomCallScreeningPrompt.Length > 0) { " is 136.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnCallTemporarilyMoved,The length of the statement  "	onholdTsInterface.IMLInterpreter.SignalExternalEvent (VoicemailExternalEvents.CALLBUTLERINTERNAL_CallForwarded.ToString ()); " is 124.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "			onholdTsInterface.IMLInterpreter.SignalExternalEvent (VoicemailExternalEvents.CALLBUTLERINTERNAL_CallForwarded.ToString ()); " is 124.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "				tsInterface.IMLInterpreter.SignalExternalEvent (ExtensionExternalEvents.CALLBUTLERINTERNAL_SkipConfirmation.ToString ()); " is 121.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "				List<WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow> contactNumbers = new List<WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow> ((WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[])dataProvider.GetExtensionContactNumbers (extension.ExtensionID).Select (""' "Priority ASC")); " is 328.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "					contactNumbers.AddRange ((WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[])dataProvider.GetExtensionContactNumbers (extension.ExtensionID).Select (""' "Priority ASC")); " is 187.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "					WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow contactNumber = contactNumbers [extensionNumberIndex]; " is 120.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "						if (!contactNumber.HasHoursOfOperation || (contactNumber.HasHoursOfOperation && ScriptUtils.IsInHoursOfOperation (contactNumber.HoursOfOperation' utcOffset))) { " is 160.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "							if ((contactNumber.CallPBXPhone || (WOSI.CallButler.Data.ExtensionContactNumberType)contactNumber.Type == WOSI.CallButler.Data.ExtensionContactNumberType.IPPhone) && registrarService != null) { " is 193.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "									WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow tmpExtension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' contactNumber.ExtensionID); " is 162.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "												string callBlastNumber = string.Format ("sip:{0}@{1}:{2}"' presInfo.ExtensionNumber' presInfo.RemoteAddress' presInfo.RemotePort); " is 130.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "												TryContactNumber (tsInterface' string.Format ("sip:{0}@{1}:{2}"' presInfo.ExtensionNumber' presInfo.RemoteAddress' presInfo.RemotePort)' callerID' callerNumber' TelecomScriptInterface.InternalProviderProfileName' contactNumber.Timeout.ToString ()' eventToken); " is 260.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "							else if ((WOSI.CallButler.Data.ExtensionContactNumberType)contactNumber.Type == WOSI.CallButler.Data.ExtensionContactNumberType.TelephoneNumber) { " is 146.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "									TryContactNumber (tsInterface' contactNumber.ContactNumber' callerID' callerNumber' ""' contactNumber.Timeout.ToString ()' eventToken); " is 135.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "							else if ((WOSI.CallButler.Data.ExtensionContactNumberType)contactNumber.Type == WOSI.CallButler.Data.ExtensionContactNumberType.Extension && parentExtension == null) { " is 167.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "									WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow newExtension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' new Guid (contactNumber.ContactNumber)); " is 175.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "											WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[] newContacts = (WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[])dataProvider.GetExtensionContactNumbers (newExtension.ExtensionID).Select ("Type <> " + (int)WOSI.CallButler.Data.ExtensionContactNumberType.Extension' "Priority ASC"); " is 319.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "					TryCallBlast (telecomProvider' tsInterface' callBlastNumbers.ToArray ()' callBlastProfiles.ToArray ()' callerID' callerNumber' callBlastTimeout.ToString ()); " is 157.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "			onholdTsInterface.IMLInterpreter.SignalExternalEvent (VoicemailExternalEvents.CALLBUTLERINTERNAL_ExtensionNotAvailable.ToString ()); " is 132.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "			onholdTsInterface.IMLInterpreter.SignalExternalEvent (ExtensionExternalCommands.CALLBUTLERINTERNAL_ConnectCalls.ToString ()); " is 125.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "				if (telecomProvider.IsLineInUse (tsInterface.LineNumber) && telecomProvider.IsLineInUse (onholdTsInterface.LineNumber)) { " is 121.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "					if (extension.IsUseConferenceTransferNull () || !extension.UseConferenceTransfer/*|| !Licensing.Management.AppPermissions.StatIsPermitted("Handoff")*/) { " is 153.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "						telecomProvider.TransferCallAttended (onholdTsInterface.LineNumber' tsInterface.LineNumber' Properties.Settings.Default.UseBridgedTransfers); " is 141.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "							onholdTsInterface.ScriptProcessor = new TransferConferenceScriptProcessor (conferenceID' scriptService' tsInterface' registrarService' extension' vmMailerService); " is 163.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "							onholdTsInterface.ScriptProcessor = new TransferConferenceParticipantScriptProcessor (conferenceID' tsInterface' extension' vmMailerService); " is 141.
Long Statement,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The length of the statement  "						tsInterface.ScriptProcessor = new TransferConferenceScriptProcessor (conferenceID' scriptService' onholdTsInterface' registrarService' extension' vmMailerService); " is 163.
Long Statement,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string scheduleReminderScriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Schedule Reminder.xml"; " is 177.
Long Statement,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnExternalCommand,The length of the statement  "		ScheduleReminderExternalCommands externalCommand = WOSI.Utilities.EnumUtils<ScheduleReminderExternalCommands>.Parse (command); " is 126.
Long Statement,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnExternalCommand,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[] contactNumbers = (WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[])dataProvider.GetExtensionContactNumbers (extension.ExtensionID).Select (""' "Priority ASC"); " is 246.
Long Statement,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnExternalCommand,The length of the statement  "				WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow contactNumber = contactNumbers [extensionNumberIndex]; " is 120.
Long Statement,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnExternalCommand,The length of the statement  "					if (!contactNumber.HasHoursOfOperation || (contactNumber.HasHoursOfOperation && ScriptUtils.IsInHoursOfOperation (contactNumber.HoursOfOperation' contactNumber.HoursOfOperationUTCOffset))) { " is 190.
Long Statement,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnExternalCommand,The length of the statement  "					tsInterface.IMLInterpreter.SignalExternalEvent (ScheduleReminderExternalEvents.CALLBUTLERINTERNAL_LastReminder.ToString ()); " is 124.
Long Statement,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnExternalCommand,The length of the statement  "				tsInterface.IMLInterpreter.SignalExternalEvent (ScheduleReminderExternalEvents.CALLBUTLERINTERNAL_EndOfReminders.ToString ()); " is 126.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,GetSoundFileForLanguage,The length of the statement  "			string soundFilename = string.Format ("{0}\\{1}\\{2}"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemSoundRootDirectory)' languageID' filename); " is 185.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "			CallButler.Service.Plugin.CallButlerAddonModulePlugin[] addonModules = pluginManager.GetAllPluginsOfType<CallButler.Service.Plugin.CallButlerAddonModulePlugin> (); " is 163.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "						LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' "Failed to load Addon-Module '" + addonModule.PluginName + "'\r\n\r\n" + e.Message + "\r\n\r\n" + e.StackTrace' true); " is 203.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "			LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilename' false); " is 129.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.GreetingsRow greeting = dataProvider.GetGreeting (Properties.Settings.Default.CustomerID' greetingID); " is 141.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "				WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' languageID); " is 180.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "					localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' Properties.Settings.Default.DefaultLanguage); " is 152.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "						WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow[] localizedGreetings = greeting.GetLocalizedGreetingsRows (); " is 122.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "						string soundFilePath = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + localizedGreeting.LanguageID + "\\" + greetingID.ToString () + ".snd"; " is 211.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "							LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilePath' false); " is 129.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "								textToSpeak = "<voice required=\"Name=" + Properties.Settings.Default.DefaultTTSVoice + "\">" + textToSpeak + "</voice>"; " is 121.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "							LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Speaking '" + textToSpeak + "'"' false); " is 126.
Long Statement,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The length of the statement  "			linkedScriptProcessor.OnLinkedExternalCommand (command' commandData' eventToken' tsInterface' telecomProvider' dataProvider); " is 125.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string callFlowScriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Call Flow.xml"; " is 161.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnStartProcessing,The length of the statement  "                introPage.Actions.Add(ScriptCompilers.ScriptUtils.CreateExternalAction(ScriptCompilers.BaseExternalCommands.CALLBUTLERINTERNAL_PlayLicenseIntroGreeting.ToString()' ""));" is 169.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnStartProcessing,The length of the statement  "            }*/ScriptCompilers.ScriptUtils.ProcessPersonalizedGreeting (dataProvider' ref introPage' Properties.Settings.Default.CustomerID' tsInterface.IMLInterpreter.CallerDisplayName' tsInterface.IMLInterpreter.CallerUsername' tsInterface.IMLInterpreter.CallerHost' tsInterface.IMLInterpreter.DialedUsername); " is 300.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnStartProcessing,The length of the statement  "	tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,StartFromMainMenu,The length of the statement  "	string callFlowScriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Call Flow.xml"; " is 161.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,StartFromMainMenu,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' "MainMenuPage"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 177.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.DepartmentsDataTable departments = dataProvider.GetDepartments (Properties.Settings.Default.CustomerID); " is 143.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.DepartmentsRow[] choosenDepartments = (WOSI.CallButler.Data.CallButlerDataset.DepartmentsRow[])departments.Select ("OptionNumber = " + commandData); " is 187.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "					tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_GreetingMenuOption.ToString ()); " is 122.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "						WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' new Guid (choosenDepartment.Data1)); " is 168.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "					tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_ExtensionMenuOption.ToString ()); " is 123.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "					tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_ScriptMenuOption.ToString ()); " is 120.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "					tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_NumberTransferMenuOption.ToString ()); " is 128.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "					tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_AddonModuleMenuOption.ToString ()); " is 125.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "				tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_InvalidMenuOption.ToString ()); " is 121.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.ExtensionsDataTable extensions = dataProvider.GetExtensions (Properties.Settings.Default.CustomerID); " is 140.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow[] matchingExtensions = (WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow[])extensions.Select ("SearchNumber LIKE '" + commandData + "*' AND EnableSearch = True"); " is 219.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "				tsInterface.IMLInterpreter.SetLocalVariable ("Extension"' matchingExtensions [searchIndex].ExtensionNumber.ToString ()); " is 120.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "				tsInterface.IMLInterpreter.SetLocalVariable ("ExtensionName"' matchingExtensions [searchIndex].FirstName + " " + matchingExtensions [searchIndex].LastName); " is 156.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "				tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_ExtensionNotFound.ToString ()); " is 121.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "				WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' Convert.ToInt32 (tsInterface.IMLInterpreter.GetLocalVariable ("Extension"))); " is 215.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "                            CallButler.Service.Plugin.CallButlerAddonModulePlugin[] addonModules = pluginManager.GetAllPluginsOfType<CallButler.Service.Plugin.CallButlerAddonModulePlugin>();" is 162.
Long Statement,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The length of the statement  "                                        LoggingService.AddLogEntry(WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' "Failed to load Addon-Module '" + addonModule.PluginName + "'\r\n\r\n" + e.Message + "\r\n\r\n" + e.StackTrace' true);" is 202.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,GetDefaultProvider,The length of the statement  "	WOSI.CallButler.Data.CallButlerDataset.ProvidersRow[] providers = (WOSI.CallButler.Data.CallButlerDataset.ProvidersRow[])dataProvider.GetProviders (Properties.Settings.Default.CustomerID).Select ("IsDefault = true"); " is 216.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,FindProvider,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.ProvidersRow[] providers = (WOSI.CallButler.Data.CallButlerDataset.ProvidersRow[])dataProvider.GetProviders (Properties.Settings.Default.CustomerID).Select (string.Format ("Name = '{0}' OR ProviderID = '{0}'"' nameOrID)); " is 260.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_JoinConference,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + lineNumber + ") Joining conference ID " + e.ConferenceID' false); " is 123.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,PlaceCall,The length of the statement  "		telecomProvider.Call (lineNumber' e.Number' e.FromCallerID' e.FromCallerNumber' e.Replaces' e.ReferredBy' e.RequestAutoAnswer' profile); " is 136.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,PlaceCall,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.Basic' "(Line " + lineNumber + ") Making an outgoing call to " + WOSI.Utilities.StringUtils.FormatPhoneNumber (e.Number)' false); " is 166.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_TransferCall,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.Basic' "(Line " + lineNumber + ") Transferring call to " + WOSI.Utilities.StringUtils.FormatPhoneNumber (e.TransferTo)' false); " is 164.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_SyncExternalAction,The length of the statement  "		scriptProcessor.ProcessExternalCommand (e.Action' e.ParameterData' e.EventToken' this' telecomProvider' dataProvider' pluginManager' pbxRegistrar); " is 147.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_StartRecording,The length of the statement  "	LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + lineNumber + ") Started recording to " + e.SoundFilename' false); " is 123.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_SpeakText,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.ErrorsOnly' "(Line " + lineNumber + ") Unable to speak text\r\n\r\n" + ex.Message + "\r\n" + ex.StackTrace' true); " is 151.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_ScriptError,The length of the statement  "	LoggingService.AddLogEntry (LogLevel.ErrorsOnly' "(Line " + lineNumber + ") Script error:\r\n\r\n" + e.ErrorString' true); " is 122.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_PlaySound,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.ErrorsOnly' "(Line " + lineNumber + ") Unable to play sound at " + e.SoundFilename' true); " is 127.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_DeleteLastRecording,The length of the statement  "			LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + lineNumber + ") Deleted last recording at " + lastRecording' false); " is 126.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_DeleteLastRecording,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.ErrorsOnly' "(Line " + lineNumber + ") Unable to delete recording at " + lastRecording' true); " is 131.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_CopyLastRecording,The length of the statement  "			LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + lineNumber + ") Move last recording at " + lastRecording + " to " + e.SoundFilename' false); " is 150.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_CopyLastRecording,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.ErrorsOnly' "(Line " + lineNumber + ") Unable to move last recording at " + lastRecording + " to " + e.SoundFilename' true); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,telecomProvider_SpeechRecognized,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + lineNumber + ") Heard the phrase '" + e.InputString + "'"' false); " is 124.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,telecomProvider_CallTemporarilyMoved,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.Basic' "(Line " + e.LineNumber + ") Call Temporarily Moved to " + e.CallingToNumber' false); " is 129.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,telecomProvider_DTMFToneRecognized,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + lineNumber + ") Heard a DTMF tone '" + e.InputString + "' (" + typeStr + ")"' false); " is 143.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,telecomProvider_CallEnded,The length of the statement  "				WOSI.CallButler.Data.CallButlerDataset.CallHistoryDataTable callHistoryTable = new WOSI.CallButler.Data.CallButlerDataset.CallHistoryDataTable (); " is 146.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,telecomProvider_CallEnded,The length of the statement  "			LoggingService.AddLogEntry (LogLevel.ErrorsOnly' "(Line " + lineNumber + ") Unable to add a call history entry: " + ex.ToString ()' true); " is 138.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,telecomProvider_CallEnded,The length of the statement  "			LoggingService.AddLogEntry (LogLevel.ErrorsOnly' "(Line " + lineNumber + ") Unable to signal the end of a script: " + ex.ToString ()' true); " is 140.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,CheckAvailability,The length of the statement  "		string errorMessage = "(Line " + lineNumber + ") The call is finished but the line still appears to be locked. You may want to check the script to make sure it is exiting gracefully.\r\n"; " is 188.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,telecomProvider_CallFailed,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + lineNumber + ") Call failed\r\n" + e.ReasonCode + " - " + e.Reason' false); " is 133.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,telecomProvider_RemoteOffHold,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + lineNumber + ") Call taken off hold from remote caller."' false); " is 123.
Long Statement,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,telecomProvider_RemoteOnHold,The length of the statement  "		LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + lineNumber + ") Call placed on hold from remote caller."' false); " is 123.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailScriptProcessor.cs,OnStartProcessing,The length of the statement  "	string voicemailScriptLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Voicemail.xml"; " is 162.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.SetLocalVariable ("HoldMusicLocation"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.HoldMusicRootDirectory)); " is 172.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailScriptProcessor.cs,OnStartProcessing,The length of the statement  "                }*/tsInterface.IMLInterpreter.SetLocalVariable ("VoicemailRootFolder"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory)); " is 177.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailScriptProcessor.cs,OnStartProcessing,The length of the statement  "		tsInterface.IMLInterpreter.StartScript (imlScript' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.SystemScriptsRootDirectory)); " is 161.
Long Statement,CallButler.Service.ScriptProcessing,VoicemailScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailScriptProcessor.cs,OnExternalCommand,The length of the statement  "			vmService.CreateVoicemail (new Guid (commandData)' new Guid (tsInterface.IMLInterpreter.GetLocalVariable ("ExtensionID"))' tsInterface.IMLInterpreter.CallerDisplayName' tsInterface.IMLInterpreter.CallerHost' tsInterface.IMLInterpreter.CallerUsername); " is 251.
Long Statement,CallButler.Service.ScriptProcessing.ScriptCompilers,ScriptUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptCompilers\ScriptUtils.cs,IsInHoursOfOperation,The length of the statement  "	// The hour of operation string is a string of characters of either a 1 or 0. Each character position indicates the hour of the week. " is 133.
Long Statement,CallButler.Service.ScriptProcessing.ScriptCompilers,ScriptUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptCompilers\ScriptUtils.cs,IsInHoursOfOperation,The length of the statement  "	int hourOfWeek = ((int)DateTime.Now.ToUniversalTime ().DayOfWeek * 24) + DateTime.Now.ToUniversalTime ().TimeOfDay.Hours; " is 121.
Long Statement,CallButler.Service.ScriptProcessing.ScriptCompilers,ScriptUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptCompilers\ScriptUtils.cs,ProcessPersonalizedGreeting,The length of the statement  "	WOSI.CallButler.Data.CallButlerDataset.PersonalizedGreetingsDataTable personalGreetings = dataProvider.GetPersonalizedGreetings (customerID); " is 141.
Long Statement,CallButler.Service.ScriptProcessing.ScriptCompilers,ScriptUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptCompilers\ScriptUtils.cs,ProcessPersonalizedGreeting,The length of the statement  "	if (personalizedGreeting != null && (!personalizedGreeting.PlayOnce || (personalizedGreeting.PlayOnce && !personalizedGreeting.HasPlayed))) { " is 141.
Long Statement,CallButler.Service.ScriptProcessing.ScriptCompilers,ScriptUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptCompilers\ScriptUtils.cs,ProcessPersonalizedGreeting,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtension (customerID' new Guid (personalizedGreeting.Data)); " is 142.
Long Statement,CallButler.Service.Services,LoggingService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\LoggingService.cs,CreateLogStorage,The length of the statement  "				EventLog.CreateEventSource (Services.PrivateLabelService.ReplaceProductName ("CallButler Log")' Services.PrivateLabelService.ReplaceProductName ("CallButler Log")); " is 164.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetInstalledAddonModules,The length of the statement  "	CallButler.Service.Plugin.CallButlerAddonModulePlugin[] addonModules = pluginManager.GetAllPluginsOfType<CallButler.Service.Plugin.CallButlerAddonModulePlugin> (); " is 163.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetExtension,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.ExtensionsDataTable extensionTable = new CallButlerDataset.ExtensionsDataTable (); " is 121.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetExtension,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtension (authInfo.CustomerID' extensionID); " is 126.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetExtensionNumber,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.ExtensionsDataTable extensionTable = new CallButlerDataset.ExtensionsDataTable (); " is 121.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetExtensionNumber,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (authInfo.CustomerID' extensionNumber); " is 136.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetExtensions,The length of the statement  "			return (CallButlerDataset.ExtensionsDataTable)TrimRows (dataProvider.GetExtensions (authInfo.CustomerID)' maxExtensions); " is 121.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PersistVoicemailSound,The length of the statement  "			string vmDirectory = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory); " is 126.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PersistDepartment,The length of the statement  "					// If this department is not a greeting department' make sure we delete any greetings that may have been associated with it " is 123.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetLocalizedGreeting,The length of the statement  "		CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting (authInfo.CustomerID' greetingID' languageID); " is 140.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetLocalizedGreeting,The length of the statement  "		CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting (authInfo.CustomerID' greetingID' localizedGreetingID); " is 149.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PersistLocalizedGreeting,The length of the statement  "	string greetingDir = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory); " is 130.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PersistLocalizedGreeting,The length of the statement  "			CallButlerDataset.LocalizedGreetingsRow exLg = dataProvider.GetLocalizedGreeting (customerID' lRow.GreetingID' lRow.LanguageID); " is 128.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,DeleteGreeting,The length of the statement  "		string greetingDirectory = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory); " is 136.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetLocalizedGreetingSound,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting (authInfo.CustomerID' greetingID' localizedGreetingID); " is 170.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetLocalizedGreetingSound,The length of the statement  "			string greetingFilename = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + localizedGreeting.LanguageID + "\\" + localizedGreeting.GreetingID.ToString () + ".snd"; " is 232.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PersistLocalizedGreetingSound,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting (authInfo.CustomerID' greetingID' localizedGreetingID); " is 170.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PersistLocalizedGreetingSound,The length of the statement  "			string greetingDirectory = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + localizedGreeting.LanguageID; " is 174.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PersistLocalizedGreetingSound,The length of the statement  "				string tmpGreetingFilename = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingRecordingTempPath) + "\\" + localizedGreeting.LanguageID + "\\" + greetingID.ToString () + ".snd"; " is 216.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PlaceGreetingRecordCall,The length of the statement  "		//WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting(authInfo.CustomerID' greetingID' localizedGreetingID); " is 171.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,SendEmail,The length of the statement  "		WOSI.Utilities.EmailUtils.SendEmail (Properties.Settings.Default.SMTPEmailFrom' sendTo' subject' message' Properties.Settings.Default.SMTPServer' Properties.Settings.Default.SMTPPort' Properties.Settings.Default.SMTPUseSSL' Properties.Settings.Default.SMTPUsername' smtpPassword); " is 280.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,SendTestEmail,The length of the statement  "		WOSI.Utilities.EmailUtils.SendEmail (Properties.Settings.Default.SMTPEmailFrom' sendTo' subject' message' smtpServer' smtpPort' useSSL' smtpUsername' smtpPassword); " is 164.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetHoldMusic,The length of the statement  "		string holdMusicLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.HoldMusicRootDirectory); " is 132.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,DeleteHoldMusic,The length of the statement  "		string fileLocation = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.HoldMusicRootDirectory); " is 127.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PersistHoldMusic,The length of the statement  "		string outputPath = Path.Combine (WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.HoldMusicRootDirectory)' Path.GetFileNameWithoutExtension (fileName) + ".wav"); " is 194.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,ConvertAndSaveSoundFile,The length of the statement  "	WOSI.Utilities.SoundConversion.SoundConverter.ConvertToWAV (tmpFilePath' filename' telecomProvider.AudioInputRate' 16' false); " is 126.
Long Statement,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,PasswordIsValid,The length of the statement  "		if (suppliedPassword.Equals (WOSI.Utilities.CryptoUtils.Decrypt (storedPassword' WOSI.CallButler.Data.Constants.EncryptionPassword))) " is 133.
Long Statement,CallButler.Service.Services,PerformanceCounterService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PerformanceCounterService.cs,Initialize,The length of the statement  "			PerformanceCounterCategory.Create (categoryName' categoryHelp' PerformanceCounterCategoryType.SingleInstance' counters); " is 120.
Long Statement,CallButler.Service.Services,PerformanceCounterService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PerformanceCounterService.cs,Initialize,The length of the statement  "			PerformanceCounterCategory.Create (categoryName' categoryHelp' PerformanceCounterCategoryType.SingleInstance' counters); " is 120.
Long Statement,CallButler.Service.Services,PerformanceCounterService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PerformanceCounterService.cs,Initialize,The length of the statement  "		LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' "Unable to create performance monitoring WOSI.CallButler.Data." + Utils.ErrorUtils.FormatErrorString (e)' true); " is 197.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,Shutdown,The length of the statement  "	LoggingService.AddLogEntry (LogLevel.Basic' Services.PrivateLabelService.ReplaceProductName ("CallButler Service Stopped")' false); " is 131.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceScheduleReminderCall,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' extensionID); " is 145.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceScheduleReminderCall,The length of the statement  "					tsInterfaces [openLineNumber].ScriptProcessor.StartProcessing (tsInterfaces [openLineNumber]' telecomProvider' dataProvider); " is 125.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceGreetingRecordCall,The length of the statement  "	/*string recordGreetingScriptLocation = Utilities.FileUtils.GetApplicationRelativePath(Properties.Settings.Default.SystemScriptsRootDirectory) + "\\Greeting Recording.xml";" is 172.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceGreetingRecordCall,The length of the statement  "            string greetingDirectory = Utilities.FileUtils.GetApplicationRelativePath(Properties.Settings.Default.GreetingRecordingTempPath) + "\\" + languageID;" is 149.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceGreetingRecordCall,The length of the statement  "            System.Collections.Specialized.NameValueCollection scriptVars = new System.Collections.Specialized.NameValueCollection();" is 121.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceGreetingRecordCall,The length of the statement  "            PlaceOutboundCall(Guid.Empty' numberToCall' "CallButler Greeting Recording"' recordGreetingScriptLocation' scriptVars);*/} " is 122.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The length of the statement  "	WOSI.CallButler.Data.CallButlerDataset.ProvidersRow provider = dataProvider.GetProviders (Properties.Settings.Default.CustomerID).FindByProviderID (providerID); " is 160.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The length of the statement  "	return PlaceOutboundCall (jobID' callID' provider' callTo' fromCallerID' fromCallerNumber' scriptToRun' answeringMachineScriptToRun' answeringMachineDetectionSettings' scriptVariables' timeout' dialerPlugin); " is 208.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The length of the statement  "	WOSI.CallButler.Data.CallButlerDataset.ProvidersRow[] providers = (WOSI.CallButler.Data.CallButlerDataset.ProvidersRow[])dataProvider.GetProviders (Properties.Settings.Default.CustomerID).Select ("Name = '" + providerName + "'"); " is 229.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The length of the statement  "	return PlaceOutboundCall (jobID' callID' provider' callTo' fromCallerID' fromCallerNumber' scriptToRun' answeringMachineScriptToRun' answeringMachineDetectionSettings' scriptVariables' timeout' dialerPlugin); " is 208.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The length of the statement  "			tsInterfaces [openLine].ScriptProcessor = new AutoDialerProcessor (telecomProvider' tsInterfaces [openLine]' jobID' callID' scriptToRun' answeringMachineScriptToRun' answeringMachineDetectionSettings' timeout' scriptVariables' dialerPlugin); " is 241.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceOutboundCall,The length of the statement  "				dialerPlugin.OnCallStatus (jobID' callID' CallButler.Service.Plugin.CallButlerDialerPlugin.CallStatus.NoLinesAvailable); " is 120.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,Click2Call,The length of the statement  "			tsInterfaces [lineNumber1].ScriptProcessor = new Click2CallScriptProcessor (this' toNumber' extension' tsInterfaces [lineNumber2]); " is 131.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,Click2Call,The length of the statement  "			tsInterfaces [lineNumber2].ScriptProcessor = new ExtensionScriptProcessor (this' tsInterfaces [lineNumber1]' extension' vmMailerService' registrarService/*' extStateService*/' true' false' autoAnswer); " is 201.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,TransferToExtension,The length of the statement  "			extension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' Properties.Settings.Default.ReceptionistExtensionID); " is 132.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,TransferToExtension,The length of the statement  "					tsInterfaces [openLineNumber].ScriptProcessor = new ExtensionScriptProcessor (this' tsInterface' extension' vmMailerService' registrarService/*' extStateService*/' disableCallScreening' true' false); " is 199.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,TransferToExtension,The length of the statement  "					tsInterfaces [openLineNumber].ScriptProcessor.StartProcessing (tsInterfaces [openLineNumber]' telecomProvider' dataProvider); " is 125.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,tsInterface_TransferCall,The length of the statement  "		if (MakeOutboundCall (tsInterface' e.TransferTo' e.FromCallerName' e.FromCallerNumber' e.OutboundBridgeProfileName' -1' false' false)) { " is 136.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_IncomingBusyCall,The length of the statement  "	if (/*Licensing.Management.AppPermissions.StatIsPermitted("Settings.FailoverServer") && */Properties.Settings.Default.BusyRedirectServer != null && Properties.Settings.Default.BusyRedirectServer.Length > 0) { " is 208.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_Error,The length of the statement  "	LoggingService.AddLogEntry (LogLevel.ErrorsOnly' string.Format ("Telecom Provider Error\r\n\r\n{0}\r\n\r\n{1}"' e.ErrorMessage' e.ErrorDetail)' true); " is 150.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_IncomingCall,The length of the statement  "	LoggingService.AddLogEntry (LogLevel.Basic' "(Line " + e.LineNumber + ") Incoming call from " + e.CallerDisplayName + " " + e.CallerPhoneNumber + " to " + e.CallingToNumber + " " + e.CallingToMiscInfo' false); " is 209.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_IncomingCall,The length of the statement  "	if (/*(LicenseService.IsLicensed() || LicenseService.IsTrialLicense() || Properties.Settings.Default.IsFreeVersion) &&*/Properties.Settings.Default.ServiceEnabled) { " is 165.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_IncomingCall,The length of the statement  "				WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow internalExtensionRow = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' Convert.ToInt32 (e.CallerPhoneNumber)); " is 188.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_IncomingCall,The length of the statement  "			else if (Properties.Settings.Default.AllowOutboundDialing && e.CallingToNumber.StartsWith (Properties.Settings.Default.OutboundDialingPrefix)) { " is 144.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_IncomingCall,The length of the statement  "				if (MakeOutboundCall (tsInterface' e.CallingToNumber' e.CallerDisplayName' null' null' internalCallerExtension' true' false)) { " is 127.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_IncomingCall,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow recepExtension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' Properties.Settings.Default.ReceptionistExtensionID); " is 190.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,MakeOutboundCall,The length of the statement  "	if (trimPrefix && Properties.Settings.Default.OutboundDialingPrefix != null && Properties.Settings.Default.OutboundDialingPrefix.Length > 0) { " is 142.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,MakeOutboundCall,The length of the statement  "		outboundTsInterface.ScriptProcessor = new OutboundCalleeScriptProcessor (outboundNumber' callerDisplayName' callerNumber' profileName); " is 135.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,SetupAutoAttendantAnswer,The length of the statement  "	if (Properties.Settings.Default.ExpertMode/*&& Licensing.Management.AppPermissions.StatIsPermitted("CustomScripting")*/) { " is 122.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,ProcessAnswerCall,The length of the statement  "			ats.answerTimer = new System.Threading.Timer (new System.Threading.TimerCallback (ProcessAnswerTimeoutProc)' ats' Properties.Settings.Default.AnswerTimeout' System.Threading.Timeout.Infinite); " is 192.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,GetCurrentExpertScript,The length of the statement  "	WOSI.CallButler.Data.CallButlerDataset.ScriptSchedulesRow[] scriptSchedules = (WOSI.CallButler.Data.CallButlerDataset.ScriptSchedulesRow[])dataProvider.GetScriptSchedules (Properties.Settings.Default.CustomerID).Select ("Enabled = True"' "Priority ASC"); " is 254.
Long Statement,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,GetCurrentExpertScript,The length of the statement  "			if (ScriptProcessing.ScriptCompilers.ScriptUtils.IsInHoursOfOperation (scriptSchedule.HoursOfOperation' scriptSchedule.HoursOfOperationUTCOffset)) " is 146.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessExtensionAuthentication,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' Convert.ToInt32 (fromURI.User)); " is 170.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,FindPresenceInfo,The length of the statement  "			if (presenceInfo.ExtensionNumber == extensionNumber && presenceInfo.RemoteAddress == remoteIpAddress && (!matchPort || (matchPort && presenceInfo.RemotePort == remotePort))) " is 173.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The length of the statement  "					if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") { " is 155.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The length of the statement  "				presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters; " is 122.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The length of the statement  "						LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false); " is 185.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The length of the statement  "				response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT")); " is 131.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The length of the statement  "		LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (ex)' true); " is 132.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The length of the statement  "			//if (Properties.Settings.Default.SIPRegistrarDomain == null || Properties.Settings.Default.SIPRegistrarDomain.Length == 0 || fromURI.Host == ipClient.LocalIPAddress /*|| fromURI.Host == ipClient.Sip*/ || string.Compare(fromURI.Host' Properties.Settings.Default.SIPRegistrarDomain' true) == 0) " is 293.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The length of the statement  "			WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' extensionNumber); " is 155.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The length of the statement  "				pbxPassword = WOSI.Utilities.CryptoUtils.Decrypt (extension.PBXPassword' WOSI.CallButler.Data.Constants.EncryptionPassword); " is 124.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The length of the statement  "				string authString = string.Format ("Digest realm=\"{0}\"' domain=\"sip:{1}\"' nonce=\"{2}\"' algorithm=MD5"' realmDomain' realmDomain' Guid.NewGuid ().ToString ()); " is 164.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,GetPhoneStatus,The length of the statement  "	WOSI.CallButler.Data.CallButlerDataset.ExtensionsDataTable extensions = dataProvider.GetExtensions (Properties.Settings.Default.CustomerID); " is 140.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,SendMessageWaitingNotification,The length of the statement  "	WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' extensionID); " is 145.
Long Statement,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,SendMessageWaitingNotification,The length of the statement  "	WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' extensionNumber); " is 155.
Long Statement,CallButler.Service.Services,VoicemailMailerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailMailerService.cs,VMQueueTimerProc,The length of the statement  "						smtpPassword = WOSI.Utilities.CryptoUtils.Decrypt (Properties.Settings.Default.SMTPPassword' WOSI.CallButler.Data.Constants.EncryptionPassword); " is 144.
Long Statement,CallButler.Service.Services,VoicemailMailerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailMailerService.cs,VMQueueTimerProc,The length of the statement  "						voicemailFilename = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory) + "\\" + vmData.Voicemail.ExtensionID.ToString () + "\\" + vmData.Voicemail.VoicemailID + ".snd"; " is 222.
Long Statement,CallButler.Service.Services,VoicemailMailerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailMailerService.cs,VMQueueTimerProc,The length of the statement  "						emailer.SendEmailAsync (Properties.Settings.Default.SMTPEmailFrom' vmData.Extension.EmailAddress' subject' message' Properties.Settings.Default.SMTPServer' Properties.Settings.Default.SMTPPort' Properties.Settings.Default.SMTPUseSSL' Properties.Settings.Default.SMTPUsername' smtpPassword' tmpFilename' attachmentName' tmpFilename); " is 332.
Long Statement,CallButler.Service.Services,VoicemailMailerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailMailerService.cs,VMQueueTimerProc,The length of the statement  "						emailer.SendEmailAsync (Properties.Settings.Default.SMTPEmailFrom' vmData.Extension.EmailAddress' subject' message' Properties.Settings.Default.SMTPServer' Properties.Settings.Default.SMTPPort' Properties.Settings.Default.SMTPUseSSL' Properties.Settings.Default.SMTPUsername' smtpPassword' null); " is 296.
Long Statement,CallButler.Service.Services,VoicemailMailerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailMailerService.cs,VMQueueTimerProc,The length of the statement  "					LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' string.Format ("Voicemail Email sent to: {0}"' vmData.Extension.EmailAddress)' false); " is 169.
Long Statement,CallButler.Service.Services,VoicemailMailerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailMailerService.cs,VMQueueTimerProc,The length of the statement  "			LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (e)' true); " is 131.
Long Statement,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,DeleteVoicemail,The length of the statement  "		string voicemailPath = String.Format ("{0}\\{1}\\{2}.snd"' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory)' vRow.ExtensionID.ToString ()' voicemailID.ToString ()); " is 220.
Long Statement,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,CreateVoicemail,The length of the statement  "	WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' extensionID); " is 145.
Long Statement,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,CreateVoicemail,The length of the statement  "		WOSI.CallButler.Data.CallButlerDataset.VoicemailsDataTable voicemailsTable = new WOSI.CallButler.Data.CallButlerDataset.VoicemailsDataTable (); " is 143.
Long Statement,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,CreateVoicemail,The length of the statement  "		CallButler.Service.Plugin.CallButlerVoicemailHandlerPlugin[] vmHandlers = pluginManager.GetAllPluginsOfType<CallButler.Service.Plugin.CallButlerVoicemailHandlerPlugin> (); " is 171.
Long Statement,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,CreateVoicemail,The length of the statement  "				vmHandler.OnNewVoicemail (voicemail.CallerDisplayName' voicemail.CallerHost' voicemail.ExtensionID.ToString ()' voicemail.VoicemailID.ToString ()' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory) + "\\" + voicemail.ExtensionID.ToString () + "\\" + voicemail.VoicemailID.ToString () + ".snd"); " is 348.
Long Statement,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,CreateVoicemail,The length of the statement  "				LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' string.Format ("Voicemail Handler Plugin Failed\r\n\r\n{0} ({1})\r\n\r\n{2}"' vmHandler.PluginName' vmHandler.PluginID.ToString ()' e.Message)' true); " is 235.
Long Statement,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,ForwardVoicemail,The length of the statement  "		string origVoicemailFilename = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory) + "\\" + voicemail.ExtensionID.ToString () + "\\" + voicemail.VoicemailID + ".snd"; " is 219.
Long Statement,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,ForwardVoicemail,The length of the statement  "		string newVoicemailDirectory = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory) + "\\" + toExtensionID.ToString (); " is 171.
Long Statement,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,ForwardVoicemail,The length of the statement  "		CreateVoicemail (newVoicemailID' toExtensionID' voicemail.CallerDisplayName' voicemail.CallerHost' voicemail.CallerUsername); " is 125.
Long Statement,CallButler.Service.Services,VoicemailService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailService.cs,GetVoicemailBytes,The length of the statement  "		string voicemailPath = String.Format (path' WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory)' voicemail.ExtensionID.ToString ()' voicemailId.ToString ()); " is 210.
Long Statement,CallButler.Service.Utils,ErrorUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Utils\ErrorUtils.cs,FormatErrorString,The length of the statement  "		sb.AppendFormat ("Source: {0}\r\nMessage: {1}\r\nStack Trace:\r\n\r\n{2}"' curExp.Source' curExp.Message' curExp.StackTrace); " is 125.
Complex Conditional,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnStartProcessing,The conditional expression  "outboundTsInterface == null || (outboundExtensionNumber >= 0 && extension != null && !extension.EnableOutboundCalls)"  is complex.
Complex Conditional,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_DeleteLastRecording,The conditional expression  "!recording && lastRecording != null && lastRecording.Length > 0 && File.Exists (lastRecording)"  is complex.
Complex Conditional,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_CopyLastRecording,The conditional expression  "!recording && lastRecording != null && lastRecording.Length > 0 && File.Exists (lastRecording)"  is complex.
Complex Conditional,CallButler.Service.ScriptProcessing.ScriptCompilers,ScriptUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptCompilers\ScriptUtils.cs,ProcessPersonalizedGreeting,The conditional expression  "personalizedGreeting != null && (!personalizedGreeting.PlayOnce || (personalizedGreeting.PlayOnce && !personalizedGreeting.HasPlayed))"  is complex.
Complex Conditional,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,FindPresenceInfo,The conditional expression  "presenceInfo.ExtensionNumber == extensionNumber && presenceInfo.RemoteAddress == remoteIpAddress && (!matchPort || (matchPort && presenceInfo.RemotePort == remotePort))"  is complex.
Empty Catch Block,CallButler.Service,ProjectInstaller,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ProjectInstaller.cs,Install,The method has an empty catch block.
Empty Catch Block,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The method has an empty catch block.
Empty Catch Block,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The method has an empty catch block.
Empty Catch Block,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,LoggingService_NewLogEntry,The method has an empty catch block.
Empty Catch Block,CallButler.Service,Program,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,CallButler.Service,Program,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Program.cs,Application_ThreadException,The method has an empty catch block.
Empty Catch Block,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The method has an empty catch block.
Empty Catch Block,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,GetSoundFileForLanguage,The method has an empty catch block.
Empty Catch Block,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The method has an empty catch block.
Empty Catch Block,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The method has an empty catch block.
Empty Catch Block,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,StopSounds,The method has an empty catch block.
Empty Catch Block,CallButler.Service.ScriptProcessing,TelecomScriptInterface,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TelecomScriptInterface.cs,imlInterp_ScriptFinished,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,LoggingService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\LoggingService.cs,LoggingService,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,LoggingService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\LoggingService.cs,Default_SettingChanging,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,LoggingService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\LoggingService.cs,AddLogEntry,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetTTSVoices,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetTTSVoices,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,PlaceScheduleReminderCall,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_IncomingCall,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,ScriptService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ScriptService.cs,telecomProvider_IncomingCall,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessExtensionAuthentication,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,PrivateLabelService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PrivateLabelService.cs,LoadPrivateLabelFile,The method has an empty catch block.
Empty Catch Block,CallButler.Service.Services,PrivateLabelService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PrivateLabelService.cs,LoadPrivateLabelFile,The method has an empty catch block.
Magic Number,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,RestartService,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,CallButler.Service.ScriptProcessing,AutoDialerProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\AutoDialerProcessor.cs,AutoDialerProcessor,The following statement contains a magic number: timeoutTimer = new System.Threading.Timer (new System.Threading.TimerCallback (TimeoutTimerProc)' this' timeout * 1000' System.Threading.Timeout.Infinite);  
Magic Number,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The following statement contains a magic number: if (Enum.IsDefined (typeof(BaseExternalCommands)' command)) {  	BaseExternalCommands externalCommand = WOSI.Utilities.EnumUtils<BaseExternalCommands>.Parse (command);  	string languageID = "en";  	switch (externalCommand) {  	case BaseExternalCommands.CALLBUTLERINTERNAL_StartAddonModule:  		CallButler.Service.Plugin.CallButlerAddonModulePlugin[] addonModules = pluginManager.GetAllPluginsOfType<CallButler.Service.Plugin.CallButlerAddonModulePlugin> ();  		foreach (CallButler.Service.Plugin.CallButlerAddonModulePlugin addonModule in addonModules) {  			if (addonModule.PluginID.ToString () == commandData) {  				try {  					// Make sure the module is licensed  					if (!addonModule.IsLicensed)  						break;  					// We found our module and we should load the script it uses  					tsInterface.ScriptProcessor = new AddonModuleScriptProcessor (addonModule);  					tsInterface.ScriptProcessor.StartProcessing (tsInterface' telecomProvider' dataProvider);  					return;  				}  				catch (Exception e) {  					LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' "Failed to load Addon-Module '" + addonModule.PluginName + "'\r\n\r\n" + e.Message + "\r\n\r\n" + e.StackTrace' true);  				}  			}  		}  		break;  	case BaseExternalCommands.CALLBUTLERINTERNAL_ReturnToCallFlowMainMenu:  		// Return to the Call flow main menu.  		tsInterface.ScriptProcessor = new StandardScriptProcessor (pluginManager' pbxRegistrar);  		((StandardScriptProcessor)tsInterface.ScriptProcessor).StartFromMainMenu (tsInterface);  		break;  	case BaseExternalCommands.CALLBUTLERINTERNAL_PlayLicenseIntroGreeting:  		// If the line isn't in use' don't do anything  		if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  			break;  		}  		// Read our intro sound bytes  		byte[] introSoundBytes = null;  		if (telecomProvider.AudioInputRate == 8000) {  			introSoundBytes = new byte[Properties.Resources.powered_by_8khz.Length];  			Properties.Resources.powered_by_8khz.Read (introSoundBytes' 0' introSoundBytes.Length);  		}  		else if (telecomProvider.AudioInputRate == 16000) {  			introSoundBytes = new byte[Properties.Resources.powered_by_16khz.Length];  			Properties.Resources.powered_by_16khz.Read (introSoundBytes' 0' introSoundBytes.Length);  		}  		// Play our license intro sound  		if (introSoundBytes != null) {  			telecomProvider.PlaySound (tsInterface.LineNumber' introSoundBytes);  		}  		break;  	case BaseExternalCommands.CALLBUTLERINTERNAL_PlaySystemSound:  		// If the line isn't in use' don't do anything  		if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  			break;  		}  		// Get the sound with the current language  		languageID = tsInterface.IMLInterpreter.GetLocalVariable ("LanguageID");  		string soundFilename = GetSoundFileForLanguage (languageID' commandData);  		if (soundFilename == null) {  			// If we don't get a sound with the current language' try the default language  			soundFilename = GetSoundFileForLanguage (Properties.Settings.Default.DefaultLanguage' commandData);  			if (soundFilename == null) {  				// If we don't get a sound file with the default language' try english  				soundFilename = GetSoundFileForLanguage ("en"' commandData);  				if (soundFilename == null) {  					if (!File.Exists (soundFilename)) {  						// If the sound still doesn't exist' tell the IML interpreter to move on  						tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  						break;  					}  				}  			}  		}  		// If we get here' our system sound should exist and we should play it.  		if (string.Compare (commandData' "ring.snd"' true) == 0)  			telecomProvider.PlaySound (tsInterface.LineNumber' soundFilename' true);  		else  			telecomProvider.PlaySound (tsInterface.LineNumber' soundFilename' false);  		LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilename' false);  		break;  	case BaseExternalCommands.CALLBUTLERINTERNAL_PlayGreeting:  		// If the line isn't in use' don't do anything  		if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  			break;  		}  		// Get our current language  		languageID = tsInterface.IMLInterpreter.GetLocalVariable ("LanguageID");  		// Create our greetingID  		Guid greetingID = new Guid (commandData);  		// Get the greeting in our selected language  		WOSI.CallButler.Data.CallButlerDataset.GreetingsRow greeting = dataProvider.GetGreeting (Properties.Settings.Default.CustomerID' greetingID);  		if (greeting != null) {  			// Get the greeting for our specified language  			WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' languageID);  			if (localizedGreeting == null) {  				// If the greeting doesn't exist in the current language' try using the default language  				localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' Properties.Settings.Default.DefaultLanguage);  				if (localizedGreeting == null) {  					// If the greeting doesn't exist in the default language' heck just return the first one that exists  					WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow[] localizedGreetings = greeting.GetLocalizedGreetingsRows ();  					if (localizedGreetings.Length > 0)  						localizedGreeting = localizedGreetings [0];  				}  			}  			if (localizedGreeting != null) {  				// Determine how we should play this greeting  				WOSI.CallButler.Data.GreetingType greetingType = (WOSI.CallButler.Data.GreetingType)localizedGreeting.Type;  				switch (greetingType) {  				case WOSI.CallButler.Data.GreetingType.SoundGreeting:  					// Create our sound file path  					string soundFilePath = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + localizedGreeting.LanguageID + "\\" + greetingID.ToString () + ".snd";  					if (File.Exists (soundFilePath)) {  						telecomProvider.PlaySound (tsInterface.LineNumber' soundFilePath' false);  						LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilePath' false);  					}  					else  						tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  					break;  				case WOSI.CallButler.Data.GreetingType.TextGreeting:  					// Speak our text  					string textToSpeak = tsInterface.IMLInterpreter.ParseVariableTokens (localizedGreeting.Data);  					// Take out any XML  					if (!WOSI.Utilities.StringUtils.IsWellFormedXml (textToSpeak))  						textToSpeak = WOSI.Utilities.StringUtils.XmlEncodeString (textToSpeak);  					if (textToSpeak.Length > 0) {  						if (!localizedGreeting.IsVoiceNull () && localizedGreeting.Voice.Length > 0)  							textToSpeak = "<voice required=\"Name=" + localizedGreeting.Voice + "\">" + textToSpeak + "</voice>";  						else if (Properties.Settings.Default.DefaultTTSVoice != null && Properties.Settings.Default.DefaultTTSVoice.Length > 0)  							textToSpeak = "<voice required=\"Name=" + Properties.Settings.Default.DefaultTTSVoice + "\">" + textToSpeak + "</voice>";  						telecomProvider.SpeakText (tsInterface.LineNumber' textToSpeak);  						LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Speaking '" + textToSpeak + "'"' false);  					}  					else {  						tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  					}  					break;  				}  			}  			else {  				// If no greeting is found in the right language' tell the interpreter to move on  				tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  			}  		}  		// If the greeting isn't found' tell the interpreter to go on  		else {  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		}  		break;  	}  }  else {  	OnExternalCommand (command' commandData' eventToken' tsInterface' telecomProvider' dataProvider);  	if (linkedScriptProcessor != null)  		linkedScriptProcessor.OnLinkedExternalCommand (command' commandData' eventToken' tsInterface' telecomProvider' dataProvider);  }  
Magic Number,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The following statement contains a magic number: if (Enum.IsDefined (typeof(BaseExternalCommands)' command)) {  	BaseExternalCommands externalCommand = WOSI.Utilities.EnumUtils<BaseExternalCommands>.Parse (command);  	string languageID = "en";  	switch (externalCommand) {  	case BaseExternalCommands.CALLBUTLERINTERNAL_StartAddonModule:  		CallButler.Service.Plugin.CallButlerAddonModulePlugin[] addonModules = pluginManager.GetAllPluginsOfType<CallButler.Service.Plugin.CallButlerAddonModulePlugin> ();  		foreach (CallButler.Service.Plugin.CallButlerAddonModulePlugin addonModule in addonModules) {  			if (addonModule.PluginID.ToString () == commandData) {  				try {  					// Make sure the module is licensed  					if (!addonModule.IsLicensed)  						break;  					// We found our module and we should load the script it uses  					tsInterface.ScriptProcessor = new AddonModuleScriptProcessor (addonModule);  					tsInterface.ScriptProcessor.StartProcessing (tsInterface' telecomProvider' dataProvider);  					return;  				}  				catch (Exception e) {  					LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' "Failed to load Addon-Module '" + addonModule.PluginName + "'\r\n\r\n" + e.Message + "\r\n\r\n" + e.StackTrace' true);  				}  			}  		}  		break;  	case BaseExternalCommands.CALLBUTLERINTERNAL_ReturnToCallFlowMainMenu:  		// Return to the Call flow main menu.  		tsInterface.ScriptProcessor = new StandardScriptProcessor (pluginManager' pbxRegistrar);  		((StandardScriptProcessor)tsInterface.ScriptProcessor).StartFromMainMenu (tsInterface);  		break;  	case BaseExternalCommands.CALLBUTLERINTERNAL_PlayLicenseIntroGreeting:  		// If the line isn't in use' don't do anything  		if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  			break;  		}  		// Read our intro sound bytes  		byte[] introSoundBytes = null;  		if (telecomProvider.AudioInputRate == 8000) {  			introSoundBytes = new byte[Properties.Resources.powered_by_8khz.Length];  			Properties.Resources.powered_by_8khz.Read (introSoundBytes' 0' introSoundBytes.Length);  		}  		else if (telecomProvider.AudioInputRate == 16000) {  			introSoundBytes = new byte[Properties.Resources.powered_by_16khz.Length];  			Properties.Resources.powered_by_16khz.Read (introSoundBytes' 0' introSoundBytes.Length);  		}  		// Play our license intro sound  		if (introSoundBytes != null) {  			telecomProvider.PlaySound (tsInterface.LineNumber' introSoundBytes);  		}  		break;  	case BaseExternalCommands.CALLBUTLERINTERNAL_PlaySystemSound:  		// If the line isn't in use' don't do anything  		if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  			break;  		}  		// Get the sound with the current language  		languageID = tsInterface.IMLInterpreter.GetLocalVariable ("LanguageID");  		string soundFilename = GetSoundFileForLanguage (languageID' commandData);  		if (soundFilename == null) {  			// If we don't get a sound with the current language' try the default language  			soundFilename = GetSoundFileForLanguage (Properties.Settings.Default.DefaultLanguage' commandData);  			if (soundFilename == null) {  				// If we don't get a sound file with the default language' try english  				soundFilename = GetSoundFileForLanguage ("en"' commandData);  				if (soundFilename == null) {  					if (!File.Exists (soundFilename)) {  						// If the sound still doesn't exist' tell the IML interpreter to move on  						tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  						break;  					}  				}  			}  		}  		// If we get here' our system sound should exist and we should play it.  		if (string.Compare (commandData' "ring.snd"' true) == 0)  			telecomProvider.PlaySound (tsInterface.LineNumber' soundFilename' true);  		else  			telecomProvider.PlaySound (tsInterface.LineNumber' soundFilename' false);  		LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilename' false);  		break;  	case BaseExternalCommands.CALLBUTLERINTERNAL_PlayGreeting:  		// If the line isn't in use' don't do anything  		if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  			break;  		}  		// Get our current language  		languageID = tsInterface.IMLInterpreter.GetLocalVariable ("LanguageID");  		// Create our greetingID  		Guid greetingID = new Guid (commandData);  		// Get the greeting in our selected language  		WOSI.CallButler.Data.CallButlerDataset.GreetingsRow greeting = dataProvider.GetGreeting (Properties.Settings.Default.CustomerID' greetingID);  		if (greeting != null) {  			// Get the greeting for our specified language  			WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' languageID);  			if (localizedGreeting == null) {  				// If the greeting doesn't exist in the current language' try using the default language  				localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' Properties.Settings.Default.DefaultLanguage);  				if (localizedGreeting == null) {  					// If the greeting doesn't exist in the default language' heck just return the first one that exists  					WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow[] localizedGreetings = greeting.GetLocalizedGreetingsRows ();  					if (localizedGreetings.Length > 0)  						localizedGreeting = localizedGreetings [0];  				}  			}  			if (localizedGreeting != null) {  				// Determine how we should play this greeting  				WOSI.CallButler.Data.GreetingType greetingType = (WOSI.CallButler.Data.GreetingType)localizedGreeting.Type;  				switch (greetingType) {  				case WOSI.CallButler.Data.GreetingType.SoundGreeting:  					// Create our sound file path  					string soundFilePath = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + localizedGreeting.LanguageID + "\\" + greetingID.ToString () + ".snd";  					if (File.Exists (soundFilePath)) {  						telecomProvider.PlaySound (tsInterface.LineNumber' soundFilePath' false);  						LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilePath' false);  					}  					else  						tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  					break;  				case WOSI.CallButler.Data.GreetingType.TextGreeting:  					// Speak our text  					string textToSpeak = tsInterface.IMLInterpreter.ParseVariableTokens (localizedGreeting.Data);  					// Take out any XML  					if (!WOSI.Utilities.StringUtils.IsWellFormedXml (textToSpeak))  						textToSpeak = WOSI.Utilities.StringUtils.XmlEncodeString (textToSpeak);  					if (textToSpeak.Length > 0) {  						if (!localizedGreeting.IsVoiceNull () && localizedGreeting.Voice.Length > 0)  							textToSpeak = "<voice required=\"Name=" + localizedGreeting.Voice + "\">" + textToSpeak + "</voice>";  						else if (Properties.Settings.Default.DefaultTTSVoice != null && Properties.Settings.Default.DefaultTTSVoice.Length > 0)  							textToSpeak = "<voice required=\"Name=" + Properties.Settings.Default.DefaultTTSVoice + "\">" + textToSpeak + "</voice>";  						telecomProvider.SpeakText (tsInterface.LineNumber' textToSpeak);  						LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Speaking '" + textToSpeak + "'"' false);  					}  					else {  						tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  					}  					break;  				}  			}  			else {  				// If no greeting is found in the right language' tell the interpreter to move on  				tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  			}  		}  		// If the greeting isn't found' tell the interpreter to go on  		else {  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		}  		break;  	}  }  else {  	OnExternalCommand (command' commandData' eventToken' tsInterface' telecomProvider' dataProvider);  	if (linkedScriptProcessor != null)  		linkedScriptProcessor.OnLinkedExternalCommand (command' commandData' eventToken' tsInterface' telecomProvider' dataProvider);  }  
Magic Number,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The following statement contains a magic number: switch (externalCommand) {  case BaseExternalCommands.CALLBUTLERINTERNAL_StartAddonModule:  	CallButler.Service.Plugin.CallButlerAddonModulePlugin[] addonModules = pluginManager.GetAllPluginsOfType<CallButler.Service.Plugin.CallButlerAddonModulePlugin> ();  	foreach (CallButler.Service.Plugin.CallButlerAddonModulePlugin addonModule in addonModules) {  		if (addonModule.PluginID.ToString () == commandData) {  			try {  				// Make sure the module is licensed  				if (!addonModule.IsLicensed)  					break;  				// We found our module and we should load the script it uses  				tsInterface.ScriptProcessor = new AddonModuleScriptProcessor (addonModule);  				tsInterface.ScriptProcessor.StartProcessing (tsInterface' telecomProvider' dataProvider);  				return;  			}  			catch (Exception e) {  				LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' "Failed to load Addon-Module '" + addonModule.PluginName + "'\r\n\r\n" + e.Message + "\r\n\r\n" + e.StackTrace' true);  			}  		}  	}  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_ReturnToCallFlowMainMenu:  	// Return to the Call flow main menu.  	tsInterface.ScriptProcessor = new StandardScriptProcessor (pluginManager' pbxRegistrar);  	((StandardScriptProcessor)tsInterface.ScriptProcessor).StartFromMainMenu (tsInterface);  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_PlayLicenseIntroGreeting:  	// If the line isn't in use' don't do anything  	if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		break;  	}  	// Read our intro sound bytes  	byte[] introSoundBytes = null;  	if (telecomProvider.AudioInputRate == 8000) {  		introSoundBytes = new byte[Properties.Resources.powered_by_8khz.Length];  		Properties.Resources.powered_by_8khz.Read (introSoundBytes' 0' introSoundBytes.Length);  	}  	else if (telecomProvider.AudioInputRate == 16000) {  		introSoundBytes = new byte[Properties.Resources.powered_by_16khz.Length];  		Properties.Resources.powered_by_16khz.Read (introSoundBytes' 0' introSoundBytes.Length);  	}  	// Play our license intro sound  	if (introSoundBytes != null) {  		telecomProvider.PlaySound (tsInterface.LineNumber' introSoundBytes);  	}  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_PlaySystemSound:  	// If the line isn't in use' don't do anything  	if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		break;  	}  	// Get the sound with the current language  	languageID = tsInterface.IMLInterpreter.GetLocalVariable ("LanguageID");  	string soundFilename = GetSoundFileForLanguage (languageID' commandData);  	if (soundFilename == null) {  		// If we don't get a sound with the current language' try the default language  		soundFilename = GetSoundFileForLanguage (Properties.Settings.Default.DefaultLanguage' commandData);  		if (soundFilename == null) {  			// If we don't get a sound file with the default language' try english  			soundFilename = GetSoundFileForLanguage ("en"' commandData);  			if (soundFilename == null) {  				if (!File.Exists (soundFilename)) {  					// If the sound still doesn't exist' tell the IML interpreter to move on  					tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  					break;  				}  			}  		}  	}  	// If we get here' our system sound should exist and we should play it.  	if (string.Compare (commandData' "ring.snd"' true) == 0)  		telecomProvider.PlaySound (tsInterface.LineNumber' soundFilename' true);  	else  		telecomProvider.PlaySound (tsInterface.LineNumber' soundFilename' false);  	LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilename' false);  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_PlayGreeting:  	// If the line isn't in use' don't do anything  	if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		break;  	}  	// Get our current language  	languageID = tsInterface.IMLInterpreter.GetLocalVariable ("LanguageID");  	// Create our greetingID  	Guid greetingID = new Guid (commandData);  	// Get the greeting in our selected language  	WOSI.CallButler.Data.CallButlerDataset.GreetingsRow greeting = dataProvider.GetGreeting (Properties.Settings.Default.CustomerID' greetingID);  	if (greeting != null) {  		// Get the greeting for our specified language  		WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' languageID);  		if (localizedGreeting == null) {  			// If the greeting doesn't exist in the current language' try using the default language  			localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' Properties.Settings.Default.DefaultLanguage);  			if (localizedGreeting == null) {  				// If the greeting doesn't exist in the default language' heck just return the first one that exists  				WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow[] localizedGreetings = greeting.GetLocalizedGreetingsRows ();  				if (localizedGreetings.Length > 0)  					localizedGreeting = localizedGreetings [0];  			}  		}  		if (localizedGreeting != null) {  			// Determine how we should play this greeting  			WOSI.CallButler.Data.GreetingType greetingType = (WOSI.CallButler.Data.GreetingType)localizedGreeting.Type;  			switch (greetingType) {  			case WOSI.CallButler.Data.GreetingType.SoundGreeting:  				// Create our sound file path  				string soundFilePath = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + localizedGreeting.LanguageID + "\\" + greetingID.ToString () + ".snd";  				if (File.Exists (soundFilePath)) {  					telecomProvider.PlaySound (tsInterface.LineNumber' soundFilePath' false);  					LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilePath' false);  				}  				else  					tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  				break;  			case WOSI.CallButler.Data.GreetingType.TextGreeting:  				// Speak our text  				string textToSpeak = tsInterface.IMLInterpreter.ParseVariableTokens (localizedGreeting.Data);  				// Take out any XML  				if (!WOSI.Utilities.StringUtils.IsWellFormedXml (textToSpeak))  					textToSpeak = WOSI.Utilities.StringUtils.XmlEncodeString (textToSpeak);  				if (textToSpeak.Length > 0) {  					if (!localizedGreeting.IsVoiceNull () && localizedGreeting.Voice.Length > 0)  						textToSpeak = "<voice required=\"Name=" + localizedGreeting.Voice + "\">" + textToSpeak + "</voice>";  					else if (Properties.Settings.Default.DefaultTTSVoice != null && Properties.Settings.Default.DefaultTTSVoice.Length > 0)  						textToSpeak = "<voice required=\"Name=" + Properties.Settings.Default.DefaultTTSVoice + "\">" + textToSpeak + "</voice>";  					telecomProvider.SpeakText (tsInterface.LineNumber' textToSpeak);  					LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Speaking '" + textToSpeak + "'"' false);  				}  				else {  					tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  				}  				break;  			}  		}  		else {  			// If no greeting is found in the right language' tell the interpreter to move on  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		}  	}  	// If the greeting isn't found' tell the interpreter to go on  	else {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	}  	break;  }  
Magic Number,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The following statement contains a magic number: switch (externalCommand) {  case BaseExternalCommands.CALLBUTLERINTERNAL_StartAddonModule:  	CallButler.Service.Plugin.CallButlerAddonModulePlugin[] addonModules = pluginManager.GetAllPluginsOfType<CallButler.Service.Plugin.CallButlerAddonModulePlugin> ();  	foreach (CallButler.Service.Plugin.CallButlerAddonModulePlugin addonModule in addonModules) {  		if (addonModule.PluginID.ToString () == commandData) {  			try {  				// Make sure the module is licensed  				if (!addonModule.IsLicensed)  					break;  				// We found our module and we should load the script it uses  				tsInterface.ScriptProcessor = new AddonModuleScriptProcessor (addonModule);  				tsInterface.ScriptProcessor.StartProcessing (tsInterface' telecomProvider' dataProvider);  				return;  			}  			catch (Exception e) {  				LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' "Failed to load Addon-Module '" + addonModule.PluginName + "'\r\n\r\n" + e.Message + "\r\n\r\n" + e.StackTrace' true);  			}  		}  	}  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_ReturnToCallFlowMainMenu:  	// Return to the Call flow main menu.  	tsInterface.ScriptProcessor = new StandardScriptProcessor (pluginManager' pbxRegistrar);  	((StandardScriptProcessor)tsInterface.ScriptProcessor).StartFromMainMenu (tsInterface);  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_PlayLicenseIntroGreeting:  	// If the line isn't in use' don't do anything  	if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		break;  	}  	// Read our intro sound bytes  	byte[] introSoundBytes = null;  	if (telecomProvider.AudioInputRate == 8000) {  		introSoundBytes = new byte[Properties.Resources.powered_by_8khz.Length];  		Properties.Resources.powered_by_8khz.Read (introSoundBytes' 0' introSoundBytes.Length);  	}  	else if (telecomProvider.AudioInputRate == 16000) {  		introSoundBytes = new byte[Properties.Resources.powered_by_16khz.Length];  		Properties.Resources.powered_by_16khz.Read (introSoundBytes' 0' introSoundBytes.Length);  	}  	// Play our license intro sound  	if (introSoundBytes != null) {  		telecomProvider.PlaySound (tsInterface.LineNumber' introSoundBytes);  	}  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_PlaySystemSound:  	// If the line isn't in use' don't do anything  	if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		break;  	}  	// Get the sound with the current language  	languageID = tsInterface.IMLInterpreter.GetLocalVariable ("LanguageID");  	string soundFilename = GetSoundFileForLanguage (languageID' commandData);  	if (soundFilename == null) {  		// If we don't get a sound with the current language' try the default language  		soundFilename = GetSoundFileForLanguage (Properties.Settings.Default.DefaultLanguage' commandData);  		if (soundFilename == null) {  			// If we don't get a sound file with the default language' try english  			soundFilename = GetSoundFileForLanguage ("en"' commandData);  			if (soundFilename == null) {  				if (!File.Exists (soundFilename)) {  					// If the sound still doesn't exist' tell the IML interpreter to move on  					tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  					break;  				}  			}  		}  	}  	// If we get here' our system sound should exist and we should play it.  	if (string.Compare (commandData' "ring.snd"' true) == 0)  		telecomProvider.PlaySound (tsInterface.LineNumber' soundFilename' true);  	else  		telecomProvider.PlaySound (tsInterface.LineNumber' soundFilename' false);  	LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilename' false);  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_PlayGreeting:  	// If the line isn't in use' don't do anything  	if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		break;  	}  	// Get our current language  	languageID = tsInterface.IMLInterpreter.GetLocalVariable ("LanguageID");  	// Create our greetingID  	Guid greetingID = new Guid (commandData);  	// Get the greeting in our selected language  	WOSI.CallButler.Data.CallButlerDataset.GreetingsRow greeting = dataProvider.GetGreeting (Properties.Settings.Default.CustomerID' greetingID);  	if (greeting != null) {  		// Get the greeting for our specified language  		WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' languageID);  		if (localizedGreeting == null) {  			// If the greeting doesn't exist in the current language' try using the default language  			localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' Properties.Settings.Default.DefaultLanguage);  			if (localizedGreeting == null) {  				// If the greeting doesn't exist in the default language' heck just return the first one that exists  				WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow[] localizedGreetings = greeting.GetLocalizedGreetingsRows ();  				if (localizedGreetings.Length > 0)  					localizedGreeting = localizedGreetings [0];  			}  		}  		if (localizedGreeting != null) {  			// Determine how we should play this greeting  			WOSI.CallButler.Data.GreetingType greetingType = (WOSI.CallButler.Data.GreetingType)localizedGreeting.Type;  			switch (greetingType) {  			case WOSI.CallButler.Data.GreetingType.SoundGreeting:  				// Create our sound file path  				string soundFilePath = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + localizedGreeting.LanguageID + "\\" + greetingID.ToString () + ".snd";  				if (File.Exists (soundFilePath)) {  					telecomProvider.PlaySound (tsInterface.LineNumber' soundFilePath' false);  					LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilePath' false);  				}  				else  					tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  				break;  			case WOSI.CallButler.Data.GreetingType.TextGreeting:  				// Speak our text  				string textToSpeak = tsInterface.IMLInterpreter.ParseVariableTokens (localizedGreeting.Data);  				// Take out any XML  				if (!WOSI.Utilities.StringUtils.IsWellFormedXml (textToSpeak))  					textToSpeak = WOSI.Utilities.StringUtils.XmlEncodeString (textToSpeak);  				if (textToSpeak.Length > 0) {  					if (!localizedGreeting.IsVoiceNull () && localizedGreeting.Voice.Length > 0)  						textToSpeak = "<voice required=\"Name=" + localizedGreeting.Voice + "\">" + textToSpeak + "</voice>";  					else if (Properties.Settings.Default.DefaultTTSVoice != null && Properties.Settings.Default.DefaultTTSVoice.Length > 0)  						textToSpeak = "<voice required=\"Name=" + Properties.Settings.Default.DefaultTTSVoice + "\">" + textToSpeak + "</voice>";  					telecomProvider.SpeakText (tsInterface.LineNumber' textToSpeak);  					LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Speaking '" + textToSpeak + "'"' false);  				}  				else {  					tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  				}  				break;  			}  		}  		else {  			// If no greeting is found in the right language' tell the interpreter to move on  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		}  	}  	// If the greeting isn't found' tell the interpreter to go on  	else {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	}  	break;  }  
Magic Number,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The following statement contains a magic number: if (telecomProvider.AudioInputRate == 8000) {  	introSoundBytes = new byte[Properties.Resources.powered_by_8khz.Length];  	Properties.Resources.powered_by_8khz.Read (introSoundBytes' 0' introSoundBytes.Length);  }  else if (telecomProvider.AudioInputRate == 16000) {  	introSoundBytes = new byte[Properties.Resources.powered_by_16khz.Length];  	Properties.Resources.powered_by_16khz.Read (introSoundBytes' 0' introSoundBytes.Length);  }  
Magic Number,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The following statement contains a magic number: if (telecomProvider.AudioInputRate == 8000) {  	introSoundBytes = new byte[Properties.Resources.powered_by_8khz.Length];  	Properties.Resources.powered_by_8khz.Read (introSoundBytes' 0' introSoundBytes.Length);  }  else if (telecomProvider.AudioInputRate == 16000) {  	introSoundBytes = new byte[Properties.Resources.powered_by_16khz.Length];  	Properties.Resources.powered_by_16khz.Read (introSoundBytes' 0' introSoundBytes.Length);  }  
Magic Number,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The following statement contains a magic number: if (telecomProvider.AudioInputRate == 16000) {  	introSoundBytes = new byte[Properties.Resources.powered_by_16khz.Length];  	Properties.Resources.powered_by_16khz.Read (introSoundBytes' 0' introSoundBytes.Length);  }  
Magic Number,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,GetExtensions,The following statement contains a magic number: if (Authenticate (authInfo)) {  	int maxExtensions = 100;  	// Licensing.Management.AppPermissions.StatGetPermissionScalar("Extensions");  	if (maxExtensions != 0)  		return (CallButlerDataset.ExtensionsDataTable)TrimRows (dataProvider.GetExtensions (authInfo.CustomerID)' maxExtensions);  	else  		return dataProvider.GetExtensions (authInfo.CustomerID);  }  else  	return null;  
Magic Number,CallButler.Service.Services,ManagementInterfaceService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\ManagementInterfaceService.cs,ConvertAndSaveSoundFile,The following statement contains a magic number: WOSI.Utilities.SoundConversion.SoundConverter.ConvertToWAV (tmpFilePath' filename' telecomProvider.AudioInputRate' 16' false);  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,PBXRegistrarService,The following statement contains a magic number: presenceTimeout = new System.Threading.Timer (new System.Threading.TimerCallback (PresenceTimeoutTimerProc)' this' 0' 30000);  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: try {  	SIPURI addressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue);  	// Make sure the request is authorized  	if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  		int extensionNumber = 0;  		try {  			extensionNumber = Convert.ToInt32 (addressOfRecord.User);  		}  		catch {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return;  		}  		PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  		if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  			HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  			bool containsStar = false;  			foreach (HeaderField contactField in contactFields) {  				if (contactField.FieldValue == "*") {  					containsStar = true;  				}  			}  			if (containsStar) {  				if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			int requestedExpiration = 0;  			if (contactFields [0].ContainsParameter ("Expires"))  				requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  			else if (e.Request.HeaderFields.Contains ("Expires"' null))  				requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  			else  				requestedExpiration = Properties.Settings.Default.PresenceTimeout;  			if (presenceInfo != null) {  				// Check the Call-ID  				string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  				if (callID == presenceInfo.SessionID) {  					// Parse our CSeq  					int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  					if (cSeq < presenceInfo.CSeq) {  						RemovePresenceInfo (presenceInfo);  						ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  						return;  					}  				}  				if (requestedExpiration == 0) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  					return;  				}  			}  			else {  				presenceInfo = new PBXPresenceInfo ();  				isNewRegistration = true;  			}  			presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  			presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  			presenceInfo.ExpiresInSeconds = requestedExpiration;  			presenceInfo.ExtensionNumber = extensionNumber;  			presenceInfo.LastRegistration = DateTime.Now;  			presenceInfo.Name = addressOfRecord.DisplayName;  			presenceInfo.RemoteAddress = e.Request.SentFrom;  			presenceInfo.RemotePort = e.Request.SentFromPort;  			presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			presenceInfo.Status = PBXPresenceStatus.Online;  			if (isNewRegistration) {  				lock (presenceDataLock) {  					presenceData.Add (presenceInfo);  					LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  					UpdateExtensionState (presenceInfo);  				}  			}  		}  		if (presenceInfo != null) {  			SipResponse response = e.Request.CreateResponse (200' "OK");  			response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  			response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  			response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  			ipClient.SendSipResponse (response);  			// Send our message waiting notification  			if (isNewRegistration)  				SendMessageWaitingNotification (extensionNumber);  			PerformanceCounterService.PhonesRegistered = presenceData.Count;  		}  		else {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		}  		return;  	}  }  catch (Exception ex) {  	ipClient.SendSipResponse (e.Request.CreateResponse (500' "Server Error"));  	LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (ex)' true);  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: try {  	SIPURI addressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue);  	// Make sure the request is authorized  	if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  		int extensionNumber = 0;  		try {  			extensionNumber = Convert.ToInt32 (addressOfRecord.User);  		}  		catch {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return;  		}  		PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  		if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  			HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  			bool containsStar = false;  			foreach (HeaderField contactField in contactFields) {  				if (contactField.FieldValue == "*") {  					containsStar = true;  				}  			}  			if (containsStar) {  				if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			int requestedExpiration = 0;  			if (contactFields [0].ContainsParameter ("Expires"))  				requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  			else if (e.Request.HeaderFields.Contains ("Expires"' null))  				requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  			else  				requestedExpiration = Properties.Settings.Default.PresenceTimeout;  			if (presenceInfo != null) {  				// Check the Call-ID  				string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  				if (callID == presenceInfo.SessionID) {  					// Parse our CSeq  					int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  					if (cSeq < presenceInfo.CSeq) {  						RemovePresenceInfo (presenceInfo);  						ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  						return;  					}  				}  				if (requestedExpiration == 0) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  					return;  				}  			}  			else {  				presenceInfo = new PBXPresenceInfo ();  				isNewRegistration = true;  			}  			presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  			presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  			presenceInfo.ExpiresInSeconds = requestedExpiration;  			presenceInfo.ExtensionNumber = extensionNumber;  			presenceInfo.LastRegistration = DateTime.Now;  			presenceInfo.Name = addressOfRecord.DisplayName;  			presenceInfo.RemoteAddress = e.Request.SentFrom;  			presenceInfo.RemotePort = e.Request.SentFromPort;  			presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			presenceInfo.Status = PBXPresenceStatus.Online;  			if (isNewRegistration) {  				lock (presenceDataLock) {  					presenceData.Add (presenceInfo);  					LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  					UpdateExtensionState (presenceInfo);  				}  			}  		}  		if (presenceInfo != null) {  			SipResponse response = e.Request.CreateResponse (200' "OK");  			response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  			response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  			response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  			ipClient.SendSipResponse (response);  			// Send our message waiting notification  			if (isNewRegistration)  				SendMessageWaitingNotification (extensionNumber);  			PerformanceCounterService.PhonesRegistered = presenceData.Count;  		}  		else {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		}  		return;  	}  }  catch (Exception ex) {  	ipClient.SendSipResponse (e.Request.CreateResponse (500' "Server Error"));  	LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (ex)' true);  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: try {  	SIPURI addressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue);  	// Make sure the request is authorized  	if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  		int extensionNumber = 0;  		try {  			extensionNumber = Convert.ToInt32 (addressOfRecord.User);  		}  		catch {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return;  		}  		PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  		if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  			HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  			bool containsStar = false;  			foreach (HeaderField contactField in contactFields) {  				if (contactField.FieldValue == "*") {  					containsStar = true;  				}  			}  			if (containsStar) {  				if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			int requestedExpiration = 0;  			if (contactFields [0].ContainsParameter ("Expires"))  				requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  			else if (e.Request.HeaderFields.Contains ("Expires"' null))  				requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  			else  				requestedExpiration = Properties.Settings.Default.PresenceTimeout;  			if (presenceInfo != null) {  				// Check the Call-ID  				string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  				if (callID == presenceInfo.SessionID) {  					// Parse our CSeq  					int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  					if (cSeq < presenceInfo.CSeq) {  						RemovePresenceInfo (presenceInfo);  						ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  						return;  					}  				}  				if (requestedExpiration == 0) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  					return;  				}  			}  			else {  				presenceInfo = new PBXPresenceInfo ();  				isNewRegistration = true;  			}  			presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  			presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  			presenceInfo.ExpiresInSeconds = requestedExpiration;  			presenceInfo.ExtensionNumber = extensionNumber;  			presenceInfo.LastRegistration = DateTime.Now;  			presenceInfo.Name = addressOfRecord.DisplayName;  			presenceInfo.RemoteAddress = e.Request.SentFrom;  			presenceInfo.RemotePort = e.Request.SentFromPort;  			presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			presenceInfo.Status = PBXPresenceStatus.Online;  			if (isNewRegistration) {  				lock (presenceDataLock) {  					presenceData.Add (presenceInfo);  					LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  					UpdateExtensionState (presenceInfo);  				}  			}  		}  		if (presenceInfo != null) {  			SipResponse response = e.Request.CreateResponse (200' "OK");  			response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  			response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  			response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  			ipClient.SendSipResponse (response);  			// Send our message waiting notification  			if (isNewRegistration)  				SendMessageWaitingNotification (extensionNumber);  			PerformanceCounterService.PhonesRegistered = presenceData.Count;  		}  		else {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		}  		return;  	}  }  catch (Exception ex) {  	ipClient.SendSipResponse (e.Request.CreateResponse (500' "Server Error"));  	LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (ex)' true);  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: try {  	SIPURI addressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue);  	// Make sure the request is authorized  	if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  		int extensionNumber = 0;  		try {  			extensionNumber = Convert.ToInt32 (addressOfRecord.User);  		}  		catch {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return;  		}  		PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  		if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  			HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  			bool containsStar = false;  			foreach (HeaderField contactField in contactFields) {  				if (contactField.FieldValue == "*") {  					containsStar = true;  				}  			}  			if (containsStar) {  				if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			int requestedExpiration = 0;  			if (contactFields [0].ContainsParameter ("Expires"))  				requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  			else if (e.Request.HeaderFields.Contains ("Expires"' null))  				requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  			else  				requestedExpiration = Properties.Settings.Default.PresenceTimeout;  			if (presenceInfo != null) {  				// Check the Call-ID  				string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  				if (callID == presenceInfo.SessionID) {  					// Parse our CSeq  					int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  					if (cSeq < presenceInfo.CSeq) {  						RemovePresenceInfo (presenceInfo);  						ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  						return;  					}  				}  				if (requestedExpiration == 0) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  					return;  				}  			}  			else {  				presenceInfo = new PBXPresenceInfo ();  				isNewRegistration = true;  			}  			presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  			presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  			presenceInfo.ExpiresInSeconds = requestedExpiration;  			presenceInfo.ExtensionNumber = extensionNumber;  			presenceInfo.LastRegistration = DateTime.Now;  			presenceInfo.Name = addressOfRecord.DisplayName;  			presenceInfo.RemoteAddress = e.Request.SentFrom;  			presenceInfo.RemotePort = e.Request.SentFromPort;  			presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			presenceInfo.Status = PBXPresenceStatus.Online;  			if (isNewRegistration) {  				lock (presenceDataLock) {  					presenceData.Add (presenceInfo);  					LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  					UpdateExtensionState (presenceInfo);  				}  			}  		}  		if (presenceInfo != null) {  			SipResponse response = e.Request.CreateResponse (200' "OK");  			response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  			response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  			response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  			ipClient.SendSipResponse (response);  			// Send our message waiting notification  			if (isNewRegistration)  				SendMessageWaitingNotification (extensionNumber);  			PerformanceCounterService.PhonesRegistered = presenceData.Count;  		}  		else {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		}  		return;  	}  }  catch (Exception ex) {  	ipClient.SendSipResponse (e.Request.CreateResponse (500' "Server Error"));  	LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (ex)' true);  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: try {  	SIPURI addressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue);  	// Make sure the request is authorized  	if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  		int extensionNumber = 0;  		try {  			extensionNumber = Convert.ToInt32 (addressOfRecord.User);  		}  		catch {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return;  		}  		PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  		if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  			HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  			bool containsStar = false;  			foreach (HeaderField contactField in contactFields) {  				if (contactField.FieldValue == "*") {  					containsStar = true;  				}  			}  			if (containsStar) {  				if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			int requestedExpiration = 0;  			if (contactFields [0].ContainsParameter ("Expires"))  				requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  			else if (e.Request.HeaderFields.Contains ("Expires"' null))  				requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  			else  				requestedExpiration = Properties.Settings.Default.PresenceTimeout;  			if (presenceInfo != null) {  				// Check the Call-ID  				string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  				if (callID == presenceInfo.SessionID) {  					// Parse our CSeq  					int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  					if (cSeq < presenceInfo.CSeq) {  						RemovePresenceInfo (presenceInfo);  						ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  						return;  					}  				}  				if (requestedExpiration == 0) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  					return;  				}  			}  			else {  				presenceInfo = new PBXPresenceInfo ();  				isNewRegistration = true;  			}  			presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  			presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  			presenceInfo.ExpiresInSeconds = requestedExpiration;  			presenceInfo.ExtensionNumber = extensionNumber;  			presenceInfo.LastRegistration = DateTime.Now;  			presenceInfo.Name = addressOfRecord.DisplayName;  			presenceInfo.RemoteAddress = e.Request.SentFrom;  			presenceInfo.RemotePort = e.Request.SentFromPort;  			presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			presenceInfo.Status = PBXPresenceStatus.Online;  			if (isNewRegistration) {  				lock (presenceDataLock) {  					presenceData.Add (presenceInfo);  					LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  					UpdateExtensionState (presenceInfo);  				}  			}  		}  		if (presenceInfo != null) {  			SipResponse response = e.Request.CreateResponse (200' "OK");  			response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  			response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  			response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  			ipClient.SendSipResponse (response);  			// Send our message waiting notification  			if (isNewRegistration)  				SendMessageWaitingNotification (extensionNumber);  			PerformanceCounterService.PhonesRegistered = presenceData.Count;  		}  		else {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		}  		return;  	}  }  catch (Exception ex) {  	ipClient.SendSipResponse (e.Request.CreateResponse (500' "Server Error"));  	LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (ex)' true);  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: try {  	SIPURI addressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue);  	// Make sure the request is authorized  	if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  		int extensionNumber = 0;  		try {  			extensionNumber = Convert.ToInt32 (addressOfRecord.User);  		}  		catch {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return;  		}  		PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  		if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  			HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  			bool containsStar = false;  			foreach (HeaderField contactField in contactFields) {  				if (contactField.FieldValue == "*") {  					containsStar = true;  				}  			}  			if (containsStar) {  				if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			int requestedExpiration = 0;  			if (contactFields [0].ContainsParameter ("Expires"))  				requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  			else if (e.Request.HeaderFields.Contains ("Expires"' null))  				requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  			else  				requestedExpiration = Properties.Settings.Default.PresenceTimeout;  			if (presenceInfo != null) {  				// Check the Call-ID  				string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  				if (callID == presenceInfo.SessionID) {  					// Parse our CSeq  					int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  					if (cSeq < presenceInfo.CSeq) {  						RemovePresenceInfo (presenceInfo);  						ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  						return;  					}  				}  				if (requestedExpiration == 0) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  					return;  				}  			}  			else {  				presenceInfo = new PBXPresenceInfo ();  				isNewRegistration = true;  			}  			presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  			presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  			presenceInfo.ExpiresInSeconds = requestedExpiration;  			presenceInfo.ExtensionNumber = extensionNumber;  			presenceInfo.LastRegistration = DateTime.Now;  			presenceInfo.Name = addressOfRecord.DisplayName;  			presenceInfo.RemoteAddress = e.Request.SentFrom;  			presenceInfo.RemotePort = e.Request.SentFromPort;  			presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			presenceInfo.Status = PBXPresenceStatus.Online;  			if (isNewRegistration) {  				lock (presenceDataLock) {  					presenceData.Add (presenceInfo);  					LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  					UpdateExtensionState (presenceInfo);  				}  			}  		}  		if (presenceInfo != null) {  			SipResponse response = e.Request.CreateResponse (200' "OK");  			response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  			response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  			response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  			ipClient.SendSipResponse (response);  			// Send our message waiting notification  			if (isNewRegistration)  				SendMessageWaitingNotification (extensionNumber);  			PerformanceCounterService.PhonesRegistered = presenceData.Count;  		}  		else {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		}  		return;  	}  }  catch (Exception ex) {  	ipClient.SendSipResponse (e.Request.CreateResponse (500' "Server Error"));  	LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (ex)' true);  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: try {  	SIPURI addressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue);  	// Make sure the request is authorized  	if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  		int extensionNumber = 0;  		try {  			extensionNumber = Convert.ToInt32 (addressOfRecord.User);  		}  		catch {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return;  		}  		PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  		if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  			HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  			bool containsStar = false;  			foreach (HeaderField contactField in contactFields) {  				if (contactField.FieldValue == "*") {  					containsStar = true;  				}  			}  			if (containsStar) {  				if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			int requestedExpiration = 0;  			if (contactFields [0].ContainsParameter ("Expires"))  				requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  			else if (e.Request.HeaderFields.Contains ("Expires"' null))  				requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  			else  				requestedExpiration = Properties.Settings.Default.PresenceTimeout;  			if (presenceInfo != null) {  				// Check the Call-ID  				string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  				if (callID == presenceInfo.SessionID) {  					// Parse our CSeq  					int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  					if (cSeq < presenceInfo.CSeq) {  						RemovePresenceInfo (presenceInfo);  						ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  						return;  					}  				}  				if (requestedExpiration == 0) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  					return;  				}  			}  			else {  				presenceInfo = new PBXPresenceInfo ();  				isNewRegistration = true;  			}  			presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  			presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  			presenceInfo.ExpiresInSeconds = requestedExpiration;  			presenceInfo.ExtensionNumber = extensionNumber;  			presenceInfo.LastRegistration = DateTime.Now;  			presenceInfo.Name = addressOfRecord.DisplayName;  			presenceInfo.RemoteAddress = e.Request.SentFrom;  			presenceInfo.RemotePort = e.Request.SentFromPort;  			presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			presenceInfo.Status = PBXPresenceStatus.Online;  			if (isNewRegistration) {  				lock (presenceDataLock) {  					presenceData.Add (presenceInfo);  					LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  					UpdateExtensionState (presenceInfo);  				}  			}  		}  		if (presenceInfo != null) {  			SipResponse response = e.Request.CreateResponse (200' "OK");  			response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  			response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  			response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  			ipClient.SendSipResponse (response);  			// Send our message waiting notification  			if (isNewRegistration)  				SendMessageWaitingNotification (extensionNumber);  			PerformanceCounterService.PhonesRegistered = presenceData.Count;  		}  		else {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		}  		return;  	}  }  catch (Exception ex) {  	ipClient.SendSipResponse (e.Request.CreateResponse (500' "Server Error"));  	LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' Utils.ErrorUtils.FormatErrorString (ex)' true);  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  	int extensionNumber = 0;  	try {  		extensionNumber = Convert.ToInt32 (addressOfRecord.User);  	}  	catch {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return;  	}  	PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  	if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  		HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  		bool containsStar = false;  		foreach (HeaderField contactField in contactFields) {  			if (contactField.FieldValue == "*") {  				containsStar = true;  			}  		}  		if (containsStar) {  			if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  				ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  				return;  			}  		}  		int requestedExpiration = 0;  		if (contactFields [0].ContainsParameter ("Expires"))  			requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  		else if (e.Request.HeaderFields.Contains ("Expires"' null))  			requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  		else  			requestedExpiration = Properties.Settings.Default.PresenceTimeout;  		if (presenceInfo != null) {  			// Check the Call-ID  			string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			if (callID == presenceInfo.SessionID) {  				// Parse our CSeq  				int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  				if (cSeq < presenceInfo.CSeq) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			if (requestedExpiration == 0) {  				RemovePresenceInfo (presenceInfo);  				ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  				return;  			}  		}  		else {  			presenceInfo = new PBXPresenceInfo ();  			isNewRegistration = true;  		}  		presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  		presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  		presenceInfo.ExpiresInSeconds = requestedExpiration;  		presenceInfo.ExtensionNumber = extensionNumber;  		presenceInfo.LastRegistration = DateTime.Now;  		presenceInfo.Name = addressOfRecord.DisplayName;  		presenceInfo.RemoteAddress = e.Request.SentFrom;  		presenceInfo.RemotePort = e.Request.SentFromPort;  		presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  		presenceInfo.Status = PBXPresenceStatus.Online;  		if (isNewRegistration) {  			lock (presenceDataLock) {  				presenceData.Add (presenceInfo);  				LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  				UpdateExtensionState (presenceInfo);  			}  		}  	}  	if (presenceInfo != null) {  		SipResponse response = e.Request.CreateResponse (200' "OK");  		response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  		response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  		response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  		ipClient.SendSipResponse (response);  		// Send our message waiting notification  		if (isNewRegistration)  			SendMessageWaitingNotification (extensionNumber);  		PerformanceCounterService.PhonesRegistered = presenceData.Count;  	}  	else {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  	}  	return;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  	int extensionNumber = 0;  	try {  		extensionNumber = Convert.ToInt32 (addressOfRecord.User);  	}  	catch {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return;  	}  	PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  	if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  		HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  		bool containsStar = false;  		foreach (HeaderField contactField in contactFields) {  			if (contactField.FieldValue == "*") {  				containsStar = true;  			}  		}  		if (containsStar) {  			if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  				ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  				return;  			}  		}  		int requestedExpiration = 0;  		if (contactFields [0].ContainsParameter ("Expires"))  			requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  		else if (e.Request.HeaderFields.Contains ("Expires"' null))  			requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  		else  			requestedExpiration = Properties.Settings.Default.PresenceTimeout;  		if (presenceInfo != null) {  			// Check the Call-ID  			string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			if (callID == presenceInfo.SessionID) {  				// Parse our CSeq  				int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  				if (cSeq < presenceInfo.CSeq) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			if (requestedExpiration == 0) {  				RemovePresenceInfo (presenceInfo);  				ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  				return;  			}  		}  		else {  			presenceInfo = new PBXPresenceInfo ();  			isNewRegistration = true;  		}  		presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  		presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  		presenceInfo.ExpiresInSeconds = requestedExpiration;  		presenceInfo.ExtensionNumber = extensionNumber;  		presenceInfo.LastRegistration = DateTime.Now;  		presenceInfo.Name = addressOfRecord.DisplayName;  		presenceInfo.RemoteAddress = e.Request.SentFrom;  		presenceInfo.RemotePort = e.Request.SentFromPort;  		presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  		presenceInfo.Status = PBXPresenceStatus.Online;  		if (isNewRegistration) {  			lock (presenceDataLock) {  				presenceData.Add (presenceInfo);  				LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  				UpdateExtensionState (presenceInfo);  			}  		}  	}  	if (presenceInfo != null) {  		SipResponse response = e.Request.CreateResponse (200' "OK");  		response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  		response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  		response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  		ipClient.SendSipResponse (response);  		// Send our message waiting notification  		if (isNewRegistration)  			SendMessageWaitingNotification (extensionNumber);  		PerformanceCounterService.PhonesRegistered = presenceData.Count;  	}  	else {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  	}  	return;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  	int extensionNumber = 0;  	try {  		extensionNumber = Convert.ToInt32 (addressOfRecord.User);  	}  	catch {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return;  	}  	PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  	if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  		HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  		bool containsStar = false;  		foreach (HeaderField contactField in contactFields) {  			if (contactField.FieldValue == "*") {  				containsStar = true;  			}  		}  		if (containsStar) {  			if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  				ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  				return;  			}  		}  		int requestedExpiration = 0;  		if (contactFields [0].ContainsParameter ("Expires"))  			requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  		else if (e.Request.HeaderFields.Contains ("Expires"' null))  			requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  		else  			requestedExpiration = Properties.Settings.Default.PresenceTimeout;  		if (presenceInfo != null) {  			// Check the Call-ID  			string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			if (callID == presenceInfo.SessionID) {  				// Parse our CSeq  				int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  				if (cSeq < presenceInfo.CSeq) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			if (requestedExpiration == 0) {  				RemovePresenceInfo (presenceInfo);  				ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  				return;  			}  		}  		else {  			presenceInfo = new PBXPresenceInfo ();  			isNewRegistration = true;  		}  		presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  		presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  		presenceInfo.ExpiresInSeconds = requestedExpiration;  		presenceInfo.ExtensionNumber = extensionNumber;  		presenceInfo.LastRegistration = DateTime.Now;  		presenceInfo.Name = addressOfRecord.DisplayName;  		presenceInfo.RemoteAddress = e.Request.SentFrom;  		presenceInfo.RemotePort = e.Request.SentFromPort;  		presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  		presenceInfo.Status = PBXPresenceStatus.Online;  		if (isNewRegistration) {  			lock (presenceDataLock) {  				presenceData.Add (presenceInfo);  				LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  				UpdateExtensionState (presenceInfo);  			}  		}  	}  	if (presenceInfo != null) {  		SipResponse response = e.Request.CreateResponse (200' "OK");  		response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  		response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  		response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  		ipClient.SendSipResponse (response);  		// Send our message waiting notification  		if (isNewRegistration)  			SendMessageWaitingNotification (extensionNumber);  		PerformanceCounterService.PhonesRegistered = presenceData.Count;  	}  	else {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  	}  	return;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  	int extensionNumber = 0;  	try {  		extensionNumber = Convert.ToInt32 (addressOfRecord.User);  	}  	catch {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return;  	}  	PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  	if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  		HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  		bool containsStar = false;  		foreach (HeaderField contactField in contactFields) {  			if (contactField.FieldValue == "*") {  				containsStar = true;  			}  		}  		if (containsStar) {  			if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  				ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  				return;  			}  		}  		int requestedExpiration = 0;  		if (contactFields [0].ContainsParameter ("Expires"))  			requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  		else if (e.Request.HeaderFields.Contains ("Expires"' null))  			requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  		else  			requestedExpiration = Properties.Settings.Default.PresenceTimeout;  		if (presenceInfo != null) {  			// Check the Call-ID  			string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			if (callID == presenceInfo.SessionID) {  				// Parse our CSeq  				int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  				if (cSeq < presenceInfo.CSeq) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			if (requestedExpiration == 0) {  				RemovePresenceInfo (presenceInfo);  				ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  				return;  			}  		}  		else {  			presenceInfo = new PBXPresenceInfo ();  			isNewRegistration = true;  		}  		presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  		presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  		presenceInfo.ExpiresInSeconds = requestedExpiration;  		presenceInfo.ExtensionNumber = extensionNumber;  		presenceInfo.LastRegistration = DateTime.Now;  		presenceInfo.Name = addressOfRecord.DisplayName;  		presenceInfo.RemoteAddress = e.Request.SentFrom;  		presenceInfo.RemotePort = e.Request.SentFromPort;  		presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  		presenceInfo.Status = PBXPresenceStatus.Online;  		if (isNewRegistration) {  			lock (presenceDataLock) {  				presenceData.Add (presenceInfo);  				LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  				UpdateExtensionState (presenceInfo);  			}  		}  	}  	if (presenceInfo != null) {  		SipResponse response = e.Request.CreateResponse (200' "OK");  		response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  		response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  		response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  		ipClient.SendSipResponse (response);  		// Send our message waiting notification  		if (isNewRegistration)  			SendMessageWaitingNotification (extensionNumber);  		PerformanceCounterService.PhonesRegistered = presenceData.Count;  	}  	else {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  	}  	return;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  	int extensionNumber = 0;  	try {  		extensionNumber = Convert.ToInt32 (addressOfRecord.User);  	}  	catch {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return;  	}  	PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  	if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  		HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  		bool containsStar = false;  		foreach (HeaderField contactField in contactFields) {  			if (contactField.FieldValue == "*") {  				containsStar = true;  			}  		}  		if (containsStar) {  			if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  				ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  				return;  			}  		}  		int requestedExpiration = 0;  		if (contactFields [0].ContainsParameter ("Expires"))  			requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  		else if (e.Request.HeaderFields.Contains ("Expires"' null))  			requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  		else  			requestedExpiration = Properties.Settings.Default.PresenceTimeout;  		if (presenceInfo != null) {  			// Check the Call-ID  			string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			if (callID == presenceInfo.SessionID) {  				// Parse our CSeq  				int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  				if (cSeq < presenceInfo.CSeq) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			if (requestedExpiration == 0) {  				RemovePresenceInfo (presenceInfo);  				ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  				return;  			}  		}  		else {  			presenceInfo = new PBXPresenceInfo ();  			isNewRegistration = true;  		}  		presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  		presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  		presenceInfo.ExpiresInSeconds = requestedExpiration;  		presenceInfo.ExtensionNumber = extensionNumber;  		presenceInfo.LastRegistration = DateTime.Now;  		presenceInfo.Name = addressOfRecord.DisplayName;  		presenceInfo.RemoteAddress = e.Request.SentFrom;  		presenceInfo.RemotePort = e.Request.SentFromPort;  		presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  		presenceInfo.Status = PBXPresenceStatus.Online;  		if (isNewRegistration) {  			lock (presenceDataLock) {  				presenceData.Add (presenceInfo);  				LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  				UpdateExtensionState (presenceInfo);  			}  		}  	}  	if (presenceInfo != null) {  		SipResponse response = e.Request.CreateResponse (200' "OK");  		response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  		response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  		response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  		ipClient.SendSipResponse (response);  		// Send our message waiting notification  		if (isNewRegistration)  			SendMessageWaitingNotification (extensionNumber);  		PerformanceCounterService.PhonesRegistered = presenceData.Count;  	}  	else {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  	}  	return;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (ProcessRequestAuthorization (e' addressOfRecord' false)) {  	int extensionNumber = 0;  	try {  		extensionNumber = Convert.ToInt32 (addressOfRecord.User);  	}  	catch {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return;  	}  	PBXPresenceInfo presenceInfo = FindPresenceInfo (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true);  	if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  		HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  		bool containsStar = false;  		foreach (HeaderField contactField in contactFields) {  			if (contactField.FieldValue == "*") {  				containsStar = true;  			}  		}  		if (containsStar) {  			if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  				ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  				return;  			}  		}  		int requestedExpiration = 0;  		if (contactFields [0].ContainsParameter ("Expires"))  			requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  		else if (e.Request.HeaderFields.Contains ("Expires"' null))  			requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  		else  			requestedExpiration = Properties.Settings.Default.PresenceTimeout;  		if (presenceInfo != null) {  			// Check the Call-ID  			string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  			if (callID == presenceInfo.SessionID) {  				// Parse our CSeq  				int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  				if (cSeq < presenceInfo.CSeq) {  					RemovePresenceInfo (presenceInfo);  					ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  					return;  				}  			}  			if (requestedExpiration == 0) {  				RemovePresenceInfo (presenceInfo);  				ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  				return;  			}  		}  		else {  			presenceInfo = new PBXPresenceInfo ();  			isNewRegistration = true;  		}  		presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  		presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  		presenceInfo.ExpiresInSeconds = requestedExpiration;  		presenceInfo.ExtensionNumber = extensionNumber;  		presenceInfo.LastRegistration = DateTime.Now;  		presenceInfo.Name = addressOfRecord.DisplayName;  		presenceInfo.RemoteAddress = e.Request.SentFrom;  		presenceInfo.RemotePort = e.Request.SentFromPort;  		presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  		presenceInfo.Status = PBXPresenceStatus.Online;  		if (isNewRegistration) {  			lock (presenceDataLock) {  				presenceData.Add (presenceInfo);  				LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  				UpdateExtensionState (presenceInfo);  			}  		}  	}  	if (presenceInfo != null) {  		SipResponse response = e.Request.CreateResponse (200' "OK");  		response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  		response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  		response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  		ipClient.SendSipResponse (response);  		// Send our message waiting notification  		if (isNewRegistration)  			SendMessageWaitingNotification (extensionNumber);  		PerformanceCounterService.PhonesRegistered = presenceData.Count;  	}  	else {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  	}  	return;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: try {  	extensionNumber = Convert.ToInt32 (addressOfRecord.User);  }  catch {  	ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  	return;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  	HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  	bool containsStar = false;  	foreach (HeaderField contactField in contactFields) {  		if (contactField.FieldValue == "*") {  			containsStar = true;  		}  	}  	if (containsStar) {  		if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  			ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  			return;  		}  	}  	int requestedExpiration = 0;  	if (contactFields [0].ContainsParameter ("Expires"))  		requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  	else if (e.Request.HeaderFields.Contains ("Expires"' null))  		requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  	else  		requestedExpiration = Properties.Settings.Default.PresenceTimeout;  	if (presenceInfo != null) {  		// Check the Call-ID  		string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  		if (callID == presenceInfo.SessionID) {  			// Parse our CSeq  			int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  			if (cSeq < presenceInfo.CSeq) {  				RemovePresenceInfo (presenceInfo);  				ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  				return;  			}  		}  		if (requestedExpiration == 0) {  			RemovePresenceInfo (presenceInfo);  			ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  			return;  		}  	}  	else {  		presenceInfo = new PBXPresenceInfo ();  		isNewRegistration = true;  	}  	presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  	presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  	presenceInfo.ExpiresInSeconds = requestedExpiration;  	presenceInfo.ExtensionNumber = extensionNumber;  	presenceInfo.LastRegistration = DateTime.Now;  	presenceInfo.Name = addressOfRecord.DisplayName;  	presenceInfo.RemoteAddress = e.Request.SentFrom;  	presenceInfo.RemotePort = e.Request.SentFromPort;  	presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  	presenceInfo.Status = PBXPresenceStatus.Online;  	if (isNewRegistration) {  		lock (presenceDataLock) {  			presenceData.Add (presenceInfo);  			LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  			UpdateExtensionState (presenceInfo);  		}  	}  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  	HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  	bool containsStar = false;  	foreach (HeaderField contactField in contactFields) {  		if (contactField.FieldValue == "*") {  			containsStar = true;  		}  	}  	if (containsStar) {  		if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  			ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  			return;  		}  	}  	int requestedExpiration = 0;  	if (contactFields [0].ContainsParameter ("Expires"))  		requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  	else if (e.Request.HeaderFields.Contains ("Expires"' null))  		requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  	else  		requestedExpiration = Properties.Settings.Default.PresenceTimeout;  	if (presenceInfo != null) {  		// Check the Call-ID  		string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  		if (callID == presenceInfo.SessionID) {  			// Parse our CSeq  			int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  			if (cSeq < presenceInfo.CSeq) {  				RemovePresenceInfo (presenceInfo);  				ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  				return;  			}  		}  		if (requestedExpiration == 0) {  			RemovePresenceInfo (presenceInfo);  			ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  			return;  		}  	}  	else {  		presenceInfo = new PBXPresenceInfo ();  		isNewRegistration = true;  	}  	presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  	presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  	presenceInfo.ExpiresInSeconds = requestedExpiration;  	presenceInfo.ExtensionNumber = extensionNumber;  	presenceInfo.LastRegistration = DateTime.Now;  	presenceInfo.Name = addressOfRecord.DisplayName;  	presenceInfo.RemoteAddress = e.Request.SentFrom;  	presenceInfo.RemotePort = e.Request.SentFromPort;  	presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  	presenceInfo.Status = PBXPresenceStatus.Online;  	if (isNewRegistration) {  		lock (presenceDataLock) {  			presenceData.Add (presenceInfo);  			LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  			UpdateExtensionState (presenceInfo);  		}  	}  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (e.Request.HeaderFields.Contains ("Contact"' "m")) {  	HeaderField[] contactFields = e.Request.HeaderFields.GetMultiHeaderFields ("Contact"' "m");  	bool containsStar = false;  	foreach (HeaderField contactField in contactFields) {  		if (contactField.FieldValue == "*") {  			containsStar = true;  		}  	}  	if (containsStar) {  		if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  			ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  			return;  		}  	}  	int requestedExpiration = 0;  	if (contactFields [0].ContainsParameter ("Expires"))  		requestedExpiration = Convert.ToInt32 (contactFields [0].Parameters ["Expires"]);  	else if (e.Request.HeaderFields.Contains ("Expires"' null))  		requestedExpiration = Convert.ToInt32 (e.Request.HeaderFields ["Expires"' null].FieldValue);  	else  		requestedExpiration = Properties.Settings.Default.PresenceTimeout;  	if (presenceInfo != null) {  		// Check the Call-ID  		string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  		if (callID == presenceInfo.SessionID) {  			// Parse our CSeq  			int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  			if (cSeq < presenceInfo.CSeq) {  				RemovePresenceInfo (presenceInfo);  				ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  				return;  			}  		}  		if (requestedExpiration == 0) {  			RemovePresenceInfo (presenceInfo);  			ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  			return;  		}  	}  	else {  		presenceInfo = new PBXPresenceInfo ();  		isNewRegistration = true;  	}  	presenceInfo.AddressOfRecord = new SIPURI (e.Request.HeaderFields ["To"' "t"].FieldValue).BasicURIStringWithoutParameters;  	presenceInfo.CSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  	presenceInfo.ExpiresInSeconds = requestedExpiration;  	presenceInfo.ExtensionNumber = extensionNumber;  	presenceInfo.LastRegistration = DateTime.Now;  	presenceInfo.Name = addressOfRecord.DisplayName;  	presenceInfo.RemoteAddress = e.Request.SentFrom;  	presenceInfo.RemotePort = e.Request.SentFromPort;  	presenceInfo.SessionID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  	presenceInfo.Status = PBXPresenceStatus.Online;  	if (isNewRegistration) {  		lock (presenceDataLock) {  			presenceData.Add (presenceInfo);  			LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.Extended' "Extension " + presenceInfo.ExtensionNumber + " registered for " + presenceInfo.RemoteAddress' false);  			UpdateExtensionState (presenceInfo);  		}  	}  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (containsStar) {  	if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  		ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  		return;  	}  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (contactFields.Length > 1 || !e.Request.HeaderFields.Contains ("Expires"' null) || e.Request.HeaderFields ["Expires"' null].FieldValue.Trim () != "0") {  	ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  	return;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (presenceInfo != null) {  	// Check the Call-ID  	string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  	if (callID == presenceInfo.SessionID) {  		// Parse our CSeq  		int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  		if (cSeq < presenceInfo.CSeq) {  			RemovePresenceInfo (presenceInfo);  			ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  			return;  		}  	}  	if (requestedExpiration == 0) {  		RemovePresenceInfo (presenceInfo);  		ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  		return;  	}  }  else {  	presenceInfo = new PBXPresenceInfo ();  	isNewRegistration = true;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (presenceInfo != null) {  	// Check the Call-ID  	string callID = e.Request.HeaderFields ["Call-ID"' "i"].FieldValue;  	if (callID == presenceInfo.SessionID) {  		// Parse our CSeq  		int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  		if (cSeq < presenceInfo.CSeq) {  			RemovePresenceInfo (presenceInfo);  			ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  			return;  		}  	}  	if (requestedExpiration == 0) {  		RemovePresenceInfo (presenceInfo);  		ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  		return;  	}  }  else {  	presenceInfo = new PBXPresenceInfo ();  	isNewRegistration = true;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (callID == presenceInfo.SessionID) {  	// Parse our CSeq  	int cSeq = Convert.ToInt32 (e.Request.HeaderFields ["CSeq"' null].FieldValue.Split (' ') [0]);  	if (cSeq < presenceInfo.CSeq) {  		RemovePresenceInfo (presenceInfo);  		ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  		return;  	}  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (cSeq < presenceInfo.CSeq) {  	RemovePresenceInfo (presenceInfo);  	ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  	return;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: ipClient.SendSipResponse (e.Request.CreateResponse (400' "Invalid Request"));  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (requestedExpiration == 0) {  	RemovePresenceInfo (presenceInfo);  	ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  	return;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: ipClient.SendSipResponse (e.Request.CreateResponse (200' "OK"));  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (presenceInfo != null) {  	SipResponse response = e.Request.CreateResponse (200' "OK");  	response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  	response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  	response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  	ipClient.SendSipResponse (response);  	// Send our message waiting notification  	if (isNewRegistration)  		SendMessageWaitingNotification (extensionNumber);  	PerformanceCounterService.PhonesRegistered = presenceData.Count;  }  else {  	ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: if (presenceInfo != null) {  	SipResponse response = e.Request.CreateResponse (200' "OK");  	response.HeaderFields.InsertAfter ("CSeq"' e.Request.HeaderFields ["Contact"' "m"]);  	response.HeaderFields ["Contact"' "m"].Parameters ["expires"] = presenceInfo.ExpiresInSeconds.ToString ();  	response.HeaderFields.InsertAfter ("Contact"' "Date"' DateTime.Now.ToUniversalTime ().ToString ("ddd' d MMM yyyy HH:mm:ss G\\MT"));  	ipClient.SendSipResponse (response);  	// Send our message waiting notification  	if (isNewRegistration)  		SendMessageWaitingNotification (extensionNumber);  	PerformanceCounterService.PhonesRegistered = presenceData.Count;  }  else {  	ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRegister,The following statement contains a magic number: ipClient.SendSipResponse (e.Request.CreateResponse (500' "Server Error"));  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: try {  	switch (e.Request.SIPMethodType) {  	case SIPMethodType.INVITE:  	case SIPMethodType.REGISTER:  		//if (Properties.Settings.Default.SIPRegistrarDomain == null || Properties.Settings.Default.SIPRegistrarDomain.Length == 0 || fromURI.Host == ipClient.LocalIPAddress /*|| fromURI.Host == ipClient.Sip*/ || string.Compare(fromURI.Host' Properties.Settings.Default.SIPRegistrarDomain' true) == 0)  		//{  		int extensionNumber = Convert.ToInt32 (fromURI.User);  		// Check to see if this is a valid extension  		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' extensionNumber);  		if (extension == null) {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return false;  		}  		// Get our PBX password from our database  		string pbxPassword = "";  		if (extension.PBXPassword.Length > 0)  			pbxPassword = WOSI.Utilities.CryptoUtils.Decrypt (extension.PBXPassword' WOSI.CallButler.Data.Constants.EncryptionPassword);  		if (requireRegistration && !PresenceInfoExists (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true)) {  			// If we require registration and the SIP client isn't registered' return a 404 not found  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return false;  		}  		else if (IsRequestAuthorized (e.Request' extensionNumber.ToString ()' pbxPassword)) {  			return true;  		}  		else {  			string realmDomain = Properties.Settings.Default.SIPRegistrarDomain;  			if (realmDomain == null || realmDomain.Length == 0)  				realmDomain = ipClient.LocalIPAddress;  			// Tell the client that we need authorization  			string authString = string.Format ("Digest realm=\"{0}\"' domain=\"sip:{1}\"' nonce=\"{2}\"' algorithm=MD5"' realmDomain' realmDomain' Guid.NewGuid ().ToString ());  			SipResponse response = e.Request.CreateResponse (401' "Unauthorized");  			response.HeaderFields.InsertAfter ("CSeq"' "WWW-Authenticate"' authString);  			ipClient.SendSipResponse (response);  			return false;  		}  		/*}                         else                         {                             ipClient.SendSipResponse(e.Request.CreateResponse(404' "Not Found"));                             return false;                         }*/break;  	default:  		return true;  	}  }  catch {  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: try {  	switch (e.Request.SIPMethodType) {  	case SIPMethodType.INVITE:  	case SIPMethodType.REGISTER:  		//if (Properties.Settings.Default.SIPRegistrarDomain == null || Properties.Settings.Default.SIPRegistrarDomain.Length == 0 || fromURI.Host == ipClient.LocalIPAddress /*|| fromURI.Host == ipClient.Sip*/ || string.Compare(fromURI.Host' Properties.Settings.Default.SIPRegistrarDomain' true) == 0)  		//{  		int extensionNumber = Convert.ToInt32 (fromURI.User);  		// Check to see if this is a valid extension  		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' extensionNumber);  		if (extension == null) {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return false;  		}  		// Get our PBX password from our database  		string pbxPassword = "";  		if (extension.PBXPassword.Length > 0)  			pbxPassword = WOSI.Utilities.CryptoUtils.Decrypt (extension.PBXPassword' WOSI.CallButler.Data.Constants.EncryptionPassword);  		if (requireRegistration && !PresenceInfoExists (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true)) {  			// If we require registration and the SIP client isn't registered' return a 404 not found  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return false;  		}  		else if (IsRequestAuthorized (e.Request' extensionNumber.ToString ()' pbxPassword)) {  			return true;  		}  		else {  			string realmDomain = Properties.Settings.Default.SIPRegistrarDomain;  			if (realmDomain == null || realmDomain.Length == 0)  				realmDomain = ipClient.LocalIPAddress;  			// Tell the client that we need authorization  			string authString = string.Format ("Digest realm=\"{0}\"' domain=\"sip:{1}\"' nonce=\"{2}\"' algorithm=MD5"' realmDomain' realmDomain' Guid.NewGuid ().ToString ());  			SipResponse response = e.Request.CreateResponse (401' "Unauthorized");  			response.HeaderFields.InsertAfter ("CSeq"' "WWW-Authenticate"' authString);  			ipClient.SendSipResponse (response);  			return false;  		}  		/*}                         else                         {                             ipClient.SendSipResponse(e.Request.CreateResponse(404' "Not Found"));                             return false;                         }*/break;  	default:  		return true;  	}  }  catch {  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: try {  	switch (e.Request.SIPMethodType) {  	case SIPMethodType.INVITE:  	case SIPMethodType.REGISTER:  		//if (Properties.Settings.Default.SIPRegistrarDomain == null || Properties.Settings.Default.SIPRegistrarDomain.Length == 0 || fromURI.Host == ipClient.LocalIPAddress /*|| fromURI.Host == ipClient.Sip*/ || string.Compare(fromURI.Host' Properties.Settings.Default.SIPRegistrarDomain' true) == 0)  		//{  		int extensionNumber = Convert.ToInt32 (fromURI.User);  		// Check to see if this is a valid extension  		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' extensionNumber);  		if (extension == null) {  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return false;  		}  		// Get our PBX password from our database  		string pbxPassword = "";  		if (extension.PBXPassword.Length > 0)  			pbxPassword = WOSI.Utilities.CryptoUtils.Decrypt (extension.PBXPassword' WOSI.CallButler.Data.Constants.EncryptionPassword);  		if (requireRegistration && !PresenceInfoExists (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true)) {  			// If we require registration and the SIP client isn't registered' return a 404 not found  			ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  			return false;  		}  		else if (IsRequestAuthorized (e.Request' extensionNumber.ToString ()' pbxPassword)) {  			return true;  		}  		else {  			string realmDomain = Properties.Settings.Default.SIPRegistrarDomain;  			if (realmDomain == null || realmDomain.Length == 0)  				realmDomain = ipClient.LocalIPAddress;  			// Tell the client that we need authorization  			string authString = string.Format ("Digest realm=\"{0}\"' domain=\"sip:{1}\"' nonce=\"{2}\"' algorithm=MD5"' realmDomain' realmDomain' Guid.NewGuid ().ToString ());  			SipResponse response = e.Request.CreateResponse (401' "Unauthorized");  			response.HeaderFields.InsertAfter ("CSeq"' "WWW-Authenticate"' authString);  			ipClient.SendSipResponse (response);  			return false;  		}  		/*}                         else                         {                             ipClient.SendSipResponse(e.Request.CreateResponse(404' "Not Found"));                             return false;                         }*/break;  	default:  		return true;  	}  }  catch {  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: switch (e.Request.SIPMethodType) {  case SIPMethodType.INVITE:  case SIPMethodType.REGISTER:  	//if (Properties.Settings.Default.SIPRegistrarDomain == null || Properties.Settings.Default.SIPRegistrarDomain.Length == 0 || fromURI.Host == ipClient.LocalIPAddress /*|| fromURI.Host == ipClient.Sip*/ || string.Compare(fromURI.Host' Properties.Settings.Default.SIPRegistrarDomain' true) == 0)  	//{  	int extensionNumber = Convert.ToInt32 (fromURI.User);  	// Check to see if this is a valid extension  	WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' extensionNumber);  	if (extension == null) {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return false;  	}  	// Get our PBX password from our database  	string pbxPassword = "";  	if (extension.PBXPassword.Length > 0)  		pbxPassword = WOSI.Utilities.CryptoUtils.Decrypt (extension.PBXPassword' WOSI.CallButler.Data.Constants.EncryptionPassword);  	if (requireRegistration && !PresenceInfoExists (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true)) {  		// If we require registration and the SIP client isn't registered' return a 404 not found  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return false;  	}  	else if (IsRequestAuthorized (e.Request' extensionNumber.ToString ()' pbxPassword)) {  		return true;  	}  	else {  		string realmDomain = Properties.Settings.Default.SIPRegistrarDomain;  		if (realmDomain == null || realmDomain.Length == 0)  			realmDomain = ipClient.LocalIPAddress;  		// Tell the client that we need authorization  		string authString = string.Format ("Digest realm=\"{0}\"' domain=\"sip:{1}\"' nonce=\"{2}\"' algorithm=MD5"' realmDomain' realmDomain' Guid.NewGuid ().ToString ());  		SipResponse response = e.Request.CreateResponse (401' "Unauthorized");  		response.HeaderFields.InsertAfter ("CSeq"' "WWW-Authenticate"' authString);  		ipClient.SendSipResponse (response);  		return false;  	}  	/*}                         else                         {                             ipClient.SendSipResponse(e.Request.CreateResponse(404' "Not Found"));                             return false;                         }*/break;  default:  	return true;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: switch (e.Request.SIPMethodType) {  case SIPMethodType.INVITE:  case SIPMethodType.REGISTER:  	//if (Properties.Settings.Default.SIPRegistrarDomain == null || Properties.Settings.Default.SIPRegistrarDomain.Length == 0 || fromURI.Host == ipClient.LocalIPAddress /*|| fromURI.Host == ipClient.Sip*/ || string.Compare(fromURI.Host' Properties.Settings.Default.SIPRegistrarDomain' true) == 0)  	//{  	int extensionNumber = Convert.ToInt32 (fromURI.User);  	// Check to see if this is a valid extension  	WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' extensionNumber);  	if (extension == null) {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return false;  	}  	// Get our PBX password from our database  	string pbxPassword = "";  	if (extension.PBXPassword.Length > 0)  		pbxPassword = WOSI.Utilities.CryptoUtils.Decrypt (extension.PBXPassword' WOSI.CallButler.Data.Constants.EncryptionPassword);  	if (requireRegistration && !PresenceInfoExists (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true)) {  		// If we require registration and the SIP client isn't registered' return a 404 not found  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return false;  	}  	else if (IsRequestAuthorized (e.Request' extensionNumber.ToString ()' pbxPassword)) {  		return true;  	}  	else {  		string realmDomain = Properties.Settings.Default.SIPRegistrarDomain;  		if (realmDomain == null || realmDomain.Length == 0)  			realmDomain = ipClient.LocalIPAddress;  		// Tell the client that we need authorization  		string authString = string.Format ("Digest realm=\"{0}\"' domain=\"sip:{1}\"' nonce=\"{2}\"' algorithm=MD5"' realmDomain' realmDomain' Guid.NewGuid ().ToString ());  		SipResponse response = e.Request.CreateResponse (401' "Unauthorized");  		response.HeaderFields.InsertAfter ("CSeq"' "WWW-Authenticate"' authString);  		ipClient.SendSipResponse (response);  		return false;  	}  	/*}                         else                         {                             ipClient.SendSipResponse(e.Request.CreateResponse(404' "Not Found"));                             return false;                         }*/break;  default:  	return true;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: switch (e.Request.SIPMethodType) {  case SIPMethodType.INVITE:  case SIPMethodType.REGISTER:  	//if (Properties.Settings.Default.SIPRegistrarDomain == null || Properties.Settings.Default.SIPRegistrarDomain.Length == 0 || fromURI.Host == ipClient.LocalIPAddress /*|| fromURI.Host == ipClient.Sip*/ || string.Compare(fromURI.Host' Properties.Settings.Default.SIPRegistrarDomain' true) == 0)  	//{  	int extensionNumber = Convert.ToInt32 (fromURI.User);  	// Check to see if this is a valid extension  	WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' extensionNumber);  	if (extension == null) {  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return false;  	}  	// Get our PBX password from our database  	string pbxPassword = "";  	if (extension.PBXPassword.Length > 0)  		pbxPassword = WOSI.Utilities.CryptoUtils.Decrypt (extension.PBXPassword' WOSI.CallButler.Data.Constants.EncryptionPassword);  	if (requireRegistration && !PresenceInfoExists (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true)) {  		// If we require registration and the SIP client isn't registered' return a 404 not found  		ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  		return false;  	}  	else if (IsRequestAuthorized (e.Request' extensionNumber.ToString ()' pbxPassword)) {  		return true;  	}  	else {  		string realmDomain = Properties.Settings.Default.SIPRegistrarDomain;  		if (realmDomain == null || realmDomain.Length == 0)  			realmDomain = ipClient.LocalIPAddress;  		// Tell the client that we need authorization  		string authString = string.Format ("Digest realm=\"{0}\"' domain=\"sip:{1}\"' nonce=\"{2}\"' algorithm=MD5"' realmDomain' realmDomain' Guid.NewGuid ().ToString ());  		SipResponse response = e.Request.CreateResponse (401' "Unauthorized");  		response.HeaderFields.InsertAfter ("CSeq"' "WWW-Authenticate"' authString);  		ipClient.SendSipResponse (response);  		return false;  	}  	/*}                         else                         {                             ipClient.SendSipResponse(e.Request.CreateResponse(404' "Not Found"));                             return false;                         }*/break;  default:  	return true;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: if (extension == null) {  	ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  	return false;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: if (requireRegistration && !PresenceInfoExists (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true)) {  	// If we require registration and the SIP client isn't registered' return a 404 not found  	ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  	return false;  }  else if (IsRequestAuthorized (e.Request' extensionNumber.ToString ()' pbxPassword)) {  	return true;  }  else {  	string realmDomain = Properties.Settings.Default.SIPRegistrarDomain;  	if (realmDomain == null || realmDomain.Length == 0)  		realmDomain = ipClient.LocalIPAddress;  	// Tell the client that we need authorization  	string authString = string.Format ("Digest realm=\"{0}\"' domain=\"sip:{1}\"' nonce=\"{2}\"' algorithm=MD5"' realmDomain' realmDomain' Guid.NewGuid ().ToString ());  	SipResponse response = e.Request.CreateResponse (401' "Unauthorized");  	response.HeaderFields.InsertAfter ("CSeq"' "WWW-Authenticate"' authString);  	ipClient.SendSipResponse (response);  	return false;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: if (requireRegistration && !PresenceInfoExists (extensionNumber' e.Request.SentFrom' e.Request.SentFromPort' true)) {  	// If we require registration and the SIP client isn't registered' return a 404 not found  	ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  	return false;  }  else if (IsRequestAuthorized (e.Request' extensionNumber.ToString ()' pbxPassword)) {  	return true;  }  else {  	string realmDomain = Properties.Settings.Default.SIPRegistrarDomain;  	if (realmDomain == null || realmDomain.Length == 0)  		realmDomain = ipClient.LocalIPAddress;  	// Tell the client that we need authorization  	string authString = string.Format ("Digest realm=\"{0}\"' domain=\"sip:{1}\"' nonce=\"{2}\"' algorithm=MD5"' realmDomain' realmDomain' Guid.NewGuid ().ToString ());  	SipResponse response = e.Request.CreateResponse (401' "Unauthorized");  	response.HeaderFields.InsertAfter ("CSeq"' "WWW-Authenticate"' authString);  	ipClient.SendSipResponse (response);  	return false;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: ipClient.SendSipResponse (e.Request.CreateResponse (404' "Not Found"));  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,ProcessRequestAuthorization,The following statement contains a magic number: if (IsRequestAuthorized (e.Request' extensionNumber.ToString ()' pbxPassword)) {  	return true;  }  else {  	string realmDomain = Properties.Settings.Default.SIPRegistrarDomain;  	if (realmDomain == null || realmDomain.Length == 0)  		realmDomain = ipClient.LocalIPAddress;  	// Tell the client that we need authorization  	string authString = string.Format ("Digest realm=\"{0}\"' domain=\"sip:{1}\"' nonce=\"{2}\"' algorithm=MD5"' realmDomain' realmDomain' Guid.NewGuid ().ToString ());  	SipResponse response = e.Request.CreateResponse (401' "Unauthorized");  	response.HeaderFields.InsertAfter ("CSeq"' "WWW-Authenticate"' authString);  	ipClient.SendSipResponse (response);  	return false;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,IsRequestAuthorized,The following statement contains a magic number: if (request.HeaderFields.Contains ("Authorization"' null)) {  	string fieldValue = request.HeaderFields ["Authorization"' null].FieldValue.Trim ();  	if (fieldValue.StartsWith ("digest "' StringComparison.InvariantCultureIgnoreCase))  		fieldValue = fieldValue.Remove (0' 7);  	// Split out our auth params  	string[] authParams = WOSI.Utilities.StringUtils.SplitQuotedString (fieldValue' ''');  	string realm = "";  	string uri = "";  	string nonce = "";  	string response = "";  	string parsedUsername = "";  	foreach (string authParam in authParams) {  		string[] paramValues = WOSI.Utilities.StringUtils.SplitQuotedString (authParam' '=');  		if (paramValues.Length > 0) {  			paramValues [0] = paramValues [0].Trim ();  			paramValues [1] = paramValues [1].Trim ();  			if (string.Compare (paramValues [0]' "realm"' true) == 0) {  				realm = paramValues [1].Trim ('"');  			}  			else if (string.Compare (paramValues [0]' "uri"' true) == 0) {  				uri = paramValues [1].Trim ('"');  			}  			else if (string.Compare (paramValues [0]' "nonce"' true) == 0) {  				nonce = paramValues [1].Trim ('"');  			}  			else if (string.Compare (paramValues [0]' "response"' true) == 0) {  				response = paramValues [1].Trim ('"');  			}  			else if (paramValues [0].ToLower ().Contains ("username")) {  				parsedUsername = paramValues [1].Trim ('"');  			}  		}  	}  	// Make sure our usernames match  	if (string.Compare (parsedUsername' username) != 0)  		return false;  	// Create our hashed digest  	string a1 = WOSI.Utilities.CryptoUtils.CreateASCIIMD5Hash (username + ":" + realm + ":" + password);  	string a2 = WOSI.Utilities.CryptoUtils.CreateASCIIMD5Hash (request.Method + ":" + uri);  	string hashStr = WOSI.Utilities.CryptoUtils.CreateASCIIMD5Hash (a1 + ":" + nonce + ":" + a2);  	// Check to see if our hashstr is equal to our response  	if (hashStr == response)  		return true;  }  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,IsRequestAuthorized,The following statement contains a magic number: if (fieldValue.StartsWith ("digest "' StringComparison.InvariantCultureIgnoreCase))  	fieldValue = fieldValue.Remove (0' 7);  
Magic Number,CallButler.Service.Services,PBXRegistrarService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\PBXRegistrarService.cs,IsRequestAuthorized,The following statement contains a magic number: fieldValue = fieldValue.Remove (0' 7);  
Magic Number,CallButler.Service.Services,VoicemailMailerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailMailerService.cs,VoicemailMailerService,The following statement contains a magic number: queueTimer = new Timer (timerDelegate' null' 1000' 30000);  
Magic Number,CallButler.Service.Services,VoicemailMailerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\VoicemailMailerService.cs,VoicemailMailerService,The following statement contains a magic number: queueTimer = new Timer (timerDelegate' null' 1000' 30000);  
Missing Default,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The following switch statement is missing a default case: switch (Properties.Settings.Default.DataProviderType) {  case LocalCallButlerDataProviderTypes.XmlDataProvider:  	// Create our settings  	settings ["RootDataDirectory"] = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.XmlDataRootDirectory);  	settings ["RootGreetingSoundDirectory"] = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory);  	dataProvider = new CallButlerXmlDataProvider ();  	dataProvider.Connect (settings);  	break;  /*case LocalCallButlerDataProviderTypes.SqlServerDataProvider:                          settings["RootDataDirectory"] = WOSI.Utilities.FileUtils.GetApplicationRelativePath(Properties.Settings.Default.XmlDataRootDirectory);                         settings["RootGreetingSoundDirectory"] = WOSI.Utilities.FileUtils.GetApplicationRelativePath(Properties.Settings.Default.GreetingSoundRootDirectory);                         settings["ConnectionString"] = Properties.Settings.Default.SqlConnectionString;                          dataProvider = new CallButlerSQLServerDataProvider();                         dataProvider.Connect(settings);                         break;*/}  
Missing Default,CallButler.Service,CallButlerService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\CallButlerService.cs,Initialize,The following switch statement is missing a default case: switch (Properties.Settings.Default.TelecomProviderType) {  case TelecomProviders.inTELIPhoneTelecomProvider: {  	telecomProvider = new inTELIPhoneTelecomProvider (mnuServiceOptions' notifyIcon' lineCount' Properties.Settings.Default.UseStun' Properties.Settings.Default.StunServer' Properties.Settings.Default.SipPort' Properties.Settings.Default.UseInternalAddressForSIPMessages);  	// Register all of our profiles  	//if (Licensing.Management.AppPermissions.StatIsPermitted("Providers"))  	//{  	WOSI.CallButler.Data.CallButlerDataset.ProvidersDataTable providers = dataProvider.GetProviders (Properties.Settings.Default.CustomerID);  	foreach (WOSI.CallButler.Data.CallButlerDataset.ProvidersRow provider in providers) {  		if (provider.IsEnabled) {  			telecomProvider.Register (provider.ProviderID' provider);  		}  	}  	//}  	// Start our PBX registrar engine  	if (Properties.Settings.Default.EnablePBX/*&& Licensing.Management.AppPermissions.StatIsPermitted("PBX.Registrar")*/) {  		pbxRegistrar = new PBXRegistrarService (telecomProvider' dataProvider/*' extStateService*/);  	}  	break;  }  }  
Missing Default,CallButler.Service.ScriptProcessing,Click2CallScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\Click2CallScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case Click2CallExternalCommands.CALLBUTLERINTERNAL_ExtensionNotAvailable:  	// Allow this to answer calls again  	tsInterface.Locked = false;  	break;  case Click2CallExternalCommands.CALLBUTLERINTERNAL_ConnectCalls:  	// Check to see if this is a call to another extension  	int extensionNumber = 0;  	bool disableCallScreening = callMakerExtension == null ? false : true;  	if (int.TryParse (numberToDial' out extensionNumber)) {  		// If we're calling our own extension' send us to the voicemail management menu  		if (extensionNumber == callMakerExtension.ExtensionNumber) {  			callMakerInterface.ScriptProcessor = new VoicemailManagementScriptProcessor (callMakerExtension' scriptService.registrarService);  			callMakerInterface.ScriptProcessor.StartProcessing (callMakerInterface' telecomProvider' dataProvider);  			// Allow this to answer calls again  			tsInterface.Locked = false;  			break;  		}  		else {  			WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' extensionNumber);  			if (extension != null) {  				scriptService.TransferToExtension (extensionNumber.ToString ()' callMakerInterface' disableCallScreening);  				// Allow this to answer calls again  				tsInterface.Locked = false;  				break;  			}  		}  	}  	// Send the caller to main menu  	if (numberToDial == "*") {  		scriptService.SetupAutoAttendantAnswer (callMakerInterface.LineNumber' callMakerInterface);  		callMakerInterface.ScriptProcessor.StartProcessing (callMakerInterface' telecomProvider' dataProvider);  		// Allow this to answer calls again  		tsInterface.Locked = false;  		break;  	}  	// If we get here' we make an outbound call to an external number  	if (callMakerExtension != null)  		scriptService.MakeOutboundCall (callMakerInterface' numberToDial' string.Format ("{0} {1}"' callMakerExtension.FirstName' callMakerExtension.LastName)' null' null' callMakerExtension.ExtensionNumber' false' true);  	// Allow this to answer calls again  	tsInterface.Locked = false;  	break;  }  
Missing Default,CallButler.Service.ScriptProcessing,OutboundCalleeScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundCalleeScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case OutboundCallExternalCommands.CALLBUTLERINTERNAL_Reset: {  	tsInterface.Locked = false;  	break;  }  }  
Missing Default,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_CallEnded:  	ProcessEndCall (telecomProvider);  	break;  case OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_HoldCaller:  	// Remove this call from the conference  	tsInterface.ProcessOnHold (conferenceID' true);  	// Tell the other caller to play hold music  	outboundTsInterface.IMLInterpreter.SignalExternalEvent (OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_HoldCaller.ToString ());  	break;  case OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_UnholdCaller:  	// Add this caller back into the conference  	tsInterface.ProcessOnHold (conferenceID' false);  	// Tell the other caller to stop hold music  	outboundTsInterface.IMLInterpreter.SignalExternalEvent (OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_UnholdCaller.ToString ());  	break;  case OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_TransferCaller:  	TransferCaller (telecomProvider' commandData);  	break;  }  
Missing Default,CallButler.Service.ScriptProcessing,OutboundScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\OutboundScriptProcessor.cs,OnLinkedExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_CallFailed: {  	this.thisTsInterface.IMLInterpreter.SignalCallFailure ();  	break;  }  case OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_CallConnected: {  	// Conference the two callers  	conferenceID = telecomProvider.ConferenceLines (this.thisTsInterface.LineNumber' tsInterface.LineNumber);  	this.thisTsInterface.IMLInterpreter.SignalExternalEvent (OutboundCallExternalEvents.CALLBUTLERINTERNAL_ConferenceStarted.ToString ());  	break;  }  case OutboundCalleeScriptProcessor.OutboundCallExternalCommands.CALLBUTLERINTERNAL_CallEnded: {  	ProcessEndCall (telecomProvider);  	break;  }  }  
Missing Default,CallButler.Service.ScriptProcessing,ReceptionistFinderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ReceptionistFinderScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case ReceptionistFinderExternalCommands.CALLBUTLERINTERNAL_SendToAutoAttendant: {  	scriptService.ProcessAutoAttendantAnswer (tsInterface.LineNumber' tsInterface' false);  	break;  }  case ReceptionistFinderExternalCommands.CALLBUTLERINTERNAL_AnswerCall: {  	if (telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		if (tsInterface.Extension != null)  			telecomProvider.AnswerCall (tsInterface.LineNumber' true);  		else  			telecomProvider.AnswerCall (tsInterface.LineNumber' false);  	}  	break;  }  }  
Missing Default,CallButler.Service.ScriptProcessing,TransferConferenceParticipantScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceParticipantScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case TransferConferenceParticipantExternalCommands.CALLBUTLERINTERNAL_EndConference:  	telecomProvider.EndConference (conferenceID' true);  	break;  case TransferConferenceParticipantExternalCommands.CALLBUTLERINTERNAL_MainMenu:  	break;  }  
Missing Default,CallButler.Service.ScriptProcessing,TransferConferenceScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\TransferConferenceScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case TransferConferenceExternalCommands.CALLBUTLERINTERNAL_EndConference:  	telecomProvider.EndConference (conferenceID' true);  	break;  case TransferConferenceExternalCommands.CALLBUTLERINTERNAL_RecordingStarted:  	// Notify the other caller that recording has started  	callerTsInterface.IMLInterpreter.SignalExternalEvent (TransferConferenceExternalEvents.CALLBUTLERINTERNAL_RecordingStarted.ToString ());  	break;  case TransferConferenceExternalCommands.CALLBUTLERINTERNAL_RecordingFinished:  	// Notify the other caller that recording has finished  	callerTsInterface.IMLInterpreter.SignalExternalEvent (TransferConferenceExternalEvents.CALLBUTLERINTERNAL_RecordingFinished.ToString ());  	vmMailerService.QueueVoicemailEmail (extension' "Your Call Recording"' "Call Recording"' tsInterface.IMLInterpreter.GetLocalVariable ("RecordingFilename"));  	break;  case TransferConferenceExternalCommands.CALLBUTLERINTERNAL_TransferCaller:  	TransferCaller (telecomProvider' commandData);  	break;  case TransferConferenceExternalCommands.CALLBUTLERINTERNAL_HoldCaller:  	// Remove this call from the conference  	tsInterface.ProcessOnHold (conferenceID' true);  	// Tell the other caller to play hold music  	callerTsInterface.IMLInterpreter.SignalExternalEvent (TransferConferenceExternalEvents.CALLBUTLERINTERNAL_HoldCall.ToString ());  	break;  case TransferConferenceExternalCommands.CALLBUTLERINTERNAL_UnholdCaller:  	// Add this caller back into the conference  	tsInterface.ProcessOnHold (conferenceID' false);  	// Tell the other caller to stop hold music  	callerTsInterface.IMLInterpreter.SignalExternalEvent (TransferConferenceExternalEvents.CALLBUTLERINTERNAL_UnholdCall.ToString ());  	break;  }  
Missing Default,CallButler.Service.ScriptProcessing,VoicemailManagementScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailManagementProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case VoicemailExternalCommands.CALLBUTLERINTERNAL_AuthenticatePasscode: {  	// Check to make sure our passcode matches our extension  	string enteredPasscodeHash = WOSI.Utilities.CryptoUtils.CreateMD5Hash (commandData);  	if (enteredPasscodeHash != extension.Password) {  		tsInterface.IMLInterpreter.SignalExternalEvent (VoicemailExternalEvents.CALLBUTLERINTERNAL_InvalidPasscode.ToString ());  	}  	else {  		// Get our new voicemail count  		int newVoicemailCount = dataProvider.GetNewVoicemailCount (extension.ExtensionID);  		tsInterface.IMLInterpreter.SetLocalVariable ("NewVoicemailCount"' newVoicemailCount.ToString ());  		tsInterface.IMLInterpreter.SignalExternalEvent (VoicemailExternalEvents.CALLBUTLERINTERNAL_ValidPasscode.ToString ());  	}  	break;  }  case VoicemailExternalCommands.CALLBUTLERINTERNAL_SaveNewGreeting: {  	WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow voicemailGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' extension.ExtensionID' Properties.Settings.Default.DefaultLanguage);  	string tmpGreetingFilename = commandData;  	if (File.Exists (tmpGreetingFilename) && voicemailGreeting != null) {  		// Change our voicemail greeting to a sound file  		voicemailGreeting.Type = (short)WOSI.CallButler.Data.GreetingType.SoundGreeting;  		// Move our greeting sound over  		string greetingDirectory = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + Properties.Settings.Default.DefaultLanguage;  		string greetingFilename = greetingDirectory + "\\" + voicemailGreeting.GreetingID.ToString () + ".snd";  		if (!Directory.Exists (greetingDirectory))  			Directory.CreateDirectory (greetingDirectory);  		File.Copy (tmpGreetingFilename' greetingFilename' true);  		File.Delete (tmpGreetingFilename);  		voicemailGreeting.Data = WOSI.Utilities.CryptoUtils.GetFileChecksum (greetingFilename);  		dataProvider.PersistLocalizedGreeting (Properties.Settings.Default.CustomerID' voicemailGreeting);  	}  	tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	break;  }  case VoicemailExternalCommands.CALLBUTLERINTERNAL_FetchNextVoicemail: {  	// Get our voicemail rows  	WOSI.CallButler.Data.CallButlerDataset.VoicemailsRow[] voicemails = (WOSI.CallButler.Data.CallButlerDataset.VoicemailsRow[])dataProvider.GetVoicemails (extension.ExtensionID).Select (""' "Timestamp DESC");  	// Get our voicemail message index  	int voicemailIndex = Convert.ToInt32 (tsInterface.IMLInterpreter.GetLocalVariable ("VoicemailIndex"));  	voicemailIndex++;  	if (voicemailIndex < voicemails.Length) {  		WOSI.CallButler.Data.CallButlerDataset.VoicemailsRow voicemail = voicemails [voicemailIndex];  		// Create our voicemail intro  		string voicemailIntro = "";  		if (voicemailIndex == 0)  			voicemailIntro = "First ";  		else  			voicemailIntro = "Next ";  		if (voicemail.IsNew)  			voicemailIntro += "New ";  		voicemailIntro += "Message received on " + voicemail.Timestamp.ToShortDateString () + " " + voicemail.Timestamp.ToShortTimeString ();  		tsInterface.IMLInterpreter.SetLocalVariable ("VoicemailIntro"' voicemailIntro);  		string voicemailFilename = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory) + "\\" + voicemail.ExtensionID.ToString () + "\\" + voicemail.VoicemailID + ".snd";  		tsInterface.IMLInterpreter.SetLocalVariable ("VoicemailSound"' voicemailFilename);  		tsInterface.IMLInterpreter.SetLocalVariable ("VoicemailIndex"' voicemailIndex.ToString ());  		// Mark the voicemail as read  		dataProvider.MarkVoicemailRead (voicemail.ExtensionID' voicemail.VoicemailID);  		if (pbxRegistrar != null)  			pbxRegistrar.SendMessageWaitingNotification (voicemail.ExtensionID);  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	}  	else {  		tsInterface.IMLInterpreter.SignalExternalEvent (VoicemailExternalEvents.CALLBUTLERINTERNAL_EndOfMessages.ToString ());  	}  	break;  }  case VoicemailExternalCommands.CALLBUTLERINTERNAL_DeleteVoicemail: {  	// Get our voicemail rows  	WOSI.CallButler.Data.CallButlerDataset.VoicemailsRow[] voicemails = (WOSI.CallButler.Data.CallButlerDataset.VoicemailsRow[])dataProvider.GetVoicemails (extension.ExtensionID).Select (""' "Timestamp DESC");  	// Get our voicemail message index  	int voicemailIndex = Convert.ToInt32 (tsInterface.IMLInterpreter.GetLocalVariable ("VoicemailIndex"));  	if (voicemailIndex < voicemails.Length) {  		WOSI.CallButler.Data.CallButlerDataset.VoicemailsRow voicemail = voicemails [voicemailIndex];  		// Delete our voicemail  		dataProvider.DeleteVoicemail (voicemail.ExtensionID' voicemail.VoicemailID);  		// Delete our voicemail sound  		string voicemailFilename = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.VoicemailRootDirectory) + "\\" + voicemail.ExtensionID.ToString () + "\\" + voicemail.VoicemailID + ".snd";  		if (File.Exists (voicemailFilename))  			File.Delete (voicemailFilename);  		voicemailIndex--;  		tsInterface.IMLInterpreter.SetLocalVariable ("VoicemailIndex"' voicemailIndex.ToString ());  		if (pbxRegistrar != null)  			pbxRegistrar.SendMessageWaitingNotification (voicemail.ExtensionID);  	}  	tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	break;  }  }  
Missing Default,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,IMLInterpreter_SyncExternalAction,The following switch statement is missing a default case: switch (externalCommand) {  case VoicemailExternalCommands.CALLBUTLERINTERNAL_EndExtensionFinder: {  	// Allow this line to answer calls again  	tsInterface.Locked = false;  	tsInterface.IMLInterpreter.SignalExternalEvent (ExtensionExternalEvents.CALLBUTLERINTERNAL_OtherCallerHungUp.ToString ());  	// Don't subscribe to this event anymore after the call has ended  	((WOSI.IVR.IML.IMLInterpreter)sender).SyncExternalAction -= IMLInterpreter_SyncExternalAction;  	break;  }  }  
Missing Default,CallButler.Service.ScriptProcessing,ExtensionScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ExtensionScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case ExtensionExternalCommands.CALLBUTLERINTERNAL_ForwardCall: {  	onholdTsInterface.IMLInterpreter.SetLocalVariable ("TransferNumber"' commandData);  	onholdTsInterface.IMLInterpreter.SignalExternalEvent (VoicemailExternalEvents.CALLBUTLERINTERNAL_CallForwarded.ToString ());  	break;  }  case ExtensionExternalCommands.CALLBUTLERINTERNAL_ConfirmingTransfer: {  	if (disableCallScreening || !extension.EnableCallScreening) {  		tsInterface.IMLInterpreter.SignalExternalEvent (ExtensionExternalEvents.CALLBUTLERINTERNAL_SkipConfirmation.ToString ());  	}  	else {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	}  	break;  }  case ExtensionExternalCommands.CALLBUTLERINTERNAL_GetNextNumber: {  	string callerID = onholdTsInterface.IMLInterpreter.CallerDisplayName;  	string callerNumber = onholdTsInterface.IMLInterpreter.CallerUsername;  	if (callerID == null || callerID.Length == 0)  		callerID = "Unknown Caller";  	if (callerNumber == null || callerNumber.Length == 0)  		callerNumber = "";  	// If we have a previous call' end it  	if (telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		telecomProvider.EndCall (tsInterface.LineNumber);  	}  	else {  		// Get our extension contact numbers  		List<WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow> contactNumbers = new List<WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow> ((WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[])dataProvider.GetExtensionContactNumbers (extension.ExtensionID).Select (""' "Priority ASC"));  		if (extensionNumberIndex + 1 >= contactNumbers.Count && parentExtension != null) {  			extensionNumberIndex = parentExtensionIndex;  			parentExtensionIndex = -1;  			extension = parentExtension;  			parentExtension = null;  			contactNumbers.Clear ();  			contactNumbers.AddRange ((WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[])dataProvider.GetExtensionContactNumbers (extension.ExtensionID).Select (""' "Priority ASC"));  		}  		extensionNumberIndex++;  		List<string> callBlastNumbers = new List<string> ();  		List<string> callBlastProfiles = new List<string> ();  		int callBlastTimeout = Properties.Settings.Default.CallBlastTimeout;  		while (extensionNumberIndex < contactNumbers.Count) {  			WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow contactNumber = contactNumbers [extensionNumberIndex];  			// Is the number online?  			if (contactNumber.Online) {  				// Does the number have hours?  				TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset (DateTime.Now);  				if (!contactNumber.IsHoursOfOperationUTCOffsetNull ())  					utcOffset = contactNumber.HoursOfOperationUTCOffset;  				if (!contactNumber.HasHoursOfOperation || (contactNumber.HasHoursOfOperation && ScriptUtils.IsInHoursOfOperation (contactNumber.HoursOfOperation' utcOffset))) {  					// Check to see if this number is a PBX IP line  					if ((contactNumber.CallPBXPhone || (WOSI.CallButler.Data.ExtensionContactNumberType)contactNumber.Type == WOSI.CallButler.Data.ExtensionContactNumberType.IPPhone) && registrarService != null) {  						int extNumber = extension.ExtensionNumber;  						// If this was filled in from another extension' we'll need to check the status of that extension  						if (contactNumber.ExtensionID != extension.ExtensionID) {  							WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow tmpExtension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' contactNumber.ExtensionID);  							if (tmpExtension != null)  								extNumber = tmpExtension.ExtensionNumber;  						}  						// Check to see if this pbx phone is online  						PBXPresenceInfo[] presInfos = registrarService.GetPresenceInfoForExtension (extNumber);  						if (presInfos != null && presInfos.Length > 0) {  							foreach (PBXPresenceInfo presInfo in presInfos) {  								if (presInfo.Status == PBXPresenceStatus.Online) {  									if (presInfos.Length > 1 || extension.UseCallBlast) {  										if (contactNumbers.Count == 1)  											callBlastTimeout = contactNumber.Timeout;  										string callBlastNumber = string.Format ("sip:{0}@{1}:{2}"' presInfo.ExtensionNumber' presInfo.RemoteAddress' presInfo.RemotePort);  										if (!callBlastNumbers.Contains (callBlastNumber)) {  											callBlastNumbers.Add (callBlastNumber);  											callBlastProfiles.Add (TelecomScriptInterface.InternalProviderProfileName);  										}  									}  									else {  										TryContactNumber (tsInterface' string.Format ("sip:{0}@{1}:{2}"' presInfo.ExtensionNumber' presInfo.RemoteAddress' presInfo.RemotePort)' callerID' callerNumber' TelecomScriptInterface.InternalProviderProfileName' contactNumber.Timeout.ToString ()' eventToken);  										return;  									}  								}  							}  							if (!extension.UseCallBlast && callBlastNumbers.Count > 0)  								break;  						}  					}  					else if ((WOSI.CallButler.Data.ExtensionContactNumberType)contactNumber.Type == WOSI.CallButler.Data.ExtensionContactNumberType.TelephoneNumber) {  						if (extension.UseCallBlast) {  							if (!callBlastNumbers.Contains (contactNumber.ContactNumber)) {  								callBlastNumbers.Add (contactNumber.ContactNumber);  								callBlastProfiles.Add ("");  							}  						}  						else {  							TryContactNumber (tsInterface' contactNumber.ContactNumber' callerID' callerNumber' ""' contactNumber.Timeout.ToString ()' eventToken);  							return;  						}  					}  					else if ((WOSI.CallButler.Data.ExtensionContactNumberType)contactNumber.Type == WOSI.CallButler.Data.ExtensionContactNumberType.Extension && parentExtension == null) {  						try {  							// Get our new extension  							WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow newExtension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' new Guid (contactNumber.ContactNumber));  							if (newExtension != null) {  								if (extension.UseCallBlast) {  									WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[] newContacts = (WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[])dataProvider.GetExtensionContactNumbers (newExtension.ExtensionID).Select ("Type <> " + (int)WOSI.CallButler.Data.ExtensionContactNumberType.Extension' "Priority ASC");  									contactNumbers.AddRange (newContacts);  								}  								else {  									parentExtension = extension;  									parentExtensionIndex = extensionNumberIndex;  									extensionNumberIndex = -1;  									extension = newExtension;  									tsInterface.IMLInterpreter.SignalExternalEvent (ExtensionExternalEvents.CALLBUTLERINTERNAL_GetNextNumber.ToString ());  									return;  								}  							}  						}  						catch {  						}  					}  				}  			}  			extensionNumberIndex++;  		}  		if (callBlastNumbers.Count > 0) {  			TryCallBlast (telecomProvider' tsInterface' callBlastNumbers.ToArray ()' callBlastProfiles.ToArray ()' callerID' callerNumber' callBlastTimeout.ToString ());  			return;  		}  		else {  			tsInterface.IMLInterpreter.SignalExternalEvent (ExtensionExternalEvents.CALLBUTLERINTERNAL_NoMoreNumbers.ToString ());  		}  	}  	break;  }  case ExtensionExternalCommands.CALLBUTLERINTERNAL_SendToVoicemail: {  	onholdTsInterface.IMLInterpreter.SyncExternalAction -= IMLInterpreter_SyncExternalAction;  	// Allow this line to answer calls again  	tsInterface.Locked = false;  	if (telecomProvider.IsLineInUse (onholdTsInterface.LineNumber)) {  		telecomProvider.SendingToVoicemail (onholdTsInterface.LineNumber);  	}  	onholdTsInterface.IMLInterpreter.SignalExternalEvent (VoicemailExternalEvents.CALLBUTLERINTERNAL_ExtensionNotAvailable.ToString ());  	tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	break;  }  case ExtensionExternalCommands.CALLBUTLERINTERNAL_ConnectCalls: {  	onholdTsInterface.IMLInterpreter.SyncExternalAction -= IMLInterpreter_SyncExternalAction;  	onholdTsInterface.IMLInterpreter.SignalExternalEvent (ExtensionExternalCommands.CALLBUTLERINTERNAL_ConnectCalls.ToString ());  	// Allow this line to answer calls again  	tsInterface.Locked = false;  	if (autoConnect) {  		if (telecomProvider.IsLineInUse (tsInterface.LineNumber) && telecomProvider.IsLineInUse (onholdTsInterface.LineNumber)) {  			if (extension.IsUseConferenceTransferNull () || !extension.UseConferenceTransfer/*|| !Licensing.Management.AppPermissions.StatIsPermitted("Handoff")*/) {  				telecomProvider.TransferCallAttended (onholdTsInterface.LineNumber' tsInterface.LineNumber' Properties.Settings.Default.UseBridgedTransfers);  				tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  			}  			else {  				telecomProvider.StopSound (tsInterface.LineNumber);  				telecomProvider.StopSound (onholdTsInterface.LineNumber);  				int conferenceID = telecomProvider.ConferenceLines (tsInterface.LineNumber' onholdTsInterface.LineNumber);  				// Check to see if the person calling is an internal extension  				if (onholdTsInterface.Extension != null) {  					onholdTsInterface.ScriptProcessor = new TransferConferenceScriptProcessor (conferenceID' scriptService' tsInterface' registrarService' extension' vmMailerService);  				}  				else {  					onholdTsInterface.ScriptProcessor = new TransferConferenceParticipantScriptProcessor (conferenceID' tsInterface' extension' vmMailerService);  				}  				tsInterface.ScriptProcessor = new TransferConferenceScriptProcessor (conferenceID' scriptService' onholdTsInterface' registrarService' extension' vmMailerService);  				onholdTsInterface.ScriptProcessor.StartProcessing (onholdTsInterface' telecomProvider' dataProvider);  				tsInterface.ScriptProcessor.StartProcessing (tsInterface' telecomProvider' dataProvider);  			}  		}  		else {  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		}  	}  	break;  }  }  
Missing Default,CallButler.Service.ScriptProcessing,ScheduleReminderScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScheduleReminderScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case ScheduleReminderExternalCommands.CALLBUTLERINTERNAL_GetNextNumber: {  	// If we have a previous call' end it  	if (telecomProvider.IsLineInUse (tsInterface.LineNumber))  		telecomProvider.EndCall (tsInterface.LineNumber);  	extensionNumberIndex++;  	// Get our extension contact numbers  	WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[] contactNumbers = (WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow[])dataProvider.GetExtensionContactNumbers (extension.ExtensionID).Select (""' "Priority ASC");  	while (extensionNumberIndex < contactNumbers.Length) {  		WOSI.CallButler.Data.CallButlerDataset.ExtensionContactNumbersRow contactNumber = contactNumbers [extensionNumberIndex];  		// Is the number online?  		if (contactNumber.Online) {  			// Does the number have hours?  			if (!contactNumber.HasHoursOfOperation || (contactNumber.HasHoursOfOperation && ScriptUtils.IsInHoursOfOperation (contactNumber.HoursOfOperation' contactNumber.HoursOfOperationUTCOffset))) {  				// If we get here' try the number  				tsInterface.IMLInterpreter.SetLocalVariable ("NumberToCall"' contactNumber.ContactNumber);  				tsInterface.IMLInterpreter.SetLocalVariable ("ExtensionTimeout"' contactNumber.Timeout.ToString ());  				string introDetails = "You have " + reminders.Length + " upcoming appointment";  				if (reminders.Length > 1) {  					introDetails += "s";  				}  				introDetails += ".";  				tsInterface.IMLInterpreter.SetLocalVariable ("IntroDetails"' introDetails);  				tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  				return;  			}  		}  		extensionNumberIndex++;  	}  	if (telecomProvider.IsLineInUse (tsInterface.LineNumber))  		telecomProvider.EndCall (tsInterface.LineNumber);  	tsInterface.IMLInterpreter.StopScript ();  	break;  }  case ScheduleReminderExternalCommands.CALLBUTLERINTERNAL_FetchNextReminder: {  	reminderIndex++;  	if (reminderIndex < reminders.Length) {  		OutlookReminder reminder = reminders [reminderIndex];  		tsInterface.IMLInterpreter.SetLocalVariable ("ScheduleDetails"' GetReminderDetails (reminder));  		if (reminderIndex == reminders.Length - 1) {  			tsInterface.IMLInterpreter.SignalExternalEvent (ScheduleReminderExternalEvents.CALLBUTLERINTERNAL_LastReminder.ToString ());  		}  		else {  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		}  	}  	else {  		tsInterface.IMLInterpreter.SignalExternalEvent (ScheduleReminderExternalEvents.CALLBUTLERINTERNAL_EndOfReminders.ToString ());  	}  	break;  }  }  
Missing Default,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case BaseExternalCommands.CALLBUTLERINTERNAL_StartAddonModule:  	CallButler.Service.Plugin.CallButlerAddonModulePlugin[] addonModules = pluginManager.GetAllPluginsOfType<CallButler.Service.Plugin.CallButlerAddonModulePlugin> ();  	foreach (CallButler.Service.Plugin.CallButlerAddonModulePlugin addonModule in addonModules) {  		if (addonModule.PluginID.ToString () == commandData) {  			try {  				// Make sure the module is licensed  				if (!addonModule.IsLicensed)  					break;  				// We found our module and we should load the script it uses  				tsInterface.ScriptProcessor = new AddonModuleScriptProcessor (addonModule);  				tsInterface.ScriptProcessor.StartProcessing (tsInterface' telecomProvider' dataProvider);  				return;  			}  			catch (Exception e) {  				LoggingService.AddLogEntry (WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' "Failed to load Addon-Module '" + addonModule.PluginName + "'\r\n\r\n" + e.Message + "\r\n\r\n" + e.StackTrace' true);  			}  		}  	}  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_ReturnToCallFlowMainMenu:  	// Return to the Call flow main menu.  	tsInterface.ScriptProcessor = new StandardScriptProcessor (pluginManager' pbxRegistrar);  	((StandardScriptProcessor)tsInterface.ScriptProcessor).StartFromMainMenu (tsInterface);  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_PlayLicenseIntroGreeting:  	// If the line isn't in use' don't do anything  	if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		break;  	}  	// Read our intro sound bytes  	byte[] introSoundBytes = null;  	if (telecomProvider.AudioInputRate == 8000) {  		introSoundBytes = new byte[Properties.Resources.powered_by_8khz.Length];  		Properties.Resources.powered_by_8khz.Read (introSoundBytes' 0' introSoundBytes.Length);  	}  	else if (telecomProvider.AudioInputRate == 16000) {  		introSoundBytes = new byte[Properties.Resources.powered_by_16khz.Length];  		Properties.Resources.powered_by_16khz.Read (introSoundBytes' 0' introSoundBytes.Length);  	}  	// Play our license intro sound  	if (introSoundBytes != null) {  		telecomProvider.PlaySound (tsInterface.LineNumber' introSoundBytes);  	}  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_PlaySystemSound:  	// If the line isn't in use' don't do anything  	if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		break;  	}  	// Get the sound with the current language  	languageID = tsInterface.IMLInterpreter.GetLocalVariable ("LanguageID");  	string soundFilename = GetSoundFileForLanguage (languageID' commandData);  	if (soundFilename == null) {  		// If we don't get a sound with the current language' try the default language  		soundFilename = GetSoundFileForLanguage (Properties.Settings.Default.DefaultLanguage' commandData);  		if (soundFilename == null) {  			// If we don't get a sound file with the default language' try english  			soundFilename = GetSoundFileForLanguage ("en"' commandData);  			if (soundFilename == null) {  				if (!File.Exists (soundFilename)) {  					// If the sound still doesn't exist' tell the IML interpreter to move on  					tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  					break;  				}  			}  		}  	}  	// If we get here' our system sound should exist and we should play it.  	if (string.Compare (commandData' "ring.snd"' true) == 0)  		telecomProvider.PlaySound (tsInterface.LineNumber' soundFilename' true);  	else  		telecomProvider.PlaySound (tsInterface.LineNumber' soundFilename' false);  	LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilename' false);  	break;  case BaseExternalCommands.CALLBUTLERINTERNAL_PlayGreeting:  	// If the line isn't in use' don't do anything  	if (!telecomProvider.IsLineInUse (tsInterface.LineNumber)) {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		break;  	}  	// Get our current language  	languageID = tsInterface.IMLInterpreter.GetLocalVariable ("LanguageID");  	// Create our greetingID  	Guid greetingID = new Guid (commandData);  	// Get the greeting in our selected language  	WOSI.CallButler.Data.CallButlerDataset.GreetingsRow greeting = dataProvider.GetGreeting (Properties.Settings.Default.CustomerID' greetingID);  	if (greeting != null) {  		// Get the greeting for our specified language  		WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' languageID);  		if (localizedGreeting == null) {  			// If the greeting doesn't exist in the current language' try using the default language  			localizedGreeting = dataProvider.GetLocalizedGreeting (Properties.Settings.Default.CustomerID' greetingID' Properties.Settings.Default.DefaultLanguage);  			if (localizedGreeting == null) {  				// If the greeting doesn't exist in the default language' heck just return the first one that exists  				WOSI.CallButler.Data.CallButlerDataset.LocalizedGreetingsRow[] localizedGreetings = greeting.GetLocalizedGreetingsRows ();  				if (localizedGreetings.Length > 0)  					localizedGreeting = localizedGreetings [0];  			}  		}  		if (localizedGreeting != null) {  			// Determine how we should play this greeting  			WOSI.CallButler.Data.GreetingType greetingType = (WOSI.CallButler.Data.GreetingType)localizedGreeting.Type;  			switch (greetingType) {  			case WOSI.CallButler.Data.GreetingType.SoundGreeting:  				// Create our sound file path  				string soundFilePath = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + localizedGreeting.LanguageID + "\\" + greetingID.ToString () + ".snd";  				if (File.Exists (soundFilePath)) {  					telecomProvider.PlaySound (tsInterface.LineNumber' soundFilePath' false);  					LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilePath' false);  				}  				else  					tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  				break;  			case WOSI.CallButler.Data.GreetingType.TextGreeting:  				// Speak our text  				string textToSpeak = tsInterface.IMLInterpreter.ParseVariableTokens (localizedGreeting.Data);  				// Take out any XML  				if (!WOSI.Utilities.StringUtils.IsWellFormedXml (textToSpeak))  					textToSpeak = WOSI.Utilities.StringUtils.XmlEncodeString (textToSpeak);  				if (textToSpeak.Length > 0) {  					if (!localizedGreeting.IsVoiceNull () && localizedGreeting.Voice.Length > 0)  						textToSpeak = "<voice required=\"Name=" + localizedGreeting.Voice + "\">" + textToSpeak + "</voice>";  					else if (Properties.Settings.Default.DefaultTTSVoice != null && Properties.Settings.Default.DefaultTTSVoice.Length > 0)  						textToSpeak = "<voice required=\"Name=" + Properties.Settings.Default.DefaultTTSVoice + "\">" + textToSpeak + "</voice>";  					telecomProvider.SpeakText (tsInterface.LineNumber' textToSpeak);  					LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Speaking '" + textToSpeak + "'"' false);  				}  				else {  					tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  				}  				break;  			}  		}  		else {  			// If no greeting is found in the right language' tell the interpreter to move on  			tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  		}  	}  	// If the greeting isn't found' tell the interpreter to go on  	else {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	}  	break;  }  
Missing Default,CallButler.Service.ScriptProcessing,ScriptProcessorBase,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptProcessorBase.cs,ProcessExternalCommand,The following switch statement is missing a default case: switch (greetingType) {  case WOSI.CallButler.Data.GreetingType.SoundGreeting:  	// Create our sound file path  	string soundFilePath = WOSI.Utilities.FileUtils.GetApplicationRelativePath (Properties.Settings.Default.GreetingSoundRootDirectory) + "\\" + localizedGreeting.LanguageID + "\\" + greetingID.ToString () + ".snd";  	if (File.Exists (soundFilePath)) {  		telecomProvider.PlaySound (tsInterface.LineNumber' soundFilePath' false);  		LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Playing sound at " + soundFilePath' false);  	}  	else  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	break;  case WOSI.CallButler.Data.GreetingType.TextGreeting:  	// Speak our text  	string textToSpeak = tsInterface.IMLInterpreter.ParseVariableTokens (localizedGreeting.Data);  	// Take out any XML  	if (!WOSI.Utilities.StringUtils.IsWellFormedXml (textToSpeak))  		textToSpeak = WOSI.Utilities.StringUtils.XmlEncodeString (textToSpeak);  	if (textToSpeak.Length > 0) {  		if (!localizedGreeting.IsVoiceNull () && localizedGreeting.Voice.Length > 0)  			textToSpeak = "<voice required=\"Name=" + localizedGreeting.Voice + "\">" + textToSpeak + "</voice>";  		else if (Properties.Settings.Default.DefaultTTSVoice != null && Properties.Settings.Default.DefaultTTSVoice.Length > 0)  			textToSpeak = "<voice required=\"Name=" + Properties.Settings.Default.DefaultTTSVoice + "\">" + textToSpeak + "</voice>";  		telecomProvider.SpeakText (tsInterface.LineNumber' textToSpeak);  		LoggingService.AddLogEntry (LogLevel.Extended' "(Line " + tsInterface.LineNumber + ") Speaking '" + textToSpeak + "'"' false);  	}  	else {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	}  	break;  }  
Missing Default,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case StandardExternalCommands.CALLBUTLERINTERNAL_ChooseLanguage: {  	if (!Properties.Settings.Default.Multilingual) {  		tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_NotMultilingual.ToString ());  	}  	else {  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	}  	break;  }  case StandardExternalCommands.CALLBUTLERINTERNAL_SetLanguageID: {  	List<string> languages = new List<string> ();  	languages.Add (Properties.Settings.Default.DefaultLanguage);  	languages.AddRange (Properties.Settings.Default.Languages.Split (';'));  	int languageNumber = Convert.ToInt32 (commandData);  	if (languageNumber > 0 && languageNumber <= languages.Count) {  		// Set our language ID variable  		tsInterface.IMLInterpreter.SetLocalVariable ("LanguageID"' languages [languageNumber - 1]);  		tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	}  	else {  		tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_InvalidLanguage.ToString ());  	}  	break;  }  case StandardExternalCommands.CALLBUTLERINTERNAL_ProcessMainMenuOption: {  	WOSI.CallButler.Data.CallButlerDataset.DepartmentsDataTable departments = dataProvider.GetDepartments (Properties.Settings.Default.CustomerID);  	WOSI.CallButler.Data.CallButlerDataset.DepartmentsRow[] choosenDepartments = (WOSI.CallButler.Data.CallButlerDataset.DepartmentsRow[])departments.Select ("OptionNumber = " + commandData);  	if (choosenDepartments.Length > 0) {  		WOSI.CallButler.Data.CallButlerDataset.DepartmentsRow choosenDepartment = choosenDepartments [0];  		switch (choosenDepartment.Type) {  		case (short)WOSI.CallButler.Data.DepartmentTypes.Greeting:  			tsInterface.IMLInterpreter.SetLocalVariable ("MainMenuOptionGreetingID"' choosenDepartment.DepartmentID.ToString ());  			tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_GreetingMenuOption.ToString ());  			break;  		case (short)WOSI.CallButler.Data.DepartmentTypes.Extension:  			// Find our extension number  			try {  				WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' new Guid (choosenDepartment.Data1));  				if (extension != null) {  					tsInterface.IMLInterpreter.SetLocalVariable ("Extension"' extension.ExtensionNumber.ToString ());  				}  			}  			catch {  			}  			tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_ExtensionMenuOption.ToString ());  			break;  		case (short)WOSI.CallButler.Data.DepartmentTypes.Script:  			tsInterface.IMLInterpreter.SetLocalVariable ("CustomScriptPath"' choosenDepartment.Data1);  			tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_ScriptMenuOption.ToString ());  			break;  		case (short)WOSI.CallButler.Data.DepartmentTypes.Number:  			tsInterface.IMLInterpreter.SetLocalVariable ("TransferToNumber"' choosenDepartment.Data1);  			tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_NumberTransferMenuOption.ToString ());  			break;  		case (short)WOSI.CallButler.Data.DepartmentTypes.Module:  			tsInterface.IMLInterpreter.SetLocalVariable ("AddonModuleID"' choosenDepartment.Data1);  			tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_AddonModuleMenuOption.ToString ());  			break;  		}  	}  	else {  		tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_InvalidMenuOption.ToString ());  	}  	break;  }  case StandardExternalCommands.CALLBUTLERINTERNAL_DialByNameSearch:  	// Find our extensions for this search string  	WOSI.CallButler.Data.CallButlerDataset.ExtensionsDataTable extensions = dataProvider.GetExtensions (Properties.Settings.Default.CustomerID);  	WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow[] matchingExtensions = (WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow[])extensions.Select ("SearchNumber LIKE '" + commandData + "*' AND EnableSearch = True");  	// Get our extension search index  	int searchIndex = Convert.ToInt32 (tsInterface.IMLInterpreter.GetLocalVariable ("ExtensionSearchIndex"));  	searchIndex++;  	if (matchingExtensions.Length > 0 && searchIndex < matchingExtensions.Length) {  		tsInterface.IMLInterpreter.SetLocalVariable ("Extension"' matchingExtensions [searchIndex].ExtensionNumber.ToString ());  		tsInterface.IMLInterpreter.SetLocalVariable ("ExtensionName"' matchingExtensions [searchIndex].FirstName + " " + matchingExtensions [searchIndex].LastName);  		tsInterface.IMLInterpreter.SetLocalVariable ("ExtensionSearchIndex"' searchIndex.ToString ());  	}  	else {  		tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_ExtensionNotFound.ToString ());  	}  	tsInterface.IMLInterpreter.SignalEventCallback (eventToken);  	break;  case StandardExternalCommands.CALLBUTLERINTERNAL_VoicemailManagement: {  	try {  		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtensionNumber (Properties.Settings.Default.CustomerID' Convert.ToInt32 (tsInterface.IMLInterpreter.GetLocalVariable ("Extension")));  		if (extension != null) {  			tsInterface.ScriptProcessor = new VoicemailManagementScriptProcessor (extension' pbxRegistrar);  			tsInterface.ScriptProcessor.StartProcessing (tsInterface' telecomProvider' dataProvider);  			break;  		}  	}  	catch {  	}  	tsInterface.IMLInterpreter.SignalTransferFailure ();  	break;  }  /*case StandardExternalCommands.CALLBUTLERINTERNAL_StartAddonModule:                         {                             CallButler.Service.Plugin.CallButlerAddonModulePlugin[] addonModules = pluginManager.GetAllPluginsOfType<CallButler.Service.Plugin.CallButlerAddonModulePlugin>();                              foreach (CallButler.Service.Plugin.CallButlerAddonModulePlugin addonModule in addonModules)                             {                                 if (addonModule.PluginID.ToString() == commandData)                                 {                                     try                                     {                                         // Make sure the module is licensed                                         if (!addonModule.IsLicensed)                                             break;                                          // We found our module and we should load the script it uses                                         tsInterface.ScriptProcessor = new AddonModuleScriptProcessor(addonModule);                                         tsInterface.ScriptProcessor.StartProcessing(tsInterface' telecomProvider' dataProvider);                                         return;                                      }                                     catch (Exception e)                                     {                                         LoggingService.AddLogEntry(WOSI.CallButler.ManagementInterface.LogLevel.ErrorsOnly' "Failed to load Addon-Module '" + addonModule.PluginName + "'\r\n\r\n" + e.Message + "\r\n\r\n" + e.StackTrace' true);                                     }                                 }                             }                              tsInterface.ScriptProcessor = this;                             tsInterface.IMLInterpreter.SignalExternalEvent(StandardExternalEvents.CALLBUTLERINTERNAL_AddonModuleFailed.ToString());                              break;                         }*/}  
Missing Default,CallButler.Service.ScriptProcessing,StandardScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\StandardScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (choosenDepartment.Type) {  case (short)WOSI.CallButler.Data.DepartmentTypes.Greeting:  	tsInterface.IMLInterpreter.SetLocalVariable ("MainMenuOptionGreetingID"' choosenDepartment.DepartmentID.ToString ());  	tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_GreetingMenuOption.ToString ());  	break;  case (short)WOSI.CallButler.Data.DepartmentTypes.Extension:  	// Find our extension number  	try {  		WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtension (Properties.Settings.Default.CustomerID' new Guid (choosenDepartment.Data1));  		if (extension != null) {  			tsInterface.IMLInterpreter.SetLocalVariable ("Extension"' extension.ExtensionNumber.ToString ());  		}  	}  	catch {  	}  	tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_ExtensionMenuOption.ToString ());  	break;  case (short)WOSI.CallButler.Data.DepartmentTypes.Script:  	tsInterface.IMLInterpreter.SetLocalVariable ("CustomScriptPath"' choosenDepartment.Data1);  	tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_ScriptMenuOption.ToString ());  	break;  case (short)WOSI.CallButler.Data.DepartmentTypes.Number:  	tsInterface.IMLInterpreter.SetLocalVariable ("TransferToNumber"' choosenDepartment.Data1);  	tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_NumberTransferMenuOption.ToString ());  	break;  case (short)WOSI.CallButler.Data.DepartmentTypes.Module:  	tsInterface.IMLInterpreter.SetLocalVariable ("AddonModuleID"' choosenDepartment.Data1);  	tsInterface.IMLInterpreter.SignalExternalEvent (StandardExternalEvents.CALLBUTLERINTERNAL_AddonModuleMenuOption.ToString ());  	break;  }  
Missing Default,CallButler.Service.ScriptProcessing,VoicemailScriptProcessor,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\VoicemailScriptProcessor.cs,OnExternalCommand,The following switch statement is missing a default case: switch (externalCommand) {  case VoicemailExternalCommands.CALLBUTLERINTERNAL_NewVoicemail: {  	// Create a new voicemail record  	vmService.CreateVoicemail (new Guid (commandData)' new Guid (tsInterface.IMLInterpreter.GetLocalVariable ("ExtensionID"))' tsInterface.IMLInterpreter.CallerDisplayName' tsInterface.IMLInterpreter.CallerHost' tsInterface.IMLInterpreter.CallerUsername);  	break;  }  case VoicemailExternalCommands.CALLBUTLERINTERNAL_VoicemailManagement: {  	tsInterface.ScriptProcessor = new VoicemailManagementScriptProcessor (extension' registrarService);  	tsInterface.ScriptProcessor.StartProcessing (tsInterface' telecomProvider' dataProvider);  	break;  }  }  
Missing Default,CallButler.Service.ScriptProcessing.ScriptCompilers,ScriptUtils,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\ScriptProcessing\ScriptCompilers\ScriptUtils.cs,ProcessPersonalizedGreeting,The following switch statement is missing a default case: switch (personalizedGreeting.Type) {  case (short)WOSI.CallButler.Data.PersonalizedGreetingType.CustomScript:  	GotoPage gotoCustomScript = new GotoPage ();  	gotoCustomScript.Location = personalizedGreeting.Data;  	scriptPage.Actions.Add (gotoCustomScript);  	break;  case (short)WOSI.CallButler.Data.PersonalizedGreetingType.Hangup:  	scriptPage.Actions.Add (new HangupCall ());  	break;  case (short)WOSI.CallButler.Data.PersonalizedGreetingType.SendToExtension:  	// Get the proper extension  	WOSI.CallButler.Data.CallButlerDataset.ExtensionsRow extension = dataProvider.GetExtension (customerID' new Guid (personalizedGreeting.Data));  	if (extension != null) {  		TransferCall transferCall = new TransferCall ();  		transferCall.TransferTo = extension.ExtensionNumber.ToString ();  		transferCall.IsExtension = true;  		scriptPage.Actions.Add (transferCall);  	}  	break;  case (short)WOSI.CallButler.Data.PersonalizedGreetingType.Module:  	ExternalAction moduleAction = new ExternalAction ();  	moduleAction.Async = false;  	moduleAction.Action = BaseExternalCommands.CALLBUTLERINTERNAL_StartAddonModule.ToString ();  	moduleAction.ParameterData = personalizedGreeting.Data;  	scriptPage.Actions.Add (moduleAction);  	break;  }  
Missing Default,CallButler.Service.Services,LoggingService,C:\repos\hostitherepc_Fork-1\CallButler Open Source PBX\CallButler Service\Services\LoggingService.cs,AddLogEntry,The following switch statement is missing a default case: switch (Properties.Settings.Default.LogStorage) {  case LogStorage.File: {  	logWriter.Write ("[" + DateTime.Now.ToString () + "] ");  	if (isError)  		logWriter.Write ("**ERROR** ");  	logWriter.WriteLine (message);  	logWriter.Flush ();  	break;  }  case LogStorage.SystemEventLog: {  	if (isError)  		eventLog.WriteEntry (message' EventLogEntryType.Error);  	else  		eventLog.WriteEntry (message' System.Diagnostics.EventLogEntryType.Information);  	break;  }  }  
