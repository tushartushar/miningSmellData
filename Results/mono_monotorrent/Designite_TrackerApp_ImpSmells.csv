Implementation smell,Namespace,Class,File,Method,Description
Virtual Method Call from Constructor,SampleTracker,MySimpleTracker,C:\repos\mono_monotorrent\src\TrackerApp\Main.cs,MySimpleTracker,The constructor "MySimpleTracker" calls a virtual method "Start".
Empty Catch Block,TrackerApp,StressTest,C:\repos\mono_monotorrent\src\TrackerApp\StressTest.cs,Start,The method has an empty catch block.
Magic Number,SampleTracker,MySimpleTracker,C:\repos\mono_monotorrent\src\TrackerApp\Main.cs,MySimpleTracker,The following statement contains a magic number: System.Net.IPEndPoint listenpoint = new System.Net.IPEndPoint(System.Net.IPAddress.Loopback' 10000);
Magic Number,SampleTracker,MySimpleTracker,C:\repos\mono_monotorrent\src\TrackerApp\Main.cs,MySimpleTracker,The following statement contains a magic number: while (true)              {                  System.Threading.Thread.Sleep(10000);              }
Magic Number,SampleTracker,MySimpleTracker,C:\repos\mono_monotorrent\src\TrackerApp\Main.cs,SetupTorrentWatcher,The following statement contains a magic number: watcher.TorrentFound += delegate(object sender' TorrentWatcherEventArgs e)              {                  try                  {                      // This is a hack to work around the issue where a file triggers the event                      // before it has finished copying. As the filesystem still has an exclusive lock                      // on the file' monotorrent can't access the file and throws an exception.                      // The best way to handle this depends on the actual application.                       // Generally the solution is: Wait a few hundred milliseconds                      // then try load the file.                      System.Threading.Thread.Sleep(500);  					                      Torrent t = Torrent.Load(e.TorrentPath);  					                      // There is also a predefined 'InfoHashTrackable' MonoTorrent.Tracker which                      // just stores the infohash and name of the torrent. This is all that the tracker                      // needs to run. So if you want an ITrackable that "just works"' then use InfoHashTrackable.  					                      // ITrackable trackable = new InfoHashTrackable(t);                      ITrackable trackable = new CustomITrackable(t);                        // The lock is here because the TorrentFound event is asyncronous and I have                      // to ensure that only 1 thread access the tracker at the same time.                      lock (tracker)                          tracker.Add(trackable);                  }                  catch (Exception ex)                  {                      Debug.WriteLine("Error loading torrent from disk: {0}"' ex.Message);                      Debug.WriteLine("Stacktrace: {0}"' ex.ToString());                  }              };
Magic Number,SampleTracker,MySimpleTracker,C:\repos\mono_monotorrent\src\TrackerApp\Main.cs,Main,The following statement contains a magic number: while (val != 1 && val != 2)                  val = GetInt();
Magic Number,SampleTracker,MySimpleTracker,C:\repos\mono_monotorrent\src\TrackerApp\Main.cs,Benchmark,The following statement contains a magic number: while (true)              {                  Console.WriteLine("Measured announces/sec:  {0}"' test.RequestRate);                  Console.WriteLine("Total announces: {0}"' test.TotalTrackerRequests);                  Console.WriteLine(Environment.NewLine);                  System.Threading.Thread.Sleep(1000);              }
Magic Number,TrackerApp,StressTest,C:\repos\mono_monotorrent\src\TrackerApp\StressTest.cs,StressTest,The following statement contains a magic number: for (int i = 0; i < torrents; i++)              {                  byte[] infoHash = new byte[20];                  random.NextBytes(infoHash);                  hashes.Add(new InfoHash(infoHash).UrlEncode());              }
Magic Number,TrackerApp,StressTest,C:\repos\mono_monotorrent\src\TrackerApp\StressTest.cs,StressTest,The following statement contains a magic number: threadSleepTime = Math.Max ((int)(20000.0 / requests + 0.5)' 1);
Magic Number,TrackerApp,StressTest,C:\repos\mono_monotorrent\src\TrackerApp\StressTest.cs,StressTest,The following statement contains a magic number: threadSleepTime = Math.Max ((int)(20000.0 / requests + 0.5)' 1);
Magic Number,TrackerApp,StressTest,C:\repos\mono_monotorrent\src\TrackerApp\StressTest.cs,StressTest,The following statement contains a magic number: threads = new Thread[20];
