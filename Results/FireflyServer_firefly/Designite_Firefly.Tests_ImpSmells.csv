Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Firefly.Tests.Extensions,Net40Extensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Extensions\Net40Extensions.cs,WriteAsync,The method has 5 parameters. Parameters: stream' buffer' offset' count' cancellationToken
Long Parameter List,Firefly.Tests.Fakes,FakeSocket,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Fakes\FakeSocket.cs,Receive,The method has 5 parameters. Parameters: buffer' offset' size' socketFlags' errorCode
Long Identifier,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\App_Packages\TaskHelpers.Sources.0.1\TaskHelpersExtensions.cs,,The length of the parameter _rethrowWithNoStackLossDelegate is 31.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\App_Packages\TaskHelpers.Sources.0.1\TaskHelpersExtensions.cs,CatchImpl,The length of the statement  "                            throw new InvalidOperationException("You must set the Task property of the CatchInfo returned from the TaskHelpersExtensions.Catch continuation."); " is 147.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\App_Packages\TaskHelpers.Sources.0.1\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "            task.ContinueWith(innerTask => tcs.TrySetFromTask(innerTask)' TaskContinuationOptions.NotOnFaulted | TaskContinuationOptions.ExecuteSynchronously); " is 147.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\App_Packages\TaskHelpers.Sources.0.1\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "                                throw new InvalidOperationException("You cannot return null from the TaskHelpersExtensions.Catch continuation. You must return a valid task or throw an exception."); " is 165.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\App_Packages\TaskHelpers.Sources.0.1\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "                            throw new InvalidOperationException("You cannot return null from the TaskHelpersExtensions.Catch continuation. You must return a valid task or throw an exception."); " is 165.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\App_Packages\TaskHelpers.Sources.0.1\TaskHelpersExtensions.cs,GetRethrowWithNoStackLossDelegate,The length of the statement  "                // No-ops if the task completed successfully' else throws the originating exception complete with the correct call stack. " is 121.
Long Statement,Firefly.Tests.Extensions,Net40Extensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Extensions\Net40Extensions.cs,CopyToAsync,The length of the statement  "            var copyToAsyncMethod = stream.GetType().GetMethod("CopyToAsync"' BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public' null' new Type[] { typeof(Stream)' typeof(int)' typeof(CancellationToken) }' null); " is 222.
Empty Catch Block,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\App_Packages\TaskHelpers.Sources.0.1\TaskHelpersExtensions.cs,GetRethrowWithNoStackLossDelegate,The method has an empty catch block.
Magic Number,Firefly.Tests.Fakes,FakeApp,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Fakes\FakeApp.cs,FakeApp,The following statement contains a magic number: ResponseStatus = 200;
Magic Number,Firefly.Tests.Fakes,FakeRequestBody,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Fakes\FakeRequestBody.cs,Subscribe,The following statement contains a magic number: return Body.CopyToAsync(MemoryStream' 4096' cancellationToken)                  .Then(                      () =>                      {                          Ended = true;                      })                      .Catch(info=>                      {                          LastException = info.Exception;                          return info.Throw();                      });
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,SkipAdvancesBuffer,The following statement contains a magic number: baton.Skip(2);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,SkipAdvancesBuffer,The following statement contains a magic number: baton.Skip(5);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,SkipAdvancesBuffer,The following statement contains a magic number: Assert.Equal(6' baton.Buffer.Count);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,TakeAdvancesBufferAndReturnsTakenSegment,The following statement contains a magic number: baton.Skip(2);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,TakeAdvancesBufferAndReturnsTakenSegment,The following statement contains a magic number: var taken = baton.Take(5);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,TakeAdvancesBufferAndReturnsTakenSegment,The following statement contains a magic number: Assert.Equal(6' baton.Buffer.Count);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,TakeAdvancesBufferAndReturnsTakenSegment,The following statement contains a magic number: Assert.Equal(5' taken.Count);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,ExtendCausesArraySegmentToIncludeMoreBytesAtTheEnd,The following statement contains a magic number: baton.Buffer = new ArraySegment<byte>(baton.Buffer.Array' 2' 5);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,ExtendCausesArraySegmentToIncludeMoreBytesAtTheEnd,The following statement contains a magic number: baton.Buffer = new ArraySegment<byte>(baton.Buffer.Array' 2' 5);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,ExtendCausesArraySegmentToIncludeMoreBytesAtTheEnd,The following statement contains a magic number: baton.Extend(5);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,ExtendCausesArraySegmentToIncludeMoreBytesAtTheEnd,The following statement contains a magic number: Assert.Equal(2' baton.Buffer.Offset);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,ExtendCausesArraySegmentToIncludeMoreBytesAtTheEnd,The following statement contains a magic number: Assert.Equal(10' baton.Buffer.Count);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,AvailableBufferReturnsAreaThatIsUnused,The following statement contains a magic number: baton.Buffer = new ArraySegment<byte>(baton.Buffer.Array' 2' 5);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,AvailableBufferReturnsAreaThatIsUnused,The following statement contains a magic number: baton.Buffer = new ArraySegment<byte>(baton.Buffer.Array' 2' 5);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,AvailableBufferReturnsAreaThatIsUnused,The following statement contains a magic number: Assert.Equal(8' buffer.Count);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,AvailableBufferBringsOffsetBackToZeroIfOccupiedSegmentIsZeroLength,The following statement contains a magic number: baton.Buffer = new ArraySegment<byte>(baton.Buffer.Array' 2' 0);
Magic Number,Firefly.Tests.Http,BatonTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\BatonTests.cs,AvailableBufferBringsOffsetBackToZeroIfOccupiedSegmentIsZeroLength,The following statement contains a magic number: Assert.Equal(15' buffer.Count);
Magic Number,Firefly.Tests.Http,ConnectionTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ConnectionTests.cs,ContentLengthAloneWillAllowKeepAliveToOccur,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Firefly.Tests.Http,ConnectionTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ConnectionTests.cs,ContentLengthAloneWillAllowKeepAliveToOccur,The following statement contains a magic number: Assert.Equal(2' App.CallCount);
Magic Number,Firefly.Tests.Http,ConnectionTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ConnectionTests.cs,RequestsMayArriveIndividually,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Firefly.Tests.Http,ConnectionTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ConnectionTests.cs,RequestsMayArriveIndividually,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Firefly.Tests.Http,ConnectionTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ConnectionTests.cs,RequestsMayArriveIndividually,The following statement contains a magic number: Assert.Equal(2' App.CallCount);
Magic Number,Firefly.Tests.Http,ConnectionTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ConnectionTests.cs,RequestBodyContentLengthAllowsBackToBackPosts,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Firefly.Tests.Http,ConnectionTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ConnectionTests.cs,RequestBodyContentLengthAllowsBackToBackPosts,The following statement contains a magic number: Assert.Equal(3' App.CallCount);
Magic Number,Firefly.Tests.Http,ConnectionTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ConnectionTests.cs,RequestBodyChunkedAlsoAllowsBackToBackPosts,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Firefly.Tests.Http,ConnectionTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ConnectionTests.cs,RequestBodyChunkedAlsoAllowsBackToBackPosts,The following statement contains a magic number: Assert.Equal(3' App.CallCount);
Magic Number,Firefly.Tests.Http,FrameRequestHeaderTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\FrameRequestHeaderTests.cs,MultipleHeadersAreEnumerableWithOrderPreserved,The following statement contains a magic number: Assert.Equal(5' x1.Length);
Magic Number,Firefly.Tests.Http,FrameRequestHeaderTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\FrameRequestHeaderTests.cs,MultipleHeadersAreEnumerableWithOrderPreserved,The following statement contains a magic number: Assert.Equal(2' x2.Length);
Magic Number,Firefly.Tests.Http,FrameRequestHeaderTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\FrameRequestHeaderTests.cs,WrappedHeadersHaveCrlfReplacedWithSpace,The following statement contains a magic number: Assert.Equal(4' x1.Length);
Magic Number,Firefly.Tests.Http,FrameTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\FrameTests.cs,FakeAppCanReturnResults,The following statement contains a magic number: App.ResponseStatus = 200;
Magic Number,Firefly.Tests.Http,FrameTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\FrameTests.cs,CompletedRequestGeneratesResponse,The following statement contains a magic number: App.ResponseStatus = 418;
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,ServerWillOpenSocketWhenToldToListen,The following statement contains a magic number: new ServerFactory().Create(call => { throw new InvalidOperationException(); }' 56565);
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,ServerWillOpenSocketWhenToldToListen,The following statement contains a magic number: socket.Connect("localhost"' 56565);
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,ServerWillCloseSocket,The following statement contains a magic number: var server = new ServerFactory().Create(call => { throw new InvalidOperationException(); }' 56566);
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,ServerWillCloseSocket,The following statement contains a magic number: Assert.Throws<SocketException>(                  () =>                  {                      var socket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);                      socket.Connect("localhost"' 56566);                      socket.Close();                  });
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,ServerWillCallAppWhenRequestHeadersAreComplete,The following statement contains a magic number: socket.Connect("localhost"' 56567);
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,ServerWillCallAppWhenRequestHeadersAreComplete,The following statement contains a magic number: Assert.True(called.Task.Wait(TimeSpan.FromSeconds(5)));
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,SyncWritesBufferAndCanBeReadBackSlowly,The following statement contains a magic number: AppDelegate app = call =>              {                  var output = (Stream)call["owin.ResponseBody"];                  var data = "Hello world!\r\n".ToArraySegment();                  foreach (var loop in Enumerable.Range(0' 10000))                  {                      output.Write(data.Array' data.Offset' data.Count);                  }                  responseEnded.TrySetResult(true);                  return TaskHelpers.Completed();              };
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,SyncWritesBufferAndCanBeReadBackSlowly,The following statement contains a magic number: socket.Connect("localhost"' 56567);
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,SyncWritesBufferAndCanBeReadBackSlowly,The following statement contains a magic number: Assert.True(responseEnded.Task.Wait(TimeSpan.FromSeconds(5)));
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,SyncWritesBufferAndCanBeReadBackSlowly,The following statement contains a magic number: var buffer = new byte[1024];
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,SyncWritesBufferAndCanBeReadBackSlowly,The following statement contains a magic number: var x = 5;
Magic Number,Firefly.Tests.Http,ServerTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Http\ServerTests.cs,SyncWritesBufferAndCanBeReadBackSlowly,The following statement contains a magic number: Thread.Sleep(900);
Magic Number,Firefly.Tests.Utils,InputSenderTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\InputSenderTests.cs,InputSenderTests,The following statement contains a magic number: _pullBuffer = ToArraySegment(1024);
Magic Number,Firefly.Tests.Utils,InputSenderTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\InputSenderTests.cs,PushAfterSmallerPullShouldHaveSomeRemainingData,The following statement contains a magic number: var pullBuffer = ToArraySegment(5);
Magic Number,Firefly.Tests.Utils,InputSenderTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\InputSenderTests.cs,PushAfterSmallerPullShouldHaveSomeRemainingData,The following statement contains a magic number: pushResult.Message.Buffer.Count.ShouldBe(6);
Magic Number,Firefly.Tests.Utils,MemoryPoolTextWriterTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\MemoryPoolTextWriterTests.cs,CallingFlushForcesBufferToStartPopulating,The following statement contains a magic number: Assert.Equal(8' Writer.Buffer.Count);
Magic Number,Firefly.Tests.Utils,MemoryPoolTextWriterTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\MemoryPoolTextWriterTests.cs,CallingFlushForcesBufferToStartPopulating,The following statement contains a magic number: Assert.Equal(65' Writer.Buffer.Array[0]);
Magic Number,Firefly.Tests.Utils,MemoryPoolTextWriterTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\MemoryPoolTextWriterTests.cs,CallingFlushForcesBufferToStartPopulating,The following statement contains a magic number: Assert.Equal(66' Writer.Buffer.Array[1]);
Magic Number,Firefly.Tests.Utils,MemoryPoolTextWriterTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\MemoryPoolTextWriterTests.cs,CallingFlushForcesBufferToStartPopulating,The following statement contains a magic number: Assert.Equal(67' Writer.Buffer.Array[2]);
Magic Number,Firefly.Tests.Utils,MemoryPoolTextWriterTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\MemoryPoolTextWriterTests.cs,CallingFlushForcesBufferToStartPopulating,The following statement contains a magic number: Assert.Equal(67' Writer.Buffer.Array[2]);
Magic Number,Firefly.Tests.Utils,WriteSocketTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\WriteSocketTests.cs,WriteCanBeCalledManyTimesImmediately,The following statement contains a magic number: Enumerable.Range(0' 3)
Magic Number,Firefly.Tests.Utils,WriteSocketTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\WriteSocketTests.cs,WriteWillReturnTrueWhenLargerThanOutputWindow,The following statement contains a magic number: Socket.OutputWindow = 10;
Magic Number,Firefly.Tests.Utils,WriteSocketTests,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Utils\WriteSocketTests.cs,WriteWillContinueToReturnFalse,The following statement contains a magic number: Socket.OutputWindow = 10;
Missing Default,System.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\App_Packages\TaskHelpers.Sources.0.1\TaskHelpers.cs,SetIfTaskFailed,The following switch statement is missing a default case: switch (source.Status)              {                  case TaskStatus.Canceled:                  case TaskStatus.Faulted:                      return tcs.TrySetFromTask(source);              }
Missing Default,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\App_Packages\TaskHelpers.Sources.0.1\TaskHelpersExtensions.cs,CopyResultToCompletionSourceImpl,The following switch statement is missing a default case: switch (task.Status)                  {                      case TaskStatus.Canceled:                      case TaskStatus.Faulted:                          TaskHelpers.TrySetFromTask(tcs' task);                          break;                        case TaskStatus.RanToCompletion:                          tcs.TrySetResult(resultThunk(task));                          break;                  }
Missing Default,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\App_Packages\TaskHelpers.Sources.0.1\TaskHelpersExtensions.cs,CopyResultToCompletionSourceImplContinuation,The following switch statement is missing a default case: switch (innerTask.Status)                  {                      case TaskStatus.Canceled:                      case TaskStatus.Faulted:                          TaskHelpers.TrySetFromTask(tcs' innerTask);                          break;                        case TaskStatus.RanToCompletion:                          tcs.TrySetResult(resultThunk(task));                          break;                  }
Missing Default,Firefly.Tests.Fakes,FakeSocket,D:\research\architectureSmells\repos\FireflyServer_firefly\src\test\Firefly.Tests\Fakes\FakeSocket.cs,Shutdown,The following switch statement is missing a default case: switch (how)              {                  case SocketShutdown.Send:                      ShutdownSendCalled = true;                      break;                  case SocketShutdown.Receive:                      ShutdownReceiveCalled = true;                      break;                  case SocketShutdown.Both:                      ShutdownSendCalled = true;                      ShutdownReceiveCalled = true;                      break;              }
