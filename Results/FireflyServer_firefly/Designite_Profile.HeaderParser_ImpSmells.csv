Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Profile.HeaderParser,Strat2_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat2.cs,TakeMessageHeader,Cyclomatic complexity of the method is 9
Complex Method,Profile.HeaderParser,Program,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Program.cs,Main,Cyclomatic complexity of the method is 10
Complex Method,Profile.HeaderParser,Strat1_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat1.cs,TakeMessageHeader,Cyclomatic complexity of the method is 9
Complex Conditional,Profile.HeaderParser,Strat6_3_WithListDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat6.cs,TakeMessageHeader,The conditional expression  "ch0 == '\r' &&                          ch1 == '\n' &&                              ch2 != ' ' &&                                  ch2 != '\t'"  is complex.
Complex Conditional,Profile.HeaderParser,Strat6_3_WithListDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat6.cs,TakeMessageHeader,The conditional expression  "colonIndex != -1 &&                          ch0 != ' ' &&                              ch0 != '\t' &&                                  ch0 != '\r' &&                                      ch0 != '\n'"  is complex.
Complex Conditional,Profile.HeaderParser,Strat6_3_WithListDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat6.cs,TakeMessageHeader,The conditional expression  "!wrappedHeaders &&                          ch0 == '\r' &&                              ch1 == '\n' &&                                  (ch2 == ' ' ||                                      ch2 == '\t')"  is complex.
Complex Conditional,Profile.HeaderParser,Strat5_3_WithNoDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat5.cs,TakeMessageHeader,The conditional expression  "ch0 == '\r' &&                          ch1 == '\n' &&                              ch2 != ' ' &&                                  ch2 != '\t'"  is complex.
Complex Conditional,Profile.HeaderParser,Strat5_3_WithNoDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat5.cs,TakeMessageHeader,The conditional expression  "colonIndex != -1 &&                          ch0 != ' ' &&                              ch0 != '\t' &&                                  ch0 != '\r' &&                                      ch0 != '\n'"  is complex.
Complex Conditional,Profile.HeaderParser,Strat5_3_WithNoDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat5.cs,TakeMessageHeader,The conditional expression  "!wrappedHeaders &&                          ch0 == '\r' &&                              ch1 == '\n' &&                                  (ch2 == ' ' ||                                      ch2 == '\t')"  is complex.
Complex Conditional,Profile.HeaderParser,Strat3_FixedBytePtr,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat3.cs,TakeMessageHeader,The conditional expression  "ch0 == '\r' &&                          ch1 == '\n' &&                              ch2 != ' ' &&                                  ch2 != '\t'"  is complex.
Complex Conditional,Profile.HeaderParser,Strat3_FixedBytePtr,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat3.cs,TakeMessageHeader,The conditional expression  "colonIndex != -1 &&                          ch0 != ' ' &&                              ch0 != '\t' &&                                  ch0 != '\r' &&                                      ch0 != '\n'"  is complex.
Complex Conditional,Profile.HeaderParser,Strat3_FixedBytePtr,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat3.cs,TakeMessageHeader,The conditional expression  "!wrappedHeaders &&                          ch0 == '\r' &&                              ch1 == '\n' &&                                  (ch2 == ' ' ||                                      ch2 == '\t')"  is complex.
Complex Conditional,Profile.HeaderParser,Strat2_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat2.cs,TakeMessageHeader,The conditional expression  "ch0 == '\r' &&                      ch1 == '\n' &&                          ch2 != ' ' &&                              ch2 != '\t'"  is complex.
Complex Conditional,Profile.HeaderParser,Strat2_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat2.cs,TakeMessageHeader,The conditional expression  "colonIndex != -1 &&                      ch0 != ' ' &&                          ch0 != '\t' &&                              ch0 != '\r' &&                                  ch0 != '\n'"  is complex.
Complex Conditional,Profile.HeaderParser,Strat2_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat2.cs,TakeMessageHeader,The conditional expression  "!wrappedHeaders &&                      ch0 == '\r' &&                          ch1 == '\n' &&                              (ch2 == ' ' ||                                  ch2 == '\t')"  is complex.
Complex Conditional,Profile.HeaderParser,Strat1_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat1.cs,TakeMessageHeader,The conditional expression  "ch0 == '\r' &&                      ch1 == '\n' &&                          ch2 != ' ' &&                              ch2 != '\t'"  is complex.
Complex Conditional,Profile.HeaderParser,Strat1_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat1.cs,TakeMessageHeader,The conditional expression  "colonIndex != -1 &&                      ch0 != ' ' &&                          ch0 != '\t' &&                              ch0 != '\r' &&                                  ch0 != '\n'"  is complex.
Complex Conditional,Profile.HeaderParser,Strat1_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat1.cs,TakeMessageHeader,The conditional expression  "!wrappedHeaders &&                      ch0 == '\r' &&                          ch1 == '\n' &&                              (ch2 == ' ' ||                                  ch2 == '\t')"  is complex.
Magic Number,Profile.HeaderParser,Strat6_3_WithListDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat6.cs,TakeMessageHeader,The following statement contains a magic number: if (remaining.Count < 2)              {                  return false;              }
Magic Number,Profile.HeaderParser,Strat6_3_WithListDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat6.cs,TakeMessageHeader,The following statement contains a magic number: if (ch0 == '\r' && ch1 == '\n')              {                  endOfHeaders = true;                  baton.Skip(2);                  return true;              }
Magic Number,Profile.HeaderParser,Strat6_3_WithListDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat6.cs,TakeMessageHeader,The following statement contains a magic number: if (remaining.Count < 3)              {                  return false;              }
Magic Number,Profile.HeaderParser,Strat6_3_WithListDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat6.cs,TakeMessageHeader,The following statement contains a magic number: var indexEnd = remaining.Count - 2;
Magic Number,Profile.HeaderParser,Strat6_3_WithListDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat6.cs,TakeMessageHeader,The following statement contains a magic number: fixed (byte* pch = remaining.Array)              {                  var scan = pch + remaining.Offset + 2;                  for (var index = 0; index != indexEnd; ++index)                  {                      var ch2 = *scan++;                      if (ch0 == '\r' &&                          ch1 == '\n' &&                              ch2 != ' ' &&                                  ch2 != '\t')                      {                          var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                          var value = "";                          if (valueEndIndex != -1)                          {                              value = Encoding.Default.GetString(                                  remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                          }                          if (wrappedHeaders)                          {                              value = value.Replace("\r\n"' " ");                          }                          AddRequestHeader(name' value);                          baton.Skip(index + 2);                          return true;                      }                      if (colonIndex == -1 && ch0 == ':')                      {                          colonIndex = index;                      }                      else if (colonIndex != -1 &&                          ch0 != ' ' &&                              ch0 != '\t' &&                                  ch0 != '\r' &&                                      ch0 != '\n')                      {                          if (valueStartIndex == -1)                          {                              valueStartIndex = index;                          }                          valueEndIndex = index + 1;                      }                      else if (!wrappedHeaders &&                          ch0 == '\r' &&                              ch1 == '\n' &&                                  (ch2 == ' ' ||                                      ch2 == '\t'))                      {                          wrappedHeaders = true;                      }                        ch0 = ch1;                      ch1 = ch2;                  }              }
Magic Number,Profile.HeaderParser,Strat6_3_WithListDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat6.cs,TakeMessageHeader,The following statement contains a magic number: fixed (byte* pch = remaining.Array)              {                  var scan = pch + remaining.Offset + 2;                  for (var index = 0; index != indexEnd; ++index)                  {                      var ch2 = *scan++;                      if (ch0 == '\r' &&                          ch1 == '\n' &&                              ch2 != ' ' &&                                  ch2 != '\t')                      {                          var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                          var value = "";                          if (valueEndIndex != -1)                          {                              value = Encoding.Default.GetString(                                  remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                          }                          if (wrappedHeaders)                          {                              value = value.Replace("\r\n"' " ");                          }                          AddRequestHeader(name' value);                          baton.Skip(index + 2);                          return true;                      }                      if (colonIndex == -1 && ch0 == ':')                      {                          colonIndex = index;                      }                      else if (colonIndex != -1 &&                          ch0 != ' ' &&                              ch0 != '\t' &&                                  ch0 != '\r' &&                                      ch0 != '\n')                      {                          if (valueStartIndex == -1)                          {                              valueStartIndex = index;                          }                          valueEndIndex = index + 1;                      }                      else if (!wrappedHeaders &&                          ch0 == '\r' &&                              ch1 == '\n' &&                                  (ch2 == ' ' ||                                      ch2 == '\t'))                      {                          wrappedHeaders = true;                      }                        ch0 = ch1;                      ch1 = ch2;                  }              }
Magic Number,Profile.HeaderParser,Strat5_3_WithNoDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat5.cs,TakeMessageHeader,The following statement contains a magic number: if (remaining.Count < 2)              {                  return false;              }
Magic Number,Profile.HeaderParser,Strat5_3_WithNoDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat5.cs,TakeMessageHeader,The following statement contains a magic number: if (ch0 == '\r' && ch1 == '\n')              {                  endOfHeaders = true;                  baton.Skip(2);                  return true;              }
Magic Number,Profile.HeaderParser,Strat5_3_WithNoDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat5.cs,TakeMessageHeader,The following statement contains a magic number: if (remaining.Count < 3)              {                  return false;              }
Magic Number,Profile.HeaderParser,Strat5_3_WithNoDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat5.cs,TakeMessageHeader,The following statement contains a magic number: var indexEnd = remaining.Count - 2;
Magic Number,Profile.HeaderParser,Strat5_3_WithNoDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat5.cs,TakeMessageHeader,The following statement contains a magic number: fixed (byte* pch = remaining.Array)              {                  var scan = pch + remaining.Offset + 2;                  for (var index = 0; index != indexEnd; ++index)                  {                      var ch2 = *scan++;                      if (ch0 == '\r' &&                          ch1 == '\n' &&                              ch2 != ' ' &&                                  ch2 != '\t')                      {                          var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                          var value = "";                          if (valueEndIndex != -1)                          {                              value = Encoding.Default.GetString(                                  remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                          }                          if (wrappedHeaders)                          {                              value = value.Replace("\r\n"' " ");                          }                          AddRequestHeader(name' value);                          baton.Skip(index + 2);                          return true;                      }                      if (colonIndex == -1 && ch0 == ':')                      {                          colonIndex = index;                      }                      else if (colonIndex != -1 &&                          ch0 != ' ' &&                              ch0 != '\t' &&                                  ch0 != '\r' &&                                      ch0 != '\n')                      {                          if (valueStartIndex == -1)                          {                              valueStartIndex = index;                          }                          valueEndIndex = index + 1;                      }                      else if (!wrappedHeaders &&                          ch0 == '\r' &&                              ch1 == '\n' &&                                  (ch2 == ' ' ||                                      ch2 == '\t'))                      {                          wrappedHeaders = true;                      }                        ch0 = ch1;                      ch1 = ch2;                  }              }
Magic Number,Profile.HeaderParser,Strat5_3_WithNoDictionary,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat5.cs,TakeMessageHeader,The following statement contains a magic number: fixed (byte* pch = remaining.Array)              {                  var scan = pch + remaining.Offset + 2;                  for (var index = 0; index != indexEnd; ++index)                  {                      var ch2 = *scan++;                      if (ch0 == '\r' &&                          ch1 == '\n' &&                              ch2 != ' ' &&                                  ch2 != '\t')                      {                          var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                          var value = "";                          if (valueEndIndex != -1)                          {                              value = Encoding.Default.GetString(                                  remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                          }                          if (wrappedHeaders)                          {                              value = value.Replace("\r\n"' " ");                          }                          AddRequestHeader(name' value);                          baton.Skip(index + 2);                          return true;                      }                      if (colonIndex == -1 && ch0 == ':')                      {                          colonIndex = index;                      }                      else if (colonIndex != -1 &&                          ch0 != ' ' &&                              ch0 != '\t' &&                                  ch0 != '\r' &&                                      ch0 != '\n')                      {                          if (valueStartIndex == -1)                          {                              valueStartIndex = index;                          }                          valueEndIndex = index + 1;                      }                      else if (!wrappedHeaders &&                          ch0 == '\r' &&                              ch1 == '\n' &&                                  (ch2 == ' ' ||                                      ch2 == '\t'))                      {                          wrappedHeaders = true;                      }                        ch0 = ch1;                      ch1 = ch2;                  }              }
Magic Number,Profile.HeaderParser,Strat3_FixedBytePtr,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat3.cs,TakeMessageHeader,The following statement contains a magic number: if (remaining.Count < 2)              {                  return false;              }
Magic Number,Profile.HeaderParser,Strat3_FixedBytePtr,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat3.cs,TakeMessageHeader,The following statement contains a magic number: if (ch0 == '\r' && ch1 == '\n')              {                  endOfHeaders = true;                  baton.Skip(2);                  return true;              }
Magic Number,Profile.HeaderParser,Strat3_FixedBytePtr,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat3.cs,TakeMessageHeader,The following statement contains a magic number: if (remaining.Count < 3)              {                  return false;              }
Magic Number,Profile.HeaderParser,Strat3_FixedBytePtr,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat3.cs,TakeMessageHeader,The following statement contains a magic number: var indexEnd = remaining.Count - 2;
Magic Number,Profile.HeaderParser,Strat3_FixedBytePtr,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat3.cs,TakeMessageHeader,The following statement contains a magic number: fixed (byte* pch = remaining.Array)              {                  var scan = pch + remaining.Offset + 2;                  for (var index = 0; index != indexEnd; ++index)                  {                      var ch2 = *scan++;                      if (ch0 == '\r' &&                          ch1 == '\n' &&                              ch2 != ' ' &&                                  ch2 != '\t')                      {                          var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                          var value = "";                          if (valueEndIndex != -1)                          {                              value = Encoding.Default.GetString(                                  remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                          }                          if (wrappedHeaders)                          {                              value = value.Replace("\r\n"' " ");                          }                          AddRequestHeader(name' value);                          baton.Skip(index + 2);                          return true;                      }                      if (colonIndex == -1 && ch0 == ':')                      {                          colonIndex = index;                      }                      else if (colonIndex != -1 &&                          ch0 != ' ' &&                              ch0 != '\t' &&                                  ch0 != '\r' &&                                      ch0 != '\n')                      {                          if (valueStartIndex == -1)                          {                              valueStartIndex = index;                          }                          valueEndIndex = index + 1;                      }                      else if (!wrappedHeaders &&                          ch0 == '\r' &&                              ch1 == '\n' &&                                  (ch2 == ' ' ||                                      ch2 == '\t'))                      {                          wrappedHeaders = true;                      }                        ch0 = ch1;                      ch1 = ch2;                  }              }
Magic Number,Profile.HeaderParser,Strat3_FixedBytePtr,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat3.cs,TakeMessageHeader,The following statement contains a magic number: fixed (byte* pch = remaining.Array)              {                  var scan = pch + remaining.Offset + 2;                  for (var index = 0; index != indexEnd; ++index)                  {                      var ch2 = *scan++;                      if (ch0 == '\r' &&                          ch1 == '\n' &&                              ch2 != ' ' &&                                  ch2 != '\t')                      {                          var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                          var value = "";                          if (valueEndIndex != -1)                          {                              value = Encoding.Default.GetString(                                  remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                          }                          if (wrappedHeaders)                          {                              value = value.Replace("\r\n"' " ");                          }                          AddRequestHeader(name' value);                          baton.Skip(index + 2);                          return true;                      }                      if (colonIndex == -1 && ch0 == ':')                      {                          colonIndex = index;                      }                      else if (colonIndex != -1 &&                          ch0 != ' ' &&                              ch0 != '\t' &&                                  ch0 != '\r' &&                                      ch0 != '\n')                      {                          if (valueStartIndex == -1)                          {                              valueStartIndex = index;                          }                          valueEndIndex = index + 1;                      }                      else if (!wrappedHeaders &&                          ch0 == '\r' &&                              ch1 == '\n' &&                                  (ch2 == ' ' ||                                      ch2 == '\t'))                      {                          wrappedHeaders = true;                      }                        ch0 = ch1;                      ch1 = ch2;                  }              }
Magic Number,Profile.HeaderParser,Strat2_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat2.cs,TakeMessageHeader,The following statement contains a magic number: if (remaining.Count < 2)              {                  return false;              }
Magic Number,Profile.HeaderParser,Strat2_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat2.cs,TakeMessageHeader,The following statement contains a magic number: if (ch0 == '\r' && ch1 == '\n')              {                  endOfHeaders = true;                  baton.Skip(2);                  return true;              }
Magic Number,Profile.HeaderParser,Strat2_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat2.cs,TakeMessageHeader,The following statement contains a magic number: if (remaining.Count < 3)              {                  return false;              }
Magic Number,Profile.HeaderParser,Strat2_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat2.cs,TakeMessageHeader,The following statement contains a magic number: for (var index = 0; index != remaining.Count - 2; ++index)              {                  var ch2 = remaining.Array[remaining.Offset + index + 2];                  if (ch0 == '\r' &&                      ch1 == '\n' &&                          ch2 != ' ' &&                              ch2 != '\t')                  {                      var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                      var value = "";                      if (valueEndIndex != -1)                      {                          value = Encoding.Default.GetString(                              remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                      }                      if (wrappedHeaders)                      {                          value = value.Replace("\r\n"' " ");                      }                      AddRequestHeader(name' value);                      baton.Skip(index + 2);                      return true;                  }                  if (colonIndex == -1 && ch0 == ':')                  {                      colonIndex = index;                  }                  else if (colonIndex != -1 &&                      ch0 != ' ' &&                          ch0 != '\t' &&                              ch0 != '\r' &&                                  ch0 != '\n')                  {                      if (valueStartIndex == -1)                      {                          valueStartIndex = index;                      }                      valueEndIndex = index + 1;                  }                  else if (!wrappedHeaders &&                      ch0 == '\r' &&                          ch1 == '\n' &&                              (ch2 == ' ' ||                                  ch2 == '\t'))                  {                      wrappedHeaders = true;                  }                    ch0 = ch1;                  ch1 = ch2;              }
Magic Number,Profile.HeaderParser,Strat2_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat2.cs,TakeMessageHeader,The following statement contains a magic number: for (var index = 0; index != remaining.Count - 2; ++index)              {                  var ch2 = remaining.Array[remaining.Offset + index + 2];                  if (ch0 == '\r' &&                      ch1 == '\n' &&                          ch2 != ' ' &&                              ch2 != '\t')                  {                      var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                      var value = "";                      if (valueEndIndex != -1)                      {                          value = Encoding.Default.GetString(                              remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                      }                      if (wrappedHeaders)                      {                          value = value.Replace("\r\n"' " ");                      }                      AddRequestHeader(name' value);                      baton.Skip(index + 2);                      return true;                  }                  if (colonIndex == -1 && ch0 == ':')                  {                      colonIndex = index;                  }                  else if (colonIndex != -1 &&                      ch0 != ' ' &&                          ch0 != '\t' &&                              ch0 != '\r' &&                                  ch0 != '\n')                  {                      if (valueStartIndex == -1)                      {                          valueStartIndex = index;                      }                      valueEndIndex = index + 1;                  }                  else if (!wrappedHeaders &&                      ch0 == '\r' &&                          ch1 == '\n' &&                              (ch2 == ' ' ||                                  ch2 == '\t'))                  {                      wrappedHeaders = true;                  }                    ch0 = ch1;                  ch1 = ch2;              }
Magic Number,Profile.HeaderParser,Strat2_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat2.cs,TakeMessageHeader,The following statement contains a magic number: for (var index = 0; index != remaining.Count - 2; ++index)              {                  var ch2 = remaining.Array[remaining.Offset + index + 2];                  if (ch0 == '\r' &&                      ch1 == '\n' &&                          ch2 != ' ' &&                              ch2 != '\t')                  {                      var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                      var value = "";                      if (valueEndIndex != -1)                      {                          value = Encoding.Default.GetString(                              remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                      }                      if (wrappedHeaders)                      {                          value = value.Replace("\r\n"' " ");                      }                      AddRequestHeader(name' value);                      baton.Skip(index + 2);                      return true;                  }                  if (colonIndex == -1 && ch0 == ':')                  {                      colonIndex = index;                  }                  else if (colonIndex != -1 &&                      ch0 != ' ' &&                          ch0 != '\t' &&                              ch0 != '\r' &&                                  ch0 != '\n')                  {                      if (valueStartIndex == -1)                      {                          valueStartIndex = index;                      }                      valueEndIndex = index + 1;                  }                  else if (!wrappedHeaders &&                      ch0 == '\r' &&                          ch1 == '\n' &&                              (ch2 == ' ' ||                                  ch2 == '\t'))                  {                      wrappedHeaders = true;                  }                    ch0 = ch1;                  ch1 = ch2;              }
Magic Number,Profile.HeaderParser,Program,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Program.cs,Main,The following statement contains a magic number: for (;;)              {                  var samples = Enumerable.Range(0' 10);                    var measures = Strats()                      .Select(                          s => new                          {                              Strat = s'                              Stopwatch = samples                                  .Select(x => new Stopwatch())                                  .ToArray()                          }).ToArray();                    Console.WriteLine("Starting");                  foreach (var sample in samples)                  {                      foreach (var data in datas)                      {                          foreach (var measure in measures)                          {                              Action after = () => { };                              measure.Stopwatch[sample].Start();                              foreach (var loop in Enumerable.Range(0' 10000))                              {                                  var strat = measure.Strat();                                    var baton = new Baton(new MemoryPool())                                  {                                      Buffer = new ArraySegment<byte>(data)'                                      RemoteIntakeFin = false'                                  };                                  var endOfHeaders = false;                                  while (!endOfHeaders)                                  {                                      if (!strat.TakeMessageHeader(baton' out endOfHeaders))                                      {                                          break;                                      }                                  }                                      if (loop == 0 && sample == 0)                                  {                                      after = () =>                                      {                                          Console.WriteLine("{0}"' strat.GetType().Name);                                          foreach (var kv in strat.Headers)                                          {                                              Console.WriteLine("  {0}: {1}"' kv.Key' kv.Value);                                          }                                      };                                  }                              }                              measure.Stopwatch[sample].Stop();                              after();                          }                      }                  }                    foreach (var measure in measures)                  {                      Console.WriteLine(                          "{0} {1}\r\n  {2}"'                          measure.Strat().GetType().Name'                          measure.Stopwatch                              .Aggregate(TimeSpan.Zero' (a' b) => a.Add(b.Elapsed))'                          measure.Stopwatch                              .Select(x => x.ElapsedTicks)                              .OrderBy(x => x)                              .Aggregate(""' (a' b) => a + " " + b));                  }                  Console.WriteLine("Done");                  Console.ReadLine();              }
Magic Number,Profile.HeaderParser,Program,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Program.cs,Main,The following statement contains a magic number: for (;;)              {                  var samples = Enumerable.Range(0' 10);                    var measures = Strats()                      .Select(                          s => new                          {                              Strat = s'                              Stopwatch = samples                                  .Select(x => new Stopwatch())                                  .ToArray()                          }).ToArray();                    Console.WriteLine("Starting");                  foreach (var sample in samples)                  {                      foreach (var data in datas)                      {                          foreach (var measure in measures)                          {                              Action after = () => { };                              measure.Stopwatch[sample].Start();                              foreach (var loop in Enumerable.Range(0' 10000))                              {                                  var strat = measure.Strat();                                    var baton = new Baton(new MemoryPool())                                  {                                      Buffer = new ArraySegment<byte>(data)'                                      RemoteIntakeFin = false'                                  };                                  var endOfHeaders = false;                                  while (!endOfHeaders)                                  {                                      if (!strat.TakeMessageHeader(baton' out endOfHeaders))                                      {                                          break;                                      }                                  }                                      if (loop == 0 && sample == 0)                                  {                                      after = () =>                                      {                                          Console.WriteLine("{0}"' strat.GetType().Name);                                          foreach (var kv in strat.Headers)                                          {                                              Console.WriteLine("  {0}: {1}"' kv.Key' kv.Value);                                          }                                      };                                  }                              }                              measure.Stopwatch[sample].Stop();                              after();                          }                      }                  }                    foreach (var measure in measures)                  {                      Console.WriteLine(                          "{0} {1}\r\n  {2}"'                          measure.Strat().GetType().Name'                          measure.Stopwatch                              .Aggregate(TimeSpan.Zero' (a' b) => a.Add(b.Elapsed))'                          measure.Stopwatch                              .Select(x => x.ElapsedTicks)                              .OrderBy(x => x)                              .Aggregate(""' (a' b) => a + " " + b));                  }                  Console.WriteLine("Done");                  Console.ReadLine();              }
Magic Number,Profile.HeaderParser,Strat1_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat1.cs,TakeMessageHeader,The following statement contains a magic number: if (remaining.Count < 2)              {                  return false;              }
Magic Number,Profile.HeaderParser,Strat1_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat1.cs,TakeMessageHeader,The following statement contains a magic number: if (ch0 == '\r' && ch1 == '\n')              {                  endOfHeaders = true;                  baton.Skip(2);                  return true;              }
Magic Number,Profile.HeaderParser,Strat1_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat1.cs,TakeMessageHeader,The following statement contains a magic number: if (remaining.Count < 3)              {                  return false;              }
Magic Number,Profile.HeaderParser,Strat1_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat1.cs,TakeMessageHeader,The following statement contains a magic number: for (var index = 0; index != remaining.Count - 2; ++index)              {                  var ch2 = remaining.Array[remaining.Offset + index + 2];                  if (ch0 == '\r' &&                      ch1 == '\n' &&                          ch2 != ' ' &&                              ch2 != '\t')                  {                      var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                      var value = "";                      if (valueEndIndex != -1)                      {                          value = Encoding.Default.GetString(                              remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                      }                      if (wrappedHeaders)                      {                          value = value.Replace("\r\n"' " ");                      }                      AddRequestHeader(name' value);                      baton.Skip(index + 2);                      return true;                  }                  if (colonIndex == -1 && ch0 == ':')                  {                      colonIndex = index;                  }                  else if (colonIndex != -1 &&                      ch0 != ' ' &&                          ch0 != '\t' &&                              ch0 != '\r' &&                                  ch0 != '\n')                  {                      if (valueStartIndex == -1)                      {                          valueStartIndex = index;                      }                      valueEndIndex = index + 1;                  }                  else if (!wrappedHeaders &&                      ch0 == '\r' &&                          ch1 == '\n' &&                              (ch2 == ' ' ||                                  ch2 == '\t'))                  {                      wrappedHeaders = true;                  }                    ch0 = ch1;                  ch1 = ch2;              }
Magic Number,Profile.HeaderParser,Strat1_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat1.cs,TakeMessageHeader,The following statement contains a magic number: for (var index = 0; index != remaining.Count - 2; ++index)              {                  var ch2 = remaining.Array[remaining.Offset + index + 2];                  if (ch0 == '\r' &&                      ch1 == '\n' &&                          ch2 != ' ' &&                              ch2 != '\t')                  {                      var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                      var value = "";                      if (valueEndIndex != -1)                      {                          value = Encoding.Default.GetString(                              remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                      }                      if (wrappedHeaders)                      {                          value = value.Replace("\r\n"' " ");                      }                      AddRequestHeader(name' value);                      baton.Skip(index + 2);                      return true;                  }                  if (colonIndex == -1 && ch0 == ':')                  {                      colonIndex = index;                  }                  else if (colonIndex != -1 &&                      ch0 != ' ' &&                          ch0 != '\t' &&                              ch0 != '\r' &&                                  ch0 != '\n')                  {                      if (valueStartIndex == -1)                      {                          valueStartIndex = index;                      }                      valueEndIndex = index + 1;                  }                  else if (!wrappedHeaders &&                      ch0 == '\r' &&                          ch1 == '\n' &&                              (ch2 == ' ' ||                                  ch2 == '\t'))                  {                      wrappedHeaders = true;                  }                    ch0 = ch1;                  ch1 = ch2;              }
Magic Number,Profile.HeaderParser,Strat1_Current,C:\repos\FireflyServer_firefly\src\test\Profile.HeaderParser\Strat1.cs,TakeMessageHeader,The following statement contains a magic number: for (var index = 0; index != remaining.Count - 2; ++index)              {                  var ch2 = remaining.Array[remaining.Offset + index + 2];                  if (ch0 == '\r' &&                      ch1 == '\n' &&                          ch2 != ' ' &&                              ch2 != '\t')                  {                      var name = Encoding.Default.GetString(remaining.Array' remaining.Offset' colonIndex);                      var value = "";                      if (valueEndIndex != -1)                      {                          value = Encoding.Default.GetString(                              remaining.Array' remaining.Offset + valueStartIndex' valueEndIndex - valueStartIndex);                      }                      if (wrappedHeaders)                      {                          value = value.Replace("\r\n"' " ");                      }                      AddRequestHeader(name' value);                      baton.Skip(index + 2);                      return true;                  }                  if (colonIndex == -1 && ch0 == ':')                  {                      colonIndex = index;                  }                  else if (colonIndex != -1 &&                      ch0 != ' ' &&                          ch0 != '\t' &&                              ch0 != '\r' &&                                  ch0 != '\n')                  {                      if (valueStartIndex == -1)                      {                          valueStartIndex = index;                      }                      valueEndIndex = index + 1;                  }                  else if (!wrappedHeaders &&                      ch0 == '\r' &&                          ch1 == '\n' &&                              (ch2 == ' ' ||                                  ch2 == '\t'))                  {                      wrappedHeaders = true;                  }                    ch0 = ch1;                  ch1 = ch2;              }
