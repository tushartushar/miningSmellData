Implementation smell,Namespace,Class,File,Method,Description
Long Method,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The method has 412 lines of code.
Complex Method,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,Cyclomatic complexity of the method is 11
Complex Method,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,Cyclomatic complexity of the method is 12
Complex Method,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,DeleteAlerts,Cyclomatic complexity of the method is 8
Complex Method,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,LoadSettings,Cyclomatic complexity of the method is 10
Complex Method,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,Cyclomatic complexity of the method is 66
Complex Method,eRepCompanyChecker,Program,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Program.cs,Main,Cyclomatic complexity of the method is 24
Complex Method,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,Cyclomatic complexity of the method is 12
Complex Method,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,Cyclomatic complexity of the method is 10
Long Parameter List,eRepCompanyChecker,CheckerBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerBot.cs,CheckerBot,The method has 6 parameters.
Long Parameter List,eRepCompanyChecker,DonaterBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\DonaterBot.cs,DonaterBot,The method has 7 parameters.
Long Parameter List,eRepCompanyChecker,DonaterBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\DonaterBot.cs,DonateItem,The method has 5 parameters.
Long Parameter List,eRepCompanyChecker,TraderBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\TraderBot.cs,TraderBot,The method has 6 parameters.
Long Parameter List,eRepCompanyChecker,TraderBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\TraderBot.cs,SetOnSale,The method has 6 parameters.
Long Statement,eRepCompanyChecker,CheckerBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerBot.cs,GetCompanyWorkers,The length of the statement  "	m_Response = m_Client.DownloadString ("http://economy.erepublik.com/en/company/employees/" + sCompany + "/" + weekNum.ToString ()); " is 131.
Long Statement,eRepCompanyChecker,CheckerBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerBot.cs,GetCompanyWorkers,The length of the statement  "	string sPageCount = Regex.Match (m_Response' "<a href=\"/en/company/employees/" + sCompany + "/" + weekNum.ToString () + "/([0-9.]{1'9})\" class=\"last \" title=").Groups [1].Value; " is 181.
Long Statement,eRepCompanyChecker,CheckerBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerBot.cs,GetCompanyWorkers,The length of the statement  "		m_Response = m_Client.DownloadString ("http://economy.erepublik.com/en/company/employees/" + sCompany + "/" + weekNum.ToString () + "/" + i.ToString ()); " is 153.
Long Statement,eRepCompanyChecker,CheckerBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerBot.cs,GetCompanyWorkers,The length of the statement  "		Match mc = Regex.Match (m_Response' "/en/company/fire-employee/" + sBuf + "/(.*)/" + weekNum.ToString () + "/" + i.ToString ()); " is 128.
Long Statement,eRepCompanyChecker,CheckerBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerBot.cs,FireWorker,The length of the statement  "	m_Response = m_Client.UploadString ("http://economy.erepublik.com/en/company/fire-employee/" + sBuf + "/" + iWorker.ToString () + "/" + weekNum.ToString () + "/1"' PostData); " is 174.
Long Statement,eRepCompanyChecker,CheckerForm,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerForm.cs,button1_Click,The length of the statement  "	if (sLogin.Length == 0 || sPassword.Length == 0 || sCompanyNum.Length == 0 || sSec.Length == 0 || sBotsNum.Length == 0 || !int.TryParse (sBotsNum' out iNum)) { " is 159.
Long Statement,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The length of the statement  "	CheckerBot bt = new CheckerBot (sLogin' sLogin' sPassword' "Mozilla//4.0 (compatible; MSIE 7.0; Windows NT 6.0)"' ""' 0); " is 121.
Long Statement,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,DeleteAlerts,The length of the statement  "	CheckerBot bt = new CheckerBot (sLogin' sLogin' sPassword' "Mozilla//4.0 (compatible; MSIE 7.0; Windows NT 6.0)"' ""' 0); " is 121.
Long Statement,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The length of the statement  "		ConsoleLog.WriteLine ("Usage: armysupply eLogin ePassword ePin gLogin gPassword document_name sheet_name do_tanks do_food food_q period max_tanks max_health validation_type(none/MU/citizenship) do_init_block"); " is 210.
Long Statement,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The length of the statement  "		ConsoleLog.WriteLine ("Example: armysupply snab_org 123456 1111 xxx@gmail.com 54321 \"Army supply\" \"Sheet1\" true true 5 60 8 300 MU false"); " is 143.
Long Statement,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The length of the statement  "	DonaterBot bt = new DonaterBot (eLogin' eLogin' ePassword' ePin' "Mozilla//4.0 (compatible; MSIE 7.0; Windows NT 6.0)"' Globals.BotConfig.AntiGateKey' Globals.BotConfig.precaptchaBufferSize); " is 191.
Long Statement,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The length of the statement  "				ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood); " is 228.
Long Statement,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The length of the statement  "					foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2)))); " is 127.
Long Statement,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The length of the statement  "				if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) { " is 123.
Long Statement,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The length of the statement  "				if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) { " is 177.
Long Statement,eRepCompanyChecker,DonaterBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\DonaterBot.cs,DonateItem,The length of the statement  "		string PostData = System.Web.HttpUtility.UrlEncode ("donate_form[amount]") + "=" + amount + "&" + System.Web.HttpUtility.UrlEncode ("donate_form[industryId]") + "=" + industry + "&" + System.Web.HttpUtility.UrlEncode ("donate_form[quality]") + "=" + quality + "&" + System.Web.HttpUtility.UrlEncode ("donate_form[_csrf_token]") + "=" + token; " is 342.
Long Statement,eRepCompanyChecker,DonaterBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\DonaterBot.cs,DonateItem,The length of the statement  "			PostData = PostData + "&" + "recaptcha_challenge_field=" + captcha.ChallengeID + "&" + "&recaptcha_response_field=" + System.Web.HttpUtility.UrlEncode (captcha.CaptchaText) + "&" + "&commit=Continue"; " is 200.
Long Statement,eRepCompanyChecker,Globals,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Program.cs,Init,The length of the statement  "	ErepAgeStart = new DateTime (Config.GetValue ("time"' "zeroyear"' 2007)' Config.GetValue ("time"' "zeromounth"' 11)' Config.GetValue ("time"' "zeroday"' 20)); " is 158.
Long Statement,eRepCompanyChecker,TraderBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\TraderBot.cs,SetOnSale,The length of the statement  "	string PostData = "industryId=" + industry + "&customization=" + quality + "&amount=" + amount + "&price=" + price + "&countryId=" + country + "&_token=" + ms_Token2; " is 166.
Complex Conditional,eRepCompanyChecker,CheckerForm,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerForm.cs,button1_Click,The conditional expression  "sLogin.Length == 0 || sPassword.Length == 0 || sCompanyNum.Length == 0 || sSec.Length == 0 || sBotsNum.Length == 0 || !int.TryParse (sBotsNum' out iNum)"  is complex.
Magic Number,eRepCompanyChecker,AutoForm,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\AutoForm.cs,button2_Click,The following statement contains a magic number: textBox1.Text = sb1.ToString ().Substring (0' 200);  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,DoSleep,The following statement contains a magic number: System.Threading.Thread.Sleep (sleepSeconds * 1000);  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting1: from " + startReferrer);  	result = Vote (svetikVoteURL' startReferrer' true);  	DoSleep (rnd.Next (5' 10));  	ConsoleLog.WriteLine ("Visiting konkurs page");  	client.Headers.Remove ("X-Requested-With");  	response = client.DownloadString (konkursURL);  	//ConsoleLog.WriteLine(response' "Response3.txt");  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  		ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  		response = client.DownloadString (referrer);  		response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  		response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  		DoSleep (rnd.Next (5' 20));  		//Vote(response' referrer' (rnd.Next(1' 10) == 1));  		Vote (response' referrer' false);  		DoSleep (rnd.Next (5' 10));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting1 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: DoSleep (rnd.Next (5' 10));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: DoSleep (rnd.Next (5' 10));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: DoSleep (rnd.Next (5' 20));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: DoSleep (rnd.Next (5' 20));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  	ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  	response = client.DownloadString (referrer);  	response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  	response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  	DoSleep (rnd.Next (5' 20));  	//Vote(response' referrer' (rnd.Next(1' 10) == 1));  	Vote (response' referrer' false);  	DoSleep (rnd.Next (5' 10));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  	ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  	response = client.DownloadString (referrer);  	response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  	response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  	DoSleep (rnd.Next (5' 20));  	//Vote(response' referrer' (rnd.Next(1' 10) == 1));  	Vote (response' referrer' false);  	DoSleep (rnd.Next (5' 10));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  	ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  	response = client.DownloadString (referrer);  	response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  	response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  	DoSleep (rnd.Next (5' 20));  	//Vote(response' referrer' (rnd.Next(1' 10) == 1));  	Vote (response' referrer' false);  	DoSleep (rnd.Next (5' 10));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  	ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  	response = client.DownloadString (referrer);  	response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  	response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  	DoSleep (rnd.Next (5' 20));  	//Vote(response' referrer' (rnd.Next(1' 10) == 1));  	Vote (response' referrer' false);  	DoSleep (rnd.Next (5' 10));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  	ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  	response = client.DownloadString (referrer);  	response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  	response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  	DoSleep (rnd.Next (5' 20));  	//Vote(response' referrer' (rnd.Next(1' 10) == 1));  	Vote (response' referrer' false);  	DoSleep (rnd.Next (5' 10));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  	ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  	response = client.DownloadString (referrer);  	response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  	response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  	DoSleep (rnd.Next (5' 20));  	//Vote(response' referrer' (rnd.Next(1' 10) == 1));  	Vote (response' referrer' false);  	DoSleep (rnd.Next (5' 10));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  	ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  	response = client.DownloadString (referrer);  	response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  	response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  	DoSleep (rnd.Next (5' 20));  	//Vote(response' referrer' (rnd.Next(1' 10) == 1));  	Vote (response' referrer' false);  	DoSleep (rnd.Next (5' 10));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  	ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  	response = client.DownloadString (referrer);  	response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  	response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  	DoSleep (rnd.Next (5' 20));  	//Vote(response' referrer' (rnd.Next(1' 10) == 1));  	Vote (response' referrer' false);  	DoSleep (rnd.Next (5' 10));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	string referrer = konkursURL + "?sort=0&sorder=&from=" + rnd.Next (2' 13) * 20;  	ConsoleLog.WriteLine ("Additional visit1 " + i.ToString () + ": " + referrer);  	response = client.DownloadString (referrer);  	response = CommonUtils.GetStringBetween (response' "<div class=\"clear sep-v-5\">"' "<div id=\"image");  	response = baseURL + CommonUtils.GetStringBetween (response' "<a href=\""' "\">");  	DoSleep (rnd.Next (5' 20));  	//Vote(response' referrer' (rnd.Next(1' 10) == 1));  	Vote (response' referrer' false);  	DoSleep (rnd.Next (5' 10));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: DoSleep (rnd.Next (5' 20));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: DoSleep (rnd.Next (5' 20));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: DoSleep (rnd.Next (5' 10));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting1,The following statement contains a magic number: DoSleep (rnd.Next (5' 10));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting2: from " + baseURL);  	client.Headers.Remove ("X-Requested-With");  	client.Referer = referrer;  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  			ConsoleLog.WriteLine ("Bad page loaded");  		}  		client.Referer = URL;  		response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  		URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  		ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  		response = client.DownloadString (URL);  		DoSleep (rnd.Next (5' 20));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting2 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting2: from " + baseURL);  	client.Headers.Remove ("X-Requested-With");  	client.Referer = referrer;  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  			ConsoleLog.WriteLine ("Bad page loaded");  		}  		client.Referer = URL;  		response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  		URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  		ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  		response = client.DownloadString (URL);  		DoSleep (rnd.Next (5' 20));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting2 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting2: from " + baseURL);  	client.Headers.Remove ("X-Requested-With");  	client.Referer = referrer;  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  			ConsoleLog.WriteLine ("Bad page loaded");  		}  		client.Referer = URL;  		response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  		URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  		ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  		response = client.DownloadString (URL);  		DoSleep (rnd.Next (5' 20));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting2 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting2: from " + baseURL);  	client.Headers.Remove ("X-Requested-With");  	client.Referer = referrer;  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  			ConsoleLog.WriteLine ("Bad page loaded");  		}  		client.Referer = URL;  		response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  		URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  		ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  		response = client.DownloadString (URL);  		DoSleep (rnd.Next (5' 20));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting2 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting2: from " + baseURL);  	client.Headers.Remove ("X-Requested-With");  	client.Referer = referrer;  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  			ConsoleLog.WriteLine ("Bad page loaded");  		}  		client.Referer = URL;  		response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  		URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  		ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  		response = client.DownloadString (URL);  		DoSleep (rnd.Next (5' 20));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting2 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting2: from " + baseURL);  	client.Headers.Remove ("X-Requested-With");  	client.Referer = referrer;  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  			ConsoleLog.WriteLine ("Bad page loaded");  		}  		client.Referer = URL;  		response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  		URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  		ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  		response = client.DownloadString (URL);  		DoSleep (rnd.Next (5' 20));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting2 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting2: from " + baseURL);  	client.Headers.Remove ("X-Requested-With");  	client.Referer = referrer;  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  			ConsoleLog.WriteLine ("Bad page loaded");  		}  		client.Referer = URL;  		response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  		URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  		ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  		response = client.DownloadString (URL);  		DoSleep (rnd.Next (5' 20));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting2 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Do visiting2: from " + baseURL);  	client.Headers.Remove ("X-Requested-With");  	client.Referer = referrer;  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  	for (int i = 1; i <= rnd.Next (5' 20); i++) {  		if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  			ConsoleLog.WriteLine ("Bad page loaded");  		}  		client.Referer = URL;  		response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  		URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  		ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  		response = client.DownloadString (URL);  		DoSleep (rnd.Next (5' 20));  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Visiting2 error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: DoSleep (rnd.Next (5' 20));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: DoSleep (rnd.Next (5' 20));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  		ConsoleLog.WriteLine ("Bad page loaded");  	}  	client.Referer = URL;  	response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  	URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  	ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  		ConsoleLog.WriteLine ("Bad page loaded");  	}  	client.Referer = URL;  	response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  	URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  	ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  		ConsoleLog.WriteLine ("Bad page loaded");  	}  	client.Referer = URL;  	response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  	URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  	ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  		ConsoleLog.WriteLine ("Bad page loaded");  	}  	client.Referer = URL;  	response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  	URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  	ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  		ConsoleLog.WriteLine ("Bad page loaded");  	}  	client.Referer = URL;  	response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  	URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  	ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: for (int i = 1; i <= rnd.Next (5' 20); i++) {  	if (!response.Contains ("<base href=\"http://www.livemaster.ru\">")) {  		ConsoleLog.WriteLine ("Bad page loaded");  	}  	client.Referer = URL;  	response = CommonUtils.GetStringBetween (response' "<body>"' "</body>");  	URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  	ConsoleLog.WriteLine ("Additional visit2 " + i.ToString () + ": " + URL);  	response = client.DownloadString (URL);  	DoSleep (rnd.Next (5' 20));  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: URL = baseURL + "/" + CommonUtils.GetStringBetween (response' "href=\"/"' "\""' 0' rnd.Next (30' 100));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: DoSleep (rnd.Next (5' 20));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Visiting2,The following statement contains a magic number: DoSleep (rnd.Next (5' 20));  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: if (args.Length != 3) {  	PrintUsage ();  	return;  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: int.TryParse (args [2]' out delayMax);  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: try {  	int voteCounter = 0;  	while (true) {  		try {  			voteCounter++;  			ConsoleLog.WriteLine ("Vote' try " + voteCounter.ToString ());  			client = new HttpClient ();  			if (!Globals.BotConfig.useTOR) {  				client.SetProxy (Globals.BotConfig.ProxyList.GetRandomString ()' Globals.BotConfig.proxyCredentials);  			}  			else {  				client.SetProxy ("127.0.0.1:8118"' null);  				//m_Config.ProxyList.GetString(0);  				if (!(new TorClient (client.GetProxy ()' "")).GetNewIP ())  					throw new Exception ("Error getting new TOR IP");  				ConsoleLog.WriteLine ("TOR new IP obtained!");  			}  			client.UserAgent = Globals.BotConfig.UserAgentList.GetRandomString ();  			ConsoleLog.WriteLine ("Proxy: " + client.GetProxy ());  			string lastURL = "http://svetiksch.spb.ru";  			if (rnd.Next (1' 3) == 1) {  				if (rnd.Next (1' 10) <= 5)  					lastURL = "http://svetiksch.spb.ru";  				else  					lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  			}  			else {  				lastURL = Visiting2 ();  			}  			if (lastURL == baseURL) {  				throw new Exception ("Visiting2 failed");  			}  			if (!Visiting1 (lastURL)) {  				throw new Exception ("Visiting1 failed");  			}  			ConsoleLog.WriteLine ("Voting done.");  			DoSleep (rnd.Next (delayMin' delayMax));  			//ConsoleLog.WriteLine("Press any key...");  			//Console.ReadKey();  		}  		catch (System.Exception e) {  			ConsoleLog.WriteLine ("Local error: " + e.Message);  		}  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Worker error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: try {  	int voteCounter = 0;  	while (true) {  		try {  			voteCounter++;  			ConsoleLog.WriteLine ("Vote' try " + voteCounter.ToString ());  			client = new HttpClient ();  			if (!Globals.BotConfig.useTOR) {  				client.SetProxy (Globals.BotConfig.ProxyList.GetRandomString ()' Globals.BotConfig.proxyCredentials);  			}  			else {  				client.SetProxy ("127.0.0.1:8118"' null);  				//m_Config.ProxyList.GetString(0);  				if (!(new TorClient (client.GetProxy ()' "")).GetNewIP ())  					throw new Exception ("Error getting new TOR IP");  				ConsoleLog.WriteLine ("TOR new IP obtained!");  			}  			client.UserAgent = Globals.BotConfig.UserAgentList.GetRandomString ();  			ConsoleLog.WriteLine ("Proxy: " + client.GetProxy ());  			string lastURL = "http://svetiksch.spb.ru";  			if (rnd.Next (1' 3) == 1) {  				if (rnd.Next (1' 10) <= 5)  					lastURL = "http://svetiksch.spb.ru";  				else  					lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  			}  			else {  				lastURL = Visiting2 ();  			}  			if (lastURL == baseURL) {  				throw new Exception ("Visiting2 failed");  			}  			if (!Visiting1 (lastURL)) {  				throw new Exception ("Visiting1 failed");  			}  			ConsoleLog.WriteLine ("Voting done.");  			DoSleep (rnd.Next (delayMin' delayMax));  			//ConsoleLog.WriteLine("Press any key...");  			//Console.ReadKey();  		}  		catch (System.Exception e) {  			ConsoleLog.WriteLine ("Local error: " + e.Message);  		}  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Worker error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: try {  	int voteCounter = 0;  	while (true) {  		try {  			voteCounter++;  			ConsoleLog.WriteLine ("Vote' try " + voteCounter.ToString ());  			client = new HttpClient ();  			if (!Globals.BotConfig.useTOR) {  				client.SetProxy (Globals.BotConfig.ProxyList.GetRandomString ()' Globals.BotConfig.proxyCredentials);  			}  			else {  				client.SetProxy ("127.0.0.1:8118"' null);  				//m_Config.ProxyList.GetString(0);  				if (!(new TorClient (client.GetProxy ()' "")).GetNewIP ())  					throw new Exception ("Error getting new TOR IP");  				ConsoleLog.WriteLine ("TOR new IP obtained!");  			}  			client.UserAgent = Globals.BotConfig.UserAgentList.GetRandomString ();  			ConsoleLog.WriteLine ("Proxy: " + client.GetProxy ());  			string lastURL = "http://svetiksch.spb.ru";  			if (rnd.Next (1' 3) == 1) {  				if (rnd.Next (1' 10) <= 5)  					lastURL = "http://svetiksch.spb.ru";  				else  					lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  			}  			else {  				lastURL = Visiting2 ();  			}  			if (lastURL == baseURL) {  				throw new Exception ("Visiting2 failed");  			}  			if (!Visiting1 (lastURL)) {  				throw new Exception ("Visiting1 failed");  			}  			ConsoleLog.WriteLine ("Voting done.");  			DoSleep (rnd.Next (delayMin' delayMax));  			//ConsoleLog.WriteLine("Press any key...");  			//Console.ReadKey();  		}  		catch (System.Exception e) {  			ConsoleLog.WriteLine ("Local error: " + e.Message);  		}  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Worker error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: while (true) {  	try {  		voteCounter++;  		ConsoleLog.WriteLine ("Vote' try " + voteCounter.ToString ());  		client = new HttpClient ();  		if (!Globals.BotConfig.useTOR) {  			client.SetProxy (Globals.BotConfig.ProxyList.GetRandomString ()' Globals.BotConfig.proxyCredentials);  		}  		else {  			client.SetProxy ("127.0.0.1:8118"' null);  			//m_Config.ProxyList.GetString(0);  			if (!(new TorClient (client.GetProxy ()' "")).GetNewIP ())  				throw new Exception ("Error getting new TOR IP");  			ConsoleLog.WriteLine ("TOR new IP obtained!");  		}  		client.UserAgent = Globals.BotConfig.UserAgentList.GetRandomString ();  		ConsoleLog.WriteLine ("Proxy: " + client.GetProxy ());  		string lastURL = "http://svetiksch.spb.ru";  		if (rnd.Next (1' 3) == 1) {  			if (rnd.Next (1' 10) <= 5)  				lastURL = "http://svetiksch.spb.ru";  			else  				lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  		}  		else {  			lastURL = Visiting2 ();  		}  		if (lastURL == baseURL) {  			throw new Exception ("Visiting2 failed");  		}  		if (!Visiting1 (lastURL)) {  			throw new Exception ("Visiting1 failed");  		}  		ConsoleLog.WriteLine ("Voting done.");  		DoSleep (rnd.Next (delayMin' delayMax));  		//ConsoleLog.WriteLine("Press any key...");  		//Console.ReadKey();  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Local error: " + e.Message);  	}  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: while (true) {  	try {  		voteCounter++;  		ConsoleLog.WriteLine ("Vote' try " + voteCounter.ToString ());  		client = new HttpClient ();  		if (!Globals.BotConfig.useTOR) {  			client.SetProxy (Globals.BotConfig.ProxyList.GetRandomString ()' Globals.BotConfig.proxyCredentials);  		}  		else {  			client.SetProxy ("127.0.0.1:8118"' null);  			//m_Config.ProxyList.GetString(0);  			if (!(new TorClient (client.GetProxy ()' "")).GetNewIP ())  				throw new Exception ("Error getting new TOR IP");  			ConsoleLog.WriteLine ("TOR new IP obtained!");  		}  		client.UserAgent = Globals.BotConfig.UserAgentList.GetRandomString ();  		ConsoleLog.WriteLine ("Proxy: " + client.GetProxy ());  		string lastURL = "http://svetiksch.spb.ru";  		if (rnd.Next (1' 3) == 1) {  			if (rnd.Next (1' 10) <= 5)  				lastURL = "http://svetiksch.spb.ru";  			else  				lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  		}  		else {  			lastURL = Visiting2 ();  		}  		if (lastURL == baseURL) {  			throw new Exception ("Visiting2 failed");  		}  		if (!Visiting1 (lastURL)) {  			throw new Exception ("Visiting1 failed");  		}  		ConsoleLog.WriteLine ("Voting done.");  		DoSleep (rnd.Next (delayMin' delayMax));  		//ConsoleLog.WriteLine("Press any key...");  		//Console.ReadKey();  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Local error: " + e.Message);  	}  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: while (true) {  	try {  		voteCounter++;  		ConsoleLog.WriteLine ("Vote' try " + voteCounter.ToString ());  		client = new HttpClient ();  		if (!Globals.BotConfig.useTOR) {  			client.SetProxy (Globals.BotConfig.ProxyList.GetRandomString ()' Globals.BotConfig.proxyCredentials);  		}  		else {  			client.SetProxy ("127.0.0.1:8118"' null);  			//m_Config.ProxyList.GetString(0);  			if (!(new TorClient (client.GetProxy ()' "")).GetNewIP ())  				throw new Exception ("Error getting new TOR IP");  			ConsoleLog.WriteLine ("TOR new IP obtained!");  		}  		client.UserAgent = Globals.BotConfig.UserAgentList.GetRandomString ();  		ConsoleLog.WriteLine ("Proxy: " + client.GetProxy ());  		string lastURL = "http://svetiksch.spb.ru";  		if (rnd.Next (1' 3) == 1) {  			if (rnd.Next (1' 10) <= 5)  				lastURL = "http://svetiksch.spb.ru";  			else  				lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  		}  		else {  			lastURL = Visiting2 ();  		}  		if (lastURL == baseURL) {  			throw new Exception ("Visiting2 failed");  		}  		if (!Visiting1 (lastURL)) {  			throw new Exception ("Visiting1 failed");  		}  		ConsoleLog.WriteLine ("Voting done.");  		DoSleep (rnd.Next (delayMin' delayMax));  		//ConsoleLog.WriteLine("Press any key...");  		//Console.ReadKey();  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Local error: " + e.Message);  	}  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: try {  	voteCounter++;  	ConsoleLog.WriteLine ("Vote' try " + voteCounter.ToString ());  	client = new HttpClient ();  	if (!Globals.BotConfig.useTOR) {  		client.SetProxy (Globals.BotConfig.ProxyList.GetRandomString ()' Globals.BotConfig.proxyCredentials);  	}  	else {  		client.SetProxy ("127.0.0.1:8118"' null);  		//m_Config.ProxyList.GetString(0);  		if (!(new TorClient (client.GetProxy ()' "")).GetNewIP ())  			throw new Exception ("Error getting new TOR IP");  		ConsoleLog.WriteLine ("TOR new IP obtained!");  	}  	client.UserAgent = Globals.BotConfig.UserAgentList.GetRandomString ();  	ConsoleLog.WriteLine ("Proxy: " + client.GetProxy ());  	string lastURL = "http://svetiksch.spb.ru";  	if (rnd.Next (1' 3) == 1) {  		if (rnd.Next (1' 10) <= 5)  			lastURL = "http://svetiksch.spb.ru";  		else  			lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  	}  	else {  		lastURL = Visiting2 ();  	}  	if (lastURL == baseURL) {  		throw new Exception ("Visiting2 failed");  	}  	if (!Visiting1 (lastURL)) {  		throw new Exception ("Visiting1 failed");  	}  	ConsoleLog.WriteLine ("Voting done.");  	DoSleep (rnd.Next (delayMin' delayMax));  	//ConsoleLog.WriteLine("Press any key...");  	//Console.ReadKey();  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Local error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: try {  	voteCounter++;  	ConsoleLog.WriteLine ("Vote' try " + voteCounter.ToString ());  	client = new HttpClient ();  	if (!Globals.BotConfig.useTOR) {  		client.SetProxy (Globals.BotConfig.ProxyList.GetRandomString ()' Globals.BotConfig.proxyCredentials);  	}  	else {  		client.SetProxy ("127.0.0.1:8118"' null);  		//m_Config.ProxyList.GetString(0);  		if (!(new TorClient (client.GetProxy ()' "")).GetNewIP ())  			throw new Exception ("Error getting new TOR IP");  		ConsoleLog.WriteLine ("TOR new IP obtained!");  	}  	client.UserAgent = Globals.BotConfig.UserAgentList.GetRandomString ();  	ConsoleLog.WriteLine ("Proxy: " + client.GetProxy ());  	string lastURL = "http://svetiksch.spb.ru";  	if (rnd.Next (1' 3) == 1) {  		if (rnd.Next (1' 10) <= 5)  			lastURL = "http://svetiksch.spb.ru";  		else  			lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  	}  	else {  		lastURL = Visiting2 ();  	}  	if (lastURL == baseURL) {  		throw new Exception ("Visiting2 failed");  	}  	if (!Visiting1 (lastURL)) {  		throw new Exception ("Visiting1 failed");  	}  	ConsoleLog.WriteLine ("Voting done.");  	DoSleep (rnd.Next (delayMin' delayMax));  	//ConsoleLog.WriteLine("Press any key...");  	//Console.ReadKey();  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Local error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: try {  	voteCounter++;  	ConsoleLog.WriteLine ("Vote' try " + voteCounter.ToString ());  	client = new HttpClient ();  	if (!Globals.BotConfig.useTOR) {  		client.SetProxy (Globals.BotConfig.ProxyList.GetRandomString ()' Globals.BotConfig.proxyCredentials);  	}  	else {  		client.SetProxy ("127.0.0.1:8118"' null);  		//m_Config.ProxyList.GetString(0);  		if (!(new TorClient (client.GetProxy ()' "")).GetNewIP ())  			throw new Exception ("Error getting new TOR IP");  		ConsoleLog.WriteLine ("TOR new IP obtained!");  	}  	client.UserAgent = Globals.BotConfig.UserAgentList.GetRandomString ();  	ConsoleLog.WriteLine ("Proxy: " + client.GetProxy ());  	string lastURL = "http://svetiksch.spb.ru";  	if (rnd.Next (1' 3) == 1) {  		if (rnd.Next (1' 10) <= 5)  			lastURL = "http://svetiksch.spb.ru";  		else  			lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  	}  	else {  		lastURL = Visiting2 ();  	}  	if (lastURL == baseURL) {  		throw new Exception ("Visiting2 failed");  	}  	if (!Visiting1 (lastURL)) {  		throw new Exception ("Visiting1 failed");  	}  	ConsoleLog.WriteLine ("Voting done.");  	DoSleep (rnd.Next (delayMin' delayMax));  	//ConsoleLog.WriteLine("Press any key...");  	//Console.ReadKey();  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Local error: " + e.Message);  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: if (rnd.Next (1' 3) == 1) {  	if (rnd.Next (1' 10) <= 5)  		lastURL = "http://svetiksch.spb.ru";  	else  		lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  }  else {  	lastURL = Visiting2 ();  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: if (rnd.Next (1' 3) == 1) {  	if (rnd.Next (1' 10) <= 5)  		lastURL = "http://svetiksch.spb.ru";  	else  		lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  }  else {  	lastURL = Visiting2 ();  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: if (rnd.Next (1' 3) == 1) {  	if (rnd.Next (1' 10) <= 5)  		lastURL = "http://svetiksch.spb.ru";  	else  		lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  }  else {  	lastURL = Visiting2 ();  }  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: if (rnd.Next (1' 10) <= 5)  	lastURL = "http://svetiksch.spb.ru";  else  	lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  
Magic Number,eRepCompanyChecker,Badi,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Badi.cs,Worker,The following statement contains a magic number: if (rnd.Next (1' 10) <= 5)  	lastURL = "http://svetiksch.spb.ru";  else  	lastURL = "http://svetiksch.spb.ru/news/2011-05-27-345";  
Magic Number,eRepCompanyChecker,CheckerBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerBot.cs,DeleteAllAlerts,The following statement contains a magic number: do {  	if (counter > 0) {  		System.Threading.Thread.Sleep (400);  		//break;  	}  	counter++;  	ConsoleLog.WriteLine ("Deleteing alerts portion " + counter.ToString ());  }  while (DeleteAlerts (GetAlerts ()));  
Magic Number,eRepCompanyChecker,CheckerBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerBot.cs,DeleteAllAlerts,The following statement contains a magic number: if (counter > 0) {  	System.Threading.Thread.Sleep (400);  	//break;  }  
Magic Number,eRepCompanyChecker,CheckerBot,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CheckerBot.cs,DeleteAllAlerts,The following statement contains a magic number: System.Threading.Thread.Sleep (400);  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: if (args.Length != 7) {  	ConsoleLog.WriteLine ("Usage: companycheck login password companyname/companynum botscount sleeplengthsec firelast");  	ConsoleLog.WriteLine ("Example: companycheck ololo alala tratata/54321 9 30 false");  	return;  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: while (true) {  	try {  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		ConsoleLog.WriteLine ("Getting workers list");  		List<int> lst = bt.GetCompanyWorkers (sCompanyNum' weekNum);  		if (lst == null) {  			loggedIn = false;  			throw new Exception ("Error: lst == null! Try to relogin");  		}  		ConsoleLog.WriteLine (lst.Count.ToString () + " workers onboard");  		if ((iBotsNum == 0) && (lst.Count == 0)) {  			ConsoleLog.WriteLine ("All workers fired.");  			break;  		}  		while (lst.Count > iBotsNum) {  			System.Threading.Thread.Sleep (1000);  			int idx;  			if (!bFireLast)  				idx = rnd.Next (0' lst.Count - 1);  			else  				idx = lst.Count - 1;  			ConsoleLog.WriteLine ("Fire a worker " + (idx + 1).ToString ());  			bt.FireWorker (sCompanyNum' lst [idx]' weekNum);  			lst.RemoveAt (idx);  			if (bt.GetLastResponse ().IndexOf ("logout") == -1) {  				loggedIn = false;  				throw new Exception ("Logged out! Try to relogin");  			}  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Company check error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	System.Threading.Thread.Sleep (int.Parse (sSec) * 1000);  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: while (true) {  	try {  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		ConsoleLog.WriteLine ("Getting workers list");  		List<int> lst = bt.GetCompanyWorkers (sCompanyNum' weekNum);  		if (lst == null) {  			loggedIn = false;  			throw new Exception ("Error: lst == null! Try to relogin");  		}  		ConsoleLog.WriteLine (lst.Count.ToString () + " workers onboard");  		if ((iBotsNum == 0) && (lst.Count == 0)) {  			ConsoleLog.WriteLine ("All workers fired.");  			break;  		}  		while (lst.Count > iBotsNum) {  			System.Threading.Thread.Sleep (1000);  			int idx;  			if (!bFireLast)  				idx = rnd.Next (0' lst.Count - 1);  			else  				idx = lst.Count - 1;  			ConsoleLog.WriteLine ("Fire a worker " + (idx + 1).ToString ());  			bt.FireWorker (sCompanyNum' lst [idx]' weekNum);  			lst.RemoveAt (idx);  			if (bt.GetLastResponse ().IndexOf ("logout") == -1) {  				loggedIn = false;  				throw new Exception ("Logged out! Try to relogin");  			}  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Company check error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	System.Threading.Thread.Sleep (int.Parse (sSec) * 1000);  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: while (true) {  	try {  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		ConsoleLog.WriteLine ("Getting workers list");  		List<int> lst = bt.GetCompanyWorkers (sCompanyNum' weekNum);  		if (lst == null) {  			loggedIn = false;  			throw new Exception ("Error: lst == null! Try to relogin");  		}  		ConsoleLog.WriteLine (lst.Count.ToString () + " workers onboard");  		if ((iBotsNum == 0) && (lst.Count == 0)) {  			ConsoleLog.WriteLine ("All workers fired.");  			break;  		}  		while (lst.Count > iBotsNum) {  			System.Threading.Thread.Sleep (1000);  			int idx;  			if (!bFireLast)  				idx = rnd.Next (0' lst.Count - 1);  			else  				idx = lst.Count - 1;  			ConsoleLog.WriteLine ("Fire a worker " + (idx + 1).ToString ());  			bt.FireWorker (sCompanyNum' lst [idx]' weekNum);  			lst.RemoveAt (idx);  			if (bt.GetLastResponse ().IndexOf ("logout") == -1) {  				loggedIn = false;  				throw new Exception ("Logged out! Try to relogin");  			}  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Company check error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	System.Threading.Thread.Sleep (int.Parse (sSec) * 1000);  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: while (true) {  	try {  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		ConsoleLog.WriteLine ("Getting workers list");  		List<int> lst = bt.GetCompanyWorkers (sCompanyNum' weekNum);  		if (lst == null) {  			loggedIn = false;  			throw new Exception ("Error: lst == null! Try to relogin");  		}  		ConsoleLog.WriteLine (lst.Count.ToString () + " workers onboard");  		if ((iBotsNum == 0) && (lst.Count == 0)) {  			ConsoleLog.WriteLine ("All workers fired.");  			break;  		}  		while (lst.Count > iBotsNum) {  			System.Threading.Thread.Sleep (1000);  			int idx;  			if (!bFireLast)  				idx = rnd.Next (0' lst.Count - 1);  			else  				idx = lst.Count - 1;  			ConsoleLog.WriteLine ("Fire a worker " + (idx + 1).ToString ());  			bt.FireWorker (sCompanyNum' lst [idx]' weekNum);  			lst.RemoveAt (idx);  			if (bt.GetLastResponse ().IndexOf ("logout") == -1) {  				loggedIn = false;  				throw new Exception ("Logged out! Try to relogin");  			}  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Company check error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	System.Threading.Thread.Sleep (int.Parse (sSec) * 1000);  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: try {  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	ConsoleLog.WriteLine ("Getting workers list");  	List<int> lst = bt.GetCompanyWorkers (sCompanyNum' weekNum);  	if (lst == null) {  		loggedIn = false;  		throw new Exception ("Error: lst == null! Try to relogin");  	}  	ConsoleLog.WriteLine (lst.Count.ToString () + " workers onboard");  	if ((iBotsNum == 0) && (lst.Count == 0)) {  		ConsoleLog.WriteLine ("All workers fired.");  		break;  	}  	while (lst.Count > iBotsNum) {  		System.Threading.Thread.Sleep (1000);  		int idx;  		if (!bFireLast)  			idx = rnd.Next (0' lst.Count - 1);  		else  			idx = lst.Count - 1;  		ConsoleLog.WriteLine ("Fire a worker " + (idx + 1).ToString ());  		bt.FireWorker (sCompanyNum' lst [idx]' weekNum);  		lst.RemoveAt (idx);  		if (bt.GetLastResponse ().IndexOf ("logout") == -1) {  			loggedIn = false;  			throw new Exception ("Logged out! Try to relogin");  		}  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Company check error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: try {  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	ConsoleLog.WriteLine ("Getting workers list");  	List<int> lst = bt.GetCompanyWorkers (sCompanyNum' weekNum);  	if (lst == null) {  		loggedIn = false;  		throw new Exception ("Error: lst == null! Try to relogin");  	}  	ConsoleLog.WriteLine (lst.Count.ToString () + " workers onboard");  	if ((iBotsNum == 0) && (lst.Count == 0)) {  		ConsoleLog.WriteLine ("All workers fired.");  		break;  	}  	while (lst.Count > iBotsNum) {  		System.Threading.Thread.Sleep (1000);  		int idx;  		if (!bFireLast)  			idx = rnd.Next (0' lst.Count - 1);  		else  			idx = lst.Count - 1;  		ConsoleLog.WriteLine ("Fire a worker " + (idx + 1).ToString ());  		bt.FireWorker (sCompanyNum' lst [idx]' weekNum);  		lst.RemoveAt (idx);  		if (bt.GetLastResponse ().IndexOf ("logout") == -1) {  			loggedIn = false;  			throw new Exception ("Logged out! Try to relogin");  		}  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Company check error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: try {  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	ConsoleLog.WriteLine ("Getting workers list");  	List<int> lst = bt.GetCompanyWorkers (sCompanyNum' weekNum);  	if (lst == null) {  		loggedIn = false;  		throw new Exception ("Error: lst == null! Try to relogin");  	}  	ConsoleLog.WriteLine (lst.Count.ToString () + " workers onboard");  	if ((iBotsNum == 0) && (lst.Count == 0)) {  		ConsoleLog.WriteLine ("All workers fired.");  		break;  	}  	while (lst.Count > iBotsNum) {  		System.Threading.Thread.Sleep (1000);  		int idx;  		if (!bFireLast)  			idx = rnd.Next (0' lst.Count - 1);  		else  			idx = lst.Count - 1;  		ConsoleLog.WriteLine ("Fire a worker " + (idx + 1).ToString ());  		bt.FireWorker (sCompanyNum' lst [idx]' weekNum);  		lst.RemoveAt (idx);  		if (bt.GetLastResponse ().IndexOf ("logout") == -1) {  			loggedIn = false;  			throw new Exception ("Logged out! Try to relogin");  		}  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Company check error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: if (!loggedIn) {  	iTryToConnect++;  	if (iTryToConnect > 10)  		break;  	ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  	if (bt.Login ()) {  		ConsoleLog.WriteLine ("Logged in!");  		iTryToConnect = 0;  		loggedIn = true;  	}  	else {  		ConsoleLog.WriteLine ("Login failed!");  		System.Threading.Thread.Sleep (1000);  		continue;  	}  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: if (!loggedIn) {  	iTryToConnect++;  	if (iTryToConnect > 10)  		break;  	ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  	if (bt.Login ()) {  		ConsoleLog.WriteLine ("Logged in!");  		iTryToConnect = 0;  		loggedIn = true;  	}  	else {  		ConsoleLog.WriteLine ("Login failed!");  		System.Threading.Thread.Sleep (1000);  		continue;  	}  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: if (iTryToConnect > 10)  	break;  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: if (bt.Login ()) {  	ConsoleLog.WriteLine ("Logged in!");  	iTryToConnect = 0;  	loggedIn = true;  }  else {  	ConsoleLog.WriteLine ("Login failed!");  	System.Threading.Thread.Sleep (1000);  	continue;  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: while (lst.Count > iBotsNum) {  	System.Threading.Thread.Sleep (1000);  	int idx;  	if (!bFireLast)  		idx = rnd.Next (0' lst.Count - 1);  	else  		idx = lst.Count - 1;  	ConsoleLog.WriteLine ("Fire a worker " + (idx + 1).ToString ());  	bt.FireWorker (sCompanyNum' lst [idx]' weekNum);  	lst.RemoveAt (idx);  	if (bt.GetLastResponse ().IndexOf ("logout") == -1) {  		loggedIn = false;  		throw new Exception ("Logged out! Try to relogin");  	}  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,CompanyCheck,The following statement contains a magic number: System.Threading.Thread.Sleep (int.Parse (sSec) * 1000);  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,DeleteAlerts,The following statement contains a magic number: if (args.Length != 3) {  	ConsoleLog.WriteLine ("Usage: deletealerts login password");  	ConsoleLog.WriteLine ("Example: deletealerts ololo alala");  	return;  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,DeleteAlerts,The following statement contains a magic number: while (!loggedIn) {  	try {  		iTryToConnect++;  		if (iTryToConnect > 1)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  		}  	}  	catch (Exception e) {  		ConsoleLog.WriteLine ("Login for delete alerts error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,DeleteAlerts,The following statement contains a magic number: try {  	iTryToConnect++;  	if (iTryToConnect > 1)  		break;  	ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  	if (bt.Login ()) {  		ConsoleLog.WriteLine ("Logged in!");  		iTryToConnect = 0;  		loggedIn = true;  	}  	else {  		ConsoleLog.WriteLine ("Login failed!");  		System.Threading.Thread.Sleep (1000);  	}  }  catch (Exception e) {  	ConsoleLog.WriteLine ("Login for delete alerts error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,DeleteAlerts,The following statement contains a magic number: if (bt.Login ()) {  	ConsoleLog.WriteLine ("Logged in!");  	iTryToConnect = 0;  	loggedIn = true;  }  else {  	ConsoleLog.WriteLine ("Login failed!");  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,eRepCompanyChecker,CompanyChecker,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\CompanyChecker.cs,DeleteAlerts,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,LoadSettings,The following statement contains a magic number: query.MaximumColumn = 4;  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,LoadSettings,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	if (curCell.Cell.Column == 1)// fomMU  	 {  		MUList.formMUs.Add (curCell.Cell.Value);  	}  	if (curCell.Cell.Column == 2)// erepMU  	 {  		MUList.erepMUs.Add (curCell.Cell.Value);  	}  	if (curCell.Cell.Column == 4)// BlackList  	 {  		blackList.Add (curCell.Cell.Value);  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,LoadSettings,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	if (curCell.Cell.Column == 1)// fomMU  	 {  		MUList.formMUs.Add (curCell.Cell.Value);  	}  	if (curCell.Cell.Column == 2)// erepMU  	 {  		MUList.erepMUs.Add (curCell.Cell.Value);  	}  	if (curCell.Cell.Column == 4)// BlackList  	 {  		blackList.Add (curCell.Cell.Value);  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,LoadSettings,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	if (curCell.Cell.Column == 1)// fomMU  	 {  		MUList.formMUs.Add (curCell.Cell.Value);  	}  	if (curCell.Cell.Column == 2)// erepMU  	 {  		MUList.erepMUs.Add (curCell.Cell.Value);  	}  	if (curCell.Cell.Column == 4)// BlackList  	 {  		blackList.Add (curCell.Cell.Value);  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,LoadSettings,The following statement contains a magic number: if (curCell.Cell.Row < 2)  	continue;  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,LoadSettings,The following statement contains a magic number: if (curCell.Cell.Column == 2)// erepMU   {  	MUList.erepMUs.Add (curCell.Cell.Value);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,LoadSettings,The following statement contains a magic number: if (curCell.Cell.Column == 4)// BlackList   {  	blackList.Add (curCell.Cell.Value);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (args.Length != 16) {  	ConsoleLog.WriteLine ("Usage: armysupply eLogin ePassword ePin gLogin gPassword document_name sheet_name do_tanks do_food food_q period max_tanks max_health validation_type(none/MU/citizenship) do_init_block");  	ConsoleLog.WriteLine ("Example: armysupply snab_org 123456 1111 xxx@gmail.com 54321 \"Army supply\" \"Sheet1\" true true 5 60 8 300 MU false");  	return;  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: while (true) {  	try {  		ConsoleLog.WriteLine ("Loading cells...");  		#region Query cells  		AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  		CellQuery query = new CellQuery (cellLink.HRef.ToString ());  		query.ReturnEmpty = ReturnEmptyCells.yes;  		query.MaximumColumn = 13;  		CellFeed feed = sheetService.Query (query);  		List<ItemStorage> lines = new List<ItemStorage> ();  		ItemStorage item = null;  		#endregion  		#region Load cells  		lines.Clear ();  		foreach (CellEntry curCell in feed.Entries) {  			if (curCell.Cell.Row < 2)  				continue;  			item = lines.Find (l => l.row == curCell.Cell.Row);  			if (item == null) {  				item = new ItemStorage ();  				lines.Add (item);  				item.row = curCell.Cell.Row;  			}  			if (curCell.Cell.Column == 1)// time  			 {  				item.time = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 2)// login  			 {  				item.login = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 3)// link to profile  			 {  				item.personID = curCell.Cell.Value;  				try {  					item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  					Convert.ToInt64 (item.personID);  				}  				catch {  					item.personID = "";  				}  				// Cut ID from link  			}  			if (curCell.Cell.Column == 4)// wellness  			 {  				try {  					item.wellness = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 5)// needed tanks  			 {  				try {  					item.tanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.tanks = 0;  				}  			}  			if (curCell.Cell.Column == 6)// military unit  			 {  				item.militaryUnit = curCell.Cell.Value;  			}  			if (curCell.Cell.Column == 8)// done tanks  			 {  				item.doneTanksCell = curCell;  				try {  					item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.wellness = 0;  				}  			}  			if (curCell.Cell.Column == 9)// done food q  			 {  				try {  					item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFoodQ = 0;  				}  				item.doneFoodQCell = curCell;  			}  			if (curCell.Cell.Column == 10)// done food  			 {  				item.doneFoodCell = curCell;  				try {  					item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  				}  				catch {  					item.doneFood = 0;  				}  			}  			if (curCell.Cell.Column == 11)// autocomment cell  			 {  				item.comment = curCell.Cell.Value;  				item.commentCell = curCell;  			}  			if (curCell.Cell.Column == 12)// tanks limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.tanksLimit = -1;  				}  				catch {  					item.tanksLimit = -1;  				}  				item.tanksLimitCell = curCell;  			}  			if (curCell.Cell.Column == 13)// HP limit cell  			 {  				try {  					if (!String.IsNullOrEmpty (curCell.Cell.Value))  						item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  					else  						item.foodLimit = -1;  				}  				catch {  					item.foodLimit = -1;  				}  				item.foodLimitCell = curCell;  			}  		}  		ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  		#endregion  		#region Parce cells  		int row = 0;  		List<ItemStorage> tmpList = new List<ItemStorage> (lines);  		foreach (ItemStorage testItem in tmpList) {  			row++;  			if (string.IsNullOrEmpty (testItem.time)) {  				lines.Remove (testItem);  				continue;  			}  			if (!string.IsNullOrEmpty (testItem.comment)) {  				lines.Remove (testItem);  				continue;  			}  			if (string.IsNullOrEmpty (testItem.personID)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad profile";  				testItem.commentCell.Update ();  				continue;  			}  			if (blackList.Contains (testItem.login)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Blacklist";  				testItem.commentCell.Update ();  				continue;  			}  			if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "MU not in list";  				testItem.commentCell.Update ();  				continue;  			}  			if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  				testItem.commentCell.Update ();  				continue;  			}  			//if (testItem.tanks > 30)  			//{  			//    lines.Remove(testItem);  			//    testItem.commentCell.Cell.InputValue = "Bad tanks";  			//    testItem.commentCell.Update();  			//    continue;  			//}  			if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  				lines.Remove (testItem);  				testItem.commentCell.Cell.InputValue = "Duplicate record";  				testItem.commentCell.Update ();  				continue;  			}  			if (testItem.tanksLimit == -1) {  				if (bDoInitBlock) {  					testItem.tanksLimit = 0;  				}  				else {  					testItem.tanksLimit = iMaxTanks;  				}  				testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  				testItem.tanksLimitCell.Update ();  			}  			if (testItem.foodLimit == -1) {  				if (bDoInitBlock) {  					testItem.foodLimit = 0;  				}  				else {  					testItem.foodLimit = iMaxHP;  				}  				testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  				testItem.foodLimitCell.Update ();  			}  			testItem.viewedForDuplicate = true;  			ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  		}  		#endregion  		#region Log in  		if (!loggedIn) {  			iTryToConnect++;  			if (iTryToConnect > 10)  				break;  			ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				iTryToConnect = 0;  				loggedIn = true;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  		#endregion  		//Process donations  		foreach (ItemStorage donateItem in lines) {  			ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  			#region Calculate quantities  			int foodQty;  			if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  				foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  				foodQty = foodQty - donateItem.doneFood;  			}  			else {  				foodQty = 0;  			}  			int tankQty;  			if (bDoTanks) {  				tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  				tankQty = tankQty - donateItem.doneTanks;  			}  			else {  				tankQty = 0;  			}  			if ((foodQty <= 0) && (tankQty <= 0)) {  				ConsoleLog.WriteLine ("Nothing to donate");  				continue;  			}  			#endregion  			#region Open pages and validate  			string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  				ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  				ConsoleLog.WriteLine ("Donating login validation failed");  				donateItem.commentCell.Cell.InputValue = "Profile != Login";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("Login validated");  			}  			if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  				ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  				donateItem.commentCell.Cell.InputValue = "Profile != MU";  				donateItem.commentCell.Update ();  				continue;  			}  			else {  				ConsoleLog.WriteLine ("MU validated");  			}  			srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  			bt.CustomRequest (srcPage);  			if (bt.CheckPin (true)) {  				bt.SubmitPin ();  			}  			if (bt.CheckPin (true)) {  				ConsoleLog.WriteLine ("Pin validation failed");  				break;  			}  			if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  				ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  				loggedIn = false;  				break;  			}  			token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  			#endregion  			#region Donate food  			if (foodQty > 0) {  				ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  				if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating food success");  					donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  					donateItem.doneFoodQCell.Update ();  					donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  					donateItem.doneFoodCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating food failed");  					//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No food needed");  			}  			#endregion  			#region Donate tanks  			if (tankQty > 0) {  				ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  				if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  				 {  					ConsoleLog.WriteLine ("Donating tanks success");  					donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  					donateItem.doneTanksCell.Update ();  				}  				else {  					ConsoleLog.WriteLine ("Donating tanks failed");  					ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  				}  				ConsoleLog.WriteLine ("Wait 5 sec...");  				System.Threading.Thread.Sleep (5 * 1000);  			}  			else {  				ConsoleLog.WriteLine ("No tanks needed");  			}  			#endregion  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("Donater error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  	ConsoleLog.WriteLine ("Waiting for next check");  	//break;  	System.Threading.Thread.Sleep (iPeriod * 1000);  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: try {  	ConsoleLog.WriteLine ("Loading cells...");  	#region Query cells  	AtomLink cellLink = wsSnab.Links.FindService (GDataSpreadsheetsNameTable.CellRel' null);  	CellQuery query = new CellQuery (cellLink.HRef.ToString ());  	query.ReturnEmpty = ReturnEmptyCells.yes;  	query.MaximumColumn = 13;  	CellFeed feed = sheetService.Query (query);  	List<ItemStorage> lines = new List<ItemStorage> ();  	ItemStorage item = null;  	#endregion  	#region Load cells  	lines.Clear ();  	foreach (CellEntry curCell in feed.Entries) {  		if (curCell.Cell.Row < 2)  			continue;  		item = lines.Find (l => l.row == curCell.Cell.Row);  		if (item == null) {  			item = new ItemStorage ();  			lines.Add (item);  			item.row = curCell.Cell.Row;  		}  		if (curCell.Cell.Column == 1)// time  		 {  			item.time = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 2)// login  		 {  			item.login = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 3)// link to profile  		 {  			item.personID = curCell.Cell.Value;  			try {  				item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  				Convert.ToInt64 (item.personID);  			}  			catch {  				item.personID = "";  			}  			// Cut ID from link  		}  		if (curCell.Cell.Column == 4)// wellness  		 {  			try {  				item.wellness = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 5)// needed tanks  		 {  			try {  				item.tanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.tanks = 0;  			}  		}  		if (curCell.Cell.Column == 6)// military unit  		 {  			item.militaryUnit = curCell.Cell.Value;  		}  		if (curCell.Cell.Column == 8)// done tanks  		 {  			item.doneTanksCell = curCell;  			try {  				item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.wellness = 0;  			}  		}  		if (curCell.Cell.Column == 9)// done food q  		 {  			try {  				item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFoodQ = 0;  			}  			item.doneFoodQCell = curCell;  		}  		if (curCell.Cell.Column == 10)// done food  		 {  			item.doneFoodCell = curCell;  			try {  				item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  			}  			catch {  				item.doneFood = 0;  			}  		}  		if (curCell.Cell.Column == 11)// autocomment cell  		 {  			item.comment = curCell.Cell.Value;  			item.commentCell = curCell;  		}  		if (curCell.Cell.Column == 12)// tanks limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.tanksLimit = -1;  			}  			catch {  				item.tanksLimit = -1;  			}  			item.tanksLimitCell = curCell;  		}  		if (curCell.Cell.Column == 13)// HP limit cell  		 {  			try {  				if (!String.IsNullOrEmpty (curCell.Cell.Value))  					item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  				else  					item.foodLimit = -1;  			}  			catch {  				item.foodLimit = -1;  			}  			item.foodLimitCell = curCell;  		}  	}  	ConsoleLog.WriteLine ("Items loaded: " + lines.Count);  	#endregion  	#region Parce cells  	int row = 0;  	List<ItemStorage> tmpList = new List<ItemStorage> (lines);  	foreach (ItemStorage testItem in tmpList) {  		row++;  		if (string.IsNullOrEmpty (testItem.time)) {  			lines.Remove (testItem);  			continue;  		}  		if (!string.IsNullOrEmpty (testItem.comment)) {  			lines.Remove (testItem);  			continue;  		}  		if (string.IsNullOrEmpty (testItem.personID)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad profile";  			testItem.commentCell.Update ();  			continue;  		}  		if (blackList.Contains (testItem.login)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Blacklist";  			testItem.commentCell.Update ();  			continue;  		}  		if ((sValidation.ToLower () == "mu") && (String.IsNullOrEmpty (MUList [testItem.militaryUnit]))) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "MU not in list";  			testItem.commentCell.Update ();  			continue;  		}  		if ((testItem.wellness == 0) && (testItem.tanks == 0)) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Bad wellness/tanks";  			testItem.commentCell.Update ();  			continue;  		}  		//if (testItem.tanks > 30)  		//{  		//    lines.Remove(testItem);  		//    testItem.commentCell.Cell.InputValue = "Bad tanks";  		//    testItem.commentCell.Update();  		//    continue;  		//}  		if (tmpList.Find (o => (o.personID == testItem.personID && o.viewedForDuplicate)) != null) {  			lines.Remove (testItem);  			testItem.commentCell.Cell.InputValue = "Duplicate record";  			testItem.commentCell.Update ();  			continue;  		}  		if (testItem.tanksLimit == -1) {  			if (bDoInitBlock) {  				testItem.tanksLimit = 0;  			}  			else {  				testItem.tanksLimit = iMaxTanks;  			}  			testItem.tanksLimitCell.Cell.InputValue = testItem.tanksLimit.ToString ();  			testItem.tanksLimitCell.Update ();  		}  		if (testItem.foodLimit == -1) {  			if (bDoInitBlock) {  				testItem.foodLimit = 0;  			}  			else {  				testItem.foodLimit = iMaxHP;  			}  			testItem.foodLimitCell.Cell.InputValue = testItem.foodLimit.ToString ();  			testItem.foodLimitCell.Update ();  		}  		testItem.viewedForDuplicate = true;  		ConsoleLog.WriteLine (row + ": " + testItem.time + ";" + testItem.login + ";" + testItem.personID + ";" + testItem.wellness + ";" + testItem.tanks + ";" + testItem.doneTanks + ";" + testItem.doneFoodQ + ";" + testItem.doneFood);  	}  	#endregion  	#region Log in  	if (!loggedIn) {  		iTryToConnect++;  		if (iTryToConnect > 10)  			break;  		ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			iTryToConnect = 0;  			loggedIn = true;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  	#endregion  	//Process donations  	foreach (ItemStorage donateItem in lines) {  		ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  		#region Calculate quantities  		int foodQty;  		if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  			foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  			foodQty = foodQty - donateItem.doneFood;  		}  		else {  			foodQty = 0;  		}  		int tankQty;  		if (bDoTanks) {  			tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  			tankQty = tankQty - donateItem.doneTanks;  		}  		else {  			tankQty = 0;  		}  		if ((foodQty <= 0) && (tankQty <= 0)) {  			ConsoleLog.WriteLine ("Nothing to donate");  			continue;  		}  		#endregion  		#region Open pages and validate  		string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  			ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  			ConsoleLog.WriteLine ("Donating login validation failed");  			donateItem.commentCell.Cell.InputValue = "Profile != Login";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("Login validated");  		}  		if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  			ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  			donateItem.commentCell.Cell.InputValue = "Profile != MU";  			donateItem.commentCell.Update ();  			continue;  		}  		else {  			ConsoleLog.WriteLine ("MU validated");  		}  		srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  		bt.CustomRequest (srcPage);  		if (bt.CheckPin (true)) {  			bt.SubmitPin ();  		}  		if (bt.CheckPin (true)) {  			ConsoleLog.WriteLine ("Pin validation failed");  			break;  		}  		if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  			ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  			loggedIn = false;  			break;  		}  		token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  		#endregion  		#region Donate food  		if (foodQty > 0) {  			ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  			if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating food success");  				donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  				donateItem.doneFoodQCell.Update ();  				donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  				donateItem.doneFoodCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating food failed");  				//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No food needed");  		}  		#endregion  		#region Donate tanks  		if (tankQty > 0) {  			ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  			if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  			 {  				ConsoleLog.WriteLine ("Donating tanks success");  				donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  				donateItem.doneTanksCell.Update ();  			}  			else {  				ConsoleLog.WriteLine ("Donating tanks failed");  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  			}  			ConsoleLog.WriteLine ("Wait 5 sec...");  			System.Threading.Thread.Sleep (5 * 1000);  		}  		else {  			ConsoleLog.WriteLine ("No tanks needed");  		}  		#endregion  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("Donater error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: query.MaximumColumn = 13;  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (CellEntry curCell in feed.Entries) {  	if (curCell.Cell.Row < 2)  		continue;  	item = lines.Find (l => l.row == curCell.Cell.Row);  	if (item == null) {  		item = new ItemStorage ();  		lines.Add (item);  		item.row = curCell.Cell.Row;  	}  	if (curCell.Cell.Column == 1)// time  	 {  		item.time = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 2)// login  	 {  		item.login = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 3)// link to profile  	 {  		item.personID = curCell.Cell.Value;  		try {  			item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  			Convert.ToInt64 (item.personID);  		}  		catch {  			item.personID = "";  		}  		// Cut ID from link  	}  	if (curCell.Cell.Column == 4)// wellness  	 {  		try {  			item.wellness = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 5)// needed tanks  	 {  		try {  			item.tanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.tanks = 0;  		}  	}  	if (curCell.Cell.Column == 6)// military unit  	 {  		item.militaryUnit = curCell.Cell.Value;  	}  	if (curCell.Cell.Column == 8)// done tanks  	 {  		item.doneTanksCell = curCell;  		try {  			item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.wellness = 0;  		}  	}  	if (curCell.Cell.Column == 9)// done food q  	 {  		try {  			item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFoodQ = 0;  		}  		item.doneFoodQCell = curCell;  	}  	if (curCell.Cell.Column == 10)// done food  	 {  		item.doneFoodCell = curCell;  		try {  			item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  		}  		catch {  			item.doneFood = 0;  		}  	}  	if (curCell.Cell.Column == 11)// autocomment cell  	 {  		item.comment = curCell.Cell.Value;  		item.commentCell = curCell;  	}  	if (curCell.Cell.Column == 12)// tanks limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.tanksLimit = -1;  		}  		catch {  			item.tanksLimit = -1;  		}  		item.tanksLimitCell = curCell;  	}  	if (curCell.Cell.Column == 13)// HP limit cell  	 {  		try {  			if (!String.IsNullOrEmpty (curCell.Cell.Value))  				item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  			else  				item.foodLimit = -1;  		}  		catch {  			item.foodLimit = -1;  		}  		item.foodLimitCell = curCell;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Row < 2)  	continue;  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 2)// login   {  	item.login = curCell.Cell.Value;  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 3)// link to profile   {  	item.personID = curCell.Cell.Value;  	try {  		item.personID = item.personID.Substring (item.personID.LastIndexOf ('/') + 1);  		Convert.ToInt64 (item.personID);  	}  	catch {  		item.personID = "";  	}  	// Cut ID from link  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 4)// wellness   {  	try {  		item.wellness = Convert.ToInt32 (curCell.Cell.Value);  	}  	catch {  		item.wellness = 0;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 5)// needed tanks   {  	try {  		item.tanks = Convert.ToInt32 (curCell.Cell.Value);  	}  	catch {  		item.tanks = 0;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 6)// military unit   {  	item.militaryUnit = curCell.Cell.Value;  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 8)// done tanks   {  	item.doneTanksCell = curCell;  	try {  		item.doneTanks = Convert.ToInt32 (curCell.Cell.Value);  	}  	catch {  		item.wellness = 0;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 9)// done food q   {  	try {  		item.doneFoodQ = Convert.ToInt32 (curCell.Cell.Value);  	}  	catch {  		item.doneFoodQ = 0;  	}  	item.doneFoodQCell = curCell;  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 10)// done food   {  	item.doneFoodCell = curCell;  	try {  		item.doneFood = Convert.ToInt32 (curCell.Cell.Value);  	}  	catch {  		item.doneFood = 0;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 11)// autocomment cell   {  	item.comment = curCell.Cell.Value;  	item.commentCell = curCell;  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 12)// tanks limit cell   {  	try {  		if (!String.IsNullOrEmpty (curCell.Cell.Value))  			item.tanksLimit = Convert.ToInt32 (curCell.Cell.Value);  		else  			item.tanksLimit = -1;  	}  	catch {  		item.tanksLimit = -1;  	}  	item.tanksLimitCell = curCell;  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (curCell.Cell.Column == 13)// HP limit cell   {  	try {  		if (!String.IsNullOrEmpty (curCell.Cell.Value))  			item.foodLimit = Convert.ToInt32 (curCell.Cell.Value);  		else  			item.foodLimit = -1;  	}  	catch {  		item.foodLimit = -1;  	}  	item.foodLimitCell = curCell;  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (!loggedIn) {  	iTryToConnect++;  	if (iTryToConnect > 10)  		break;  	ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  	if (bt.Login ()) {  		ConsoleLog.WriteLine ("Logged in!");  		iTryToConnect = 0;  		loggedIn = true;  	}  	else {  		ConsoleLog.WriteLine ("Login failed!");  		System.Threading.Thread.Sleep (1000);  		continue;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (!loggedIn) {  	iTryToConnect++;  	if (iTryToConnect > 10)  		break;  	ConsoleLog.WriteLine ("Trying to login (" + (iTryToConnect).ToString () + ")...");  	if (bt.Login ()) {  		ConsoleLog.WriteLine ("Logged in!");  		iTryToConnect = 0;  		loggedIn = true;  	}  	else {  		ConsoleLog.WriteLine ("Login failed!");  		System.Threading.Thread.Sleep (1000);  		continue;  	}  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (iTryToConnect > 10)  	break;  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (bt.Login ()) {  	ConsoleLog.WriteLine ("Logged in!");  	iTryToConnect = 0;  	loggedIn = true;  }  else {  	ConsoleLog.WriteLine ("Login failed!");  	System.Threading.Thread.Sleep (1000);  	continue;  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (ItemStorage donateItem in lines) {  	ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  	#region Calculate quantities  	int foodQty;  	if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  		foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  		foodQty = foodQty - donateItem.doneFood;  	}  	else {  		foodQty = 0;  	}  	int tankQty;  	if (bDoTanks) {  		tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  		tankQty = tankQty - donateItem.doneTanks;  	}  	else {  		tankQty = 0;  	}  	if ((foodQty <= 0) && (tankQty <= 0)) {  		ConsoleLog.WriteLine ("Nothing to donate");  		continue;  	}  	#endregion  	#region Open pages and validate  	string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  		ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  		ConsoleLog.WriteLine ("Donating login validation failed");  		donateItem.commentCell.Cell.InputValue = "Profile != Login";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("Login validated");  	}  	if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  		ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  		donateItem.commentCell.Cell.InputValue = "Profile != MU";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("MU validated");  	}  	srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (bt.CheckPin (true)) {  		bt.SubmitPin ();  	}  	if (bt.CheckPin (true)) {  		ConsoleLog.WriteLine ("Pin validation failed");  		break;  	}  	if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  		ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  	#endregion  	#region Donate food  	if (foodQty > 0) {  		ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  		if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating food success");  			donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  			donateItem.doneFoodQCell.Update ();  			donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  			donateItem.doneFoodCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating food failed");  			//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No food needed");  	}  	#endregion  	#region Donate tanks  	if (tankQty > 0) {  		ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  		if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating tanks success");  			donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  			donateItem.doneTanksCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating tanks failed");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No tanks needed");  	}  	#endregion  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (ItemStorage donateItem in lines) {  	ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  	#region Calculate quantities  	int foodQty;  	if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  		foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  		foodQty = foodQty - donateItem.doneFood;  	}  	else {  		foodQty = 0;  	}  	int tankQty;  	if (bDoTanks) {  		tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  		tankQty = tankQty - donateItem.doneTanks;  	}  	else {  		tankQty = 0;  	}  	if ((foodQty <= 0) && (tankQty <= 0)) {  		ConsoleLog.WriteLine ("Nothing to donate");  		continue;  	}  	#endregion  	#region Open pages and validate  	string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  		ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  		ConsoleLog.WriteLine ("Donating login validation failed");  		donateItem.commentCell.Cell.InputValue = "Profile != Login";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("Login validated");  	}  	if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  		ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  		donateItem.commentCell.Cell.InputValue = "Profile != MU";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("MU validated");  	}  	srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (bt.CheckPin (true)) {  		bt.SubmitPin ();  	}  	if (bt.CheckPin (true)) {  		ConsoleLog.WriteLine ("Pin validation failed");  		break;  	}  	if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  		ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  	#endregion  	#region Donate food  	if (foodQty > 0) {  		ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  		if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating food success");  			donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  			donateItem.doneFoodQCell.Update ();  			donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  			donateItem.doneFoodCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating food failed");  			//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No food needed");  	}  	#endregion  	#region Donate tanks  	if (tankQty > 0) {  		ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  		if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating tanks success");  			donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  			donateItem.doneTanksCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating tanks failed");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No tanks needed");  	}  	#endregion  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (ItemStorage donateItem in lines) {  	ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  	#region Calculate quantities  	int foodQty;  	if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  		foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  		foodQty = foodQty - donateItem.doneFood;  	}  	else {  		foodQty = 0;  	}  	int tankQty;  	if (bDoTanks) {  		tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  		tankQty = tankQty - donateItem.doneTanks;  	}  	else {  		tankQty = 0;  	}  	if ((foodQty <= 0) && (tankQty <= 0)) {  		ConsoleLog.WriteLine ("Nothing to donate");  		continue;  	}  	#endregion  	#region Open pages and validate  	string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  		ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  		ConsoleLog.WriteLine ("Donating login validation failed");  		donateItem.commentCell.Cell.InputValue = "Profile != Login";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("Login validated");  	}  	if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  		ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  		donateItem.commentCell.Cell.InputValue = "Profile != MU";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("MU validated");  	}  	srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (bt.CheckPin (true)) {  		bt.SubmitPin ();  	}  	if (bt.CheckPin (true)) {  		ConsoleLog.WriteLine ("Pin validation failed");  		break;  	}  	if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  		ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  	#endregion  	#region Donate food  	if (foodQty > 0) {  		ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  		if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating food success");  			donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  			donateItem.doneFoodQCell.Update ();  			donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  			donateItem.doneFoodCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating food failed");  			//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No food needed");  	}  	#endregion  	#region Donate tanks  	if (tankQty > 0) {  		ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  		if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating tanks success");  			donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  			donateItem.doneTanksCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating tanks failed");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No tanks needed");  	}  	#endregion  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (ItemStorage donateItem in lines) {  	ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  	#region Calculate quantities  	int foodQty;  	if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  		foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  		foodQty = foodQty - donateItem.doneFood;  	}  	else {  		foodQty = 0;  	}  	int tankQty;  	if (bDoTanks) {  		tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  		tankQty = tankQty - donateItem.doneTanks;  	}  	else {  		tankQty = 0;  	}  	if ((foodQty <= 0) && (tankQty <= 0)) {  		ConsoleLog.WriteLine ("Nothing to donate");  		continue;  	}  	#endregion  	#region Open pages and validate  	string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  		ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  		ConsoleLog.WriteLine ("Donating login validation failed");  		donateItem.commentCell.Cell.InputValue = "Profile != Login";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("Login validated");  	}  	if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  		ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  		donateItem.commentCell.Cell.InputValue = "Profile != MU";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("MU validated");  	}  	srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (bt.CheckPin (true)) {  		bt.SubmitPin ();  	}  	if (bt.CheckPin (true)) {  		ConsoleLog.WriteLine ("Pin validation failed");  		break;  	}  	if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  		ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  	#endregion  	#region Donate food  	if (foodQty > 0) {  		ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  		if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating food success");  			donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  			donateItem.doneFoodQCell.Update ();  			donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  			donateItem.doneFoodCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating food failed");  			//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No food needed");  	}  	#endregion  	#region Donate tanks  	if (tankQty > 0) {  		ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  		if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating tanks success");  			donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  			donateItem.doneTanksCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating tanks failed");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No tanks needed");  	}  	#endregion  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (ItemStorage donateItem in lines) {  	ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  	#region Calculate quantities  	int foodQty;  	if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  		foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  		foodQty = foodQty - donateItem.doneFood;  	}  	else {  		foodQty = 0;  	}  	int tankQty;  	if (bDoTanks) {  		tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  		tankQty = tankQty - donateItem.doneTanks;  	}  	else {  		tankQty = 0;  	}  	if ((foodQty <= 0) && (tankQty <= 0)) {  		ConsoleLog.WriteLine ("Nothing to donate");  		continue;  	}  	#endregion  	#region Open pages and validate  	string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  		ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  		ConsoleLog.WriteLine ("Donating login validation failed");  		donateItem.commentCell.Cell.InputValue = "Profile != Login";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("Login validated");  	}  	if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  		ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  		donateItem.commentCell.Cell.InputValue = "Profile != MU";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("MU validated");  	}  	srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (bt.CheckPin (true)) {  		bt.SubmitPin ();  	}  	if (bt.CheckPin (true)) {  		ConsoleLog.WriteLine ("Pin validation failed");  		break;  	}  	if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  		ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  	#endregion  	#region Donate food  	if (foodQty > 0) {  		ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  		if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating food success");  			donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  			donateItem.doneFoodQCell.Update ();  			donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  			donateItem.doneFoodCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating food failed");  			//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No food needed");  	}  	#endregion  	#region Donate tanks  	if (tankQty > 0) {  		ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  		if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating tanks success");  			donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  			donateItem.doneTanksCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating tanks failed");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No tanks needed");  	}  	#endregion  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foreach (ItemStorage donateItem in lines) {  	ConsoleLog.WriteLine ("Donating to: login=" + donateItem.login + "' id=" + donateItem.personID);  	#region Calculate quantities  	int foodQty;  	if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  		foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  		foodQty = foodQty - donateItem.doneFood;  	}  	else {  		foodQty = 0;  	}  	int tankQty;  	if (bDoTanks) {  		tankQty = Math.Min (donateItem.tanks' donateItem.tanksLimit);  		tankQty = tankQty - donateItem.doneTanks;  	}  	else {  		tankQty = 0;  	}  	if ((foodQty <= 0) && (tankQty <= 0)) {  		ConsoleLog.WriteLine ("Nothing to donate");  		continue;  	}  	#endregion  	#region Open pages and validate  	string srcPage = "http://www.erepublik.com/en/citizen/profile/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (!bt.GetLastResponse ().Contains ("career_tab_content")) {  		ConsoleLog.WriteLine ("Profile page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	if (bt.GetLastResponse ().IndexOf ("alt=\"" + donateItem.login.Trim () + "\""' StringComparison.OrdinalIgnoreCase) == -1) {  		ConsoleLog.WriteLine ("Donating login validation failed");  		donateItem.commentCell.Cell.InputValue = "Profile != Login";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("Login validated");  	}  	if ((sValidation.ToLower () == "mu") && (bt.GetLastResponse ().IndexOf ("alt=\"" + MUList [donateItem.militaryUnit.Trim ()] + "\""' StringComparison.OrdinalIgnoreCase) == -1)) {  		ConsoleLog.WriteLine ("Donating MU validation failed (" + MUList [donateItem.militaryUnit.Trim ()] + ")");  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Storage page");  		donateItem.commentCell.Cell.InputValue = "Profile != MU";  		donateItem.commentCell.Update ();  		continue;  	}  	else {  		ConsoleLog.WriteLine ("MU validated");  	}  	srcPage = "http://economy.erepublik.com/en/citizen/donate/" + donateItem.personID;  	bt.CustomRequest (srcPage);  	if (bt.CheckPin (true)) {  		bt.SubmitPin ();  	}  	if (bt.CheckPin (true)) {  		ConsoleLog.WriteLine ("Pin validation failed");  		break;  	}  	if (!bt.GetLastResponse ().Contains ("<th colspan=\"4\" valign=\"middle\">Your storage</th>")) {  		ConsoleLog.WriteLine ("Donate page loading failed. Try to relogin...");  		loggedIn = false;  		break;  	}  	token = CommonUtils.GetStringBetween (bt.GetLastResponse ()' "donate_form[_csrf_token]\" value=\""' "\"");  	#endregion  	#region Donate food  	if (foodQty > 0) {  		ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  		if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating food success");  			donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  			donateItem.doneFoodQCell.Update ();  			donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  			donateItem.doneFoodCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating food failed");  			//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No food needed");  	}  	#endregion  	#region Donate tanks  	if (tankQty > 0) {  		ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  		if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  		 {  			ConsoleLog.WriteLine ("Donating tanks success");  			donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  			donateItem.doneTanksCell.Update ();  		}  		else {  			ConsoleLog.WriteLine ("Donating tanks failed");  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  		}  		ConsoleLog.WriteLine ("Wait 5 sec...");  		System.Threading.Thread.Sleep (5 * 1000);  	}  	else {  		ConsoleLog.WriteLine ("No tanks needed");  	}  	#endregion  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if ((bDoFood) && (donateItem.wellness > 0) && (donateItem.doneFoodQ == 0)) {  	foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  	foodQty = foodQty - donateItem.doneFood;  }  else {  	foodQty = 0;  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: foodQty = Convert.ToInt32 (Math.Round ((double)((double)Math.Min (donateItem.wellness' donateItem.foodLimit) / (iFoodQ * 2))));  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (foodQty > 0) {  	ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  	if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  	 {  		ConsoleLog.WriteLine ("Donating food success");  		donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  		donateItem.doneFoodQCell.Update ();  		donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  		donateItem.doneFoodCell.Update ();  	}  	else {  		ConsoleLog.WriteLine ("Donating food failed");  		//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  	}  	ConsoleLog.WriteLine ("Wait 5 sec...");  	System.Threading.Thread.Sleep (5 * 1000);  }  else {  	ConsoleLog.WriteLine ("No food needed");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (foodQty > 0) {  	ConsoleLog.WriteLine ("Donating food: " + foodQty + " (q" + iFoodQ + ")");  	if (bt.DonateItem (foodQty.ToString ()' Goods.Food.ToString ()' iFoodQ.ToString ()' token' srcPage))//if (true)  	 {  		ConsoleLog.WriteLine ("Donating food success");  		donateItem.doneFoodQCell.Cell.InputValue = iFoodQ.ToString ();  		donateItem.doneFoodQCell.Update ();  		donateItem.doneFoodCell.Cell.InputValue = (donateItem.doneFood + foodQty).ToString ();  		donateItem.doneFoodCell.Update ();  	}  	else {  		ConsoleLog.WriteLine ("Donating food failed");  		//ConsoleLog.WriteLine(bt.GetLastResponse()' "DonateLog.txt");  	}  	ConsoleLog.WriteLine ("Wait 5 sec...");  	System.Threading.Thread.Sleep (5 * 1000);  }  else {  	ConsoleLog.WriteLine ("No food needed");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: System.Threading.Thread.Sleep (5 * 1000);  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: System.Threading.Thread.Sleep (5 * 1000);  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (tankQty > 0) {  	ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  	if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  	 {  		ConsoleLog.WriteLine ("Donating tanks success");  		donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  		donateItem.doneTanksCell.Update ();  	}  	else {  		ConsoleLog.WriteLine ("Donating tanks failed");  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  	}  	ConsoleLog.WriteLine ("Wait 5 sec...");  	System.Threading.Thread.Sleep (5 * 1000);  }  else {  	ConsoleLog.WriteLine ("No tanks needed");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (tankQty > 0) {  	ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  	if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  	 {  		ConsoleLog.WriteLine ("Donating tanks success");  		donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  		donateItem.doneTanksCell.Update ();  	}  	else {  		ConsoleLog.WriteLine ("Donating tanks failed");  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  	}  	ConsoleLog.WriteLine ("Wait 5 sec...");  	System.Threading.Thread.Sleep (5 * 1000);  }  else {  	ConsoleLog.WriteLine ("No tanks needed");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (tankQty > 0) {  	ConsoleLog.WriteLine ("Donating tanks: " + tankQty);  	if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)  	 {  		ConsoleLog.WriteLine ("Donating tanks success");  		donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  		donateItem.doneTanksCell.Update ();  	}  	else {  		ConsoleLog.WriteLine ("Donating tanks failed");  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  	}  	ConsoleLog.WriteLine ("Wait 5 sec...");  	System.Threading.Thread.Sleep (5 * 1000);  }  else {  	ConsoleLog.WriteLine ("No tanks needed");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: if (bt.DonateItem (tankQty.ToString ()' Goods.Weapon.ToString ()' 5.ToString ()' token' srcPage))//if (true)   {  	ConsoleLog.WriteLine ("Donating tanks success");  	donateItem.doneTanksCell.Cell.InputValue = (donateItem.doneTanks + tankQty).ToString ();  	donateItem.doneTanksCell.Update ();  }  else {  	ConsoleLog.WriteLine ("Donating tanks failed");  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "DonateLog.txt");  }  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: System.Threading.Thread.Sleep (5 * 1000);  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: System.Threading.Thread.Sleep (5 * 1000);  
Magic Number,eRepCompanyChecker,Donater,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Donater.cs,GDocSupply,The following statement contains a magic number: System.Threading.Thread.Sleep (iPeriod * 1000);  
Magic Number,eRepCompanyChecker,Globals,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Program.cs,Init,The following statement contains a magic number: NerZul.Core.Network.HttpClient.ResponseTimeout = Config.GetValue ("misc"' "responsetimeout"' 10) * 1000;  
Magic Number,eRepCompanyChecker,Globals,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Program.cs,Init,The following statement contains a magic number: NerZul.Core.Network.HttpClient.ResponseTimeout = Config.GetValue ("misc"' "responsetimeout"' 10) * 1000;  
Magic Number,eRepCompanyChecker,Globals,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Program.cs,Init,The following statement contains a magic number: ErepTZ = Config.GetValue ("time"' "timezone"' -7);  
Magic Number,eRepCompanyChecker,Globals,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Program.cs,Init,The following statement contains a magic number: ErepAgeStart = new DateTime (Config.GetValue ("time"' "zeroyear"' 2007)' Config.GetValue ("time"' "zeromounth"' 11)' Config.GetValue ("time"' "zeroday"' 20));  
Magic Number,eRepCompanyChecker,Globals,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Program.cs,Init,The following statement contains a magic number: ErepAgeStart = new DateTime (Config.GetValue ("time"' "zeroyear"' 2007)' Config.GetValue ("time"' "zeromounth"' 11)' Config.GetValue ("time"' "zeroday"' 20));  
Magic Number,eRepCompanyChecker,Globals,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Program.cs,Init,The following statement contains a magic number: ErepAgeStart = new DateTime (Config.GetValue ("time"' "zeroyear"' 2007)' Config.GetValue ("time"' "zeromounth"' 11)' Config.GetValue ("time"' "zeroday"' 20));  
Magic Number,eRepCompanyChecker,Globals,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Program.cs,Init,The following statement contains a magic number: FirstRealKey = sb1.ToString ().Substring (0' 200);  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: if (args.Length != 9) {  	ConsoleLog.WriteLine ("Usage: sellgoods login password country industry quality amount price delay");  	return;  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: while (true) {  	if (!loggedIn) {  		for (int i = 0; i < 10; i++) {  			try {  				if (!loggedIn) {  					ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  					if (bt.Login ()) {  						ConsoleLog.WriteLine ("Logged in!");  						loggedIn = true;  						break;  					}  					else {  						ConsoleLog.WriteLine ("Login failed!");  						System.Threading.Thread.Sleep (1000);  						continue;  					}  				}  			}  			catch (System.Exception e) {  				ConsoleLog.WriteLine ("SellGoods login error: " + e.Message);  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  			}  		}  		if (!loggedIn) {  			ConsoleLog.WriteLine ("SellGoods login error: unable to login.");  			break;  		}  	}  	int currentOffer = bt.FindGoodOffer ();  	ConsoleLog.WriteLine ("Current offer amount left: " + currentOffer.ToString ());  	int remains = bt.GetRemains (sIndustry' sQuality' false);  	ConsoleLog.WriteLine ("Current remains: " + remains.ToString ());  	if (remains == 0) {  		ConsoleLog.WriteLine ("Everything sold out.");  		break;  	}  	int sellQty = Math.Min (amount - currentOffer' remains);  	if (sellQty > 0) {  		Thread.Sleep (1000);  		if (bt.SetOnSale (sCountry' sIndustry' sQuality' sellQty.ToString ()' sPrice' false)) {  			ConsoleLog.WriteLine ("Offer of " + sellQty.ToString () + " items posted.");  		}  		else {  			ConsoleLog.WriteLine ("Offer of " + sellQty.ToString () + " items failed.");  		}  		;  	}  	ConsoleLog.WriteLine ("Wait " + delay.ToString () + " seconds for next check...");  	Thread.Sleep (delay * 1000);  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: while (true) {  	if (!loggedIn) {  		for (int i = 0; i < 10; i++) {  			try {  				if (!loggedIn) {  					ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  					if (bt.Login ()) {  						ConsoleLog.WriteLine ("Logged in!");  						loggedIn = true;  						break;  					}  					else {  						ConsoleLog.WriteLine ("Login failed!");  						System.Threading.Thread.Sleep (1000);  						continue;  					}  				}  			}  			catch (System.Exception e) {  				ConsoleLog.WriteLine ("SellGoods login error: " + e.Message);  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  			}  		}  		if (!loggedIn) {  			ConsoleLog.WriteLine ("SellGoods login error: unable to login.");  			break;  		}  	}  	int currentOffer = bt.FindGoodOffer ();  	ConsoleLog.WriteLine ("Current offer amount left: " + currentOffer.ToString ());  	int remains = bt.GetRemains (sIndustry' sQuality' false);  	ConsoleLog.WriteLine ("Current remains: " + remains.ToString ());  	if (remains == 0) {  		ConsoleLog.WriteLine ("Everything sold out.");  		break;  	}  	int sellQty = Math.Min (amount - currentOffer' remains);  	if (sellQty > 0) {  		Thread.Sleep (1000);  		if (bt.SetOnSale (sCountry' sIndustry' sQuality' sellQty.ToString ()' sPrice' false)) {  			ConsoleLog.WriteLine ("Offer of " + sellQty.ToString () + " items posted.");  		}  		else {  			ConsoleLog.WriteLine ("Offer of " + sellQty.ToString () + " items failed.");  		}  		;  	}  	ConsoleLog.WriteLine ("Wait " + delay.ToString () + " seconds for next check...");  	Thread.Sleep (delay * 1000);  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: while (true) {  	if (!loggedIn) {  		for (int i = 0; i < 10; i++) {  			try {  				if (!loggedIn) {  					ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  					if (bt.Login ()) {  						ConsoleLog.WriteLine ("Logged in!");  						loggedIn = true;  						break;  					}  					else {  						ConsoleLog.WriteLine ("Login failed!");  						System.Threading.Thread.Sleep (1000);  						continue;  					}  				}  			}  			catch (System.Exception e) {  				ConsoleLog.WriteLine ("SellGoods login error: " + e.Message);  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  			}  		}  		if (!loggedIn) {  			ConsoleLog.WriteLine ("SellGoods login error: unable to login.");  			break;  		}  	}  	int currentOffer = bt.FindGoodOffer ();  	ConsoleLog.WriteLine ("Current offer amount left: " + currentOffer.ToString ());  	int remains = bt.GetRemains (sIndustry' sQuality' false);  	ConsoleLog.WriteLine ("Current remains: " + remains.ToString ());  	if (remains == 0) {  		ConsoleLog.WriteLine ("Everything sold out.");  		break;  	}  	int sellQty = Math.Min (amount - currentOffer' remains);  	if (sellQty > 0) {  		Thread.Sleep (1000);  		if (bt.SetOnSale (sCountry' sIndustry' sQuality' sellQty.ToString ()' sPrice' false)) {  			ConsoleLog.WriteLine ("Offer of " + sellQty.ToString () + " items posted.");  		}  		else {  			ConsoleLog.WriteLine ("Offer of " + sellQty.ToString () + " items failed.");  		}  		;  	}  	ConsoleLog.WriteLine ("Wait " + delay.ToString () + " seconds for next check...");  	Thread.Sleep (delay * 1000);  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: while (true) {  	if (!loggedIn) {  		for (int i = 0; i < 10; i++) {  			try {  				if (!loggedIn) {  					ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  					if (bt.Login ()) {  						ConsoleLog.WriteLine ("Logged in!");  						loggedIn = true;  						break;  					}  					else {  						ConsoleLog.WriteLine ("Login failed!");  						System.Threading.Thread.Sleep (1000);  						continue;  					}  				}  			}  			catch (System.Exception e) {  				ConsoleLog.WriteLine ("SellGoods login error: " + e.Message);  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  			}  		}  		if (!loggedIn) {  			ConsoleLog.WriteLine ("SellGoods login error: unable to login.");  			break;  		}  	}  	int currentOffer = bt.FindGoodOffer ();  	ConsoleLog.WriteLine ("Current offer amount left: " + currentOffer.ToString ());  	int remains = bt.GetRemains (sIndustry' sQuality' false);  	ConsoleLog.WriteLine ("Current remains: " + remains.ToString ());  	if (remains == 0) {  		ConsoleLog.WriteLine ("Everything sold out.");  		break;  	}  	int sellQty = Math.Min (amount - currentOffer' remains);  	if (sellQty > 0) {  		Thread.Sleep (1000);  		if (bt.SetOnSale (sCountry' sIndustry' sQuality' sellQty.ToString ()' sPrice' false)) {  			ConsoleLog.WriteLine ("Offer of " + sellQty.ToString () + " items posted.");  		}  		else {  			ConsoleLog.WriteLine ("Offer of " + sellQty.ToString () + " items failed.");  		}  		;  	}  	ConsoleLog.WriteLine ("Wait " + delay.ToString () + " seconds for next check...");  	Thread.Sleep (delay * 1000);  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: if (!loggedIn) {  	for (int i = 0; i < 10; i++) {  		try {  			if (!loggedIn) {  				ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  				if (bt.Login ()) {  					ConsoleLog.WriteLine ("Logged in!");  					loggedIn = true;  					break;  				}  				else {  					ConsoleLog.WriteLine ("Login failed!");  					System.Threading.Thread.Sleep (1000);  					continue;  				}  			}  		}  		catch (System.Exception e) {  			ConsoleLog.WriteLine ("SellGoods login error: " + e.Message);  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  		}  	}  	if (!loggedIn) {  		ConsoleLog.WriteLine ("SellGoods login error: unable to login.");  		break;  	}  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: if (!loggedIn) {  	for (int i = 0; i < 10; i++) {  		try {  			if (!loggedIn) {  				ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  				if (bt.Login ()) {  					ConsoleLog.WriteLine ("Logged in!");  					loggedIn = true;  					break;  				}  				else {  					ConsoleLog.WriteLine ("Login failed!");  					System.Threading.Thread.Sleep (1000);  					continue;  				}  			}  		}  		catch (System.Exception e) {  			ConsoleLog.WriteLine ("SellGoods login error: " + e.Message);  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  		}  	}  	if (!loggedIn) {  		ConsoleLog.WriteLine ("SellGoods login error: unable to login.");  		break;  	}  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	try {  		if (!loggedIn) {  			ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				loggedIn = true;  				break;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("SellGoods login error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	try {  		if (!loggedIn) {  			ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				loggedIn = true;  				break;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("SellGoods login error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: try {  	if (!loggedIn) {  		ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			loggedIn = true;  			break;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("SellGoods login error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: if (!loggedIn) {  	ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  	if (bt.Login ()) {  		ConsoleLog.WriteLine ("Logged in!");  		loggedIn = true;  		break;  	}  	else {  		ConsoleLog.WriteLine ("Login failed!");  		System.Threading.Thread.Sleep (1000);  		continue;  	}  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: if (bt.Login ()) {  	ConsoleLog.WriteLine ("Logged in!");  	loggedIn = true;  	break;  }  else {  	ConsoleLog.WriteLine ("Login failed!");  	System.Threading.Thread.Sleep (1000);  	continue;  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: if (sellQty > 0) {  	Thread.Sleep (1000);  	if (bt.SetOnSale (sCountry' sIndustry' sQuality' sellQty.ToString ()' sPrice' false)) {  		ConsoleLog.WriteLine ("Offer of " + sellQty.ToString () + " items posted.");  	}  	else {  		ConsoleLog.WriteLine ("Offer of " + sellQty.ToString () + " items failed.");  	}  	;  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,SellGoods,The following statement contains a magic number: Thread.Sleep (delay * 1000);  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: if (args.Length != 8) {  	ConsoleLog.WriteLine ("Usage: buygoods login password country industry quality price delay");  	return;  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: while (true) {  	if (!loggedIn) {  		for (int i = 0; i < 10; i++) {  			try {  				if (!loggedIn) {  					ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  					if (bt.Login ()) {  						ConsoleLog.WriteLine ("Logged in!");  						loggedIn = true;  						break;  					}  					else {  						ConsoleLog.WriteLine ("Login failed!");  						System.Threading.Thread.Sleep (1000);  						continue;  					}  				}  			}  			catch (System.Exception e) {  				ConsoleLog.WriteLine ("BuyGoods login error: " + e.Message);  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  			}  		}  		if (!loggedIn) {  			ConsoleLog.WriteLine ("BuyGoods login error: unable to login.");  			break;  		}  	}  	string sOffer;  	int amount;  	double foundPrice = bt.GetMinPrice (country' industry' quality' true' out sOffer' out amount);  	if (foundPrice <= price) {  		//amount = 1;  		bt.BuyItem (country' industry' amount' quality' 0' false);  	}  	else {  		ConsoleLog.WriteLine ("Price above the limit' skipping.");  	}  	ConsoleLog.WriteLine ("Wait " + delay.ToString () + " seconds for next check...");  	Thread.Sleep ((int)(delay * 1000));  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: while (true) {  	if (!loggedIn) {  		for (int i = 0; i < 10; i++) {  			try {  				if (!loggedIn) {  					ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  					if (bt.Login ()) {  						ConsoleLog.WriteLine ("Logged in!");  						loggedIn = true;  						break;  					}  					else {  						ConsoleLog.WriteLine ("Login failed!");  						System.Threading.Thread.Sleep (1000);  						continue;  					}  				}  			}  			catch (System.Exception e) {  				ConsoleLog.WriteLine ("BuyGoods login error: " + e.Message);  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  			}  		}  		if (!loggedIn) {  			ConsoleLog.WriteLine ("BuyGoods login error: unable to login.");  			break;  		}  	}  	string sOffer;  	int amount;  	double foundPrice = bt.GetMinPrice (country' industry' quality' true' out sOffer' out amount);  	if (foundPrice <= price) {  		//amount = 1;  		bt.BuyItem (country' industry' amount' quality' 0' false);  	}  	else {  		ConsoleLog.WriteLine ("Price above the limit' skipping.");  	}  	ConsoleLog.WriteLine ("Wait " + delay.ToString () + " seconds for next check...");  	Thread.Sleep ((int)(delay * 1000));  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: while (true) {  	if (!loggedIn) {  		for (int i = 0; i < 10; i++) {  			try {  				if (!loggedIn) {  					ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  					if (bt.Login ()) {  						ConsoleLog.WriteLine ("Logged in!");  						loggedIn = true;  						break;  					}  					else {  						ConsoleLog.WriteLine ("Login failed!");  						System.Threading.Thread.Sleep (1000);  						continue;  					}  				}  			}  			catch (System.Exception e) {  				ConsoleLog.WriteLine ("BuyGoods login error: " + e.Message);  				ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  			}  		}  		if (!loggedIn) {  			ConsoleLog.WriteLine ("BuyGoods login error: unable to login.");  			break;  		}  	}  	string sOffer;  	int amount;  	double foundPrice = bt.GetMinPrice (country' industry' quality' true' out sOffer' out amount);  	if (foundPrice <= price) {  		//amount = 1;  		bt.BuyItem (country' industry' amount' quality' 0' false);  	}  	else {  		ConsoleLog.WriteLine ("Price above the limit' skipping.");  	}  	ConsoleLog.WriteLine ("Wait " + delay.ToString () + " seconds for next check...");  	Thread.Sleep ((int)(delay * 1000));  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: if (!loggedIn) {  	for (int i = 0; i < 10; i++) {  		try {  			if (!loggedIn) {  				ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  				if (bt.Login ()) {  					ConsoleLog.WriteLine ("Logged in!");  					loggedIn = true;  					break;  				}  				else {  					ConsoleLog.WriteLine ("Login failed!");  					System.Threading.Thread.Sleep (1000);  					continue;  				}  			}  		}  		catch (System.Exception e) {  			ConsoleLog.WriteLine ("BuyGoods login error: " + e.Message);  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  		}  	}  	if (!loggedIn) {  		ConsoleLog.WriteLine ("BuyGoods login error: unable to login.");  		break;  	}  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: if (!loggedIn) {  	for (int i = 0; i < 10; i++) {  		try {  			if (!loggedIn) {  				ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  				if (bt.Login ()) {  					ConsoleLog.WriteLine ("Logged in!");  					loggedIn = true;  					break;  				}  				else {  					ConsoleLog.WriteLine ("Login failed!");  					System.Threading.Thread.Sleep (1000);  					continue;  				}  			}  		}  		catch (System.Exception e) {  			ConsoleLog.WriteLine ("BuyGoods login error: " + e.Message);  			ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  		}  	}  	if (!loggedIn) {  		ConsoleLog.WriteLine ("BuyGoods login error: unable to login.");  		break;  	}  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	try {  		if (!loggedIn) {  			ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				loggedIn = true;  				break;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("BuyGoods login error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	try {  		if (!loggedIn) {  			ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  			if (bt.Login ()) {  				ConsoleLog.WriteLine ("Logged in!");  				loggedIn = true;  				break;  			}  			else {  				ConsoleLog.WriteLine ("Login failed!");  				System.Threading.Thread.Sleep (1000);  				continue;  			}  		}  	}  	catch (System.Exception e) {  		ConsoleLog.WriteLine ("BuyGoods login error: " + e.Message);  		ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  	}  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: try {  	if (!loggedIn) {  		ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  		if (bt.Login ()) {  			ConsoleLog.WriteLine ("Logged in!");  			loggedIn = true;  			break;  		}  		else {  			ConsoleLog.WriteLine ("Login failed!");  			System.Threading.Thread.Sleep (1000);  			continue;  		}  	}  }  catch (System.Exception e) {  	ConsoleLog.WriteLine ("BuyGoods login error: " + e.Message);  	ConsoleLog.WriteLine (bt.GetLastResponse ()' "Responses.txt");  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: if (!loggedIn) {  	ConsoleLog.WriteLine ("Trying to login (" + (i + 1).ToString () + ")...");  	if (bt.Login ()) {  		ConsoleLog.WriteLine ("Logged in!");  		loggedIn = true;  		break;  	}  	else {  		ConsoleLog.WriteLine ("Login failed!");  		System.Threading.Thread.Sleep (1000);  		continue;  	}  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: if (bt.Login ()) {  	ConsoleLog.WriteLine ("Logged in!");  	loggedIn = true;  	break;  }  else {  	ConsoleLog.WriteLine ("Login failed!");  	System.Threading.Thread.Sleep (1000);  	continue;  }  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,eRepCompanyChecker,Trader,C:\repos\sasha237_NorthCitadel\eRepCompanyChecker\Trader.cs,BuyGoods,The following statement contains a magic number: Thread.Sleep ((int)(delay * 1000));  
