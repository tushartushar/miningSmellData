Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Fuel.AmfNet,AmfNetConfiguration,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\AmfNetConfiguration.cs,ParseReconstitutor,Cyclomatic complexity of the method is 13
Complex Method,Fuel.AmfNet,Body,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Body.cs,IsMethodAMatch,Cyclomatic complexity of the method is 9
Complex Method,Fuel.AmfNet,Body,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Body.cs,IsParameterMatch,Cyclomatic complexity of the method is 9
Complex Method,Fuel.AmfNet,BitmapReconstitutor,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Reconstitutors\BitmapReconstitutor.cs,Reconstitute,Cyclomatic complexity of the method is 9
Complex Method,Fuel.AmfNet,Deserializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Deserializer.cs,ReadData,Cyclomatic complexity of the method is 18
Complex Method,Fuel.AmfNet,Serializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Serializer.cs,WriteData,Cyclomatic complexity of the method is 13
Long Statement,Fuel.AmfNet,AmfNetConfiguration,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\AmfNetConfiguration.cs,ParseReconstitutor,The length of the statement  "				throw new ConfigurationErrorsException ("Attribute type specified for the reconstitutor does not implement IReconstitutor."); " is 125.
Long Statement,Fuel.AmfNet,Body,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Body.cs,Invoke,The length of the statement  "	MethodInfo foundMethod = FindMethod (type.GetMethods (BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance | BindingFlags.DeclaredOnly)' smartInputs' out newInputs); " is 178.
Long Statement,Fuel.AmfNet,Body,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Body.cs,IsParameterMatch,The length of the statement  "	if (parameterType.IsEnum && smarty.CanBeInt32 && Enum.GetUnderlyingType (parameterType).IsAssignableFrom (_int32Type)) { " is 120.
Long Statement,Fuel.AmfNet,BitmapReconstitutor,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Reconstitutors\BitmapReconstitutor.cs,ParametersAreValid,The length of the statement  "	if (!parameters.ContainsKey ("__width") || !parameters.ContainsKey ("__height") || !parameters.ContainsKey ("__pixels")) { " is 122.
Long Statement,Fuel.AmfNet,Serializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Serializer.cs,IsNumber,The length of the statement  "	return (data is int || data is long || data is short || data is float || data is byte || data is sbyte || data is uint || data is ulong || data is ushort || data is double); " is 173.
Magic Number,Fuel.AmfNet,Body,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Body.cs,ToString,The following statement contains a magic number: if (rawInputs != null && rawInputs.Count > 0) {  	foreach (object value in rawInputs) {  		if (value == null) {  			sb.AppendFormat ("\"{0}\"' "' value);  		}  		else if (value is string) {  			sb.AppendFormat ("\"{0}\"' "' value.ToString ());  		}  		else {  			sb.AppendFormat ("{0}' "' value.ToString ());  		}  	}  	sb.Remove (sb.Length - 2' 2);  }  
Magic Number,Fuel.AmfNet,Body,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Body.cs,ToString,The following statement contains a magic number: if (rawInputs != null && rawInputs.Count > 0) {  	foreach (object value in rawInputs) {  		if (value == null) {  			sb.AppendFormat ("\"{0}\"' "' value);  		}  		else if (value is string) {  			sb.AppendFormat ("\"{0}\"' "' value.ToString ());  		}  		else {  			sb.AppendFormat ("{0}' "' value.ToString ());  		}  	}  	sb.Remove (sb.Length - 2' 2);  }  
Magic Number,Fuel.AmfNet,Body,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Body.cs,ToString,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,Fuel.AmfNet,Body,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Body.cs,ToString,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,Fuel.AmfNet,Body,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Body.cs,IsParameterMatch,The following statement contains a magic number: if (parameterType.IsArray && smarty.IsEmptyArray) {  	Type itemType = Type.GetType (parameterType.FullName.Substring (0' parameterType.FullName.Length - 2));  	convertedValue = ((ArrayList)smarty.Value).ToArray (itemType);  	return true;  }  
Magic Number,Fuel.AmfNet,BitmapReconstitutor,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Reconstitutors\BitmapReconstitutor.cs,Reconstitute,The following statement contains a magic number: foreach (string data in pixelData) {  	string[] split = data.Split ('|');  	if (split.Length < 3) {  		continue;  	}  	int repeatCount = Convert.ToInt32 (split [0]);  	Color color = ColorTranslator.FromHtml ("#" + Convert.ToInt32 (split [1]).ToString ("X6"));  	if (isTransparent) {  		color = Color.FromArgb (Convert.ToInt32 (split [2])' color);  	}  	for (int i = 0; i < repeatCount; ++i) {  		++x;  		if (x == width) {  			x = 0;  			++y;  		}  		bm.SetPixel (x' y' color);  	}  }  
Magic Number,Fuel.AmfNet,BitmapReconstitutor,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Reconstitutors\BitmapReconstitutor.cs,Reconstitute,The following statement contains a magic number: foreach (string data in pixelData) {  	string[] split = data.Split ('|');  	if (split.Length < 3) {  		continue;  	}  	int repeatCount = Convert.ToInt32 (split [0]);  	Color color = ColorTranslator.FromHtml ("#" + Convert.ToInt32 (split [1]).ToString ("X6"));  	if (isTransparent) {  		color = Color.FromArgb (Convert.ToInt32 (split [2])' color);  	}  	for (int i = 0; i < repeatCount; ++i) {  		++x;  		if (x == width) {  			x = 0;  			++y;  		}  		bm.SetPixel (x' y' color);  	}  }  
Magic Number,Fuel.AmfNet,BitmapReconstitutor,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Reconstitutors\BitmapReconstitutor.cs,Reconstitute,The following statement contains a magic number: if (split.Length < 3) {  	continue;  }  
Magic Number,Fuel.AmfNet,BitmapReconstitutor,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Reconstitutors\BitmapReconstitutor.cs,Reconstitute,The following statement contains a magic number: if (isTransparent) {  	color = Color.FromArgb (Convert.ToInt32 (split [2])' color);  }  
Magic Number,Fuel.AmfNet,BitmapReconstitutor,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Reconstitutors\BitmapReconstitutor.cs,Reconstitute,The following statement contains a magic number: color = Color.FromArgb (Convert.ToInt32 (split [2])' color);  
Magic Number,Fuel.AmfNet,Deserializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Deserializer.cs,ReadDictionary,The following statement contains a magic number: for (byte type = ReadByte (); type != 9; type = ReadByte ()) {  	object value = ReadData (type);  	hash.Add (key' value);  	key = ReadShortString ();  }  
Magic Number,Fuel.AmfNet,Deserializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Deserializer.cs,ReadDouble,The following statement contains a magic number: return BitConverter.ToDouble (ReadInternal (8)' 0);  
Magic Number,Fuel.AmfNet,Deserializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Deserializer.cs,ReadInt32,The following statement contains a magic number: return BitConverter.ToInt32 (ReadInternal (4)' 0);  
Magic Number,Fuel.AmfNet,Deserializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Deserializer.cs,ReadUInt16,The following statement contains a magic number: return BitConverter.ToUInt16 (ReadInternal (2)' 0);  
Magic Number,Fuel.AmfNet,Deserializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Deserializer.cs,ReadUntypedObject,The following statement contains a magic number: for (byte type = ReadByte (); type != 9; type = ReadByte ()) {  	hash.Add (key' ReadData (type));  	key = ReadShortString ();  }  
Magic Number,Fuel.AmfNet,Serializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Serializer.cs,SerializeBytes,The following statement contains a magic number: ser.WriteUInt16 (3);  
Magic Number,Fuel.AmfNet,Serializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Serializer.cs,WriteDate,The following statement contains a magic number: WriteUInt16 ((UInt16)65236);  
Missing Default,Fuel.AmfNet,AmfNetConfiguration,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\AmfNetConfiguration.cs,LoadValues,The following switch statement is missing a default case: switch (childNode.Name.ToLower ()) {  case "reconstitutor":  	ParseReconstitutor (childNode);  	break;  }  
Missing Default,Fuel.AmfNet,AmfNetConfiguration,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\AmfNetConfiguration.cs,ParseReconstitutor,The following switch statement is missing a default case: switch (childNode.Name.ToLower ()) {  case "add":  	if (childNode.Attributes ["type"] == null) {  		throw new ConfigurationErrorsException ("No type attribute was specified when adding a reconstitutor.");  	}  	string typeName = childNode.Attributes ["type"].Value;  	Type type = Type.GetType (typeName);  	if (type == null) {  		throw new ConfigurationErrorsException (string.Format ("Could not load reconstitutor type for {0}."' typeName));  	}  	object o = Activator.CreateInstance (type);  	if (!(o is IReconstitutor)) {  		throw new ConfigurationErrorsException ("Attribute type specified for the reconstitutor does not implement IReconstitutor.");  	}  	_reconstitutors.Add ((IReconstitutor)o);  	break;  }  
Missing Default,Fuel.AmfNet,Deserializer,C:\repos\sasha237_NorthCitadel\AmfNet\AmfNet\Deserializer.cs,ReadData,The following switch statement is missing a default case: switch (t) {  case DataType.Number:  	return ReadDouble ();  case DataType.Boolean:  	return ReadBoolean ();  case DataType.String:  	return ReadShortString ();  case DataType.Array:  	return ReadArray ();  case DataType.Date:  	return ReadDate ();  case DataType.LongString:  	return ReadLongString ();  case DataType.TypedObject:  	return ReadTypedObject ();  case DataType.MixedArray:  	return ReadDictionary ();  case DataType.Null:  case DataType.Undefined:  case DataType.End:  	return null;  case DataType.UntypedObject:  	return ReadUntypedObject ();  case DataType.Xml:  	return ReadXmlDocument ();  case DataType.MovieClip:  case DataType.ReferencedObject:  case DataType.TypeAsObject:  case DataType.Recordset:  	break;  }  
