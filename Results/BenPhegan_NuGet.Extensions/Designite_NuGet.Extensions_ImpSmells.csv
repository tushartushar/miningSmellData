Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,ExecuteSub,Cyclomatic complexity of the method is 8
Complex Method,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,ExecuteCommand,Cyclomatic complexity of the method is 8
Complex Method,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,InstallPackagesFromConfigFile,Cyclomatic complexity of the method is 12
Complex Method,NuGet.Extensions.FeedAudit,FeedAuditResultsOutputManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditResultsOutputManager.cs,Output,Cyclomatic complexity of the method is 13
Complex Method,NuGet.Extensions.FeedAudit,FeedAuditor,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditor.cs,Audit,Cyclomatic complexity of the method is 11
Complex Method,NuGet.Extensions.PackageReferences,PackageReferenceSetResolver,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\PackageReferences\PackageReferenceSetResolver.cs,Resolve,Cyclomatic complexity of the method is 8
Long Parameter List,NuGet.Extensions.Commands,Audit,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Audit.cs,GetAuditFlags,The method has 5 parameters.
Long Parameter List,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,InstallPackage,The method has 5 parameters.
Long Parameter List,NuGet.Extensions.ReferenceAnalysers,ProjectNugetifier,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ReferenceAnalysers\ProjectNugetifier.cs,ProjectNugetifier,The method has 5 parameters.
Long Parameter List,NuGet.Extensions.FeedAudit,FeedAuditor,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditor.cs,FeedAuditor,The method has 8 parameters.
Long Parameter List,NuGet.Extensions.Packages,IPackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\IPackageResolutionManager.cs,ResolvePackage,The method has 5 parameters.
Long Parameter List,NuGet.Extensions.Packages,IPackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\IPackageResolutionManager.cs,FindPackageInAllLocalSources,The method has 5 parameters.
Long Parameter List,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolvePackage,The method has 5 parameters.
Long Parameter List,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolvePackage,The method has 6 parameters.
Long Parameter List,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,FindPackageInAllLocalSources,The method has 5 parameters.
Long Parameter List,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,FindPackage,The method has 6 parameters.
Long Parameter List,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,FindPackageInAggregateLocalSources,The method has 5 parameters.
Long Identifier,NuGet.Extensions.MSBuild,ProjectAdapter,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\MSBuild\ProjectAdapter.cs,GetProjectReferences,The length of the parameter conditionTrueProjectReferences is 30.
Long Identifier,NuGet.Extensions.MSBuild,ProjectReferenceAdapter,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\MSBuild\ProjectReferenceAdapter.cs,ProjectReferenceAdapter,The length of the parameter addBinaryReferenceWithMetadataIfNotExists is 41.
Long Identifier,NuGet.Extensions.ReferenceAnalysers,ProjectNugetifier,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ReferenceAnalysers\ProjectNugetifier.cs,GetManifestDependencies,The length of the parameter referencedProjectAssemblyNames is 30.
Long Identifier,NuGet.Extensions.FeedAudit,FeedAuditor,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditor.cs,FeedAuditor,The length of the parameter checkForFeedResolvableAssemblies is 32.
Long Identifier,NuGet.Extensions.FeedAudit,FeedAuditor,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditor.cs,UpdateUnresolvablePackageAuditResults,The length of the parameter unresolvableAssemblyReferences is 30.
Long Statement,NuGet.Extensions.BaseClasses,TwoWayCommand,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\BaseClasses\TwoWayCommand.cs,ExecuteCommand,The length of the statement  "	WorkDirectory = Path.Combine (string.IsNullOrEmpty (WorkingDirectoryRoot) ? Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData) : WorkingDirectoryRoot' "NugetExtensionWork"); " is 197.
Long Statement,NuGet.Extensions.BaseClasses,TwoWayCommand,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\BaseClasses\TwoWayCommand.cs,PreventApiKeyBeingSpecifiedWhenMultipleRemoteSources,The length of the statement  "		throw new ApplicationException ("ApiKey cannot be set if you specify multiple remote destinations. Please consider using nuget 'setApiKey' command and then running this command without the ApiKey parameter set."); " is 213.
Long Statement,NuGet.Extensions.Caches,MemoryBasedPackageCache,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Caches\MemoryBasedPackageCache.cs,TryCacheHitByVersionConstraint,The length of the statement  "			_console.Log (MessageLevel.Info' "Using cached latest constrained version : {0} {1} using constraint {2}"' package.Id' package.Version.ToString ()' packageReference.VersionConstraint); " is 184.
Long Statement,NuGet.Extensions.Caches,MemoryBasedPackageCache,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Caches\MemoryBasedPackageCache.cs,TryCacheHitByVersion,The length of the statement  "		IPackage cachedPackage = _fullVersionPackageCache [packageId.ToLowerInvariant ()].FirstOrDefault (p => p.Version == version); " is 125.
Long Statement,NuGet.Extensions.Caches,MemoryBasedPackageCache,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Caches\MemoryBasedPackageCache.cs,AddCacheEntryByList,The length of the statement  "		_fullVersionPackageCache.Add (packageId.ToLowerInvariant ()' packages.ToList ().OrderByDescending (p => p.Version).ToList ()); " is 126.
Long Statement,NuGet.Extensions.Commands,Audit,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Audit.cs,ExecuteCommand,The length of the statement  "	var excludedPackageWildcards = String.IsNullOrEmpty (PackageExceptions) ? new List<Regex> () : GetExcludedWildcards (PackageExceptions); " is 136.
Long Statement,NuGet.Extensions.Commands,Audit,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Audit.cs,ExecuteCommand,The length of the statement  "	var excludedAssemblyWildcards = String.IsNullOrEmpty (AssemblyExceptions) ? new List<Regex> () : GetExcludedWildcards (AssemblyExceptions); " is 139.
Long Statement,NuGet.Extensions.Commands,Audit,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Audit.cs,ExecuteCommand,The length of the statement  "	var feedAuditor = new FeedAuditor (repository' excludedPackageIds' excludedPackageWildcards' Unlisted' CheckFeedForUnresolvedAssemblies' Gac' excludedAssembliesIds' excludedAssemblyWildcards); " is 192.
Long Statement,NuGet.Extensions.Commands,Audit,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Audit.cs,ExecuteCommand,The length of the statement  "	feedAuditor.PackageIgnored += (o' e) => Console.WriteLine ("Ignoring package: {0} based on {1}"' e.IgnoredPackage.Id' e.Wildcard ? "wildcard..." : "string match..."); " is 166.
Long Statement,NuGet.Extensions.Commands,Audit,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Audit.cs,ExecuteCommand,The length of the statement  "		var writer = !String.IsNullOrEmpty (UnresolvedOutput) ? new StreamWriter (Path.GetFullPath (UnresolvedOutput)) : System.Console.Out; " is 132.
Long Statement,NuGet.Extensions.Commands,Audit,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Audit.cs,RunAuditAndReturnResults,The length of the statement  "		var actualPackage = File.Exists (Package) ? new ZipPackage (Package) : repository.FindPackagesById (Package).FirstOrDefault (); " is 127.
Long Statement,NuGet.Extensions.Commands,Audit,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Audit.cs,GetAuditFlags,The length of the statement  "	return Enum.GetValues (typeof(AuditEventTypes)).Cast<AuditEventTypes> ().Aggregate (events' (current' enumVal) => current | enumVal); " is 133.
Long Statement,NuGet.Extensions.Commands,Audit,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Audit.cs,AnyPossibleFailuresExist,The length of the statement  "	return results.Any (r => r.UnloadablePackageFiles.Any () || r.UnresolvedAssemblyReferences.Any () || r.UnresolvedDependencies.Any () || r.UnusedPackageDependencies.Any ()); " is 172.
Long Statement,NuGet.Extensions.Commands,FixReferences,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\FixReferences.cs,ExecuteCommand,The length of the statement  "		_repository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources (RepositoryFactory' SourceProvider' Source); " is 121.
Long Statement,NuGet.Extensions.Commands,FixReferences,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\FixReferences.cs,ExecuteCommand,The length of the statement  "					var newReference = new PackageReference (package.Id' package.Version' new VersionSpec ()' new FrameworkName (".NET Framework' Version=4.0")' false); " is 148.
Long Statement,NuGet.Extensions.Commands,Graph,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Graph.cs,ExecuteCommand,The length of the statement  "	var dgml = _graph.ToDirectedGraphML (_graph.GetVertexIdentity ()' _graph.GetEdgeIdentity ()' (n' d) => d.Label = n' (e' l) => l.Label = ""); " is 140.
Long Statement,NuGet.Extensions.Commands,Graph,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Graph.cs,RemoveLonersFromGraph,The length of the statement  "	var toDelete = _graph.Vertices.Where (vertex => !_graph.Edges.Any (e => e.Source.Equals (vertex) || e.Target.Equals (vertex))).ToList (); " is 137.
Long Statement,NuGet.Extensions.Commands,Graph,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Graph.cs,GetRepository,The length of the statement  "	var repository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources (RepositoryFactory' SourceProvider' Source); " is 124.
Long Statement,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,ExecuteSub,The length of the statement  "	//TODO Copy is currently using the default InstallCommand under the covers' which means this is a bit messy on the dependencies (ie it gets them all) " is 149.
Long Statement,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,ExecuteSub,The length of the statement  "		//Get the list of packages from both source and destination' and if we only have one destination then find the set difference " is 125.
Long Statement,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,ExecuteSub,The length of the statement  "		//Console.WriteLine(string.Format("Found: {0} versions of {1} to copy.{2}"' packagesToCopy.Count()' packageName' packagesToCopy.Count() == 0 ? " All packages synced!" : string.Empty)); " is 184.
Long Statement,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,PopulateSourcePackageList,The length of the statement  "		_packageList = Refresh ? GetPackageList (false' string.Empty' DestinationProvider' _tags).Select (p => p.Id) : GetPackageList (false' string.Empty' SourceProvider' _tags).Select (p => p.Id); " is 190.
Long Statement,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,OutputCountToConsole,The length of the statement  "	var packageVersionList = list.Count () > 0 ? string.Format ("    (" + string.Join ("' "' list.Select (x => x.Version)) + ")") : string.Empty; " is 141.
Long Statement,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,GetIPackageLambdaComparer,The length of the statement  "	return new LambdaComparer<IPackage> ((a' b) => a.Id == b.Id && a.Version.ToString () == b.Version.ToString ()' a => a.Id.GetHashCode () + a.Version.ToString ().GetHashCode ()); " is 176.
Long Statement,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,GetPackageList,The length of the statement  "	//HACK perhaps we should be passing in the tags as well here (additional to the id). This would narrow down the number of packages " is 130.
Long Statement,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,GetPackagesByTag,The length of the statement  "	packages = packages.Where (p => p.Tags != null && p.Tags.Count () > 0 ? Clone.ParseTags (p.Tags).Any (t => tags.Contains (t)) : false); " is 135.
Long Statement,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,GetInitialPackageList,The length of the statement  "	var repository = GetRepository (sourceProvider' sourceProvider.GetEnabledPackageSources ().Select (s => s.Source).ToList ()); " is 125.
Long Statement,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,GetRepository,The length of the statement  "	var repository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources (RepositoryFactory' sourceProvider' source); " is 124.
Long Statement,NuGet.Extensions.Commands,Copy,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Copy.cs,ExecuteSub,The length of the statement  "	Console.WriteLine ("Copying {0}{1} from {2} to {3}."' string.IsNullOrEmpty (Version) ? packageId : packageId + " " + Version' Recursive ? " and all of its dependent packages" : string.Empty' Sources.Count == 0 ? "any source" : string.Join (";"' Sources)' string.Join (";"' Destinations)); " is 288.
Long Statement,NuGet.Extensions.Commands,Copy,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Copy.cs,GetPackageLocally,The length of the statement  "			AggregateRepository repository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources (PackageRepositoryFactory.Default' CreateSourceProvider (new[] { " is 160.
Long Statement,NuGet.Extensions.Commands,Copy,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Copy.cs,GetApiKey,The length of the statement  "		throw new CommandLineException ("No API Key was provided and no API Key could be found for {0}. To save an API Key for a source use the 'setApiKey' command."' new object[] { " is 173.
Long Statement,NuGet.Extensions.Commands,FindAssembly,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\FindAssembly.cs,GetPackageList,The length of the statement  "	IQueryable<IPackage> packages = AllVersions ? repository.GetPackages () : repository.GetPackages ().Where (p => p.IsLatestVersion); " is 131.
Long Statement,NuGet.Extensions.Commands,FindAssembly,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\FindAssembly.cs,GetRepository,The length of the statement  "	var repository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources (RepositoryFactory' SourceProvider' Source); " is 124.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,ExecuteCommand,The length of the statement  "		_packageResolutionManager = _packageResolutionManager ?? new PackageResolutionManager (Console' Latest' new MemoryBasedPackageCache (Console)); " is 143.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,ExecuteCommand,The length of the statement  "		var target = Arguments [0] == Path.GetFullPath (Arguments [0]) ? Arguments [0] : Path.GetFullPath (Path.Combine (_baseDirectory' Arguments [0])); " is 145.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,GetByDirectoryPath,The length of the statement  "					Console.WriteLine ("Getting {0} distinct packages from a total of {1} from {2}"' min' max' repositoryManager.RepositoryConfig.FullName); " is 136.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,GetByDirectoryPath,The length of the statement  "				}' Latest ? PackageReferenceEqualityComparer.IdAndAllowedVersions : PackageReferenceEqualityComparer.IdVersionAndAllowedVersions' new PackageReferenceSetResolver ()); " is 166.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,GetByDirectoryPath,The length of the statement  "					var installedPackagesList = InstallPackagesFromConfigFile (packagesConfigDiretory' GetPackageReferenceFile (baseFileSystem' tempPackageConfig.FullName)' target); " is 161.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,GetByDirectoryPath,The length of the statement  "			var errorMessage = string.Format ("Failed : {0} package directories' {1} packages in {2} seconds"' repositoryManagers.Count' totalPackageUpdates' totalTime.Elapsed.TotalSeconds); " is 178.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,GetByDirectoryPath,The length of the statement  "		Console.WriteLine (string.Format ("Updated : {0} package directories' {1} packages in {2} seconds"' repositoryManagers.Count' totalPackageUpdates' totalTime.Elapsed.TotalSeconds)); " is 180.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,SaveNuGetXml,The length of the statement  "		var diffPackages = packageReferences.Nodes ().Except (nugetXml.Root.Element ("packages").Nodes ()' new XNodeEqualityComparer ()); " is 129.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,GetByPackagesConfig,The length of the statement  "			var installedPackages = InstallPackagesFromConfigFile (OutputDirectory' GetPackageReferenceFile (fileSystem' target)' target); " is 126.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,LogSatisfactionFailure,The length of the statement  "	Console.WriteError ("{0} {1}{2} in {3} could not be satisfied."' p.Id' p.Version' p.VersionConstraint != null ? " using constraint " + p.VersionConstraint : string.Empty' GetPackageConfigLocationUsingUltimateEvil (prf)); " is 220.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,GetRepository,The length of the statement  "	var repository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources (RepositoryFactory' SourceProvider' Source); " is 124.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,InstallPackagesFromConfigFile,The length of the statement  "			throw new InvalidDataException (String.Format (CultureInfo.CurrentCulture' GetResources.GetCommandInvalidPackageReference' target)); " is 132.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,InstallPackagesFromConfigFile,The length of the statement  "			throw new InvalidDataException (String.Format (CultureInfo.CurrentCulture' GetResources.GetCommandPackageReferenceInvalidVersion' packageReference.Id)); " is 152.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,InstallPackagesFromConfigFile,The length of the statement  "			installedPackages.Add (new PackageReference (packageReference.Id' version ?? packageReference.Version' null' _frameworkName' false)); " is 133.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,InstallPackagesFromConfigFile,The length of the statement  "			var resolvedPackage = _packageResolutionManager.FindPackageInAllLocalSources (packageManager.LocalRepository' packageManager.SourceRepository' package); " is 152.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,InstallPackagesFromConfigFile,The length of the statement  "			installedPackages.Add (new PackageReference (package.Id' resolvedPackage != null ? resolvedPackage.Version : package.Version' null' _frameworkName' false)); " is 156.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,InstallPackage,The length of the statement  "	var package = _packageResolutionManager.ResolvePackage (packageManager.LocalRepository' _repository' packageId' version' allowPreReleaseVersion); " is 145.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,InstallPackage,The length of the statement  "	packageManager.InstallPackage (package' ignoreDependencies: !IncludeDependencies' allowPrereleaseVersions: allowPreReleaseVersion); " is 131.
Long Statement,NuGet.Extensions.Commands,Get,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Get.cs,CreatePackageManager,The length of the statement  "	var packageManager = new PackageManager (_repository' pathResolver' fileSystem' new LocalPackageRepository (pathResolver' fileSystem)); " is 135.
Long Statement,NuGet.Extensions.Commands,Details,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Details.cs,OutputDependencies,The length of the statement  "				Console.WriteLine ("".PadLeft (_indent) + string.Format ("{0} - {1} {2}"' dependencySet.TargetFramework' dependency.Id' dependency.VersionSpec)); " is 145.
Long Statement,NuGet.Extensions.Commands,Details,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Details.cs,GetRepository,The length of the statement  "	var repository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources (RepositoryFactory' SourceProvider' Source); " is 124.
Long Statement,NuGet.Extensions.Commands,Nugetify,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Nugetify.cs,NugetifySolution,The length of the statement  "	var existingSolutionPackagesRepo = new SharedPackageRepository (Path.Combine (solutionFile.Directory.FullName' "packages")); " is 124.
Long Statement,NuGet.Extensions.Commands,Nugetify,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Nugetify.cs,CreateProjectNugetifier,The length of the statement  "	var repository = AggregateRepositoryHelper.CreateAggregateRepositoryFromSources (RepositoryFactory' SourceProvider' Source); " is 124.
Long Statement,NuGet.Extensions.Commands,Nugetify,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Nugetify.cs,GetParsedBuildProperties,The length of the statement  "		throw new ArgumentException (string.Format ("Key value pair near {0} is formatted incorrectly"' string.Join ("'"' errorKvp [0]))); " is 130.
Long Statement,NuGet.Extensions.Commands,TeamCity,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\TeamCity.cs,ExecuteCommand,The length of the statement  "	var buildConfigs = string.IsNullOrEmpty (Project) ? api.GetBuildTypes ().ToList () : api.GetBuildTypes ().Where (b => b.ProjectName.Equals (Project' StringComparison.InvariantCultureIgnoreCase)).ToList (); " is 205.
Long Statement,NuGet.Extensions.Commands,TeamCity,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\TeamCity.cs,ExecuteCommand,The length of the statement  "		_simpleGraph.ToDirectedGraphML (_simpleGraph.GetVertexIdentity ()' _simpleGraph.GetEdgeIdentity ()' (s' n) => n.Label = s' (s' e) => e.Label = s.Tag).WriteXml (_outputFilename); " is 177.
Long Statement,NuGet.Extensions.Commands,TeamCity,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\TeamCity.cs,ExecuteCommand,The length of the statement  "		_fancyGraph.ToDirectedGraphML (_fancyGraph.GetVertexIdentity ()' _fancyGraph.GetEdgeIdentity ()' GetNodeFormat ()' GetEdgeFormat ()).WriteXml (_outputFilename); " is 160.
Long Statement,NuGet.Extensions.ExtensionMethods,IPackageExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\IPackageExtensions.cs,GetHashCode,The length of the statement  "		return ((package.Id != null ? package.Id.GetHashCode () : 0) * 397) ^ (package.Version != null ? package.Version.GetHashCode () : 0); " is 133.
Long Statement,NuGet.Extensions.ExtensionMethods,AggregateRepositoryExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\AggregateRepositoryExtensions.cs,FindLatestPackage,The length of the statement  "		localPackage = localRepo.FindPackagesById (packageId).OrderByDescending (p => p.Version).Where (p => p.IsLatestVersion).FirstOrDefault (); " is 138.
Long Statement,NuGet.Extensions.ExtensionMethods,AggregateRepositoryExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\AggregateRepositoryExtensions.cs,FindLatestPackage,The length of the statement  "		Func<IPackageRepository' IPackage> findLatestPackage = Wrap (r => r.GetPackages ().Where (p => p.Id.Equals (packageId' StringComparison.OrdinalIgnoreCase) && p.IsLatestVersion).FirstOrDefault ()); " is 196.
Long Statement,NuGet.Extensions.ExtensionMethods,AggregateRepositoryExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\AggregateRepositoryExtensions.cs,GetLocalOnlyAggregateRepository,The length of the statement  "	return new AggregateRepository (repoList.Where (r => r.GetType () != typeof(DataServicePackageRepository) && r.GetType () != typeof(MachineCache))); " is 148.
Long Statement,NuGet.Extensions.ExtensionMethods,AggregateRepositoryExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\AggregateRepositoryExtensions.cs,GetRemoteOnlyAggregateRepository,The length of the statement  "	return new AggregateRepository (repoList.Where (r => r.GetType () != typeof(LocalPackageRepository) && r.GetType () != typeof(MachineCache))); " is 142.
Long Statement,NuGet.Extensions.ExtensionMethods,AggregateRepositoryExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\AggregateRepositoryExtensions.cs,FindLatestPackage,The length of the statement  "	return remoteOnlyAggregateRepository.FindPackagesById (packageId).Where (p => IVersionExtensions.Satisfies (versionSpec' p.Version)).OrderByDescending (p => p.Version).FirstOrDefault (); " is 186.
Long Statement,NuGet.Extensions.ExtensionMethods,IPackageManagerExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\IPackageManagerExtensions.cs,CleanPackageFolders,The length of the statement  "		var directories = new ConcurrentBag<string> (packageManager.FileSystem.GetDirectories (packageManager.FileSystem.Root).ToList ()); " is 130.
Long Statement,NuGet.Extensions.ExtensionMethods,IPackageManagerExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\IPackageManagerExtensions.cs,CleanPackageFolders,The length of the statement  "		packageManager.Logger.Log (MessageLevel.Warning' String.Format ("Deleting {0} package directories from {1}."' directories.Count' packageManager.FileSystem.Root)); " is 162.
Long Statement,NuGet.Extensions.ExtensionMethods,IPackageManagerExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\IPackageManagerExtensions.cs,IsPackageInstalled,The length of the statement  "	pathsDictionary.Add (Path.Combine (packageManager.PathResolver.GetInstallPath (package)' packageManager.PathResolver.GetPackageFileName (package.Id' package.Version))' useSideBySide); " is 183.
Long Statement,NuGet.Extensions.ExtensionMethods,IPackageManagerExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\IPackageManagerExtensions.cs,IsPackageInstalled,The length of the statement  "		var inversePathResolver = new DefaultPackagePathResolver (packageManager.PathResolver.GetPrivateField<IFileSystem> ("_fileSystem")' !useSideBySide); " is 148.
Long Statement,NuGet.Extensions.ExtensionMethods,IPackageManagerExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\IPackageManagerExtensions.cs,IsPackageInstalled,The length of the statement  "		pathsDictionary.Add (Path.Combine (inversePathResolver.GetInstallPath (package)' inversePathResolver.GetPackageFileName (package.Id' package.Version))' !useSideBySide); " is 168.
Long Statement,NuGet.Extensions.MSBuild,CachingProjectLoader,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\MSBuild\CachingProjectLoader.cs,LogProjectLoadException,The length of the statement  "	_console.WriteWarning ("Problem loading {0}' any future messages about modifications to it are speculative only:"' absoluteProjectPath); " is 136.
Long Statement,NuGet.Extensions.MSBuild,CachingProjectLoader,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\MSBuild\CachingProjectLoader.cs,GetRealProjectAdapter,The length of the statement  "	return _projectsByGuid.TryGetValue (projectGuid' out projectAdapter) ? projectAdapter : new ProjectAdapter (msBuildProject' _projectLoader); " is 140.
Long Statement,NuGet.Extensions.MSBuild,ProjectAdapter,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\MSBuild\ProjectAdapter.cs,GetProjectReferenceAdapter,The length of the statement  "	return new ProjectReferenceAdapter (referencedProjectAdapter' () => _project.RemoveItem (r)' AddBinaryReferenceIfNotExists' conditionTrue); " is 139.
Long Statement,NuGet.Extensions.MSBuild,ProjectAdapter,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\MSBuild\ProjectAdapter.cs,AddBinaryReferenceIfNotExists,The length of the statement  "	var existingReferences = GetBinaryReferences ().Where (r => string.Equals (r.AssemblyName' includePath' StringComparison.InvariantCultureIgnoreCase)); " is 150.
Long Statement,NuGet.Extensions.MSBuild,ProjectReferenceAdapter,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\MSBuild\ProjectReferenceAdapter.cs,ConvertToNugetReferenceWithHintPath,The length of the statement  "	_addBinaryReferenceWithMetadataIfNotExists (_project.AssemblyName' new KeyValuePair<string' string> ("HintPath"' hintPath)); " is 124.
Long Statement,NuGet.Extensions.Nuspec,NuspecBuilder,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Nuspec\NuspecBuilder.cs,RemoveSchemaNamespace,The length of the statement  "	return Regex.Replace (content' @"(xmlns:?[^=]*=[""][^""]*[""])"' String.Empty' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 129.
Long Statement,NuGet.Extensions.ReferenceAnalysers,HintPathGenerator,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ReferenceAnalysers\HintPathGenerator.cs,ForAssembly,The length of the statement  "	var packageDirectory = _useVersionedPackageHintPath ? string.Format ("{0}.{1}"' package.Id' package.Version) : package.Id; " is 122.
Long Statement,NuGet.Extensions.ReferenceAnalysers,ProjectNugetifier,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ReferenceAnalysers\ProjectNugetifier.cs,NugetifyReferences,The length of the statement  "	var packageReferencesAdded = new HashSet<IPackage> (new LambdaComparer<IPackage> (IPackageExtensions.Equals' IPackageExtensions.GetHashCode)); " is 142.
Long Statement,NuGet.Extensions.ReferenceAnalysers,ProjectNugetifier,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ReferenceAnalysers\ProjectNugetifier.cs,GetBestPackage,The length of the statement  "	var bestPackages = matchingPackages.Where (p => p.GetFullName ().IndexOf (assemblyName' StringComparison.OrdinalIgnoreCase) != -1).ToList (); " is 141.
Long Statement,NuGet.Extensions.ReferenceAnalysers,ProjectNugetifier,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ReferenceAnalysers\ProjectNugetifier.cs,LogHintPathRewriteMessage,The length of the statement  "	var message = string.Format ("Attempting to update hintpaths for \"{0}\" {1}using package \"{2}\" version \"{3}\""' includeName' string.IsNullOrEmpty (includeVersion) ? "" : "version \"" + includeVersion + "\" "' package.Id' package.Version); " is 242.
Long Statement,NuGet.Extensions.ReferenceAnalysers,ProjectNugetifier,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ReferenceAnalysers\ProjectNugetifier.cs,LogHintPathRewriteMessage,The length of the statement  "		if (!string.IsNullOrEmpty (includeVersion) && package.Version.Version != SemanticVersion.Parse (includeVersion).Version) " is 120.
Long Statement,NuGet.Extensions.ReferenceAnalysers,ProjectNugetifier,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ReferenceAnalysers\ProjectNugetifier.cs,CreatePackagesConfig,The length of the statement  "		if (!packagesConfig.EntryExists (package.Id' package.Version))//Note we don't re-add entries that have the wrong targetFramework set " is 132.
Long Statement,NuGet.Extensions.ReferenceAnalysers,ProjectNugetifier,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ReferenceAnalysers\ProjectNugetifier.cs,WarnAboutIgnoredReference,The length of the statement  "		_console.WriteWarning ("Ignoring {0} because it was found in the GAC (with public key token {1})"' reference.AssemblyName' publicKeyToken); " is 139.
Long Statement,NuGet.Extensions.Comparers,VersionSpecEqualityComparer,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Comparers\VersionSpecEqualityComparer.cs,Equals,The length of the statement  "	var maxVersionsAreEqual = _me.MaxVersion != null && other.MaxVersion != null ? _me.MaxVersion.Equals (other.MaxVersion) : _me.MaxVersion == null && other.MaxVersion == null; " is 173.
Long Statement,NuGet.Extensions.Comparers,VersionSpecEqualityComparer,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Comparers\VersionSpecEqualityComparer.cs,Equals,The length of the statement  "	var minVersionsAreEqual = _me.MinVersion != null && other.MinVersion != null ? _me.MinVersion.Equals (other.MinVersion) : _me.MinVersion == null && other.MinVersion == null; " is 173.
Long Statement,NuGet.Extensions.Comparers,VersionSpecEqualityComparer,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Comparers\VersionSpecEqualityComparer.cs,Equals,The length of the statement  "	return _me.IsMaxInclusive == other.IsMaxInclusive && _me.IsMinInclusive == other.IsMinInclusive && minVersionsAreEqual && maxVersionsAreEqual; " is 142.
Long Statement,NuGet.Extensions.FeedAudit,FeedAuditor,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditor.cs,Audit,The length of the statement  "		currentResult.UnusedPackageDependencies.AddRange (packageDependencies.Where (p => !usedDependencies.Contains (p)).Select (l => l)); " is 131.
Long Statement,NuGet.Extensions.FeedAudit,FeedAuditor,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditor.cs,UpdateUnresolvablePackageAuditResults,The length of the statement  "		packageAuditResult.UnresolvableReferences = packageAuditResult.UnresolvedAssemblyReferences.Where (unresolvable.Contains).ToList (); " is 132.
Long Statement,NuGet.Extensions.FeedAudit,FeedAuditor,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditor.cs,GetUnresolvedAssemblies,The length of the statement  "		if (!results.Any (r => r.FeedResolvableReferences.Any (fr => fr.Name.Equals (unresolved.Name' StringComparison.OrdinalIgnoreCase))) && !results.Any (r => r.GacResolvableReferences.Any (gr => gr.Name.Equals (unresolved.Name' StringComparison.OrdinalIgnoreCase)))) { " is 264.
Long Statement,NuGet.Extensions.FeedAudit,FeedAuditor,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditor.cs,GetPossiblePackagesForAssembly,The length of the statement  "	return packageDependencies.Where (d => d.GetFiles ().Any (a => new FileInfo (a.Path).Name.Equals (actualDependency.Name + ".dll"' StringComparison.OrdinalIgnoreCase))); " is 168.
Long Statement,NuGet.Extensions.FeedAudit,FeedAuditor,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditor.cs,RemoveInternallySatisfiedDependencies,The length of the statement  "	return actualAssemblyReferences.Where (a => !fileNames.Contains (a.Name.ToLowerInvariant () + ".dll") && !fileNames.Contains (a.Name.ToLowerInvariant () + ".exe")); " is 164.
Long Statement,NuGet.Extensions.FeedAudit,FeedAuditor,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FeedAudit\FeedAuditor.cs,GetDependencyAssemblyList,The length of the statement  "		var dependencyPackage = _feedPackages.FirstOrDefault (p => p.Id.Equals (dependency.Id' StringComparison.OrdinalIgnoreCase)); " is 124.
Long Statement,NuGet.Extensions.PackageReferences,PackageReferenceSetResolver,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\PackageReferences\PackageReferenceSetResolver.cs,Resolve,The length of the statement  "	var versionGroups = references.Where (x => x.VersionConstraint == null || x.VersionConstraint.MaxVersion == null && x.VersionConstraint.MinVersion == null).GroupBy (p => p.Id); " is 176.
Long Statement,NuGet.Extensions.PackageReferences,PackageReferenceSetResolver,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\PackageReferences\PackageReferenceSetResolver.cs,Resolve,The length of the statement  "	var allowedVersionGroups = references.Where (x => x.VersionConstraint != null && x.VersionConstraint.MaxVersion != null && x.VersionConstraint.MinVersion != null).GroupBy (p => p.Id); " is 183.
Long Statement,NuGet.Extensions.PackageReferences,PackageReferenceSetResolver,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\PackageReferences\PackageReferenceSetResolver.cs,Resolve,The length of the statement  "				//TODO should we be just getting the explicit version in this case and define it without a allowedVersions range?  Or leave both in? " is 132.
Long Statement,NuGet.Extensions.PackageReferences,PackageReferenceSetResolver,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\PackageReferences\PackageReferenceSetResolver.cs,ResolveValidVersionSpec,The length of the statement  "			bool minGreaterThanCurrentMax = smallest.IsMaxInclusive && pr.VersionConstraint.IsMinInclusive ? pr.VersionConstraint.MinVersion > smallest.MaxVersion : pr.VersionConstraint.MinVersion >= smallest.MaxVersion; " is 208.
Long Statement,NuGet.Extensions.PackageReferences,PackageReferenceSetResolver,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\PackageReferences\PackageReferenceSetResolver.cs,ResolveValidVersionSpec,The length of the statement  "			bool maxLessThanCurrentMin = smallest.IsMinInclusive && pr.VersionConstraint.IsMaxInclusive ? pr.VersionConstraint.MaxVersion < smallest.MinVersion : pr.VersionConstraint.MaxVersion <= smallest.MinVersion; " is 205.
Long Statement,NuGet.Extensions.PackageReferences,PackageReferenceSetResolver,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\PackageReferences\PackageReferenceSetResolver.cs,ResolveValidVersionSpec,The length of the statement  "				bool minMoreConstrictive = (!pr.VersionConstraint.IsMinInclusive && smallest.IsMinInclusive && (pr.VersionConstraint.MinVersion == smallest.MinVersion)) || pr.VersionConstraint.MinVersion > smallest.MinVersion; " is 210.
Long Statement,NuGet.Extensions.PackageReferences,PackageReferenceSetResolver,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\PackageReferences\PackageReferenceSetResolver.cs,ResolveValidVersionSpec,The length of the statement  "				bool maxMoreConstrictive = (!pr.VersionConstraint.IsMaxInclusive && smallest.IsMaxInclusive && (pr.VersionConstraint.MaxVersion == smallest.MaxVersion)) || pr.VersionConstraint.MaxVersion < smallest.MaxVersion; " is 210.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolvePackage,The length of the statement  "	return ResolvePackage (localRepository' sourceRepository' constraintProvider: NullConstraintProvider.Instance' packageId: packageId' version: version' allowPrereleaseVersions: allowPrereleaseVersions); " is 201.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolvePackage,The length of the statement  "	// If we're looking for an exact version of a package then try local first (where local is typically the target .\packages directory) " is 133.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolvePackage,The length of the statement  "		package = package ?? FindPackageInAggregateLocalSources (sourceRepository' constraintProvider' packageId' version' allowPrereleaseVersions); " is 140.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolvePackage,The length of the statement  "		package = localRepository.FindPackage (package.Id' package.Version' allowPrereleaseVersions' allowUnlisted: true) ?? package; " is 125.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,FindPackageInAllLocalSources,The length of the statement  "	IPackage cachedPackage = localRepository.FindPackage (package.Id' package.Version' allowPrereleaseVersions' allowUnlisted); " is 123.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,FindPackageInAllLocalSources,The length of the statement  "	cachedPackage = cachedPackage ?? FindPackageInAggregateLocalSources (sourceRepository' NullConstraintProvider.Instance' package.Id' package.Version' allowPrereleaseVersions); " is 174.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,FindPackageInAggregateLocalSources,The length of the statement  "		package = localAggregate.GetLocalOnlyAggregateRepository ().FindPackage (packageId' version' constraintProvider' allowPrereleaseVersions' allowUnlisted: false); " is 160.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolveInstallableVersion,The length of the statement  "	Console.Log (MessageLevel.Info' "Using specific version : {0} {1}"' packageReference.Id' packageReference.Version.ToString ()); " is 127.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolveLatestInstallablePackage,The length of the statement  "				Console.Log (MessageLevel.Error' "One of the feeds threw an error' a package called {0} could not be found."' packageReference.Id); " is 131.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolveLatestInstallablePackage,The length of the statement  "			Console.Log (MessageLevel.Info' "Checking for latest package: {0} using constraint {1}"' packageReference.Id' packageReference.VersionConstraint); " is 146.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolveLatestInstallablePackage,The length of the statement  "					Console.Log (MessageLevel.Info' "Using constrained version : {0} {1}' constrained by {2}"' packageReference.Id' p.Version.ToString ()' packageReference.VersionConstraint); " is 171.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolveLatestInstallablePackage,The length of the statement  "					Console.Log (MessageLevel.Error' "Latest version requested' however {0} cannot be satisfied on feed using constraint {1}."' packageReference.Id' packageReference.VersionConstraint); " is 181.
Long Statement,NuGet.Extensions.Packages,PackageResolutionManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Packages\PackageResolutionManager.cs,ResolveLatestInstallablePackage,The length of the statement  "				Console.Log (MessageLevel.Error' "One of the feeds threw an error' a package called {0} could not be found."' packageReference.Id); " is 131.
Long Statement,NuGet.Extensions.Repositories,AssemblyToPackageMapping,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Repositories\AssemblyToPackageMapping.cs,OutputPackageConfigFile,The length of the statement  "				_console.WriteLine (String.Format ("{0} : Choosing {1} from {2} choices."' assemblyToPackageMapping.Key' smallestPackage.Id' assemblyToPackageMapping.Value.Count ())); " is 167.
Long Statement,NuGet.Extensions.Repositories,AssemblyToPackageMapping,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Repositories\AssemblyToPackageMapping.cs,GetResolvedMappings,The length of the statement  "	return _assemblyToPackageMapping.Where (assemblyToPackageMapping => assemblyToPackageMapping.Value.Any ()).ToDictionary (m => m.Key' m => m.Value); " is 147.
Long Statement,NuGet.Extensions.Repositories,AssemblyToPackageMapping,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Repositories\AssemblyToPackageMapping.cs,GetFailedMappings,The length of the statement  "	return _assemblyToPackageMapping.Where (assemblyToPackageMapping => !assemblyToPackageMapping.Value.Any ()).Select (mapping => mapping.Key).ToList (); " is 150.
Long Statement,NuGet.Extensions.TeamCity,BuildType,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\TeamCity\TeamCityApi.cs,ToString,The length of the statement  "	return string.Format ("Id:{0} Name:{1} HREF:{2} ProjectName:{3} ProjectID:{4} WebUrl:{5}"' Id' Name' Href' ProjectName' ProjectId' WebUrl); " is 139.
Complex Conditional,NuGet.Extensions.Commands,Audit,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Audit.cs,GetAuditFlags,The conditional expression  "!allOutput && (runTimeOnly || checkFeedResolvable || gac)"  is complex.
Empty Catch Block,NuGet.Extensions.Caches,NuGetCacheManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Caches\NuGetCacheManager.cs,ResolveCacheSubDirectoryName,The method has an empty catch block.
Empty Catch Block,NuGet.Extensions.Caches,NuGetCacheManager,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Caches\NuGetCacheManager.cs,ResolveCacheSubDirectoryName,The method has an empty catch block.
Magic Number,NuGet.Extensions,FindFilesPatternToRegex,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FindFilesPatternToRegex.cs,Convert,The following statement contains a magic number: if (HasQuestionMarkRegEx.IsMatch (pattern)) {  	matchExact = true;  } else if (hasExtension) {  	matchExact = CatchExtentionRegex.Match (pattern).Groups [1].Length != 3;  }  
Magic Number,NuGet.Extensions,FindFilesPatternToRegex,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FindFilesPatternToRegex.cs,Convert,The following statement contains a magic number: if (hasExtension) {  	matchExact = CatchExtentionRegex.Match (pattern).Groups [1].Length != 3;  }  
Magic Number,NuGet.Extensions,FindFilesPatternToRegex,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\FindFilesPatternToRegex.cs,Convert,The following statement contains a magic number: matchExact = CatchExtentionRegex.Match (pattern).Groups [1].Length != 3;  
Magic Number,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,OutputCountToConsole,The following statement contains a magic number: Console.WriteLine (string.Format (message.PadRight (14) + count).PadLeft (18));  
Magic Number,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,OutputCountToConsole,The following statement contains a magic number: Console.WriteLine (string.Format (message.PadRight (14) + count).PadLeft (18));  
Magic Number,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,OutputCountToConsole,The following statement contains a magic number: Console.WriteLine (string.Format (message.PadRight (14) + count).PadLeft (18) + packageVersionList);  
Magic Number,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,OutputCountToConsole,The following statement contains a magic number: Console.WriteLine (string.Format (message.PadRight (14) + count).PadLeft (18) + packageVersionList);  
Magic Number,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,LogPackageList,The following statement contains a magic number: Console.WriteLine ("Using tags:".PadRight (15) + string.Join (" "' tags).PadLeft (15));  
Magic Number,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,LogPackageList,The following statement contains a magic number: Console.WriteLine ("Using tags:".PadRight (15) + string.Join (" "' tags).PadLeft (15));  
Magic Number,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,LogPackageList,The following statement contains a magic number: Console.WriteLine ("Package Id".PadRight (maxIdLength + 4) + "Tags");  
Magic Number,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,LogPackageList,The following statement contains a magic number: Console.WriteLine ("----------".PadRight (maxIdLength + 4) + "----");  
Magic Number,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,LogPackageList,The following statement contains a magic number: foreach (var p in packages.Distinct ()) {  	Console.WriteLine (p.Id.PadRight (maxIdLength + 3) + string.Join (" "' p.Tags));  }  
Magic Number,NuGet.Extensions.Commands,Clone,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Clone.cs,LogPackageList,The following statement contains a magic number: Console.WriteLine (p.Id.PadRight (maxIdLength + 3) + string.Join (" "' p.Tags));  
Magic Number,NuGet.Extensions.Commands,Copy,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Copy.cs,PushPackage,The following statement contains a magic number: try {  	using (package.GetStream ()) {  		var fileSize = new FileInfo (packagePath).Length;  		packageServer.PushPackage (apiKey' package' fileSize' 60000' false);  	}  } catch {  	Console.WriteLine ();  	throw;  }  
Magic Number,NuGet.Extensions.Commands,Copy,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Copy.cs,PushPackage,The following statement contains a magic number: using (package.GetStream ()) {  	var fileSize = new FileInfo (packagePath).Length;  	packageServer.PushPackage (apiKey' package' fileSize' 60000' false);  }  
Magic Number,NuGet.Extensions.Commands,Copy,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Copy.cs,PushPackage,The following statement contains a magic number: packageServer.PushPackage (apiKey' package' fileSize' 60000' false);  
Magic Number,NuGet.Extensions.Commands,FindAssembly,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\FindAssembly.cs,OutputErrors,The following statement contains a magic number: foreach (var a in notFound) {  	Console.WriteLine ("{0}".PadLeft (15)' a);  }  
Magic Number,NuGet.Extensions.Commands,FindAssembly,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\FindAssembly.cs,OutputErrors,The following statement contains a magic number: Console.WriteLine ("{0}".PadLeft (15)' a);  
Magic Number,NuGet.Extensions.Commands,FindAssembly,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\FindAssembly.cs,LogFoundPackages,The following statement contains a magic number: foreach (var p in found) {  	Console.WriteLine ("Found in : ".PadLeft (15) + "{0} {1}"' p.Id' p.Version);  }  
Magic Number,NuGet.Extensions.Commands,FindAssembly,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\FindAssembly.cs,LogFoundPackages,The following statement contains a magic number: Console.WriteLine ("Found in : ".PadLeft (15) + "{0} {1}"' p.Id' p.Version);  
Magic Number,NuGet.Extensions.Commands,Nugetify,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\Commands\Nugetify.cs,GetParsedBuildProperties,The following statement contains a magic number: foreach (var errorKvp in twoElementArrays.Where (a => a.Length != 2))  	throw new ArgumentException (string.Format ("Key value pair near {0} is formatted incorrectly"' string.Join ("'"' errorKvp [0])));  
Magic Number,NuGet.Extensions.ExtensionMethods,IPackageExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\IPackageExtensions.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((package.Id != null ? package.Id.GetHashCode () : 0) * 397) ^ (package.Version != null ? package.Version.GetHashCode () : 0);  }  
Magic Number,NuGet.Extensions.ExtensionMethods,IPackageExtensions,F:\newReposMay17\BenPhegan_NuGet.Extensions\NuGet.Extensions\ExtensionMethods\IPackageExtensions.cs,GetHashCode,The following statement contains a magic number: return ((package.Id != null ? package.Id.GetHashCode () : 0) * 397) ^ (package.Version != null ? package.Version.GetHashCode () : 0);  
