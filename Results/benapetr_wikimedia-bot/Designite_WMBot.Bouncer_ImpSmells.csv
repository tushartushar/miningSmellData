Implementation smell,Namespace,Class,File,Method,Description
Magic Number,WMBot.Bouncer,Program,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Program.cs,Main,The following statement contains a magic number: if (args.Length > 2)              {                  // pid file                  System.IO.File.WriteAllText(args[2]' System.Diagnostics.Process.GetCurrentProcess().Id.ToString());              }
Magic Number,WMBot.Bouncer,Program,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Program.cs,Main,The following statement contains a magic number: if (args.Length > 2)              {                  // pid file                  System.IO.File.WriteAllText(args[2]' System.Diagnostics.Process.GetCurrentProcess().Id.ToString());              }
Magic Number,WMBot.Bouncer,Server,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Server.cs,Listen,The following statement contains a magic number: while (true)              {                  client = cache.AcceptTcpClient();                  NetworkStream temp = client.GetStream();                  local_writer = new StreamWriter(temp);                  local_reader = new StreamReader(temp' Encoding.UTF8);                  Syslog.Log("New client has connected to bouncer");                  try                  {                      while (!local_reader.EndOfStream)                      {                          string data = local_reader.ReadLine();                          if (string.IsNullOrEmpty(data))                          {                              continue;                          }                          if (data[0] != 'C' || !data.StartsWith("CONTROL: "))                          {                              Buffer.Out(data);                          }                          else                          {                              string code = data.Replace("\r"' "").Substring("CONTROLxx".Length);                              string parameter = "";                              if (code.Contains(" "))                              {                                  int sidx = code.IndexOf(" ");                                  parameter = code.Substring(sidx + 1);                                  code = code.Substring(0' sidx);                              }                              switch (code)                              {                                  case "STATUS":                                      if (IsConnectedOnRemote)                                          Buffer.In("CONTROL: TRUE"' true);                                      else                                          Buffer.In("CONTROL: FALSE"' true);                                      break;                                  case "CONNECT":                                  case "CREATE":                                      Syslog.Log("Connecting to remote server: " + parameter);                                      StartIRC(parameter);                                      break;                                  case "DISCONNECT":                                      Disconnect();                                      SendDisconnectOnRemote();                                      break;                              }                          }                          Thread.Sleep(20);                      }                      Syslog.Log("Client has disconnect on EOF");                  }                  catch (IOException)                  {                      Syslog.Log("Client has disconnected on IOEX term");                  }                  Thread.Sleep(20);              }
Magic Number,WMBot.Bouncer,Server,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Server.cs,Listen,The following statement contains a magic number: while (true)              {                  client = cache.AcceptTcpClient();                  NetworkStream temp = client.GetStream();                  local_writer = new StreamWriter(temp);                  local_reader = new StreamReader(temp' Encoding.UTF8);                  Syslog.Log("New client has connected to bouncer");                  try                  {                      while (!local_reader.EndOfStream)                      {                          string data = local_reader.ReadLine();                          if (string.IsNullOrEmpty(data))                          {                              continue;                          }                          if (data[0] != 'C' || !data.StartsWith("CONTROL: "))                          {                              Buffer.Out(data);                          }                          else                          {                              string code = data.Replace("\r"' "").Substring("CONTROLxx".Length);                              string parameter = "";                              if (code.Contains(" "))                              {                                  int sidx = code.IndexOf(" ");                                  parameter = code.Substring(sidx + 1);                                  code = code.Substring(0' sidx);                              }                              switch (code)                              {                                  case "STATUS":                                      if (IsConnectedOnRemote)                                          Buffer.In("CONTROL: TRUE"' true);                                      else                                          Buffer.In("CONTROL: FALSE"' true);                                      break;                                  case "CONNECT":                                  case "CREATE":                                      Syslog.Log("Connecting to remote server: " + parameter);                                      StartIRC(parameter);                                      break;                                  case "DISCONNECT":                                      Disconnect();                                      SendDisconnectOnRemote();                                      break;                              }                          }                          Thread.Sleep(20);                      }                      Syslog.Log("Client has disconnect on EOF");                  }                  catch (IOException)                  {                      Syslog.Log("Client has disconnected on IOEX term");                  }                  Thread.Sleep(20);              }
Magic Number,WMBot.Bouncer,Server,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Server.cs,StartIRC,The following statement contains a magic number: try              {                  if (IsConnectedOnRemote)                      return false;                  if (server != "")                      network = server;                  stream = new TcpClient(network' 6667).GetStream();                  remote_reader = new StreamReader(stream' Encoding.UTF8);                  remote_writer = new StreamWriter(stream);                  Ping = DateTime.Now;                  IsConnectedOnRemote = true;              }              catch (Exception fail)              {                  Console.Write(fail + "\n");                  IsConnectedOnRemote = false;              }
Magic Number,WMBot.Bouncer,Server,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Server.cs,Init,The following statement contains a magic number: while (true)              {                  try                  {                      if (IsConnectedOnRemote)                      {                          while (!remote_reader.EndOfStream)                          {                              string text = remote_reader.ReadLine();                              Ping = DateTime.Now;                              Buffer.In(text);                              Thread.Sleep(20);                          }                          SendDisconnectOnRemote();                      }                      Thread.Sleep(20);                  }                  catch (IOException)                  {                      SendDisconnectOnRemote();                  }                  Thread.Sleep(10);              }
Magic Number,WMBot.Bouncer,Server,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Server.cs,Init,The following statement contains a magic number: while (true)              {                  try                  {                      if (IsConnectedOnRemote)                      {                          while (!remote_reader.EndOfStream)                          {                              string text = remote_reader.ReadLine();                              Ping = DateTime.Now;                              Buffer.In(text);                              Thread.Sleep(20);                          }                          SendDisconnectOnRemote();                      }                      Thread.Sleep(20);                  }                  catch (IOException)                  {                      SendDisconnectOnRemote();                  }                  Thread.Sleep(10);              }
Magic Number,WMBot.Bouncer,Server,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Server.cs,Init,The following statement contains a magic number: while (true)              {                  try                  {                      if (IsConnectedOnRemote)                      {                          while (!remote_reader.EndOfStream)                          {                              string text = remote_reader.ReadLine();                              Ping = DateTime.Now;                              Buffer.In(text);                              Thread.Sleep(20);                          }                          SendDisconnectOnRemote();                      }                      Thread.Sleep(20);                  }                  catch (IOException)                  {                      SendDisconnectOnRemote();                  }                  Thread.Sleep(10);              }
Magic Number,WMBot.Bouncer,Server,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Server.cs,Connect,The following statement contains a magic number: while (true)              {                  try                  {                      if (client != null && client.Connected && Buffer.IncomingData.Count > 0)                      {                          BufferItem lastitem;                          lock (Buffer.IncomingData)                          {                              lastitem = Buffer.IncomingData[0];                              foreach (BufferItem Item in Buffer.IncomingData)                              {                                  if (Item.important)                                  {                                      lastitem = Item;                                      break;                                  }                              }                              Buffer.IncomingData.Remove(lastitem);                          }                          local_writer.WriteLine(lastitem.Text);                          local_writer.Flush();                      }                        if (IsConnectedOnRemote)                      {                          if (Buffer.OutgoingData.Count > 0)                          {                              BufferItem lastitem;                              lock (Buffer.OutgoingData)                              {                                  lastitem = Buffer.OutgoingData[0];                                  Buffer.OutgoingData.Remove(lastitem);                              }                              remote_writer.WriteLine(lastitem.Text);                              remote_writer.Flush();                          }                          ping++;                          if (ping > 2000)                          {                              if ((DateTime.Now - Ping).Minutes > 2)                              {                                  // no response from server within 2 minutes                                  SendDisconnectOnRemote();                                  Syslog.Log("Remote didn't respond for long time' closing connection");                                  Disconnect();                                  ping = 0;                                  continue;                              }                              ping = 0;                              remote_writer.WriteLine("PING :" + DateTime.Now.ToBinary());                              remote_writer.Flush();                          }                      }                  }                  catch (Exception fail)                  {                       Console.Write(fail.ToString());                  }                  Thread.Sleep(10);              }
Magic Number,WMBot.Bouncer,Server,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Server.cs,Connect,The following statement contains a magic number: while (true)              {                  try                  {                      if (client != null && client.Connected && Buffer.IncomingData.Count > 0)                      {                          BufferItem lastitem;                          lock (Buffer.IncomingData)                          {                              lastitem = Buffer.IncomingData[0];                              foreach (BufferItem Item in Buffer.IncomingData)                              {                                  if (Item.important)                                  {                                      lastitem = Item;                                      break;                                  }                              }                              Buffer.IncomingData.Remove(lastitem);                          }                          local_writer.WriteLine(lastitem.Text);                          local_writer.Flush();                      }                        if (IsConnectedOnRemote)                      {                          if (Buffer.OutgoingData.Count > 0)                          {                              BufferItem lastitem;                              lock (Buffer.OutgoingData)                              {                                  lastitem = Buffer.OutgoingData[0];                                  Buffer.OutgoingData.Remove(lastitem);                              }                              remote_writer.WriteLine(lastitem.Text);                              remote_writer.Flush();                          }                          ping++;                          if (ping > 2000)                          {                              if ((DateTime.Now - Ping).Minutes > 2)                              {                                  // no response from server within 2 minutes                                  SendDisconnectOnRemote();                                  Syslog.Log("Remote didn't respond for long time' closing connection");                                  Disconnect();                                  ping = 0;                                  continue;                              }                              ping = 0;                              remote_writer.WriteLine("PING :" + DateTime.Now.ToBinary());                              remote_writer.Flush();                          }                      }                  }                  catch (Exception fail)                  {                       Console.Write(fail.ToString());                  }                  Thread.Sleep(10);              }
Magic Number,WMBot.Bouncer,Server,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Server.cs,Connect,The following statement contains a magic number: while (true)              {                  try                  {                      if (client != null && client.Connected && Buffer.IncomingData.Count > 0)                      {                          BufferItem lastitem;                          lock (Buffer.IncomingData)                          {                              lastitem = Buffer.IncomingData[0];                              foreach (BufferItem Item in Buffer.IncomingData)                              {                                  if (Item.important)                                  {                                      lastitem = Item;                                      break;                                  }                              }                              Buffer.IncomingData.Remove(lastitem);                          }                          local_writer.WriteLine(lastitem.Text);                          local_writer.Flush();                      }                        if (IsConnectedOnRemote)                      {                          if (Buffer.OutgoingData.Count > 0)                          {                              BufferItem lastitem;                              lock (Buffer.OutgoingData)                              {                                  lastitem = Buffer.OutgoingData[0];                                  Buffer.OutgoingData.Remove(lastitem);                              }                              remote_writer.WriteLine(lastitem.Text);                              remote_writer.Flush();                          }                          ping++;                          if (ping > 2000)                          {                              if ((DateTime.Now - Ping).Minutes > 2)                              {                                  // no response from server within 2 minutes                                  SendDisconnectOnRemote();                                  Syslog.Log("Remote didn't respond for long time' closing connection");                                  Disconnect();                                  ping = 0;                                  continue;                              }                              ping = 0;                              remote_writer.WriteLine("PING :" + DateTime.Now.ToBinary());                              remote_writer.Flush();                          }                      }                  }                  catch (Exception fail)                  {                       Console.Write(fail.ToString());                  }                  Thread.Sleep(10);              }
Missing Default,WMBot.Bouncer,Server,C:\repos\benapetr_wikimedia-bot\src\WMBot.Bouncer\Server.cs,Listen,The following switch statement is missing a default case: switch (code)                              {                                  case "STATUS":                                      if (IsConnectedOnRemote)                                          Buffer.In("CONTROL: TRUE"' true);                                      else                                          Buffer.In("CONTROL: FALSE"' true);                                      break;                                  case "CONNECT":                                  case "CREATE":                                      Syslog.Log("Connecting to remote server: " + parameter);                                      StartIRC(parameter);                                      break;                                  case "DISCONNECT":                                      Disconnect();                                      SendDisconnectOnRemote();                                      break;                              }
