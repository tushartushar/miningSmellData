Implementation smell,Namespace,Class,File,Method,Description
Long Method,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The method has 108 lines of code.
Long Method,wmib,Program,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,Main,The method has 105 lines of code.
Long Method,wmib,Session,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The method has 195 lines of code.
Long Method,wmib,Configuration,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The method has 119 lines of code.
Complex Method,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,Cyclomatic complexity of the method is 21
Complex Method,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,Cyclomatic complexity of the method is 10
Complex Method,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,Cyclomatic complexity of the method is 12
Complex Method,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,ConnectAllIrcInstances,Cyclomatic complexity of the method is 8
Complex Method,wmib,Core,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,GetMessage,Cyclomatic complexity of the method is 9
Complex Method,wmib,messages,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\l10n.cs,Localize,Cyclomatic complexity of the method is 13
Complex Method,wmib,Program,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,ParseArgs,Cyclomatic complexity of the method is 14
Complex Method,wmib,Program,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,wmib,Session,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,Cyclomatic complexity of the method is 32
Complex Method,wmib,Logging,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Syslog.cs,Display,Cyclomatic complexity of the method is 9
Complex Method,wmib,Configuration,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,File2Dict,Cyclomatic complexity of the method is 9
Complex Method,wmib,Configuration,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,Cyclomatic complexity of the method is 16
Complex Method,wmib,IRC,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,dm,Cyclomatic complexity of the method is 9
Complex Method,wmib,Network,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt_PRIVMSG,Cyclomatic complexity of the method is 10
Complex Method,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,wmib,WmIrcProtocol,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,_Connect,Cyclomatic complexity of the method is 13
Complex Method,wmib,Channel,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,LoadConfig,Cyclomatic complexity of the method is 15
Complex Method,wmib,Channel,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,SaveConfig,Cyclomatic complexity of the method is 12
Complex Method,wmib,PostgreSQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,InsertRow,Cyclomatic complexity of the method is 12
Long Parameter List,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,The method has 5 parameters. Parameters: channel' user' host' message' origin
Long Parameter List,wmib,Processing,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,ProcessCommands,The method has 5 parameters. Parameters: chan' nick' ident' host' message
Long Parameter List,wmib,GenericCommand,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\GenericCommand.cs,GenericCommand,The method has 6 parameters. Parameters: name_' function' ignorable' permissions' channel' silent
Long Parameter List,wmib,Channel,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,InsertData,The method has 5 parameters. Parameters: key' value' document' node' Name
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,ChannelOverview,The length of the statement  "            IRC.DeliverMessage("Channel " + channel.Name + " was joined " + channel.Extension_GetConfig("generic.joindate"' "unknown time") + "' requested by " + " is 149.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "            if (parameters.Parameters.Contains("=") && !parameters.Parameters.EndsWith("="' System.StringComparison.InvariantCulture)) " is 122.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                string name = parameters.Parameters.Substring(0' parameters.Parameters.IndexOf("="' System.StringComparison.InvariantCulture)); " is 127.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                string value = parameters.Parameters.Substring(parameters.Parameters.IndexOf("="' System.StringComparison.InvariantCulture) + 1); " is 129.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel); " is 149.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                                IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel); " is 150.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel); " is 149.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                            IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel); " is 150.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel); " is 149.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                            IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel); " is 150.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel); " is 149.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.IgnoreUnknown.ToString() })' parameters.SourceChannel); " is 212.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.RespondMessage.ToString() })' parameters.SourceChannel); " is 213.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.SuppressWarnings.ToString() })' parameters.SourceChannel); " is 215.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,ChannelList,The length of the statement  "            IRC.DeliverMessage(messages.Localize("Responses-List"' parameters.SourceChannel.Language' new List<string> { Configuration.Channels.Count.ToString() })' " is 152.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Whoami,The length of the statement  "            IRC.DeliverMessage(messages.Localize("usr1"' parameters.SourceChannel.Language' new List<string> { current.Role' current.Name })' parameters.SourceChannel); " is 156.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Restart,The length of the statement  "            IRC.DeliverMessage("System is shutting down' requested by " + parameters.User.Nick + " from " + parameters.SourceChannel.Name' Configuration.System.DebugChan' libirc.Defs.Priority.High); " is 186.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Drop,The length of the statement  "            IRC.DeliverMessage(messages.Localize("Responses-PartFail"' parameters.SourceChannel.Language)' parameters.SourceChannel' " is 120.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Part,The length of the statement  "            IRC.DeliverMessage(messages.Localize("Responses-PartFail"' parameters.SourceChannel.Language)' parameters.SourceChannel' " is 120.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,TrustAdd,The length of the statement  "                IRC.DeliverMessage("You can't grant this role because it's over the maximum grantable role level' sorry"' parameters.SourceChannel); " is 132.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,TrustAdd,The length of the statement  "                IRC.DeliverMessage(messages.Localize("UserSc"' parameters.SourceChannel.Language) + rights_info[0]' parameters.SourceChannel); " is 126.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,TrustDel,The length of the statement  "            parameters.SourceChannel.SystemUsers.DeleteUser(parameters.SourceChannel.SystemUsers.GetUser(parameters.User)' rights_info); " is 124.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,TrustedList,The length of the statement  "            IRC.DeliverMessage(messages.Localize("TrustedUserList"' parameters.SourceChannel.Language) + parameters.SourceChannel.SystemUsers.ListAll()' parameters.SourceChannel); " is 167.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The length of the statement  "                    IRC.DeliverMessage("Invalid number of parameters' please provide up to 2 parameters (name' password)"' parameters.SourceChannel); " is 129.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The length of the statement  "                    IRC.DeliverMessage(messages.Localize("InvalidName"' parameters.SourceChannel.Language' new List<string> { channel_name })' parameters.SourceChannel); " is 149.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The length of the statement  "                IRC.DeliverMessage("Attempting to join " + channel_name + " using " + channel.PrimaryInstance.Nick' parameters.SourceChannel.Name); " is 131.
Long Statement,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The length of the statement  "                    Chan.SystemUsers.AddUser("admin"' Security.EscapeUser(parameters.User.Nick) + "!.*@" + Security.EscapeUser(parameters.User.Host)); " is 130.
Long Statement,wmib,Core,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,HandleException,The length of the statement  "                    IRC.DeliverMessage("DEBUG Exception: " + ex.Message + " st: " + ex.StackTrace.Replace(Environment.NewLine' "")' Configuration.System.DebugChan); " is 144.
Long Statement,wmib,Core,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,WikiEncode,The length of the statement  "            return HttpUtility.UrlEncode(url).Replace("+"' "_").Replace("%3a"' ":").Replace("%2f"' "/").Replace("%23"' "#").Replace("%28"' "(").Replace("%29"' ")"); " is 152.
Long Statement,wmib,Core,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The length of the statement  "            Syslog.WriteNow("There was problem shutting down " + ExtensionHandler.ExtensionList.Count + " modules' terminating process"); " is 125.
Long Statement,wmib,Configuration,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The length of the statement  "                Console.WriteLine("You can get a configuration file here: https://raw.githubusercontent.com/benapetr/wikimedia-bot/master/configuration/wmib.conf"); " is 148.
Long Statement,wmib,IRC,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,GetMaxMessageLength,The length of the statement  "            return 480 - (target.PrimaryInstance.Nick.Length + target.PrimaryInstance.Network.Ident.Length + target.PrimaryInstance.Hostname.Length + " is 137.
Long Statement,wmib,IRC,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,dm,The length of the statement  "                    Syslog.Log("Not sending message using disconnected instance: " + ch.PrimaryInstance.Nick + " target: " + target + " message: " + text); " is 135.
Long Statement,wmib,IRC,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Self,The length of the statement  "                        module.Hook_OnSelf(channel' new libirc.UserInfo(Configuration.IRC.NickName' Configuration.IRC.Ident' GetSelfHost(channel))' message); " is 133.
Long Statement,wmib,IRC,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,SelfAct,The length of the statement  "                        module.Hook_OnSelf(channel' new libirc.UserInfo(Configuration.IRC.NickName' Configuration.IRC.Ident' GetSelfHost(channel))' message' true); " is 139.
Long Statement,wmib,Network,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt_KICK,The length of the statement  "                Syslog.Log("I was kicked from " + args.ChannelName + " by " + args.SourceInfo.Nick + " with kick message: " + args.Message); " is 124.
Long Statement,wmib,Network,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt_JOINERROR,The length of the statement  "                IRC.DeliverMessage("Join error: " + args.Message + " channel: " + args.ParameterLine + " reason: " + args.Error.ToString()' " is 123.
Long Statement,wmib,ExtensionHandler,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Modules\Handler.cs,InitialiseMod,The length of the statement  "                Syslog.Log("This module is already registered " + module.Name + " this new instance was terminated to prevent troubles"' true); " is 127.
Long Statement,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,The length of the statement  "                using (StreamReader reader = new StreamReader(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "security.xml")) " is 127.
Long Statement,wmib,WmIrcProtocol,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,connectBnc,The length of the statement  "                Syslog.Log("Still waiting for bouncer (trying " + retries.ToString() + "/6) on " + this.IRCNetwork.Nickname + " " + response); " is 126.
Virtual Method Call from Constructor,wmib,Channel,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,Channel,The constructor "Channel" calls a virtual method "Hook_Channel".
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,CommandList,The following statement contains a magic number: commands = commands.Substring(0' commands.Length - 2);
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,CommandList,The following statement contains a magic number: max_possible_length -= 8;
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,CommandList,The following statement contains a magic number: commands = commands.Substring (0' max_possible_length - 3) + "...";
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The following statement contains a magic number: switch (name)                  {                      case "ignore-unknown":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.IgnoreUnknown = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language'                                                                         new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "respond-wait":                          int _temp_b;                          if (int.TryParse(value' out _temp_b))                          {                              if (_temp_b > 1 && _temp_b < 364000)                              {                                  parameters.SourceChannel.RespondWait = _temp_b;                                  IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                                  parameters.SourceChannel.SaveConfig();                                  return;                              }                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "respond-message":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.RespondMessage = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "suppress-warnings":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.SuppressWarnings = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                  }
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,TrustAdd,The following statement contains a magic number: rights_info.Length < 2
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The following statement contains a magic number: pm.Count > 2 || pm.Count == 0
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,ConnectAllIrcInstances,The following statement contains a magic number: Syslog.DebugLog("Waiting for " + instance.Nick' 2);
Magic Number,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,ConnectAllIrcInstances,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,ConnectAllIrcInstances,The following statement contains a magic number: Syslog.DebugLog("Connected to " + instance.Nick' 6);
Magic Number,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,ConnectAllIrcInstances,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,JoinAll,The following statement contains a magic number: Syslog.DebugLog("JOIN THREAD: Waiting for " + Nick + " to finish connection to IRC server"' 6);
Magic Number,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,JoinAll,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,JoinAll,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,Exec,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,Exec,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,wmib,Instance,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,Exec,The following statement contains a magic number: Thread.Sleep(20000);
Magic Number,wmib,Core,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The following statement contains a magic number: Syslog.DebugLog("Attempt to kill bot while it's already being killed"' 2);
Magic Number,wmib,Core,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,wmib,Core,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,wmib,Core,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The following statement contains a magic number: kill < 20
Magic Number,wmib,Core,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,wmib,Program,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,ParseArgs,The following statement contains a magic number: Environment.Exit(-2);
Magic Number,wmib,Program,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,Main,The following statement contains a magic number: Environment.Exit(-2);
Magic Number,wmib,Program,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,wmib,StorageWriter,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\StorageWriter.cs,WriteData,The following statement contains a magic number: Thread.Sleep(6000);
Magic Number,wmib,StorageWriter,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\StorageWriter.cs,Exec,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,wmib,Terminal,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,FormatToSpecSize,The following statement contains a magic number: st = st.Substring(0' st.Length - ((st.Length - size) + 3));
Magic Number,wmib,Terminal,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ExecuteThread,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,wmib,Session,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }
Magic Number,wmib,Session,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }
Magic Number,wmib,Session,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }
Magic Number,wmib,Session,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }
Magic Number,wmib,Session,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }
Magic Number,wmib,Session,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }
Magic Number,wmib,Session,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }
Magic Number,wmib,Logging,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Syslog.cs,Exec,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,wmib,Configuration,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,File2Dict,The following statement contains a magic number: Syslog.DebugWrite("Parsing line: " + line' 8);
Magic Number,wmib,Configuration,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The following statement contains a magic number: return 2;
Magic Number,wmib,Configuration,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The following statement contains a magic number: return 4;
Magic Number,wmib,Configuration,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The following statement contains a magic number: return 6;
Magic Number,wmib,Configuration,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The following statement contains a magic number: CurrentInstance < 20
Magic Number,wmib,Configuration,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The following statement contains a magic number: return 20;
Magic Number,wmib,IRC,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,GetMaxMessageLength,The following statement contains a magic number: return 480 - (target.PrimaryInstance.Nick.Length + target.PrimaryInstance.Network.Ident.Length + target.PrimaryInstance.Hostname.Length +                            target.Name.Length + ": PRIVMSG !@".Length);
Magic Number,wmib,IRC,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,ChannelList,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,wmib,IRC,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,ChannelList,The following statement contains a magic number: Thread.Sleep((Configuration.Channels.Count * 2000) + 80000);
Magic Number,wmib,IRC,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,ChannelList,The following statement contains a magic number: Thread.Sleep((Configuration.Channels.Count * 2000) + 80000);
Magic Number,wmib,Network,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt_CTCP,The following statement contains a magic number: switch (args.CTCP)              {                  case "FINGER":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "FINGER" +                               " I am a bot' don't finger me");                      return;                  case "TIME":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "TIME " + DateTime.Now.ToString());                      return;                  case "PING":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "PING" + args.Message.Substring(                          args.Message.IndexOf(_Protocol.Separator + "PING") + 5));                      return;                  case "VERSION":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "VERSION "                               + Configuration.System.Version + " http://meta.wikimedia.org/wiki/wm-bot");                      return;              }
Magic Number,wmib,RegexCheck,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\RegexCheck.cs,IsMatch,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,wmib,RegexCheck,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\RegexCheck.cs,IsMatch,The following statement contains a magic number: return 2;
Magic Number,wmib,RegexCheck,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\RegexCheck.cs,IsMatch,The following statement contains a magic number: check > 50
Magic Number,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,The following statement contains a magic number: Roles.Add("trusted"' new Role(100));
Magic Number,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,The following statement contains a magic number: Roles.Add("operator"' new Role(1000));
Magic Number,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,The following statement contains a magic number: Roles.Add("admin"' new Role(20000));
Magic Number,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,The following statement contains a magic number: Roles.Add("root"' new Role(65535));
Magic Number,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,GlobalLoad,The following statement contains a magic number: user.UserName = info[3];
Magic Number,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,GlobalLoad,The following statement contains a magic number: user.Password = info[2];
Magic Number,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,GlobalLoad,The following statement contains a magic number: info.Length > 3
Magic Number,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,GlobalLoad,The following statement contains a magic number: Syslog.DebugLog("Registered global user (" + level + "): " + name' 2);
Magic Number,wmib,WmIrcProtocol,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,NetworkInit,The following statement contains a magic number: Thread.Sleep(800);
Magic Number,wmib,WmIrcProtocol,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,Authenticate,The following statement contains a magic number: Thread.Sleep(4000);
Magic Number,wmib,WmIrcProtocol,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,_Connect,The following statement contains a magic number: networkStream = new TcpClient(Server' 6667).GetStream();
Magic Number,wmib,WmIrcProtocol,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,connectBnc,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,wmib,WmIrcProtocol,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,connectBnc,The following statement contains a magic number: retries > 6
Magic Number,wmib,Value,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\Database.cs,Value,The following statement contains a magic number: Data = date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-"                           + date.Day.ToString().PadLeft(2' '0') + " " + date.Hour.ToString().PadLeft(2' '0') + ":"                           + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0');
Magic Number,wmib,Value,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\Database.cs,Value,The following statement contains a magic number: Data = date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-"                           + date.Day.ToString().PadLeft(2' '0') + " " + date.Hour.ToString().PadLeft(2' '0') + ":"                           + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0');
Magic Number,wmib,Value,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\Database.cs,Value,The following statement contains a magic number: Data = date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-"                           + date.Day.ToString().PadLeft(2' '0') + " " + date.Hour.ToString().PadLeft(2' '0') + ":"                           + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0');
Magic Number,wmib,Value,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\Database.cs,Value,The following statement contains a magic number: Data = date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-"                           + date.Day.ToString().PadLeft(2' '0') + " " + date.Hour.ToString().PadLeft(2' '0') + ":"                           + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0');
Magic Number,wmib,Value,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\Database.cs,Value,The following statement contains a magic number: Data = date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-"                           + date.Day.ToString().PadLeft(2' '0') + " " + date.Hour.ToString().PadLeft(2' '0') + ":"                           + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0');
Magic Number,wmib,PostgreSQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,InsertRow,The following statement contains a magic number: header = header.Substring(0' header.Length - 2);
Magic Number,wmib,PostgreSQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,InsertRow,The following statement contains a magic number: sql.Remove(sql.Length - 2' 2);
Magic Number,wmib,PostgreSQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,InsertRow,The following statement contains a magic number: sql.Remove(sql.Length - 2' 2);
Magic Number,wmib,WMIBMySQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,Exec,The following statement contains a magic number: Thread.Sleep(8000);
Magic Number,wmib,WMIBMySQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,Exec,The following statement contains a magic number: Thread.Sleep(200000);
Magic Number,wmib,WMIBMySQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,Exec,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,wmib,WMIBMySQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,InsertRow,The following statement contains a magic number: sql.Remove(sql.Length - 2' 2);
Magic Number,wmib,WMIBMySQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,InsertRow,The following statement contains a magic number: sql.Remove(sql.Length - 2' 2);
Missing Default,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The following switch statement is missing a default case: switch (name)                  {                      case "ignore-unknown":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.IgnoreUnknown = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language'                                                                         new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "respond-wait":                          int _temp_b;                          if (int.TryParse(value' out _temp_b))                          {                              if (_temp_b > 1 && _temp_b < 364000)                              {                                  parameters.SourceChannel.RespondWait = _temp_b;                                  IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                                  parameters.SourceChannel.SaveConfig();                                  return;                              }                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "respond-message":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.RespondMessage = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "suppress-warnings":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.SuppressWarnings = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                  }
Missing Default,wmib,Commands,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The following switch statement is missing a default case: switch (parameters.Parameters)                  {                      case "ignore-unknown":                          IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.IgnoreUnknown.ToString() })' parameters.SourceChannel);                          return;                      case "respond-message":                          IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.RespondMessage.ToString() })' parameters.SourceChannel);                          return;                      case "suppress-warnings":                          IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.SuppressWarnings.ToString() })' parameters.SourceChannel);                          return;                  }
Missing Default,wmib,Network,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt_CTCP,The following switch statement is missing a default case: switch (args.CTCP)              {                  case "FINGER":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "FINGER" +                               " I am a bot' don't finger me");                      return;                  case "TIME":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "TIME " + DateTime.Now.ToString());                      return;                  case "PING":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "PING" + args.Message.Substring(                          args.Message.IndexOf(_Protocol.Separator + "PING") + 5));                      return;                  case "VERSION":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "VERSION "                               + Configuration.System.Version + " http://meta.wikimedia.org/wiki/wm-bot");                      return;              }
Missing Default,wmib,Network,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt__IncomingData,The following switch statement is missing a default case: switch (args.Command)              {                  case "001":                  case "002":                      this.instance.IsWorking = true;                      break;              }
Missing Default,wmib,Security,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,InsertUser,The following switch statement is missing a default case: switch (info.Name)                  {                      case "regex":                          regex = info.Value;                          break;                      case "role":                          role = info.Value;                          break;                  }
Missing Default,wmib,Channel,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,LoadConfig,The following switch statement is missing a default case: switch (xx.Name)                      {                          case "user":                              this.SystemUsers.InsertUser(xx);                              continue;                          case "extension":                              if (ExtensionData.ContainsKey(xx.Attributes[0].Value))                              {                                  ExtensionData[xx.Attributes[0].Value] = xx.Attributes[1].Value;                              }                              else                              {                                  ExtensionData.Add(xx.Attributes[0].Value' xx.Attributes[1].Value);                              }                              continue;                          case "ignored":                              Infobot_IgnoredNames.Add(xx.Attributes[1].Value);                              continue;                          case "sharedch":                              SharedChans.Add(xx.Attributes[1].Value);                              continue;                        }
Missing Default,wmib,Channel,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,LoadConfig,The following switch statement is missing a default case: switch (xx.Attributes[0].Value)                      {                          case "talkmode":                              Suppress = bool.Parse(xx.Attributes[1].Value);                              break;                          case "langcode":                              Language = xx.Attributes[1].Value;                              break;                          case "respond_message":                              RespondMessage = bool.Parse(xx.Attributes[1].Value);                              break;                          case "ignore-unknown":                              IgnoreUnknown = bool.Parse(xx.Attributes[1].Value);                              break;                          case "suppress-warnings":                              SuppressWarnings = bool.Parse(xx.Attributes[1].Value);                              break;                          case "respond_wait":                              RespondWait = int.Parse(xx.Attributes[1].Value);                              break;                          case "sharedinfo":                              SharedDB = xx.Attributes[1].Value;                              break;                          case "defaultbot":                              DefaultInstance = xx.Attributes[1].Value;                              break;                          case "password":                              Password = xx.Attributes[1].Value;                              break;                      }
Missing Default,wmib,PostgreSQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,BindVars,The following switch statement is missing a default case: switch (bind.Type)                  {                      case DataType.Boolean:                          c.Parameters.Add(new Npgsql.NpgsqlParameter(bind.Name' NpgsqlTypes.NpgsqlDbType.Boolean));                          c.Parameters[n++].Value = bool.Parse(bind.Value);                          break;                      case DataType.Integer:                          c.Parameters.Add(new Npgsql.NpgsqlParameter(bind.Name' NpgsqlTypes.NpgsqlDbType.Integer));                          c.Parameters[n++].Value = int.Parse(bind.Value);                          break;                      case DataType.Varchar:                          c.Parameters.Add(new Npgsql.NpgsqlParameter(bind.Name' NpgsqlTypes.NpgsqlDbType.Varchar));                          c.Parameters[n++].Value = bind.Value;                          break;                      case DataType.Text:                          c.Parameters.Add(new Npgsql.NpgsqlParameter(bind.Name' NpgsqlTypes.NpgsqlDbType.Text));                          c.Parameters[n++].Value = bind.Value;                          break;                      case DataType.Date:                          c.Parameters.Add(new Npgsql.NpgsqlParameter(bind.Name' NpgsqlTypes.NpgsqlDbType.Timestamp));                          c.Parameters[n++].Value = DateTime.Parse(bind.Value);                          break;                  }
Missing Default,wmib,PostgreSQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,InsertRow,The following switch statement is missing a default case: switch (value.Type)                          {                              case DataType.Boolean:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Boolean));                                  s.Parameters[cv].Value = bool.Parse(value.Data);                                  break;                              case DataType.Integer:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Integer));                                  s.Parameters[cv].Value = int.Parse(value.Data);                                  break;                              case DataType.Varchar:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Varchar));                                  s.Parameters[cv].Value = value.Data;                                  break;                              case DataType.Text:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Text));                                  s.Parameters[cv].Value = value.Data;                                  break;                              case DataType.Date:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Timestamp));                                  s.Parameters[cv].Value = DateTime.Parse(value.Data);                                  break;                          }
Missing Default,wmib,WMIBMySQL,D:\research\architectureSmells\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,InsertRow,The following switch statement is missing a default case: switch (value.Type)                          {                              case DataType.Boolean:                              case DataType.Integer:                                  sql.Append(value.Data);                                  sql.Append("' ");                                  break;                              case DataType.Varchar:                              case DataType.Text:                              case DataType.Date:                                  sql.Append("'");                                  sql.Append(MySqlHelper.EscapeString(value.Data));                                  sql.Append("'' ");                                  break;                          }
