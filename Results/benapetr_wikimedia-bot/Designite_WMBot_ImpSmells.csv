Implementation smell,Namespace,Class,File,Method,Description
Long Method,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The method has 108 lines of code.
Long Method,wmib,Program,C:\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,Main,The method has 105 lines of code.
Long Method,wmib,Session,C:\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The method has 195 lines of code.
Long Method,wmib,Configuration,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The method has 119 lines of code.
Complex Method,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,Cyclomatic complexity of the method is 13
Complex Method,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,Cyclomatic complexity of the method is 8
Complex Method,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,Cyclomatic complexity of the method is 11
Complex Method,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,ConnectAllIrcInstances,Cyclomatic complexity of the method is 8
Complex Method,wmib,Core,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,GetMessage,Cyclomatic complexity of the method is 9
Complex Method,wmib,Program,C:\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,ParseArgs,Cyclomatic complexity of the method is 14
Complex Method,wmib,Configuration,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,File2Dict,Cyclomatic complexity of the method is 9
Complex Method,wmib,Configuration,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,Cyclomatic complexity of the method is 15
Complex Method,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,wmib,WmIrcProtocol,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,_Connect,Cyclomatic complexity of the method is 10
Complex Method,wmib,Channel,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,SaveConfig,Cyclomatic complexity of the method is 11
Long Parameter List,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,The method has 5 parameters. Parameters: channel' user' host' message' origin
Long Parameter List,wmib,Processing,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,ProcessCommands,The method has 5 parameters. Parameters: chan' nick' ident' host' message
Long Parameter List,wmib,GenericCommand,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\GenericCommand.cs,GenericCommand,The method has 6 parameters. Parameters: name_' function' ignorable' permissions' channel' silent
Long Parameter List,wmib,Channel,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,InsertData,The method has 5 parameters. Parameters: key' value' document' node' Name
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,ChannelOverview,The length of the statement  "            IRC.DeliverMessage("Channel " + channel.Name + " was joined " + channel.Extension_GetConfig("generic.joindate"' "unknown time") + "' requested by " + " is 149.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel); " is 149.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                                IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel); " is 150.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel); " is 149.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                            IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel); " is 150.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel); " is 149.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                            IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel); " is 150.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel); " is 149.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.IgnoreUnknown.ToString() })' parameters.SourceChannel); " is 212.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.RespondMessage.ToString() })' parameters.SourceChannel); " is 213.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The length of the statement  "                        IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.SuppressWarnings.ToString() })' parameters.SourceChannel); " is 215.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,ChannelList,The length of the statement  "            IRC.DeliverMessage(messages.Localize("Responses-List"' parameters.SourceChannel.Language' new List<string> { Configuration.Channels.Count.ToString() })' " is 152.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Whoami,The length of the statement  "            IRC.DeliverMessage(messages.Localize("usr1"' parameters.SourceChannel.Language' new List<string> { current.Role' current.Name })' parameters.SourceChannel); " is 156.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Restart,The length of the statement  "            IRC.DeliverMessage("System is shutting down' requested by " + parameters.User.Nick + " from " + parameters.SourceChannel.Name' Configuration.System.DebugChan' libirc.Defs.Priority.High); " is 186.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Drop,The length of the statement  "            IRC.DeliverMessage(messages.Localize("Responses-PartFail"' parameters.SourceChannel.Language)' parameters.SourceChannel' " is 120.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Part,The length of the statement  "            IRC.DeliverMessage(messages.Localize("Responses-PartFail"' parameters.SourceChannel.Language)' parameters.SourceChannel' " is 120.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,TrustAdd,The length of the statement  "                IRC.DeliverMessage("You can't grant this role because it's over the maximum grantable role level' sorry"' parameters.SourceChannel); " is 132.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,TrustAdd,The length of the statement  "                IRC.DeliverMessage(messages.Localize("UserSc"' parameters.SourceChannel.Language) + rights_info[0]' parameters.SourceChannel); " is 126.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,TrustDel,The length of the statement  "            parameters.SourceChannel.SystemUsers.DeleteUser(parameters.SourceChannel.SystemUsers.GetUser(parameters.User)' rights_info); " is 124.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,TrustedList,The length of the statement  "            IRC.DeliverMessage(messages.Localize("TrustedUserList"' parameters.SourceChannel.Language) + parameters.SourceChannel.SystemUsers.ListAll()' parameters.SourceChannel); " is 167.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The length of the statement  "                    IRC.DeliverMessage("Invalid number of parameters' please provide up to 2 parameters (name' password)"' parameters.SourceChannel); " is 129.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The length of the statement  "                    IRC.DeliverMessage(messages.Localize("InvalidName"' parameters.SourceChannel.Language' new List<string> { channel_name })' parameters.SourceChannel); " is 149.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The length of the statement  "                IRC.DeliverMessage("Attempting to join " + channel_name + " using " + channel.PrimaryInstance.Nick' parameters.SourceChannel.Name); " is 131.
Long Statement,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The length of the statement  "                    Chan.SystemUsers.AddUser("admin"' Security.EscapeUser(parameters.User.Nick) + "!.*@" + Security.EscapeUser(parameters.User.Host)); " is 130.
Long Statement,wmib,Core,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,HandleException,The length of the statement  "                    IRC.DeliverMessage("DEBUG Exception: " + ex.Message + " st: " + ex.StackTrace.Replace(Environment.NewLine' "")' Configuration.System.DebugChan); " is 144.
Long Statement,wmib,Core,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,WikiEncode,The length of the statement  "            return HttpUtility.UrlEncode(url).Replace("+"' "_").Replace("%3a"' ":").Replace("%2f"' "/").Replace("%23"' "#").Replace("%28"' "(").Replace("%29"' ")"); " is 152.
Long Statement,wmib,Core,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The length of the statement  "            Syslog.WriteNow("There was problem shutting down " + ExtensionHandler.ExtensionList.Count + " modules' terminating process"); " is 125.
Long Statement,wmib,Configuration,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The length of the statement  "                Console.WriteLine("You can get a configuration file here: https://github.com/benapetr/wikimedia-bot/blob/master/configuration/wmib.conf"); " is 138.
Long Statement,wmib,IRC,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,dm,The length of the statement  "                    Syslog.Log("Not sending message using disconnected instance: " + ch.PrimaryInstance.Nick + " target: " + target + " message: " + text); " is 135.
Long Statement,wmib,IRC,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Self,The length of the statement  "                        module.Hook_OnSelf(channel' new libirc.UserInfo(Configuration.IRC.NickName' Configuration.IRC.Ident' GetSelfHost(channel))' message); " is 133.
Long Statement,wmib,IRC,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,SelfAct,The length of the statement  "                        module.Hook_OnSelf(channel' new libirc.UserInfo(Configuration.IRC.NickName' Configuration.IRC.Ident' GetSelfHost(channel))' message' true); " is 139.
Long Statement,wmib,Network,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt_KICK,The length of the statement  "                Syslog.Log("I was kicked from " + args.ChannelName + " by " + args.SourceInfo.Nick + " with kick message: " + args.Message); " is 124.
Long Statement,wmib,Network,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt_JOINERROR,The length of the statement  "                IRC.DeliverMessage("Join error: " + args.Message + " channel: " + args.ParameterLine + " reason: " + args.Error.ToString()' " is 123.
Long Statement,wmib,ExtensionHandler,C:\repos\benapetr_wikimedia-bot\src\WMBot\Modules\Handler.cs,InitialiseMod,The length of the statement  "                Syslog.Log("This module is already registered " + module.Name + " this new instance was terminated to prevent troubles"' true); " is 127.
Long Statement,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,The length of the statement  "                using (StreamReader reader = new StreamReader(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "security.xml")) " is 127.
Long Statement,wmib,WmIrcProtocol,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,connectBnc,The length of the statement  "                Syslog.Log("Still waiting for bouncer (trying " + retries.ToString() + "/6) on " + this.IRCNetwork.Nickname + " " + response); " is 126.
Virtual Method Call from Constructor,wmib,Channel,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,Channel,The constructor "Channel" calls a virtual method "Hook_Channel".
Magic Number,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,CommandList,The following statement contains a magic number: if (commands.EndsWith("' "))                  commands = commands.Substring(0' commands.Length - 2);
Magic Number,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The following statement contains a magic number: if (parameters.Parameters.Contains("=") && !parameters.Parameters.EndsWith("="))              {                  string name = parameters.Parameters.Substring(0' parameters.Parameters.IndexOf("="));                  string value = parameters.Parameters.Substring(parameters.Parameters.IndexOf("=") + 1);                  bool _temp_a;                  switch (name)                  {                      case "ignore-unknown":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.IgnoreUnknown = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language'                                                                         new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "respond-wait":                          int _temp_b;                          if (int.TryParse(value' out _temp_b))                          {                              if (_temp_b > 1 && _temp_b < 364000)                              {                                  parameters.SourceChannel.RespondWait = _temp_b;                                  IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                                  parameters.SourceChannel.SaveConfig();                                  return;                              }                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "respond-message":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.RespondMessage = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "suppress-warnings":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.SuppressWarnings = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                  }                  bool exist = false;                  foreach (Module curr in ExtensionHandler.ExtensionList)                  {                      try                      {                          if (curr.IsWorking && curr.Hook_SetConfig(parameters.SourceChannel' parameters.User' name' value))                              exist = true;                      }                      catch (Exception fail)                      {                          Syslog.Log("Error on Hook_SetConfig module " + curr.Name);                          Core.HandleException(fail' curr.Name);                      }                  }                  if (!parameters.SourceChannel.SuppressWarnings && !exist)                      IRC.DeliverMessage(messages.Localize("configure-wrong"' parameters.SourceChannel.Language)' parameters.SourceChannel);                  return;              }
Magic Number,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,TrustAdd,The following statement contains a magic number: if (rights_info.Length < 2)              {                  IRC.DeliverMessage(messages.Localize("Trust1"' parameters.SourceChannel.Language)' parameters.SourceChannel);                  return;              }
Magic Number,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The following statement contains a magic number: if (!String.IsNullOrEmpty(parameters.Parameters))              {                  while (!IRC.FinishedJoining)                  {                      Syslog.Log("Postponing request to join " + parameters.Parameters + " because bot is still loading"' true);                      Thread.Sleep(2000);                  }                  List<string> pm = new List<string>(parameters.Parameters.Trim().Split(' '));                  if (pm.Count > 2 || pm.Count == 0)                  {                      IRC.DeliverMessage("Invalid number of parameters' please provide up to 2 parameters (name' password)"' parameters.SourceChannel);                      return;                  }                  string channel_name = pm[0];                  string password = null;                  if (pm.Count > 1)                      password = pm[1];                  if (!Core.ValidFile(channel_name) || !channel_name.StartsWith("#"))                  {                      IRC.DeliverMessage(messages.Localize("InvalidName"' parameters.SourceChannel.Language' new List<string> { channel_name })' parameters.SourceChannel);                      return;                  }                  lock (Configuration.Channels)                  {                      foreach (Channel cu in Configuration.Channels)                      {                          if (channel_name == cu.Name)                          {                              IRC.DeliverMessage(messages.Localize("ChannelIn"' parameters.SourceChannel.Language)' parameters.SourceChannel);                              return;                          }                      }                  }                  bool existing = Channel.ConfigExists(channel_name);                  Channel channel = new Channel(channel_name) {Password = password};                  lock (Configuration.Channels)                  {                      Configuration.Channels.Add(channel);                  }                  IRC.DeliverMessage("Attempting to join " + channel_name + " using " + channel.PrimaryInstance.Nick' parameters.SourceChannel.Name);                  Configuration.Save();                  Syslog.DebugLog("Sending join " + channel_name);                  channel.PrimaryInstance.Network.Join(channel_name' password);                  Channel Chan = Core.GetChannel(channel_name);                  if (!existing)                      Chan.SystemUsers.AddUser("admin"' Security.EscapeUser(parameters.User.Nick) + "!.*@" + Security.EscapeUser(parameters.User.Host));                  if (Chan.Extension_GetConfig("generic.founder") == null)                  {                      Chan.Extension_SetConfig("generic.founder"' parameters.User.ToString());                      Chan.Extension_SetConfig("generic.owner"' parameters.User.ToString());                  }                  else                  {                      Chan.Extension_SetConfig("generic.owner"' parameters.User.ToString());                  }                  Chan.Extension_SetConfig("generic.joindate"' DateTime.Now.ToString());                  Chan.SaveConfig();                  return;              }
Magic Number,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,AddChannel,The following statement contains a magic number: if (!String.IsNullOrEmpty(parameters.Parameters))              {                  while (!IRC.FinishedJoining)                  {                      Syslog.Log("Postponing request to join " + parameters.Parameters + " because bot is still loading"' true);                      Thread.Sleep(2000);                  }                  List<string> pm = new List<string>(parameters.Parameters.Trim().Split(' '));                  if (pm.Count > 2 || pm.Count == 0)                  {                      IRC.DeliverMessage("Invalid number of parameters' please provide up to 2 parameters (name' password)"' parameters.SourceChannel);                      return;                  }                  string channel_name = pm[0];                  string password = null;                  if (pm.Count > 1)                      password = pm[1];                  if (!Core.ValidFile(channel_name) || !channel_name.StartsWith("#"))                  {                      IRC.DeliverMessage(messages.Localize("InvalidName"' parameters.SourceChannel.Language' new List<string> { channel_name })' parameters.SourceChannel);                      return;                  }                  lock (Configuration.Channels)                  {                      foreach (Channel cu in Configuration.Channels)                      {                          if (channel_name == cu.Name)                          {                              IRC.DeliverMessage(messages.Localize("ChannelIn"' parameters.SourceChannel.Language)' parameters.SourceChannel);                              return;                          }                      }                  }                  bool existing = Channel.ConfigExists(channel_name);                  Channel channel = new Channel(channel_name) {Password = password};                  lock (Configuration.Channels)                  {                      Configuration.Channels.Add(channel);                  }                  IRC.DeliverMessage("Attempting to join " + channel_name + " using " + channel.PrimaryInstance.Nick' parameters.SourceChannel.Name);                  Configuration.Save();                  Syslog.DebugLog("Sending join " + channel_name);                  channel.PrimaryInstance.Network.Join(channel_name' password);                  Channel Chan = Core.GetChannel(channel_name);                  if (!existing)                      Chan.SystemUsers.AddUser("admin"' Security.EscapeUser(parameters.User.Nick) + "!.*@" + Security.EscapeUser(parameters.User.Host));                  if (Chan.Extension_GetConfig("generic.founder") == null)                  {                      Chan.Extension_SetConfig("generic.founder"' parameters.User.ToString());                      Chan.Extension_SetConfig("generic.owner"' parameters.User.ToString());                  }                  else                  {                      Chan.Extension_SetConfig("generic.owner"' parameters.User.ToString());                  }                  Chan.Extension_SetConfig("generic.joindate"' DateTime.Now.ToString());                  Chan.SaveConfig();                  return;              }
Magic Number,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,The following statement contains a magic number: try              {                  if (origin == "NULL")                      origin = channel.Name;                  if (channel.Name == Configuration.System.DebugChan && (message == Configuration.System.CommandPrefix + "part"                                                            || message == Configuration.System.CommandPrefix + "drop"))                  {                      IRC.DeliverMessage("Cowardly refusing to part this channel' because I love it :3"' channel);                      return;                  }                  if (message == Configuration.System.CommandPrefix + "drop")                  {                      if (channel.SystemUsers.IsApproved(user' host' "drop"))                      {                          while (!IRC.FinishedJoining)                          {                              Syslog.Log("Postponing request to part " + channel.Name + " because bot is still loading"' true);                              Thread.Sleep(2000);                          }                          channel.PrimaryInstance.Network.Transfer("PART " + channel.Name + " :" + "dropped by " + user + " from " + origin);                          Syslog.Log("Dropped " + channel.Name + " dropped by " + user + " from " + origin);                          Thread.Sleep(100);                          try                          {                              File.Delete(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".xml");                          }                          catch (Exception fail)                          {                              Syslog.ErrorLog("Failed to delete configuration file of " + channel.Name);                              Core.HandleException(fail);                          }                          foreach (Module module in ExtensionHandler.ExtensionList)                          {                              try                              {                                  if (module.IsWorking)                                      module.Hook_ChannelDrop(channel);                              }                              catch (Exception fail)                              {                                  Syslog.Log("MODULE: exception at Hook_ChannelDrop in " + module.Name' true);                                  Core.HandleException(fail' module.Name);                              }                          }                          lock (Configuration.Channels)                          {                              channel.Remove();                          }                          Configuration.Save();                          return;                      }                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' origin);                      return;                  }                    if (message == Configuration.System.CommandPrefix + "part")                  {                      if (channel.SystemUsers.IsApproved(user' host' "part"))                      {                          while (!IRC.FinishedJoining)                          {                              Syslog.Log("Postponing request to part " + channel.Name + " because bot is still loading"' true);                              Thread.Sleep(2000);                          }                          channel.PrimaryInstance.Network.Transfer("PART " + channel.Name + " :" + "removed by " + user + " from " + origin);                          Syslog.Log("Removed " + channel.Name + " removed by " + user + " from " + origin);                          Thread.Sleep(100);                          lock (Configuration.Channels)                          {                              channel.Remove();                              if (origin != channel.Name)                                  IRC.DeliverMessage("Successfully parted channel: " + channel.Name' origin);                          }                          channel.SaveConfig();                          Configuration.Save();                          return;                      }                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' origin);                  }              }              catch (Exception fail)              {                  Core.HandleException(fail);              }
Magic Number,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,The following statement contains a magic number: try              {                  if (origin == "NULL")                      origin = channel.Name;                  if (channel.Name == Configuration.System.DebugChan && (message == Configuration.System.CommandPrefix + "part"                                                            || message == Configuration.System.CommandPrefix + "drop"))                  {                      IRC.DeliverMessage("Cowardly refusing to part this channel' because I love it :3"' channel);                      return;                  }                  if (message == Configuration.System.CommandPrefix + "drop")                  {                      if (channel.SystemUsers.IsApproved(user' host' "drop"))                      {                          while (!IRC.FinishedJoining)                          {                              Syslog.Log("Postponing request to part " + channel.Name + " because bot is still loading"' true);                              Thread.Sleep(2000);                          }                          channel.PrimaryInstance.Network.Transfer("PART " + channel.Name + " :" + "dropped by " + user + " from " + origin);                          Syslog.Log("Dropped " + channel.Name + " dropped by " + user + " from " + origin);                          Thread.Sleep(100);                          try                          {                              File.Delete(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".xml");                          }                          catch (Exception fail)                          {                              Syslog.ErrorLog("Failed to delete configuration file of " + channel.Name);                              Core.HandleException(fail);                          }                          foreach (Module module in ExtensionHandler.ExtensionList)                          {                              try                              {                                  if (module.IsWorking)                                      module.Hook_ChannelDrop(channel);                              }                              catch (Exception fail)                              {                                  Syslog.Log("MODULE: exception at Hook_ChannelDrop in " + module.Name' true);                                  Core.HandleException(fail' module.Name);                              }                          }                          lock (Configuration.Channels)                          {                              channel.Remove();                          }                          Configuration.Save();                          return;                      }                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' origin);                      return;                  }                    if (message == Configuration.System.CommandPrefix + "part")                  {                      if (channel.SystemUsers.IsApproved(user' host' "part"))                      {                          while (!IRC.FinishedJoining)                          {                              Syslog.Log("Postponing request to part " + channel.Name + " because bot is still loading"' true);                              Thread.Sleep(2000);                          }                          channel.PrimaryInstance.Network.Transfer("PART " + channel.Name + " :" + "removed by " + user + " from " + origin);                          Syslog.Log("Removed " + channel.Name + " removed by " + user + " from " + origin);                          Thread.Sleep(100);                          lock (Configuration.Channels)                          {                              channel.Remove();                              if (origin != channel.Name)                                  IRC.DeliverMessage("Successfully parted channel: " + channel.Name' origin);                          }                          channel.SaveConfig();                          Configuration.Save();                          return;                      }                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' origin);                  }              }              catch (Exception fail)              {                  Core.HandleException(fail);              }
Magic Number,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,The following statement contains a magic number: try              {                  if (origin == "NULL")                      origin = channel.Name;                  if (channel.Name == Configuration.System.DebugChan && (message == Configuration.System.CommandPrefix + "part"                                                            || message == Configuration.System.CommandPrefix + "drop"))                  {                      IRC.DeliverMessage("Cowardly refusing to part this channel' because I love it :3"' channel);                      return;                  }                  if (message == Configuration.System.CommandPrefix + "drop")                  {                      if (channel.SystemUsers.IsApproved(user' host' "drop"))                      {                          while (!IRC.FinishedJoining)                          {                              Syslog.Log("Postponing request to part " + channel.Name + " because bot is still loading"' true);                              Thread.Sleep(2000);                          }                          channel.PrimaryInstance.Network.Transfer("PART " + channel.Name + " :" + "dropped by " + user + " from " + origin);                          Syslog.Log("Dropped " + channel.Name + " dropped by " + user + " from " + origin);                          Thread.Sleep(100);                          try                          {                              File.Delete(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".xml");                          }                          catch (Exception fail)                          {                              Syslog.ErrorLog("Failed to delete configuration file of " + channel.Name);                              Core.HandleException(fail);                          }                          foreach (Module module in ExtensionHandler.ExtensionList)                          {                              try                              {                                  if (module.IsWorking)                                      module.Hook_ChannelDrop(channel);                              }                              catch (Exception fail)                              {                                  Syslog.Log("MODULE: exception at Hook_ChannelDrop in " + module.Name' true);                                  Core.HandleException(fail' module.Name);                              }                          }                          lock (Configuration.Channels)                          {                              channel.Remove();                          }                          Configuration.Save();                          return;                      }                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' origin);                      return;                  }                    if (message == Configuration.System.CommandPrefix + "part")                  {                      if (channel.SystemUsers.IsApproved(user' host' "part"))                      {                          while (!IRC.FinishedJoining)                          {                              Syslog.Log("Postponing request to part " + channel.Name + " because bot is still loading"' true);                              Thread.Sleep(2000);                          }                          channel.PrimaryInstance.Network.Transfer("PART " + channel.Name + " :" + "removed by " + user + " from " + origin);                          Syslog.Log("Removed " + channel.Name + " removed by " + user + " from " + origin);                          Thread.Sleep(100);                          lock (Configuration.Channels)                          {                              channel.Remove();                              if (origin != channel.Name)                                  IRC.DeliverMessage("Successfully parted channel: " + channel.Name' origin);                          }                          channel.SaveConfig();                          Configuration.Save();                          return;                      }                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' origin);                  }              }              catch (Exception fail)              {                  Core.HandleException(fail);              }
Magic Number,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,PartChannel,The following statement contains a magic number: try              {                  if (origin == "NULL")                      origin = channel.Name;                  if (channel.Name == Configuration.System.DebugChan && (message == Configuration.System.CommandPrefix + "part"                                                            || message == Configuration.System.CommandPrefix + "drop"))                  {                      IRC.DeliverMessage("Cowardly refusing to part this channel' because I love it :3"' channel);                      return;                  }                  if (message == Configuration.System.CommandPrefix + "drop")                  {                      if (channel.SystemUsers.IsApproved(user' host' "drop"))                      {                          while (!IRC.FinishedJoining)                          {                              Syslog.Log("Postponing request to part " + channel.Name + " because bot is still loading"' true);                              Thread.Sleep(2000);                          }                          channel.PrimaryInstance.Network.Transfer("PART " + channel.Name + " :" + "dropped by " + user + " from " + origin);                          Syslog.Log("Dropped " + channel.Name + " dropped by " + user + " from " + origin);                          Thread.Sleep(100);                          try                          {                              File.Delete(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".xml");                          }                          catch (Exception fail)                          {                              Syslog.ErrorLog("Failed to delete configuration file of " + channel.Name);                              Core.HandleException(fail);                          }                          foreach (Module module in ExtensionHandler.ExtensionList)                          {                              try                              {                                  if (module.IsWorking)                                      module.Hook_ChannelDrop(channel);                              }                              catch (Exception fail)                              {                                  Syslog.Log("MODULE: exception at Hook_ChannelDrop in " + module.Name' true);                                  Core.HandleException(fail' module.Name);                              }                          }                          lock (Configuration.Channels)                          {                              channel.Remove();                          }                          Configuration.Save();                          return;                      }                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' origin);                      return;                  }                    if (message == Configuration.System.CommandPrefix + "part")                  {                      if (channel.SystemUsers.IsApproved(user' host' "part"))                      {                          while (!IRC.FinishedJoining)                          {                              Syslog.Log("Postponing request to part " + channel.Name + " because bot is still loading"' true);                              Thread.Sleep(2000);                          }                          channel.PrimaryInstance.Network.Transfer("PART " + channel.Name + " :" + "removed by " + user + " from " + origin);                          Syslog.Log("Removed " + channel.Name + " removed by " + user + " from " + origin);                          Thread.Sleep(100);                          lock (Configuration.Channels)                          {                              channel.Remove();                              if (origin != channel.Name)                                  IRC.DeliverMessage("Successfully parted channel: " + channel.Name' origin);                          }                          channel.SaveConfig();                          Configuration.Save();                          return;                      }                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' origin);                  }              }              catch (Exception fail)              {                  Core.HandleException(fail);              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,ConnectAllIrcInstances,The following statement contains a magic number: while (!IsOk)              {                  foreach (Instance instance in Instances.Values)                  {                      if (!instance.IsWorking)                      {                          Syslog.DebugLog("Waiting for " + instance.Nick' 2);                          Thread.Sleep(1000);                          IsOk = false;                          break;                      }                      Syslog.DebugLog("Connected to " + instance.Nick' 6);                      IsOk = true;                  }              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,ConnectAllIrcInstances,The following statement contains a magic number: while (!IsOk)              {                  foreach (Instance instance in Instances.Values)                  {                      if (!instance.IsWorking)                      {                          Syslog.DebugLog("Waiting for " + instance.Nick' 2);                          Thread.Sleep(1000);                          IsOk = false;                          break;                      }                      Syslog.DebugLog("Connected to " + instance.Nick' 6);                      IsOk = true;                  }              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,ConnectAllIrcInstances,The following statement contains a magic number: while (!IsOk)              {                  foreach (Instance instance in Instances.Values)                  {                      if (!instance.IsWorking)                      {                          Syslog.DebugLog("Waiting for " + instance.Nick' 2);                          Thread.Sleep(1000);                          IsOk = false;                          break;                      }                      Syslog.DebugLog("Connected to " + instance.Nick' 6);                      IsOk = true;                  }              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,ConnectAllIrcInstances,The following statement contains a magic number: while (!IsOk)              {                  foreach (Instance instance in Instances.Values)                  {                      if (!instance.ChannelsJoined)                      {                          Thread.Sleep(100);                          IsOk = false;                          break;                      }                      IsOk = true;                  }              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,JoinAll,The following statement contains a magic number: try              {                  if (this.ChannelsJoined == false)                  {                      while (!this.IsWorking)                      {                          if (!this.IsActive || !Core.IsRunning)                          {                              Core.ThreadManager.UnregisterThread(Thread.CurrentThread);                              return;                          }                          Syslog.DebugLog("JOIN THREAD: Waiting for " + Nick + " to finish connection to IRC server"' 6);                          Thread.Sleep(1000);                      }                      if (Configuration.System.DebugChan != null)                      {                          this.Network.Join(Configuration.System.DebugChan);                      }                      foreach (Channel channel in ChannelList)                      {                          if (channel.Name.Length > 0 && channel.Name != Configuration.System.DebugChan)                          {                              Syslog.DebugLog("Joining " + channel.Name + " on " + Nick);                              this.Network.Join(channel.Name' channel.Password);                              Thread.Sleep(1000);                          }                      }                      this.ChannelsJoined = true;                  }              }              catch (Exception fail)              {                  Core.HandleException(fail);              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,JoinAll,The following statement contains a magic number: try              {                  if (this.ChannelsJoined == false)                  {                      while (!this.IsWorking)                      {                          if (!this.IsActive || !Core.IsRunning)                          {                              Core.ThreadManager.UnregisterThread(Thread.CurrentThread);                              return;                          }                          Syslog.DebugLog("JOIN THREAD: Waiting for " + Nick + " to finish connection to IRC server"' 6);                          Thread.Sleep(1000);                      }                      if (Configuration.System.DebugChan != null)                      {                          this.Network.Join(Configuration.System.DebugChan);                      }                      foreach (Channel channel in ChannelList)                      {                          if (channel.Name.Length > 0 && channel.Name != Configuration.System.DebugChan)                          {                              Syslog.DebugLog("Joining " + channel.Name + " on " + Nick);                              this.Network.Join(channel.Name' channel.Password);                              Thread.Sleep(1000);                          }                      }                      this.ChannelsJoined = true;                  }              }              catch (Exception fail)              {                  Core.HandleException(fail);              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,JoinAll,The following statement contains a magic number: try              {                  if (this.ChannelsJoined == false)                  {                      while (!this.IsWorking)                      {                          if (!this.IsActive || !Core.IsRunning)                          {                              Core.ThreadManager.UnregisterThread(Thread.CurrentThread);                              return;                          }                          Syslog.DebugLog("JOIN THREAD: Waiting for " + Nick + " to finish connection to IRC server"' 6);                          Thread.Sleep(1000);                      }                      if (Configuration.System.DebugChan != null)                      {                          this.Network.Join(Configuration.System.DebugChan);                      }                      foreach (Channel channel in ChannelList)                      {                          if (channel.Name.Length > 0 && channel.Name != Configuration.System.DebugChan)                          {                              Syslog.DebugLog("Joining " + channel.Name + " on " + Nick);                              this.Network.Join(channel.Name' channel.Password);                              Thread.Sleep(1000);                          }                      }                      this.ChannelsJoined = true;                  }              }              catch (Exception fail)              {                  Core.HandleException(fail);              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,Exec,The following statement contains a magic number: while (this.IsActive && Core.IsRunning)              {                  try                  {                      this.Disconnect();                      this.Connect();                      while (!this.IsWorking && !this.Protocol.IsDisconnected)                      {                          // we need to wait for the irc handler to connect to irc                          Thread.Sleep(100);                      }                      // now we can finally join all channels                      Join();                      // then we just sleep                      while (this.Network.IsConnected)                      {                          Thread.Sleep(2000);                      }                      // in case we got disconnected' we log it and restart the procedure                      Syslog.WarningLog("Disconnected from irc network on " + Nick);                      Thread.Sleep(20000);                  }                  catch (ThreadAbortException)                  {                      Syslog.DebugLog("Terminated primary thread for instance " + Nick);                      return;                  }                  catch (IOException fail)                  {                      if (this.IsActive)                      {                          Syslog.ErrorLog("Failure of primary thread of instance " + Nick + " attempting to recover");                          Core.HandleException(fail);                      }                      else                      {                          return;                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                      if (this.IsActive)                          Syslog.ErrorLog("Failure of primary thread of instance " + Nick + " attempting to recover");                      else                          return;                      Thread.Sleep(20000);                  }              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,Exec,The following statement contains a magic number: while (this.IsActive && Core.IsRunning)              {                  try                  {                      this.Disconnect();                      this.Connect();                      while (!this.IsWorking && !this.Protocol.IsDisconnected)                      {                          // we need to wait for the irc handler to connect to irc                          Thread.Sleep(100);                      }                      // now we can finally join all channels                      Join();                      // then we just sleep                      while (this.Network.IsConnected)                      {                          Thread.Sleep(2000);                      }                      // in case we got disconnected' we log it and restart the procedure                      Syslog.WarningLog("Disconnected from irc network on " + Nick);                      Thread.Sleep(20000);                  }                  catch (ThreadAbortException)                  {                      Syslog.DebugLog("Terminated primary thread for instance " + Nick);                      return;                  }                  catch (IOException fail)                  {                      if (this.IsActive)                      {                          Syslog.ErrorLog("Failure of primary thread of instance " + Nick + " attempting to recover");                          Core.HandleException(fail);                      }                      else                      {                          return;                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                      if (this.IsActive)                          Syslog.ErrorLog("Failure of primary thread of instance " + Nick + " attempting to recover");                      else                          return;                      Thread.Sleep(20000);                  }              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,Exec,The following statement contains a magic number: while (this.IsActive && Core.IsRunning)              {                  try                  {                      this.Disconnect();                      this.Connect();                      while (!this.IsWorking && !this.Protocol.IsDisconnected)                      {                          // we need to wait for the irc handler to connect to irc                          Thread.Sleep(100);                      }                      // now we can finally join all channels                      Join();                      // then we just sleep                      while (this.Network.IsConnected)                      {                          Thread.Sleep(2000);                      }                      // in case we got disconnected' we log it and restart the procedure                      Syslog.WarningLog("Disconnected from irc network on " + Nick);                      Thread.Sleep(20000);                  }                  catch (ThreadAbortException)                  {                      Syslog.DebugLog("Terminated primary thread for instance " + Nick);                      return;                  }                  catch (IOException fail)                  {                      if (this.IsActive)                      {                          Syslog.ErrorLog("Failure of primary thread of instance " + Nick + " attempting to recover");                          Core.HandleException(fail);                      }                      else                      {                          return;                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                      if (this.IsActive)                          Syslog.ErrorLog("Failure of primary thread of instance " + Nick + " attempting to recover");                      else                          return;                      Thread.Sleep(20000);                  }              }
Magic Number,wmib,Instance,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\Instance.cs,Exec,The following statement contains a magic number: while (this.IsActive && Core.IsRunning)              {                  try                  {                      this.Disconnect();                      this.Connect();                      while (!this.IsWorking && !this.Protocol.IsDisconnected)                      {                          // we need to wait for the irc handler to connect to irc                          Thread.Sleep(100);                      }                      // now we can finally join all channels                      Join();                      // then we just sleep                      while (this.Network.IsConnected)                      {                          Thread.Sleep(2000);                      }                      // in case we got disconnected' we log it and restart the procedure                      Syslog.WarningLog("Disconnected from irc network on " + Nick);                      Thread.Sleep(20000);                  }                  catch (ThreadAbortException)                  {                      Syslog.DebugLog("Terminated primary thread for instance " + Nick);                      return;                  }                  catch (IOException fail)                  {                      if (this.IsActive)                      {                          Syslog.ErrorLog("Failure of primary thread of instance " + Nick + " attempting to recover");                          Core.HandleException(fail);                      }                      else                      {                          return;                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                      if (this.IsActive)                          Syslog.ErrorLog("Failure of primary thread of instance " + Nick + " attempting to recover");                      else                          return;                      Thread.Sleep(20000);                  }              }
Magic Number,wmib,Core,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The following statement contains a magic number: try              {                  if (!IsRunning)                  {                      Syslog.DebugLog("Attempt to kill bot while it's already being killed"' 2);                      return;                  }                  _Status = Status.ShuttingDown;                  Instance.Kill();                  StorageWriter.IsRunning = false;                  Thread modules = new Thread(Terminate) { Name = "KERNEL: Core helper shutdown thread" };                  modules.Start();                  Syslog.WriteNow("Giving grace time for all modules to finish ok");                  int kill = 0;                  while (kill < 20)                  {                      kill++;                      if (ExtensionHandler.ExtensionList.Count == 0)                      {                          Syslog.WriteNow("KERNEL: Modules are all down");                          if (WriterThread.ThreadState == ThreadState.Running || WriterThread.ThreadState == ThreadState.WaitSleepJoin)                          {                              Syslog.WriteNow("KERNEL: Writer thread didn't shut down gracefully' waiting 2 seconds"' true);                              Thread.Sleep(2000);                              if (WriterThread.ThreadState == ThreadState.Running || WriterThread.ThreadState == ThreadState.WaitSleepJoin)                              {                                  Syslog.WriteNow("KERNEL: Writer thread didn't shut down gracefully' killing"' true);                                  WriterThread.Abort();                              }                              else                              {                                  Syslog.WriteNow("KERNEL: Writer thread is shut down"' true);                              }                          }                          else                          {                              Syslog.WriteNow("KERNEL: Writer thread is down ok");                          }                          break;                      }                      Thread.Sleep(1000);                  }                  if (ExtensionHandler.ExtensionList.Count == 0)                  {                      Syslog.WriteNow("KERNEL: Giving a grace time to other threads to finish");                      Thread.Sleep(200);                      Syslog.WriteNow("KERNEL: Terminated (ok)");                      Environment.Exit(0);                  }              }              catch (Exception fail)              {                  HandleException(fail);                }
Magic Number,wmib,Core,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The following statement contains a magic number: try              {                  if (!IsRunning)                  {                      Syslog.DebugLog("Attempt to kill bot while it's already being killed"' 2);                      return;                  }                  _Status = Status.ShuttingDown;                  Instance.Kill();                  StorageWriter.IsRunning = false;                  Thread modules = new Thread(Terminate) { Name = "KERNEL: Core helper shutdown thread" };                  modules.Start();                  Syslog.WriteNow("Giving grace time for all modules to finish ok");                  int kill = 0;                  while (kill < 20)                  {                      kill++;                      if (ExtensionHandler.ExtensionList.Count == 0)                      {                          Syslog.WriteNow("KERNEL: Modules are all down");                          if (WriterThread.ThreadState == ThreadState.Running || WriterThread.ThreadState == ThreadState.WaitSleepJoin)                          {                              Syslog.WriteNow("KERNEL: Writer thread didn't shut down gracefully' waiting 2 seconds"' true);                              Thread.Sleep(2000);                              if (WriterThread.ThreadState == ThreadState.Running || WriterThread.ThreadState == ThreadState.WaitSleepJoin)                              {                                  Syslog.WriteNow("KERNEL: Writer thread didn't shut down gracefully' killing"' true);                                  WriterThread.Abort();                              }                              else                              {                                  Syslog.WriteNow("KERNEL: Writer thread is shut down"' true);                              }                          }                          else                          {                              Syslog.WriteNow("KERNEL: Writer thread is down ok");                          }                          break;                      }                      Thread.Sleep(1000);                  }                  if (ExtensionHandler.ExtensionList.Count == 0)                  {                      Syslog.WriteNow("KERNEL: Giving a grace time to other threads to finish");                      Thread.Sleep(200);                      Syslog.WriteNow("KERNEL: Terminated (ok)");                      Environment.Exit(0);                  }              }              catch (Exception fail)              {                  HandleException(fail);                }
Magic Number,wmib,Core,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The following statement contains a magic number: try              {                  if (!IsRunning)                  {                      Syslog.DebugLog("Attempt to kill bot while it's already being killed"' 2);                      return;                  }                  _Status = Status.ShuttingDown;                  Instance.Kill();                  StorageWriter.IsRunning = false;                  Thread modules = new Thread(Terminate) { Name = "KERNEL: Core helper shutdown thread" };                  modules.Start();                  Syslog.WriteNow("Giving grace time for all modules to finish ok");                  int kill = 0;                  while (kill < 20)                  {                      kill++;                      if (ExtensionHandler.ExtensionList.Count == 0)                      {                          Syslog.WriteNow("KERNEL: Modules are all down");                          if (WriterThread.ThreadState == ThreadState.Running || WriterThread.ThreadState == ThreadState.WaitSleepJoin)                          {                              Syslog.WriteNow("KERNEL: Writer thread didn't shut down gracefully' waiting 2 seconds"' true);                              Thread.Sleep(2000);                              if (WriterThread.ThreadState == ThreadState.Running || WriterThread.ThreadState == ThreadState.WaitSleepJoin)                              {                                  Syslog.WriteNow("KERNEL: Writer thread didn't shut down gracefully' killing"' true);                                  WriterThread.Abort();                              }                              else                              {                                  Syslog.WriteNow("KERNEL: Writer thread is shut down"' true);                              }                          }                          else                          {                              Syslog.WriteNow("KERNEL: Writer thread is down ok");                          }                          break;                      }                      Thread.Sleep(1000);                  }                  if (ExtensionHandler.ExtensionList.Count == 0)                  {                      Syslog.WriteNow("KERNEL: Giving a grace time to other threads to finish");                      Thread.Sleep(200);                      Syslog.WriteNow("KERNEL: Terminated (ok)");                      Environment.Exit(0);                  }              }              catch (Exception fail)              {                  HandleException(fail);                }
Magic Number,wmib,Core,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The following statement contains a magic number: try              {                  if (!IsRunning)                  {                      Syslog.DebugLog("Attempt to kill bot while it's already being killed"' 2);                      return;                  }                  _Status = Status.ShuttingDown;                  Instance.Kill();                  StorageWriter.IsRunning = false;                  Thread modules = new Thread(Terminate) { Name = "KERNEL: Core helper shutdown thread" };                  modules.Start();                  Syslog.WriteNow("Giving grace time for all modules to finish ok");                  int kill = 0;                  while (kill < 20)                  {                      kill++;                      if (ExtensionHandler.ExtensionList.Count == 0)                      {                          Syslog.WriteNow("KERNEL: Modules are all down");                          if (WriterThread.ThreadState == ThreadState.Running || WriterThread.ThreadState == ThreadState.WaitSleepJoin)                          {                              Syslog.WriteNow("KERNEL: Writer thread didn't shut down gracefully' waiting 2 seconds"' true);                              Thread.Sleep(2000);                              if (WriterThread.ThreadState == ThreadState.Running || WriterThread.ThreadState == ThreadState.WaitSleepJoin)                              {                                  Syslog.WriteNow("KERNEL: Writer thread didn't shut down gracefully' killing"' true);                                  WriterThread.Abort();                              }                              else                              {                                  Syslog.WriteNow("KERNEL: Writer thread is shut down"' true);                              }                          }                          else                          {                              Syslog.WriteNow("KERNEL: Writer thread is down ok");                          }                          break;                      }                      Thread.Sleep(1000);                  }                  if (ExtensionHandler.ExtensionList.Count == 0)                  {                      Syslog.WriteNow("KERNEL: Giving a grace time to other threads to finish");                      Thread.Sleep(200);                      Syslog.WriteNow("KERNEL: Terminated (ok)");                      Environment.Exit(0);                  }              }              catch (Exception fail)              {                  HandleException(fail);                }
Magic Number,wmib,Core,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Core.cs,Kill,The following statement contains a magic number: try              {                  if (!IsRunning)                  {                      Syslog.DebugLog("Attempt to kill bot while it's already being killed"' 2);                      return;                  }                  _Status = Status.ShuttingDown;                  Instance.Kill();                  StorageWriter.IsRunning = false;                  Thread modules = new Thread(Terminate) { Name = "KERNEL: Core helper shutdown thread" };                  modules.Start();                  Syslog.WriteNow("Giving grace time for all modules to finish ok");                  int kill = 0;                  while (kill < 20)                  {                      kill++;                      if (ExtensionHandler.ExtensionList.Count == 0)                      {                          Syslog.WriteNow("KERNEL: Modules are all down");                          if (WriterThread.ThreadState == ThreadState.Running || WriterThread.ThreadState == ThreadState.WaitSleepJoin)                          {                              Syslog.WriteNow("KERNEL: Writer thread didn't shut down gracefully' waiting 2 seconds"' true);                              Thread.Sleep(2000);                              if (WriterThread.ThreadState == ThreadState.Running || WriterThread.ThreadState == ThreadState.WaitSleepJoin)                              {                                  Syslog.WriteNow("KERNEL: Writer thread didn't shut down gracefully' killing"' true);                                  WriterThread.Abort();                              }                              else                              {                                  Syslog.WriteNow("KERNEL: Writer thread is shut down"' true);                              }                          }                          else                          {                              Syslog.WriteNow("KERNEL: Writer thread is down ok");                          }                          break;                      }                      Thread.Sleep(1000);                  }                  if (ExtensionHandler.ExtensionList.Count == 0)                  {                      Syslog.WriteNow("KERNEL: Giving a grace time to other threads to finish");                      Thread.Sleep(200);                      Syslog.WriteNow("KERNEL: Terminated (ok)");                      Environment.Exit(0);                  }              }              catch (Exception fail)              {                  HandleException(fail);                }
Magic Number,wmib,Program,C:\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,ParseArgs,The following statement contains a magic number: foreach (string item in parameters)              {                  i++;                  if (item == "--nocolors")                  {                      Configuration.System.Colors = false;                      continue;                  }                  if (item == "--traffic" )                  {                      Configuration.Network.Logging = true;                  }                  if (item == "-h" || item == "--help")                  {                      Console.WriteLine("This is a wikimedia bot binary\n\n" +                          "Parameters:\n" +                          "    --nocolors:  Disable colors in system logs\n" +                          "    -h [--help]: Display help\n" +                          "    --pid file:  Write a pid to a file\n" +                          "    --modules:   Try to load all module files and list all modules that are available' separated by comma\n" +                          "    --traffic:   Enable traffic logs\n" +                          "    --security:  Will load a security subsystem and serialize all roles and print them to standard output\n" +                          "                 this can be used to create a custom security configuration if you store the output\n" +                          "                 to configuration/security.xml and restart the bot\n" +                          "    -v: Increases verbosity\n\n" +                          "This software is open source' licensed under GPLv3");                      Environment.Exit(0);                  }                  if (item == "--modules")                  {                      ExtensionHandler.DumpMods();                      Environment.Exit(0);                  }                  if (item == "--security")                  {                      Syslog.IsQuiet = true;                      if (Configuration.Load() != 0)                      {                          Syslog.IsQuiet = false;                          Syslog.WriteNow("Error while loading the config file' exiting"' true);                          Environment.Exit(-2);                      }                      ExtensionHandler.SearchMods();                      Security.Init();                      Console.WriteLine(Security.Dump());                      Environment.Exit(0);                  }                  if (item == "--pid")                  {                      if (parameters.Count <= i)                      {                          Console.WriteLine("You didn't provide a name for pid file");                          Environment.Exit(0);                      }                      File.WriteAllText(parameters[i]' Process.GetCurrentProcess().Id.ToString());                  }                  if (item.StartsWith("-v"))                  {                      foreach (char x in item)                      {                          if (x == 'v')                          {                              Configuration.System.SelectedVerbosity++;                          }                      }                  }              }
Magic Number,wmib,Program,C:\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,Main,The following statement contains a magic number: try              {                  Configuration.System.UpTime = DateTime.Now;                  Core.KernelThread = Thread.CurrentThread;                  Core.KernelThread.Name = "Kernel";                  Configuration.System.Version += " [libirc v. " + libirc.Defs.Version.ToString() + "]";                  Thread logger = new Thread(Logging.Exec) {Name = "Logger"};                  Core.ThreadManager.RegisterThread(logger);                  ParseArgs(args);                  Syslog.WriteNow(Configuration.System.Version);                  Syslog.WriteNow("Loading...");                  logger.Start();                  Console.CancelKeyPress += SigInt;                  messages.LoadLD();                  if (Configuration.Load() != 0)                  {                      Syslog.WriteNow("Error while loading the config file' exiting"' true);                      Environment.Exit(-2);                  }                  Terminal.Init();                  Core.Help.CreateHelp();                  Core.WriterThread = new Thread(StorageWriter.Exec);                  Core.ThreadManager.RegisterThread(Core.WriterThread);                  Core.WriterThread.Name = "Writer";                  Core.WriterThread.Start();                  if (WMIBMySQL.IsAvailable)                  {                      Syslog.Log("Initializing MySQL");                      Core.MysqlDB = new WMIBMySQL();                  } else                  {                      Syslog.Log("Mysql is not configured' disabling it");                  }                  if (PostgreSQL.IsAvailable)                  {                      Syslog.Log("Opening connection to PostgreDB");                      Core.PostgreDB = new PostgreSQL();                      Core.PostgreDB.Connect();                  } else                  {                      Syslog.Log("Postgres is not configured' not using");                  }                  // let's use postgre as default                  if (Core.PostgreDB != null)                  {                      Syslog.Log("Using Postgres as a default SQL provider");                      Core.DB = Core.PostgreDB;                  }                  else if (Core.MysqlDB != null)                  {                      Syslog.Log("Using MySQL as a default SQL");                      Core.DB = Core.MysqlDB;                  }                  // register all commands                  Commands.InitAdminCommands();                  Syslog.Log("Loading modules");                  ExtensionHandler.SearchMods();                  Security.Init();                  Security.Global();                  Syslog.Log("Connecting");                  IRC.Connect();                  #if __MonoCS__  UnixSignal[] signals =                   {                      new UnixSignal (Signum.SIGINT)'                      new UnixSignal (Signum.SIGTERM)'                      new UnixSignal (Signum.SIGQUIT)'                      new UnixSignal (Signum.SIGHUP)                  };  #endif                  while(Core.IsRunning)                  {  #if __MonoCS__                      int index = UnixSignal.WaitAny (signals'-1);                      Signum signal = signals [index].Signum;                      switch (signal)                      {                          case Signum.SIGINT:                              SigInt(null' null);                              goto exit;                          case Signum.SIGTERM:                              Syslog.WriteNow("SIGTERM - Shutting down"' true);                              Core.Kill();                              goto exit;                      }  #endif                      Thread.Sleep(200);                  }  #if __MonoCS__                  exit:  #endif                      // memory cleanup                      if (Core.DB != null)                          ((WMIBMySQL)Core.DB).Dispose();              }              catch (Exception fatal)              {                  Syslog.WriteNow("bot crashed' bellow is debugging information"' Syslog.Type.Error);                  Console.WriteLine("------------------------------------------------------------------------");                  Console.WriteLine("Description: " + fatal.Message);                  Console.WriteLine("Stack trace: " + fatal.StackTrace);                  Environment.Exit(-2);              }
Magic Number,wmib,Program,C:\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,Main,The following statement contains a magic number: try              {                  Configuration.System.UpTime = DateTime.Now;                  Core.KernelThread = Thread.CurrentThread;                  Core.KernelThread.Name = "Kernel";                  Configuration.System.Version += " [libirc v. " + libirc.Defs.Version.ToString() + "]";                  Thread logger = new Thread(Logging.Exec) {Name = "Logger"};                  Core.ThreadManager.RegisterThread(logger);                  ParseArgs(args);                  Syslog.WriteNow(Configuration.System.Version);                  Syslog.WriteNow("Loading...");                  logger.Start();                  Console.CancelKeyPress += SigInt;                  messages.LoadLD();                  if (Configuration.Load() != 0)                  {                      Syslog.WriteNow("Error while loading the config file' exiting"' true);                      Environment.Exit(-2);                  }                  Terminal.Init();                  Core.Help.CreateHelp();                  Core.WriterThread = new Thread(StorageWriter.Exec);                  Core.ThreadManager.RegisterThread(Core.WriterThread);                  Core.WriterThread.Name = "Writer";                  Core.WriterThread.Start();                  if (WMIBMySQL.IsAvailable)                  {                      Syslog.Log("Initializing MySQL");                      Core.MysqlDB = new WMIBMySQL();                  } else                  {                      Syslog.Log("Mysql is not configured' disabling it");                  }                  if (PostgreSQL.IsAvailable)                  {                      Syslog.Log("Opening connection to PostgreDB");                      Core.PostgreDB = new PostgreSQL();                      Core.PostgreDB.Connect();                  } else                  {                      Syslog.Log("Postgres is not configured' not using");                  }                  // let's use postgre as default                  if (Core.PostgreDB != null)                  {                      Syslog.Log("Using Postgres as a default SQL provider");                      Core.DB = Core.PostgreDB;                  }                  else if (Core.MysqlDB != null)                  {                      Syslog.Log("Using MySQL as a default SQL");                      Core.DB = Core.MysqlDB;                  }                  // register all commands                  Commands.InitAdminCommands();                  Syslog.Log("Loading modules");                  ExtensionHandler.SearchMods();                  Security.Init();                  Security.Global();                  Syslog.Log("Connecting");                  IRC.Connect();                  #if __MonoCS__  UnixSignal[] signals =                   {                      new UnixSignal (Signum.SIGINT)'                      new UnixSignal (Signum.SIGTERM)'                      new UnixSignal (Signum.SIGQUIT)'                      new UnixSignal (Signum.SIGHUP)                  };  #endif                  while(Core.IsRunning)                  {  #if __MonoCS__                      int index = UnixSignal.WaitAny (signals'-1);                      Signum signal = signals [index].Signum;                      switch (signal)                      {                          case Signum.SIGINT:                              SigInt(null' null);                              goto exit;                          case Signum.SIGTERM:                              Syslog.WriteNow("SIGTERM - Shutting down"' true);                              Core.Kill();                              goto exit;                      }  #endif                      Thread.Sleep(200);                  }  #if __MonoCS__                  exit:  #endif                      // memory cleanup                      if (Core.DB != null)                          ((WMIBMySQL)Core.DB).Dispose();              }              catch (Exception fatal)              {                  Syslog.WriteNow("bot crashed' bellow is debugging information"' Syslog.Type.Error);                  Console.WriteLine("------------------------------------------------------------------------");                  Console.WriteLine("Description: " + fatal.Message);                  Console.WriteLine("Stack trace: " + fatal.StackTrace);                  Environment.Exit(-2);              }
Magic Number,wmib,Program,C:\repos\benapetr_wikimedia-bot\src\WMBot\Program.cs,Main,The following statement contains a magic number: try              {                  Configuration.System.UpTime = DateTime.Now;                  Core.KernelThread = Thread.CurrentThread;                  Core.KernelThread.Name = "Kernel";                  Configuration.System.Version += " [libirc v. " + libirc.Defs.Version.ToString() + "]";                  Thread logger = new Thread(Logging.Exec) {Name = "Logger"};                  Core.ThreadManager.RegisterThread(logger);                  ParseArgs(args);                  Syslog.WriteNow(Configuration.System.Version);                  Syslog.WriteNow("Loading...");                  logger.Start();                  Console.CancelKeyPress += SigInt;                  messages.LoadLD();                  if (Configuration.Load() != 0)                  {                      Syslog.WriteNow("Error while loading the config file' exiting"' true);                      Environment.Exit(-2);                  }                  Terminal.Init();                  Core.Help.CreateHelp();                  Core.WriterThread = new Thread(StorageWriter.Exec);                  Core.ThreadManager.RegisterThread(Core.WriterThread);                  Core.WriterThread.Name = "Writer";                  Core.WriterThread.Start();                  if (WMIBMySQL.IsAvailable)                  {                      Syslog.Log("Initializing MySQL");                      Core.MysqlDB = new WMIBMySQL();                  } else                  {                      Syslog.Log("Mysql is not configured' disabling it");                  }                  if (PostgreSQL.IsAvailable)                  {                      Syslog.Log("Opening connection to PostgreDB");                      Core.PostgreDB = new PostgreSQL();                      Core.PostgreDB.Connect();                  } else                  {                      Syslog.Log("Postgres is not configured' not using");                  }                  // let's use postgre as default                  if (Core.PostgreDB != null)                  {                      Syslog.Log("Using Postgres as a default SQL provider");                      Core.DB = Core.PostgreDB;                  }                  else if (Core.MysqlDB != null)                  {                      Syslog.Log("Using MySQL as a default SQL");                      Core.DB = Core.MysqlDB;                  }                  // register all commands                  Commands.InitAdminCommands();                  Syslog.Log("Loading modules");                  ExtensionHandler.SearchMods();                  Security.Init();                  Security.Global();                  Syslog.Log("Connecting");                  IRC.Connect();                  #if __MonoCS__  UnixSignal[] signals =                   {                      new UnixSignal (Signum.SIGINT)'                      new UnixSignal (Signum.SIGTERM)'                      new UnixSignal (Signum.SIGQUIT)'                      new UnixSignal (Signum.SIGHUP)                  };  #endif                  while(Core.IsRunning)                  {  #if __MonoCS__                      int index = UnixSignal.WaitAny (signals'-1);                      Signum signal = signals [index].Signum;                      switch (signal)                      {                          case Signum.SIGINT:                              SigInt(null' null);                              goto exit;                          case Signum.SIGTERM:                              Syslog.WriteNow("SIGTERM - Shutting down"' true);                              Core.Kill();                              goto exit;                      }  #endif                      Thread.Sleep(200);                  }  #if __MonoCS__                  exit:  #endif                      // memory cleanup                      if (Core.DB != null)                          ((WMIBMySQL)Core.DB).Dispose();              }              catch (Exception fatal)              {                  Syslog.WriteNow("bot crashed' bellow is debugging information"' Syslog.Type.Error);                  Console.WriteLine("------------------------------------------------------------------------");                  Console.WriteLine("Description: " + fatal.Message);                  Console.WriteLine("Stack trace: " + fatal.StackTrace);                  Environment.Exit(-2);              }
Magic Number,wmib,StorageWriter,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\StorageWriter.cs,WriteData,The following statement contains a magic number: foreach (STI item in jobs)              {                  if (item.DelayedWrite)                  {                      while (!Write(item))                      {                          Syslog.Log("Unable to write data' delaying write"' true);                          Thread.Sleep(6000);                      }                  }                  else                  {                      Write(item);                  }              }
Magic Number,wmib,StorageWriter,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\StorageWriter.cs,Exec,The following statement contains a magic number: try              {                  Syslog.Log("KERNEL: loaded writer thread");                  while (IsRunning)                  {                      try                      {                          Thread.Sleep(2000);                          if (Data.Count > 0)                          {                              WriteData();                          }                      }                      catch (ThreadAbortException)                      {                          IsRunning = false;                          break;                      }                      catch (Exception fail)                      {                          Core.HandleException(fail);                      }                  }                  if (Data.Count > 0)                  {                      Syslog.Log("KERNEL: Writer thread was requested to stop' but there is still some data to write");                      WriteData();                      Syslog.Log("KERNEL: No remaining data' stopping writer thread");                  }                  Syslog.Log("KERNEL: No remaining data' stopping writer thread");              }              catch (Exception fail)              {                  Core.HandleException(fail);                  Syslog.Log("KERNEL: The writer thread was terminated"' true);              }
Magic Number,wmib,Terminal,C:\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,FormatToSpecSize,The following statement contains a magic number: if (st.Length > size)              {                  st = st.Substring(0' st.Length - ((st.Length - size) + 3));                  st += "...";              }              else              {                  while (st.Length < size)                  {                      st += " ";                  }              }
Magic Number,wmib,Terminal,C:\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ExecuteThread,The following statement contains a magic number: try              {                  TcpListener server = new TcpListener(IPAddress.Any' Configuration.Network.SystemPort);                  server.Start();                  Online = true;                  Syslog.WriteNow("Network console is online on port: " + Configuration.Network.SystemPort);                  while (Core.IsRunning)                  {                      TcpClient connection = server.AcceptTcpClient();                      Session session = new Session();                      lock (SessionList)                      {                          SessionList.Add(session);                      }                      Thread client = new Thread(session.ThreadExec) { Name = "Telnet:" + connection.Client.RemoteEndPoint };                      Core.ThreadManager.RegisterThread(client);                      client.Start(connection);                      Thread.Sleep(100);                  }              }              catch (Exception fail)              {                  Online = false;                  Syslog.WriteNow("Network console is down"' true);                  Core.HandleException(fail);              }
Magic Number,wmib,Session,C:\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: try                  {                      this.connection = (TcpClient)data;                      Syslog.DebugLog("Incoming connection from: " + connection.Client.RemoteEndPoint);                      this.connection.NoDelay = true;                      this.networkStream = connection.GetStream();                      this.streamReader = new StreamReader(networkStream);                      this.streamWriter = new StreamWriter(networkStream);                      // login                      Write("Enter username:");                      string username = streamReader.ReadLine();                      Write("Enter password:");                      string password = streamReader.ReadLine();                      SystemUser user = Security.Auth(username' password);                      if (user == null)                      {                          Disconnect("Invalid user or password' bye");                          return;                      }                      if (!Security.IsGloballyApproved(user' "terminal"))                      {                          Disconnect("No permissions' bye");                          return;                      }                      Write("Successfuly logged in to wm-bot' I have " + SessionList.Count.ToString() + " users logged in");                      while (connection.Connected && !streamReader.EndOfStream && Core.IsRunning)                      {                          string text = streamReader.ReadLine();                          string command = text;                          List<string> list = new List<string>();                          string parameters = "";                          if (command.Contains(" "))                          {                              parameters = command.Substring(command.IndexOf(" ") + 1);                              command = command.Substring(0' command.IndexOf(" "));                              if (parameters.Contains(" "))                              {                                  list.AddRange(parameters.Split(' '));                              }                          }                            switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                  }
Magic Number,wmib,Session,C:\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: try                  {                      this.connection = (TcpClient)data;                      Syslog.DebugLog("Incoming connection from: " + connection.Client.RemoteEndPoint);                      this.connection.NoDelay = true;                      this.networkStream = connection.GetStream();                      this.streamReader = new StreamReader(networkStream);                      this.streamWriter = new StreamWriter(networkStream);                      // login                      Write("Enter username:");                      string username = streamReader.ReadLine();                      Write("Enter password:");                      string password = streamReader.ReadLine();                      SystemUser user = Security.Auth(username' password);                      if (user == null)                      {                          Disconnect("Invalid user or password' bye");                          return;                      }                      if (!Security.IsGloballyApproved(user' "terminal"))                      {                          Disconnect("No permissions' bye");                          return;                      }                      Write("Successfuly logged in to wm-bot' I have " + SessionList.Count.ToString() + " users logged in");                      while (connection.Connected && !streamReader.EndOfStream && Core.IsRunning)                      {                          string text = streamReader.ReadLine();                          string command = text;                          List<string> list = new List<string>();                          string parameters = "";                          if (command.Contains(" "))                          {                              parameters = command.Substring(command.IndexOf(" ") + 1);                              command = command.Substring(0' command.IndexOf(" "));                              if (parameters.Contains(" "))                              {                                  list.AddRange(parameters.Split(' '));                              }                          }                            switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                  }
Magic Number,wmib,Session,C:\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: try                  {                      this.connection = (TcpClient)data;                      Syslog.DebugLog("Incoming connection from: " + connection.Client.RemoteEndPoint);                      this.connection.NoDelay = true;                      this.networkStream = connection.GetStream();                      this.streamReader = new StreamReader(networkStream);                      this.streamWriter = new StreamWriter(networkStream);                      // login                      Write("Enter username:");                      string username = streamReader.ReadLine();                      Write("Enter password:");                      string password = streamReader.ReadLine();                      SystemUser user = Security.Auth(username' password);                      if (user == null)                      {                          Disconnect("Invalid user or password' bye");                          return;                      }                      if (!Security.IsGloballyApproved(user' "terminal"))                      {                          Disconnect("No permissions' bye");                          return;                      }                      Write("Successfuly logged in to wm-bot' I have " + SessionList.Count.ToString() + " users logged in");                      while (connection.Connected && !streamReader.EndOfStream && Core.IsRunning)                      {                          string text = streamReader.ReadLine();                          string command = text;                          List<string> list = new List<string>();                          string parameters = "";                          if (command.Contains(" "))                          {                              parameters = command.Substring(command.IndexOf(" ") + 1);                              command = command.Substring(0' command.IndexOf(" "));                              if (parameters.Contains(" "))                              {                                  list.AddRange(parameters.Split(' '));                              }                          }                            switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                  }
Magic Number,wmib,Session,C:\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: try                  {                      this.connection = (TcpClient)data;                      Syslog.DebugLog("Incoming connection from: " + connection.Client.RemoteEndPoint);                      this.connection.NoDelay = true;                      this.networkStream = connection.GetStream();                      this.streamReader = new StreamReader(networkStream);                      this.streamWriter = new StreamWriter(networkStream);                      // login                      Write("Enter username:");                      string username = streamReader.ReadLine();                      Write("Enter password:");                      string password = streamReader.ReadLine();                      SystemUser user = Security.Auth(username' password);                      if (user == null)                      {                          Disconnect("Invalid user or password' bye");                          return;                      }                      if (!Security.IsGloballyApproved(user' "terminal"))                      {                          Disconnect("No permissions' bye");                          return;                      }                      Write("Successfuly logged in to wm-bot' I have " + SessionList.Count.ToString() + " users logged in");                      while (connection.Connected && !streamReader.EndOfStream && Core.IsRunning)                      {                          string text = streamReader.ReadLine();                          string command = text;                          List<string> list = new List<string>();                          string parameters = "";                          if (command.Contains(" "))                          {                              parameters = command.Substring(command.IndexOf(" ") + 1);                              command = command.Substring(0' command.IndexOf(" "));                              if (parameters.Contains(" "))                              {                                  list.AddRange(parameters.Split(' '));                              }                          }                            switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                  }
Magic Number,wmib,Session,C:\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: try                  {                      this.connection = (TcpClient)data;                      Syslog.DebugLog("Incoming connection from: " + connection.Client.RemoteEndPoint);                      this.connection.NoDelay = true;                      this.networkStream = connection.GetStream();                      this.streamReader = new StreamReader(networkStream);                      this.streamWriter = new StreamWriter(networkStream);                      // login                      Write("Enter username:");                      string username = streamReader.ReadLine();                      Write("Enter password:");                      string password = streamReader.ReadLine();                      SystemUser user = Security.Auth(username' password);                      if (user == null)                      {                          Disconnect("Invalid user or password' bye");                          return;                      }                      if (!Security.IsGloballyApproved(user' "terminal"))                      {                          Disconnect("No permissions' bye");                          return;                      }                      Write("Successfuly logged in to wm-bot' I have " + SessionList.Count.ToString() + " users logged in");                      while (connection.Connected && !streamReader.EndOfStream && Core.IsRunning)                      {                          string text = streamReader.ReadLine();                          string command = text;                          List<string> list = new List<string>();                          string parameters = "";                          if (command.Contains(" "))                          {                              parameters = command.Substring(command.IndexOf(" ") + 1);                              command = command.Substring(0' command.IndexOf(" "));                              if (parameters.Contains(" "))                              {                                  list.AddRange(parameters.Split(' '));                              }                          }                            switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                  }
Magic Number,wmib,Session,C:\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: try                  {                      this.connection = (TcpClient)data;                      Syslog.DebugLog("Incoming connection from: " + connection.Client.RemoteEndPoint);                      this.connection.NoDelay = true;                      this.networkStream = connection.GetStream();                      this.streamReader = new StreamReader(networkStream);                      this.streamWriter = new StreamWriter(networkStream);                      // login                      Write("Enter username:");                      string username = streamReader.ReadLine();                      Write("Enter password:");                      string password = streamReader.ReadLine();                      SystemUser user = Security.Auth(username' password);                      if (user == null)                      {                          Disconnect("Invalid user or password' bye");                          return;                      }                      if (!Security.IsGloballyApproved(user' "terminal"))                      {                          Disconnect("No permissions' bye");                          return;                      }                      Write("Successfuly logged in to wm-bot' I have " + SessionList.Count.ToString() + " users logged in");                      while (connection.Connected && !streamReader.EndOfStream && Core.IsRunning)                      {                          string text = streamReader.ReadLine();                          string command = text;                          List<string> list = new List<string>();                          string parameters = "";                          if (command.Contains(" "))                          {                              parameters = command.Substring(command.IndexOf(" ") + 1);                              command = command.Substring(0' command.IndexOf(" "));                              if (parameters.Contains(" "))                              {                                  list.AddRange(parameters.Split(' '));                              }                          }                            switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                  }
Magic Number,wmib,Session,C:\repos\benapetr_wikimedia-bot\src\WMBot\Terminal.cs,ThreadExec,The following statement contains a magic number: try                  {                      this.connection = (TcpClient)data;                      Syslog.DebugLog("Incoming connection from: " + connection.Client.RemoteEndPoint);                      this.connection.NoDelay = true;                      this.networkStream = connection.GetStream();                      this.streamReader = new StreamReader(networkStream);                      this.streamWriter = new StreamWriter(networkStream);                      // login                      Write("Enter username:");                      string username = streamReader.ReadLine();                      Write("Enter password:");                      string password = streamReader.ReadLine();                      SystemUser user = Security.Auth(username' password);                      if (user == null)                      {                          Disconnect("Invalid user or password' bye");                          return;                      }                      if (!Security.IsGloballyApproved(user' "terminal"))                      {                          Disconnect("No permissions' bye");                          return;                      }                      Write("Successfuly logged in to wm-bot' I have " + SessionList.Count.ToString() + " users logged in");                      while (connection.Connected && !streamReader.EndOfStream && Core.IsRunning)                      {                          string text = streamReader.ReadLine();                          string command = text;                          List<string> list = new List<string>();                          string parameters = "";                          if (command.Contains(" "))                          {                              parameters = command.Substring(command.IndexOf(" ") + 1);                              command = command.Substring(0' command.IndexOf(" "));                              if (parameters.Contains(" "))                              {                                  list.AddRange(parameters.Split(' '));                              }                          }                            switch (command.ToLower())                          {                              case "exit":                              case "quit":                                  Disconnect("Good bye");                                  return;                              case "info":                                  string result = "Uptime: " + Core.getUptime() + " Version: " + Configuration.System.Version                                      + "\n\nBuffer information:\nUnwritten lines (file storage): " + StorageWriter.Count + "\n";                                  // we flush it early so that we can see where it gets stuck in case of a dead lock                                  Write(result);                                  result = "";                                  if (Core.DB != null)                                      result += "Unwritten rows (MySQL): " + Core.DB.CacheSize() + "\n";                                  result += "\nThreads:\n";                                  foreach (Thread thread in Core.ThreadManager.ThreadList)                                  {                                      result += "Thread: " + FormatToSpecSize(thread.Name' 20) + " status: " +                                                FormatToSpecSize(thread.ThreadState.ToString()' 20) +                                                " id: " + FormatToSpecSize(thread.ManagedThreadId.ToString()' 8) + "\n";                                  }                                  Write(result);                                  Write("Instances:");                                  result = "";                                  Syslog.DebugLog("Retrieving information for user " + username + " in system");                                  foreach (Instance instance in Instance.Instances.Values)                                  {                                      Syslog.DebugLog("Retrieving information for user " + username + " of instance " + instance.Nick' 2);                                      result += instance.Nick + " channels: " + instance.ChannelCount +                                          " connected: " + instance.IsConnected + " working: " +                                          instance.IsWorking + " queue: " + instance.QueueSize() + "\n";                                  }                                  Write(result);                                  break;                              case "help":                                  Write("Commands:\n"                                  + "exit - shutdown connection\n"                                  + "verbosity++\nverbosity--\n"                                  + "info - print information about system\n"                                  + "halt - shutdown bot\n"                                  + "reauth [instance] - resend password to nickserv\n"                                  + "traffic-on - turn on traffic logs\n"                                  + "traffic-off - turn off traffic logs\n"                                  + "send [instance] [text] - deliver a RAW text to IRC server on a given bot\n"                                  + "kill [instance] - disconnect selected instance\n"                                  + "conn [instance] - connect instance\n");                                  break;                              case "halt":                                  Disconnect("Shutting down");                                  Core.Kill();                                  return;                              case "reauth":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].Protocol.Authenticate(false);                                      Write("Sent a password to nickserv on " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "traffic-on":                                  Configuration.Network.Logging = true;                                  Write("Dumping traffic into datafile");                                  break;                              case "verbosity++":                                  Configuration.System.SelectedVerbosity++;                                  break;                              case "verbosity--":                                  Configuration.System.SelectedVerbosity--;                                  break;                              case "traffic-off":                                  Configuration.Network.Logging = false;                                  Write("Disabled traffic");                                  break;                              case "kill":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      Instance.Instances[parameters].ShutDown();                                      Write("Killed: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "conn":                                  if (Instance.Instances.ContainsKey(parameters))                                  {                                      if (Instance.Instances[parameters].IsConnected)                                      {                                          Write("Refusing to connect instance which is already connected: " + parameters);                                          break;                                      }                                      Instance.Instances[parameters].Init();                                      Write("Initializing: " + parameters);                                      int curr = 0;                                      while (curr < 10 && !Instance.Instances[parameters].IsWorking)                                      {                                          curr++;                                          Thread.Sleep(1000);                                      }                                      if (!Instance.Instances[parameters].IsWorking)                                      {                                          Write("Failed to initialize instance (timeout)");                                          break;                                      }                                      Write("Joining channels");                                      Instance.Instances[parameters].ChannelsJoined = false;                                      Instance.Instances[parameters].Join();                                      curr = 0;                                      while (curr < Instance.Instances[parameters].ChannelCount && !Instance.Instances[parameters].ChannelsJoined)                                      {                                          curr++;                                          Thread.Sleep(6000);                                      }                                      if (!Instance.Instances[parameters].ChannelsJoined)                                      {                                          Write("Failed to rejoin all channels in time");                                          break;                                      }                                      Write("Instance is online: " + parameters);                                      break;                                  }                                  Write("Unknown instance: " + parameters);                                  break;                              case "send":                                  if (!parameters.Contains(" "))                                  {                                      Write("This command requires 2 parameters");                                      break;                                  }                                  string to = parameters.Substring(0' parameters.IndexOf(" "));                                  if (Instance.Instances.ContainsKey(to))                                  {                                      if (!Instance.Instances[to].IsConnected)                                      {                                          Write("Refusing to send data using instance which is not connected: " + to);                                          break;                                      }                                      Instance.Instances[to].Network.Transfer(parameters.Substring(parameters.IndexOf(" ") + 1));                                      break;                                  }                                  Write("I have no such instance dude");                                  break;                              default:                                  Write("Unknown command' try help");                                  break;                          }                      }                  }                  catch (Exception fail)                  {                      Core.HandleException(fail);                  }
Magic Number,wmib,Logging,C:\repos\benapetr_wikimedia-bot\src\WMBot\Syslog.cs,Exec,The following statement contains a magic number: try              {                  while (Core.IsRunning)                  {                      Flush();                      Thread.Sleep(100);                  }              }              catch (ThreadAbortException)              {                  Flush();                  return;              }
Magic Number,wmib,Configuration,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,File2Dict,The following statement contains a magic number: foreach (string line in xx)              {                  string content;                  if (String.IsNullOrEmpty(line) || line.TrimStart(' ').StartsWith("//"))                  {                      continue;                  }                  Syslog.DebugWrite("Parsing line: " + line' 8);                  if (LastName == null && line.Contains("="))                  {                      LastName = line.Substring(0' line.IndexOf("="));                      if (Values.ContainsKey(LastName))                      {                          throw new Exception("You can't redefine same value in configuration multiple times' error reading: " + LastName);                      }                      content = line.Substring(line.IndexOf("=") + 1);                      if (content.Contains(";"))                      {                          content = content.Substring(0' content.IndexOf(";"));                      }                      Values.Add(LastName' content);                      Syslog.DebugWrite("Stored config value: " + LastName + ": " + content);                      if (line.Contains(";"))                      {                          LastName = null;                      }                      continue;                  }                  if (LastName != null)                  {                      // we remove extra space from beginning so that we can indent in config file                      content = line.TrimStart(' ');                      if (!content.Contains(";"))                      {                          Syslog.DebugWrite("Append config value: " + LastName + ": " + content);                          Values[LastName] += "\n" + content;                      }                      else                      {                          content = content.Substring(0' content.IndexOf(";"));                          Values[LastName] += "\n" + content;                          Syslog.DebugWrite("Append config value: " + LastName + ": " + content);                          LastName = null;                      }                      continue;                  }                  Syslog.WriteNow("Invalid configuration line: " + line' true);              }
Magic Number,wmib,Configuration,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The following statement contains a magic number: if (!File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + Paths.ConfigFile))              {                  Console.WriteLine("Error: unable to find config file in configuration/" + Paths.ConfigFile);                  Console.WriteLine("You can get a configuration file here: https://github.com/benapetr/wikimedia-bot/blob/master/configuration/wmib.conf");                  return 2;              }
Magic Number,wmib,Configuration,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The following statement contains a magic number: if (string.IsNullOrEmpty(IRC.NetworkHost))              {                  Console.WriteLine("Error irc server is wrong (network key is missing?)");                  return 4;              }
Magic Number,wmib,Configuration,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The following statement contains a magic number: if (string.IsNullOrEmpty(IRC.NickName))              {                  Console.WriteLine("Error there is no username for bot");                  return 6;              }
Magic Number,wmib,Configuration,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The following statement contains a magic number: while (CurrentInstance < 20)              {                  if (!ConfigurationData.ContainsKey("instancename" + CurrentInstance))                  {                      break;                  }                  string InstanceName = ConfigurationData["instancename" + CurrentInstance];                  Syslog.DebugLog("Instance found: " + InstanceName);                  if (IRC.UsingBouncer)                  {                      Syslog.DebugLog("Using bouncer' looking for instance port");                      if (!ConfigurationData.ContainsKey("instanceport" + CurrentInstance))                      {                          Syslog.WriteNow("Instance " + InstanceName + " has invalid port' not using"' true);                          continue;                      }                      int port = int.Parse(ConfigurationData["instanceport" + CurrentInstance]);                      Instance.CreateInstance(InstanceName' port);                  }                  else                  {                      Instance.CreateInstance(InstanceName);                  }                  CurrentInstance++;              }
Magic Number,wmib,Configuration,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,Load,The following statement contains a magic number: if (!File.Exists(Paths.GetChannelFile()))              {                  Console.WriteLine("Error there is no channel file (" + Paths.GetChannelFile() + ") to load channels from");                  return 20;              }
Magic Number,wmib,IRC,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,ChannelList,The following statement contains a magic number: try              {                  while (Core.IsRunning)                  {                      foreach (Channel channel in Configuration.ChannelList)                      {                          if (!channel.HasFreshUserList && channel.PrimaryInstance != null && channel.PrimaryInstance.Network != null)                          {                              channel.PrimaryInstance.Network.Transfer("WHO " + channel.Name' libirc.Defs.Priority.Low);                              Thread.Sleep(1000);                          }                      }                      // take stolen nick                      foreach (Instance instance in Instance.Instances.Values)                      {                          if (instance.Nick != instance.Network.Nickname)                          {                              instance.Network.Transfer("NICK " + instance.Nick);                          }                      }                      Thread.Sleep((Configuration.Channels.Count * 2000) + 80000);                  }              }              catch (ThreadAbortException)              {                  Core.ThreadManager.UnregisterThread(Thread.CurrentThread);                  return;              }              catch (Exception fail)              {                  Core.HandleException(fail);              }
Magic Number,wmib,IRC,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,ChannelList,The following statement contains a magic number: try              {                  while (Core.IsRunning)                  {                      foreach (Channel channel in Configuration.ChannelList)                      {                          if (!channel.HasFreshUserList && channel.PrimaryInstance != null && channel.PrimaryInstance.Network != null)                          {                              channel.PrimaryInstance.Network.Transfer("WHO " + channel.Name' libirc.Defs.Priority.Low);                              Thread.Sleep(1000);                          }                      }                      // take stolen nick                      foreach (Instance instance in Instance.Instances.Values)                      {                          if (instance.Nick != instance.Network.Nickname)                          {                              instance.Network.Transfer("NICK " + instance.Nick);                          }                      }                      Thread.Sleep((Configuration.Channels.Count * 2000) + 80000);                  }              }              catch (ThreadAbortException)              {                  Core.ThreadManager.UnregisterThread(Thread.CurrentThread);                  return;              }              catch (Exception fail)              {                  Core.HandleException(fail);              }
Magic Number,wmib,IRC,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,ChannelList,The following statement contains a magic number: try              {                  while (Core.IsRunning)                  {                      foreach (Channel channel in Configuration.ChannelList)                      {                          if (!channel.HasFreshUserList && channel.PrimaryInstance != null && channel.PrimaryInstance.Network != null)                          {                              channel.PrimaryInstance.Network.Transfer("WHO " + channel.Name' libirc.Defs.Priority.Low);                              Thread.Sleep(1000);                          }                      }                      // take stolen nick                      foreach (Instance instance in Instance.Instances.Values)                      {                          if (instance.Nick != instance.Network.Nickname)                          {                              instance.Network.Transfer("NICK " + instance.Nick);                          }                      }                      Thread.Sleep((Configuration.Channels.Count * 2000) + 80000);                  }              }              catch (ThreadAbortException)              {                  Core.ThreadManager.UnregisterThread(Thread.CurrentThread);                  return;              }              catch (Exception fail)              {                  Core.HandleException(fail);              }
Magic Number,wmib,Network,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt_CTCP,The following statement contains a magic number: switch (args.CTCP)              {                  case "FINGER":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "FINGER" +                               " I am a bot' don't finger me");                      return;                  case "TIME":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "TIME " + DateTime.Now.ToString());                      return;                  case "PING":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "PING" + args.Message.Substring(                          args.Message.IndexOf(_Protocol.Separator + "PING") + 5));                      return;                  case "VERSION":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "VERSION "                               + Configuration.System.Version + " http://meta.wikimedia.org/wiki/wm-bot");                      return;              }
Magic Number,wmib,RegexCheck,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\RegexCheck.cs,IsMatch,The following statement contains a magic number: try                  {                      Thread quick = new Thread(Run);                      searching = true;                      quick.Start();                      int check = 0;                      while (searching)                      {                          check++;                          Thread.Sleep(10);                          if (check > 50)                          {                              quick.Abort();                              return 2;                          }                      }                      if (result)                      {                          return 1;                      }                  }                  catch (Exception fail)                  {                      HandleException(fail);                      return 800;                  }
Magic Number,wmib,RegexCheck,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\RegexCheck.cs,IsMatch,The following statement contains a magic number: try                  {                      Thread quick = new Thread(Run);                      searching = true;                      quick.Start();                      int check = 0;                      while (searching)                      {                          check++;                          Thread.Sleep(10);                          if (check > 50)                          {                              quick.Abort();                              return 2;                          }                      }                      if (result)                      {                          return 1;                      }                  }                  catch (Exception fail)                  {                      HandleException(fail);                      return 800;                  }
Magic Number,wmib,RegexCheck,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\RegexCheck.cs,IsMatch,The following statement contains a magic number: try                  {                      Thread quick = new Thread(Run);                      searching = true;                      quick.Start();                      int check = 0;                      while (searching)                      {                          check++;                          Thread.Sleep(10);                          if (check > 50)                          {                              quick.Abort();                              return 2;                          }                      }                      if (result)                      {                          return 1;                      }                  }                  catch (Exception fail)                  {                      HandleException(fail);                      return 800;                  }
Magic Number,wmib,RegexCheck,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\RegexCheck.cs,IsMatch,The following statement contains a magic number: try                  {                      Thread quick = new Thread(Run);                      searching = true;                      quick.Start();                      int check = 0;                      while (searching)                      {                          check++;                          Thread.Sleep(10);                          if (check > 50)                          {                              quick.Abort();                              return 2;                          }                      }                      if (result)                      {                          return 1;                      }                  }                  catch (Exception fail)                  {                      HandleException(fail);                      return 800;                  }
Magic Number,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,The following statement contains a magic number: Roles.Add("trusted"' new Role(100));
Magic Number,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,The following statement contains a magic number: Roles.Add("operator"' new Role(1000));
Magic Number,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,The following statement contains a magic number: Roles.Add("admin"' new Role(20000));
Magic Number,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,Init,The following statement contains a magic number: Roles.Add("root"' new Role(65535));
Magic Number,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,GlobalLoad,The following statement contains a magic number: lock (globalUsers)              {                  globalUsers.Clear();                  foreach (string x in dba)                  {                      if (x.Contains(Configuration.System.Separator))                      {                          string[] info = x.Split(Char.Parse(Configuration.System.Separator));                          string level = info[1];                          string name = info[0];                          SystemUser user = new SystemUser(level' name);                          if (info.Length > 3)                          {                              user.UserName = info[3];                              user.Password = info[2];                          }                          globalUsers.Add(user);                          Syslog.DebugLog("Registered global user (" + level + "): " + name' 2);                      }                  }              }
Magic Number,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,GlobalLoad,The following statement contains a magic number: lock (globalUsers)              {                  globalUsers.Clear();                  foreach (string x in dba)                  {                      if (x.Contains(Configuration.System.Separator))                      {                          string[] info = x.Split(Char.Parse(Configuration.System.Separator));                          string level = info[1];                          string name = info[0];                          SystemUser user = new SystemUser(level' name);                          if (info.Length > 3)                          {                              user.UserName = info[3];                              user.Password = info[2];                          }                          globalUsers.Add(user);                          Syslog.DebugLog("Registered global user (" + level + "): " + name' 2);                      }                  }              }
Magic Number,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,GlobalLoad,The following statement contains a magic number: lock (globalUsers)              {                  globalUsers.Clear();                  foreach (string x in dba)                  {                      if (x.Contains(Configuration.System.Separator))                      {                          string[] info = x.Split(Char.Parse(Configuration.System.Separator));                          string level = info[1];                          string name = info[0];                          SystemUser user = new SystemUser(level' name);                          if (info.Length > 3)                          {                              user.UserName = info[3];                              user.Password = info[2];                          }                          globalUsers.Add(user);                          Syslog.DebugLog("Registered global user (" + level + "): " + name' 2);                      }                  }              }
Magic Number,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,GlobalLoad,The following statement contains a magic number: lock (globalUsers)              {                  globalUsers.Clear();                  foreach (string x in dba)                  {                      if (x.Contains(Configuration.System.Separator))                      {                          string[] info = x.Split(Char.Parse(Configuration.System.Separator));                          string level = info[1];                          string name = info[0];                          SystemUser user = new SystemUser(level' name);                          if (info.Length > 3)                          {                              user.UserName = info[3];                              user.Password = info[2];                          }                          globalUsers.Add(user);                          Syslog.DebugLog("Registered global user (" + level + "): " + name' 2);                      }                  }              }
Magic Number,wmib,WmIrcProtocol,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,NetworkInit,The following statement contains a magic number: Thread.Sleep(800);
Magic Number,wmib,WmIrcProtocol,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,Authenticate,The following statement contains a magic number: if (!String.IsNullOrEmpty(Configuration.IRC.LoginPw))              {                  Syslog.DebugLog("Sending password to nickserv");                  this.Send("PRIVMSG nickserv :identify " + Configuration.IRC.LoginNick + " " + Configuration.IRC.LoginPw);                  if (wait)                      Thread.Sleep(4000);              }              else              {                  Syslog.DebugLog("Not sending password to nickserv");              }
Magic Number,wmib,WmIrcProtocol,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,_Connect,The following statement contains a magic number: if (!Configuration.IRC.UsingBouncer)              {                  networkStream = new TcpClient(Server' 6667).GetStream();              } else              {                  Syslog.Log(this.IRCNetwork.Nickname + " is using personal bouncer port " + BouncerPort.ToString());                  networkStream = new TcpClient(BouncerHost' BouncerPort).GetStream();              }
Magic Number,wmib,WmIrcProtocol,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,connectBnc,The following statement contains a magic number: while (!Connected_)              {                  Thread.Sleep(2000);                  this.Send("CONTROL: STATUS");                  string response = streamReader.ReadLine();                  this.TrafficLog(response' true);                  if (response.StartsWith(":"))                  {                      // we received network data here                      lock(Backlog)                          Backlog.Add(response);                      continue;                  }                  if (response == "CONTROL: TRUE")                  {                      Syslog.Log("Bouncer connected to " + Server + " on: " + this.IRCNetwork.Nickname);                      return true;                  }                  retries++;                  if (retries > 6)                  {                      Syslog.WarningLog("Bouncer failed to connect to the network within 10 seconds' disconnecting it: "                                        + this.IRCNetwork.Nickname);                      this.Send("CONTROL: DISCONNECT");                      return false;                  }                  Syslog.Log("Still waiting for bouncer (trying " + retries.ToString() + "/6) on " + this.IRCNetwork.Nickname + " " + response);              }
Magic Number,wmib,WmIrcProtocol,C:\repos\benapetr_wikimedia-bot\src\WMBot\IRC\WmIRCProtocol.cs,connectBnc,The following statement contains a magic number: while (!Connected_)              {                  Thread.Sleep(2000);                  this.Send("CONTROL: STATUS");                  string response = streamReader.ReadLine();                  this.TrafficLog(response' true);                  if (response.StartsWith(":"))                  {                      // we received network data here                      lock(Backlog)                          Backlog.Add(response);                      continue;                  }                  if (response == "CONTROL: TRUE")                  {                      Syslog.Log("Bouncer connected to " + Server + " on: " + this.IRCNetwork.Nickname);                      return true;                  }                  retries++;                  if (retries > 6)                  {                      Syslog.WarningLog("Bouncer failed to connect to the network within 10 seconds' disconnecting it: "                                        + this.IRCNetwork.Nickname);                      this.Send("CONTROL: DISCONNECT");                      return false;                  }                  Syslog.Log("Still waiting for bouncer (trying " + retries.ToString() + "/6) on " + this.IRCNetwork.Nickname + " " + response);              }
Magic Number,wmib,Value,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\Database.cs,Value,The following statement contains a magic number: Data = date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-"                           + date.Day.ToString().PadLeft(2' '0') + " " + date.Hour.ToString().PadLeft(2' '0') + ":"                           + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0');
Magic Number,wmib,Value,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\Database.cs,Value,The following statement contains a magic number: Data = date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-"                           + date.Day.ToString().PadLeft(2' '0') + " " + date.Hour.ToString().PadLeft(2' '0') + ":"                           + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0');
Magic Number,wmib,Value,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\Database.cs,Value,The following statement contains a magic number: Data = date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-"                           + date.Day.ToString().PadLeft(2' '0') + " " + date.Hour.ToString().PadLeft(2' '0') + ":"                           + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0');
Magic Number,wmib,Value,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\Database.cs,Value,The following statement contains a magic number: Data = date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-"                           + date.Day.ToString().PadLeft(2' '0') + " " + date.Hour.ToString().PadLeft(2' '0') + ":"                           + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0');
Magic Number,wmib,Value,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\Database.cs,Value,The following statement contains a magic number: Data = date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-"                           + date.Day.ToString().PadLeft(2' '0') + " " + date.Hour.ToString().PadLeft(2' '0') + ":"                           + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0');
Magic Number,wmib,PostgreSQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,InsertRow,The following statement contains a magic number: lock (DatabaseLock)              {                  try                  {                      if (!IsConnected)                      {                          Syslog.DebugLog("Postponing request to insert a row into database which is not connected");                          //lock(unwritten.PendingRows)                          //{                          //    unwritten.PendingRows.Add(new SerializedRow(table' row));                          //}                          //FlushRows();                          return false;                      }                      Npgsql.NpgsqlCommand s = new Npgsql.NpgsqlCommand();                      s.Connection = this.connection;                      sql.Append("INSERT INTO ");                      sql.Append(table);                      // let's check if there are headers                      bool headers = true;                      string header = "";                      foreach (Row.Value value in row.Values)                      {                          if (value.Column == null)                          {                              headers = false;                              break;                          }                          header += value.Column + "' ";                      }                      if (header.EndsWith("' "))                          header = header.Substring(0' header.Length - 2);                      if (headers)                      {                          sql.Append(" (" + header + ")");                      }                      sql.Append(" VALUES (");                      int cv = 0;                      foreach (Row.Value value in row.Values)                      {                          sql.Append(":v" + cv.ToString() + "' ");                          switch (value.Type)                          {                              case DataType.Boolean:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Boolean));                                  s.Parameters[cv].Value = bool.Parse(value.Data);                                  break;                              case DataType.Integer:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Integer));                                  s.Parameters[cv].Value = int.Parse(value.Data);                                  break;                              case DataType.Varchar:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Varchar));                                  s.Parameters[cv].Value = value.Data;                                  break;                              case DataType.Text:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Text));                                  s.Parameters[cv].Value = value.Data;                                  break;                              case DataType.Date:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Timestamp));                                  s.Parameters[cv].Value = DateTime.Parse(value.Data);                                  break;                          }                          cv++;                      }                      if (sql.ToString().EndsWith("' "))                      {                          sql.Remove(sql.Length - 2' 2);                      }                      sql.Append(");");                      s.CommandText = sql.ToString();                      SystemHooks.OnSQL(LocalName' sql.ToString());                      s.ExecuteNonQuery();                      return true;                  }                  catch (Npgsql.NpgsqlException me)                  {                      ErrorBuffer = me.Message;                      Syslog.Log("Error while storing a row to DB " + me' true);                      Syslog.DebugLog("SQL: " + sql.ToString());                      HandleError(sql.ToString());                      /*lock(unwritten.PendingRows)                      {                          unwritten.PendingRows.Add(new SerializedRow(table' row));                      }                      FlushRows();                          */                      return false;                  }              }
Magic Number,wmib,PostgreSQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,InsertRow,The following statement contains a magic number: lock (DatabaseLock)              {                  try                  {                      if (!IsConnected)                      {                          Syslog.DebugLog("Postponing request to insert a row into database which is not connected");                          //lock(unwritten.PendingRows)                          //{                          //    unwritten.PendingRows.Add(new SerializedRow(table' row));                          //}                          //FlushRows();                          return false;                      }                      Npgsql.NpgsqlCommand s = new Npgsql.NpgsqlCommand();                      s.Connection = this.connection;                      sql.Append("INSERT INTO ");                      sql.Append(table);                      // let's check if there are headers                      bool headers = true;                      string header = "";                      foreach (Row.Value value in row.Values)                      {                          if (value.Column == null)                          {                              headers = false;                              break;                          }                          header += value.Column + "' ";                      }                      if (header.EndsWith("' "))                          header = header.Substring(0' header.Length - 2);                      if (headers)                      {                          sql.Append(" (" + header + ")");                      }                      sql.Append(" VALUES (");                      int cv = 0;                      foreach (Row.Value value in row.Values)                      {                          sql.Append(":v" + cv.ToString() + "' ");                          switch (value.Type)                          {                              case DataType.Boolean:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Boolean));                                  s.Parameters[cv].Value = bool.Parse(value.Data);                                  break;                              case DataType.Integer:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Integer));                                  s.Parameters[cv].Value = int.Parse(value.Data);                                  break;                              case DataType.Varchar:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Varchar));                                  s.Parameters[cv].Value = value.Data;                                  break;                              case DataType.Text:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Text));                                  s.Parameters[cv].Value = value.Data;                                  break;                              case DataType.Date:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Timestamp));                                  s.Parameters[cv].Value = DateTime.Parse(value.Data);                                  break;                          }                          cv++;                      }                      if (sql.ToString().EndsWith("' "))                      {                          sql.Remove(sql.Length - 2' 2);                      }                      sql.Append(");");                      s.CommandText = sql.ToString();                      SystemHooks.OnSQL(LocalName' sql.ToString());                      s.ExecuteNonQuery();                      return true;                  }                  catch (Npgsql.NpgsqlException me)                  {                      ErrorBuffer = me.Message;                      Syslog.Log("Error while storing a row to DB " + me' true);                      Syslog.DebugLog("SQL: " + sql.ToString());                      HandleError(sql.ToString());                      /*lock(unwritten.PendingRows)                      {                          unwritten.PendingRows.Add(new SerializedRow(table' row));                      }                      FlushRows();                          */                      return false;                  }              }
Magic Number,wmib,PostgreSQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,InsertRow,The following statement contains a magic number: lock (DatabaseLock)              {                  try                  {                      if (!IsConnected)                      {                          Syslog.DebugLog("Postponing request to insert a row into database which is not connected");                          //lock(unwritten.PendingRows)                          //{                          //    unwritten.PendingRows.Add(new SerializedRow(table' row));                          //}                          //FlushRows();                          return false;                      }                      Npgsql.NpgsqlCommand s = new Npgsql.NpgsqlCommand();                      s.Connection = this.connection;                      sql.Append("INSERT INTO ");                      sql.Append(table);                      // let's check if there are headers                      bool headers = true;                      string header = "";                      foreach (Row.Value value in row.Values)                      {                          if (value.Column == null)                          {                              headers = false;                              break;                          }                          header += value.Column + "' ";                      }                      if (header.EndsWith("' "))                          header = header.Substring(0' header.Length - 2);                      if (headers)                      {                          sql.Append(" (" + header + ")");                      }                      sql.Append(" VALUES (");                      int cv = 0;                      foreach (Row.Value value in row.Values)                      {                          sql.Append(":v" + cv.ToString() + "' ");                          switch (value.Type)                          {                              case DataType.Boolean:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Boolean));                                  s.Parameters[cv].Value = bool.Parse(value.Data);                                  break;                              case DataType.Integer:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Integer));                                  s.Parameters[cv].Value = int.Parse(value.Data);                                  break;                              case DataType.Varchar:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Varchar));                                  s.Parameters[cv].Value = value.Data;                                  break;                              case DataType.Text:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Text));                                  s.Parameters[cv].Value = value.Data;                                  break;                              case DataType.Date:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Timestamp));                                  s.Parameters[cv].Value = DateTime.Parse(value.Data);                                  break;                          }                          cv++;                      }                      if (sql.ToString().EndsWith("' "))                      {                          sql.Remove(sql.Length - 2' 2);                      }                      sql.Append(");");                      s.CommandText = sql.ToString();                      SystemHooks.OnSQL(LocalName' sql.ToString());                      s.ExecuteNonQuery();                      return true;                  }                  catch (Npgsql.NpgsqlException me)                  {                      ErrorBuffer = me.Message;                      Syslog.Log("Error while storing a row to DB " + me' true);                      Syslog.DebugLog("SQL: " + sql.ToString());                      HandleError(sql.ToString());                      /*lock(unwritten.PendingRows)                      {                          unwritten.PendingRows.Add(new SerializedRow(table' row));                      }                      FlushRows();                          */                      return false;                  }              }
Magic Number,wmib,WMIBMySQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,Exec,The following statement contains a magic number: try              {                  Thread.Sleep(8000);                  if (unwritten.PendingRows.Count == 0 && File.Exists (Variables.ConfigurationDirectory +                       Path.DirectorySeparatorChar + "unwrittensql.xml"))                  {                      File.Delete (Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "unwrittensql.xml");                  }                  while (Core.IsRunning)                  {                      if (unwritten.PendingRows.Count > 0)                      {                          int count;                          Syslog.WarningLog("Performing recovery of " + unwritten.PendingRows.Count + " MySQL rows");                          Recovering = true;                          List<SerializedRow> rows = new List<SerializedRow>();                          lock (unwritten.PendingRows)                          {                              count = unwritten.PendingRows.Count;                              rows.AddRange(unwritten.PendingRows);                              unwritten.PendingRows.Clear();                          }                          int recovered = 0;                          foreach (SerializedRow row in rows)                          {                              if (InsertRow(row.table' row.row))                              {                                  recovered++;                              } else                              {                                  Syslog.DebugLog("Failed to recover 1 row"' 2);                              }                          }                          Syslog.WarningLog("Recovery finished' recovered " + recovered + " of total " + count);                          Recovering = false;                          FlushRows();                          Thread.Sleep(200000);                          if (unwritten.PendingRows.Count == 0 && File.Exists(Variables.ConfigurationDirectory +                                                                               Path.DirectorySeparatorChar + "unwrittensql.xml"))                          {                              File.Delete(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "unwrittensql.xml");                          }                      }                      Thread.Sleep(200);                  }              } catch (Exception fail)              {                  Core.HandleException(fail);                  Syslog.ErrorLog("Recovery thread for Mysql is down");              }
Magic Number,wmib,WMIBMySQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,Exec,The following statement contains a magic number: try              {                  Thread.Sleep(8000);                  if (unwritten.PendingRows.Count == 0 && File.Exists (Variables.ConfigurationDirectory +                       Path.DirectorySeparatorChar + "unwrittensql.xml"))                  {                      File.Delete (Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "unwrittensql.xml");                  }                  while (Core.IsRunning)                  {                      if (unwritten.PendingRows.Count > 0)                      {                          int count;                          Syslog.WarningLog("Performing recovery of " + unwritten.PendingRows.Count + " MySQL rows");                          Recovering = true;                          List<SerializedRow> rows = new List<SerializedRow>();                          lock (unwritten.PendingRows)                          {                              count = unwritten.PendingRows.Count;                              rows.AddRange(unwritten.PendingRows);                              unwritten.PendingRows.Clear();                          }                          int recovered = 0;                          foreach (SerializedRow row in rows)                          {                              if (InsertRow(row.table' row.row))                              {                                  recovered++;                              } else                              {                                  Syslog.DebugLog("Failed to recover 1 row"' 2);                              }                          }                          Syslog.WarningLog("Recovery finished' recovered " + recovered + " of total " + count);                          Recovering = false;                          FlushRows();                          Thread.Sleep(200000);                          if (unwritten.PendingRows.Count == 0 && File.Exists(Variables.ConfigurationDirectory +                                                                               Path.DirectorySeparatorChar + "unwrittensql.xml"))                          {                              File.Delete(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "unwrittensql.xml");                          }                      }                      Thread.Sleep(200);                  }              } catch (Exception fail)              {                  Core.HandleException(fail);                  Syslog.ErrorLog("Recovery thread for Mysql is down");              }
Magic Number,wmib,WMIBMySQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,Exec,The following statement contains a magic number: try              {                  Thread.Sleep(8000);                  if (unwritten.PendingRows.Count == 0 && File.Exists (Variables.ConfigurationDirectory +                       Path.DirectorySeparatorChar + "unwrittensql.xml"))                  {                      File.Delete (Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "unwrittensql.xml");                  }                  while (Core.IsRunning)                  {                      if (unwritten.PendingRows.Count > 0)                      {                          int count;                          Syslog.WarningLog("Performing recovery of " + unwritten.PendingRows.Count + " MySQL rows");                          Recovering = true;                          List<SerializedRow> rows = new List<SerializedRow>();                          lock (unwritten.PendingRows)                          {                              count = unwritten.PendingRows.Count;                              rows.AddRange(unwritten.PendingRows);                              unwritten.PendingRows.Clear();                          }                          int recovered = 0;                          foreach (SerializedRow row in rows)                          {                              if (InsertRow(row.table' row.row))                              {                                  recovered++;                              } else                              {                                  Syslog.DebugLog("Failed to recover 1 row"' 2);                              }                          }                          Syslog.WarningLog("Recovery finished' recovered " + recovered + " of total " + count);                          Recovering = false;                          FlushRows();                          Thread.Sleep(200000);                          if (unwritten.PendingRows.Count == 0 && File.Exists(Variables.ConfigurationDirectory +                                                                               Path.DirectorySeparatorChar + "unwrittensql.xml"))                          {                              File.Delete(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "unwrittensql.xml");                          }                      }                      Thread.Sleep(200);                  }              } catch (Exception fail)              {                  Core.HandleException(fail);                  Syslog.ErrorLog("Recovery thread for Mysql is down");              }
Magic Number,wmib,WMIBMySQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,Exec,The following statement contains a magic number: try              {                  Thread.Sleep(8000);                  if (unwritten.PendingRows.Count == 0 && File.Exists (Variables.ConfigurationDirectory +                       Path.DirectorySeparatorChar + "unwrittensql.xml"))                  {                      File.Delete (Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "unwrittensql.xml");                  }                  while (Core.IsRunning)                  {                      if (unwritten.PendingRows.Count > 0)                      {                          int count;                          Syslog.WarningLog("Performing recovery of " + unwritten.PendingRows.Count + " MySQL rows");                          Recovering = true;                          List<SerializedRow> rows = new List<SerializedRow>();                          lock (unwritten.PendingRows)                          {                              count = unwritten.PendingRows.Count;                              rows.AddRange(unwritten.PendingRows);                              unwritten.PendingRows.Clear();                          }                          int recovered = 0;                          foreach (SerializedRow row in rows)                          {                              if (InsertRow(row.table' row.row))                              {                                  recovered++;                              } else                              {                                  Syslog.DebugLog("Failed to recover 1 row"' 2);                              }                          }                          Syslog.WarningLog("Recovery finished' recovered " + recovered + " of total " + count);                          Recovering = false;                          FlushRows();                          Thread.Sleep(200000);                          if (unwritten.PendingRows.Count == 0 && File.Exists(Variables.ConfigurationDirectory +                                                                               Path.DirectorySeparatorChar + "unwrittensql.xml"))                          {                              File.Delete(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "unwrittensql.xml");                          }                      }                      Thread.Sleep(200);                  }              } catch (Exception fail)              {                  Core.HandleException(fail);                  Syslog.ErrorLog("Recovery thread for Mysql is down");              }
Magic Number,wmib,WMIBMySQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,InsertRow,The following statement contains a magic number: lock(DatabaseLock)              {                  try                  {                      if (!IsConnected)                      {                          Syslog.DebugLog("Postponing request to insert a row into database which is not connected");                          lock(unwritten.PendingRows)                          {                              unwritten.PendingRows.Add(new SerializedRow(table' row));                          }                          FlushRows();                          return false;                      }                        MySqlCommand mySqlCommand = Connection.CreateCommand();                      sql.Append("INSERT INTO ");                      sql.Append(table);                      sql.Append(" VALUES (");                      foreach (Row.Value value in row.Values)                      {                          switch (value.Type)                          {                              case DataType.Boolean:                              case DataType.Integer:                                  sql.Append(value.Data);                                  sql.Append("' ");                                  break;                              case DataType.Varchar:                              case DataType.Text:                              case DataType.Date:                                  sql.Append("'");                                  sql.Append(MySqlHelper.EscapeString(value.Data));                                  sql.Append("'' ");                                  break;                          }                      }                      if (sql.ToString().EndsWith("' "))                      {                          sql.Remove(sql.Length - 2' 2);                      }                      sql.Append(");");                      mySqlCommand.CommandText = sql.ToString();                      mySqlCommand.ExecuteNonQuery();                      return true;                  } catch (MySqlException me)                  {                      ErrorBuffer = me.Message;                      Syslog.Log("Error while storing a row to DB " + me' true);                      Syslog.DebugLog("SQL: " + sql);                      lock(unwritten.PendingRows)                      {                          unwritten.PendingRows.Add(new SerializedRow(table' row));                      }                      FlushRows();                      return false;                  }              }
Magic Number,wmib,WMIBMySQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,InsertRow,The following statement contains a magic number: lock(DatabaseLock)              {                  try                  {                      if (!IsConnected)                      {                          Syslog.DebugLog("Postponing request to insert a row into database which is not connected");                          lock(unwritten.PendingRows)                          {                              unwritten.PendingRows.Add(new SerializedRow(table' row));                          }                          FlushRows();                          return false;                      }                        MySqlCommand mySqlCommand = Connection.CreateCommand();                      sql.Append("INSERT INTO ");                      sql.Append(table);                      sql.Append(" VALUES (");                      foreach (Row.Value value in row.Values)                      {                          switch (value.Type)                          {                              case DataType.Boolean:                              case DataType.Integer:                                  sql.Append(value.Data);                                  sql.Append("' ");                                  break;                              case DataType.Varchar:                              case DataType.Text:                              case DataType.Date:                                  sql.Append("'");                                  sql.Append(MySqlHelper.EscapeString(value.Data));                                  sql.Append("'' ");                                  break;                          }                      }                      if (sql.ToString().EndsWith("' "))                      {                          sql.Remove(sql.Length - 2' 2);                      }                      sql.Append(");");                      mySqlCommand.CommandText = sql.ToString();                      mySqlCommand.ExecuteNonQuery();                      return true;                  } catch (MySqlException me)                  {                      ErrorBuffer = me.Message;                      Syslog.Log("Error while storing a row to DB " + me' true);                      Syslog.DebugLog("SQL: " + sql);                      lock(unwritten.PendingRows)                      {                          unwritten.PendingRows.Add(new SerializedRow(table' row));                      }                      FlushRows();                      return false;                  }              }
Missing Default,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The following switch statement is missing a default case: switch (name)                  {                      case "ignore-unknown":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.IgnoreUnknown = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language'                                                                         new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "respond-wait":                          int _temp_b;                          if (int.TryParse(value' out _temp_b))                          {                              if (_temp_b > 1 && _temp_b < 364000)                              {                                  parameters.SourceChannel.RespondWait = _temp_b;                                  IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                                  parameters.SourceChannel.SaveConfig();                                  return;                              }                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "respond-message":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.RespondMessage = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                      case "suppress-warnings":                          if (bool.TryParse(value' out _temp_a))                          {                              parameters.SourceChannel.SuppressWarnings = _temp_a;                              IRC.DeliverMessage(messages.Localize("configuresave"' parameters.SourceChannel.Language' new List<string> { value' name })' parameters.SourceChannel);                              parameters.SourceChannel.SaveConfig();                              return;                          }                          IRC.DeliverMessage(messages.Localize("configure-va"' parameters.SourceChannel.Language' new List<string> { name' value })' parameters.SourceChannel);                          return;                  }
Missing Default,wmib,Commands,C:\repos\benapetr_wikimedia-bot\src\WMBot\Commands\Processing.cs,Configure,The following switch statement is missing a default case: switch (parameters.Parameters)                  {                      case "ignore-unknown":                          IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.IgnoreUnknown.ToString() })' parameters.SourceChannel);                          return;                      case "respond-message":                          IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.RespondMessage.ToString() })' parameters.SourceChannel);                          return;                      case "suppress-warnings":                          IRC.DeliverMessage(messages.Localize("Responses-Conf"' parameters.SourceChannel.Language' new List<string> { parameters.Parameters' parameters.SourceChannel.SuppressWarnings.ToString() })' parameters.SourceChannel);                          return;                  }
Missing Default,wmib,Network,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt_CTCP,The following switch statement is missing a default case: switch (args.CTCP)              {                  case "FINGER":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "FINGER" +                               " I am a bot' don't finger me");                      return;                  case "TIME":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "TIME " + DateTime.Now.ToString());                      return;                  case "PING":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "PING" + args.Message.Substring(                          args.Message.IndexOf(_Protocol.Separator + "PING") + 5));                      return;                  case "VERSION":                      Transfer("NOTICE " + args.SourceInfo.Nick + " :" + _Protocol.Separator + "VERSION "                               + Configuration.System.Version + " http://meta.wikimedia.org/wiki/wm-bot");                      return;              }
Missing Default,wmib,Network,C:\repos\benapetr_wikimedia-bot\src\WMBot\Configuration.cs,__evt__IncomingData,The following switch statement is missing a default case: switch (args.Command)              {                  case "001":                  case "002":                      this.instance.IsWorking = true;                      break;              }
Missing Default,wmib,Security,C:\repos\benapetr_wikimedia-bot\src\WMBot\Security.cs,InsertUser,The following switch statement is missing a default case: switch (info.Name)                  {                      case "regex":                          regex = info.Value;                          break;                      case "role":                          role = info.Value;                          break;                  }
Missing Default,wmib,Channel,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,LoadConfig,The following switch statement is missing a default case: switch (xx.Name)                      {                          case "user":                              this.SystemUsers.InsertUser(xx);                              continue;                          case "extension":                              if (ExtensionData.ContainsKey(xx.Attributes[0].Value))                              {                                  ExtensionData[xx.Attributes[0].Value] = xx.Attributes[1].Value;                              }                              else                              {                                  ExtensionData.Add(xx.Attributes[0].Value' xx.Attributes[1].Value);                              }                              continue;                          case "ignored":                              Infobot_IgnoredNames.Add(xx.Attributes[1].Value);                              continue;                          case "sharedch":                              SharedChans.Add(xx.Attributes[1].Value);                              continue;                        }
Missing Default,wmib,Channel,C:\repos\benapetr_wikimedia-bot\src\WMBot\System\Channel.cs,LoadConfig,The following switch statement is missing a default case: switch (xx.Attributes[0].Value)                      {                          case "talkmode":                              Suppress = bool.Parse(xx.Attributes[1].Value);                              break;                          case "langcode":                              Language = xx.Attributes[1].Value;                              break;                          case "respond_message":                              RespondMessage = bool.Parse(xx.Attributes[1].Value);                              break;                          case "ignore-unknown":                              IgnoreUnknown = bool.Parse(xx.Attributes[1].Value);                              break;                          case "suppress-warnings":                              SuppressWarnings = bool.Parse(xx.Attributes[1].Value);                              break;                          case "respond_wait":                              RespondWait = int.Parse(xx.Attributes[1].Value);                              break;                          case "sharedinfo":                              SharedDB = xx.Attributes[1].Value;                              break;                          case "defaultbot":                              DefaultInstance = xx.Attributes[1].Value;                              break;                          case "password":                              Password = xx.Attributes[1].Value;                              break;                      }
Missing Default,wmib,PostgreSQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,BindVars,The following switch statement is missing a default case: switch (bind.Type)                  {                      case DataType.Boolean:                          c.Parameters.Add(new Npgsql.NpgsqlParameter(bind.Name' NpgsqlTypes.NpgsqlDbType.Boolean));                          c.Parameters[n++].Value = bool.Parse(bind.Value);                          break;                      case DataType.Integer:                          c.Parameters.Add(new Npgsql.NpgsqlParameter(bind.Name' NpgsqlTypes.NpgsqlDbType.Integer));                          c.Parameters[n++].Value = int.Parse(bind.Value);                          break;                      case DataType.Varchar:                          c.Parameters.Add(new Npgsql.NpgsqlParameter(bind.Name' NpgsqlTypes.NpgsqlDbType.Varchar));                          c.Parameters[n++].Value = bind.Value;                          break;                      case DataType.Text:                          c.Parameters.Add(new Npgsql.NpgsqlParameter(bind.Name' NpgsqlTypes.NpgsqlDbType.Text));                          c.Parameters[n++].Value = bind.Value;                          break;                      case DataType.Date:                          c.Parameters.Add(new Npgsql.NpgsqlParameter(bind.Name' NpgsqlTypes.NpgsqlDbType.Timestamp));                          c.Parameters[n++].Value = DateTime.Parse(bind.Value);                          break;                  }
Missing Default,wmib,PostgreSQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\PostgreSQL.cs,InsertRow,The following switch statement is missing a default case: switch (value.Type)                          {                              case DataType.Boolean:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Boolean));                                  s.Parameters[cv].Value = bool.Parse(value.Data);                                  break;                              case DataType.Integer:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Integer));                                  s.Parameters[cv].Value = int.Parse(value.Data);                                  break;                              case DataType.Varchar:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Varchar));                                  s.Parameters[cv].Value = value.Data;                                  break;                              case DataType.Text:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Text));                                  s.Parameters[cv].Value = value.Data;                                  break;                              case DataType.Date:                                  s.Parameters.Add(new Npgsql.NpgsqlParameter("v" + cv.ToString()' NpgsqlTypes.NpgsqlDbType.Timestamp));                                  s.Parameters[cv].Value = DateTime.Parse(value.Data);                                  break;                          }
Missing Default,wmib,WMIBMySQL,C:\repos\benapetr_wikimedia-bot\src\WMBot\DB\MySQL.cs,InsertRow,The following switch statement is missing a default case: switch (value.Type)                          {                              case DataType.Boolean:                              case DataType.Integer:                                  sql.Append(value.Data);                                  sql.Append("' ");                                  break;                              case DataType.Varchar:                              case DataType.Text:                              case DataType.Date:                                  sql.Append("'");                                  sql.Append(MySqlHelper.EscapeString(value.Data));                                  sql.Append("'' ");                                  break;                          }
