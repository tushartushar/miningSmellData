Implementation smell,Namespace,Class,File,Method,Description
Long Method,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotExec,The method has 341 lines of code.
Long Method,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,Hook_PRIV,The method has 494 lines of code.
Long Method,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,The method has 166 lines of code.
Long Method,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,RetrieveStatus2,The method has 145 lines of code.
Long Method,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The method has 101 lines of code.
Long Method,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The method has 248 lines of code.
Long Method,wmib.Extensions.RssFeed,RSS,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Module.cs,Hook_PRIV,The method has 245 lines of code.
Long Method,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ReadFeed,The method has 232 lines of code.
Complex Method,wmib.Extensions,HtmlDumpObj,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,Stat,Cyclomatic complexity of the method is 9
Complex Method,wmib.Extensions,HtmlDumpObj,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,Make,Cyclomatic complexity of the method is 16
Complex Method,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,ParseInfo,Cyclomatic complexity of the method is 8
Complex Method,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotExec,Cyclomatic complexity of the method is 44
Complex Method,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,RSearch,Cyclomatic complexity of the method is 8
Complex Method,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,LoadData,Cyclomatic complexity of the method is 8
Complex Method,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,Hook_PRIV,Cyclomatic complexity of the method is 96
Complex Method,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Hook_PRIV,Cyclomatic complexity of the method is 9
Complex Method,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,Client,Cyclomatic complexity of the method is 8
Complex Method,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,Hook_PRIV,Cyclomatic complexity of the method is 19
Complex Method,wmib.Extensions,Notify,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\NotifyUs.cs,NotifyUser,Cyclomatic complexity of the method is 8
Complex Method,wmib.Extensions,ScriptingEngine,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Scripting\ScriptingEngine.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,Cyclomatic complexity of the method is 8
Complex Method,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,RetrieveStatus2,Cyclomatic complexity of the method is 9
Complex Method,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,Cyclomatic complexity of the method is 26
Complex Method,wmib.Extensions,StatisticsMod,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Hook_PRIV,Cyclomatic complexity of the method is 15
Complex Method,wmib.Extensions,Translate,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Translate\Translate.cs,Load,Cyclomatic complexity of the method is 11
Complex Method,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,Cyclomatic complexity of the method is 51
Complex Method,wmib.Extensions.RssFeed,RSS,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Module.cs,Hook_PRIV,Cyclomatic complexity of the method is 46
Complex Method,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ReadFeed,Cyclomatic complexity of the method is 19
Long Parameter List,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,SetKey,The method has 5 parameters. Parameters: Text' key' user' chan' isact
Long Parameter List,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,aliasKey,The method has 5 parameters. Parameters: key' al' user' chan' enforced
Long Parameter List,wmib.Extensions,InfobotKey,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotKey,The method has 9 parameters. Parameters: key' text' _User' Lock' date' time' Number' RAW' act
Long Parameter List,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,ChanLog,The method has 5 parameters. Parameters: message' channel' user' host' noac
Long Parameter List,wmib.Extensions,Item,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Item,The method has 5 parameters. Parameters: channel' sl' tl' tn' message
Long Parameter List,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,WriteStatus,The method has 6 parameters. Parameters: nick' host' place' action' newnick' reason
Long Parameter List,wmib.Extensions,item,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,item,The method has 7 parameters. Parameters: Nick' Host' LastPlace' action' Date' NewNick' reason
Long Statement,wmib.Extensions,GitHub,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\GitHub\GitHubHook.cs,github_Insert,The length of the statement  "                List<List<string>> result = Core.MysqlDB.Select("github_repo_info"' "name' channel"' "WHERE name = '" + Core.MysqlDB.EscapeInput(p.Parameters) + "' AND channel = '" + " is 166.
Long Statement,wmib.Extensions,GitHub,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\GitHub\GitHubHook.cs,github_Remove,The length of the statement  "                List<List<string>> result = Core.MysqlDB.Select("github_repo_info"' "name' channel"' "WHERE name = '" + Core.MysqlDB.EscapeInput(p.Parameters) + "' AND channel = '" + " is 166.
Long Statement,wmib.Extensions,HtmlDumpObj,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,CreateHeader,The length of the statement  "            string html = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n\n\n<html><head>"; " is 162.
Long Statement,wmib.Extensions,HtmlDumpObj,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,Stat,The length of the statement  "                    builder.AppendFormat("<td><a href=\"{0}.htm\"><span class=\"channel-name\">{1}</span></a> (<span class=\"user-count\">" + user_count + "</span>)</td><td>\n"' HttpUtility.UrlEncode(chan.Name)' " is 191.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotDetail,The length of the statement  "                IRC.DeliverMessage(messages.Localize("infobot-data"' chan.Language' new List<string> {key' name' created' CV.Displayed.ToString()' " is 130.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,ParseInfo,The length of the statement  "                        text = text.Replace("$wiki_encoded_" + (curr+1)' HttpUtility.UrlEncode(parameters[curr]).Replace("+"' "_").Replace("%3a"' ":").Replace("%2f"' "/").Replace("%28"' "(").Replace("%29"' ")")); " is 188.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,ParseInfo,The length of the statement  "                text = text.Replace("$wiki_encoded_*"' HttpUtility.UrlEncode(original).Replace("+"' "_").Replace("%3a"' ":").Replace("%2f"' "/").Replace("%28"' "(").Replace("%29"' ")")); " is 170.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,StartSearch,The length of the statement  "                IRC.DeliverMessage(messages.Localize("Results"' _channel.Language' new List<string> { count.ToString() }) + results' ReplyChan.Name); " is 133.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,Find,The length of the statement  "                IRC.DeliverMessage(messages.Localize("Results"' Chan.Language' new List<string> { count.ToString() }) + results' Chan.Name); " is 124.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,SetRaw,The length of the statement  "            IRC.DeliverMessage("This key will be displayed with no extra styling' variables and will ignore all symbols"' chan.Name); " is 121.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,RecoverStart,The length of the statement  "                    IRC.DeliverMessage("Snapshot " + temporary_data + " was loaded and previous database was permanently deleted"' pChannel); " is 121.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,RecoverSnapshot,The length of the statement  "                    string datafile = InfobotModule.SnapshotsDirectory + Path.DirectorySeparatorChar + pChannel.Name + Path.DirectorySeparatorChar + name; " is 134.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,CreateSnapshot,The length of the statement  "                string datafile = InfobotModule.SnapshotsDirectory + Path.DirectorySeparatorChar + pChannel.Name + Path.DirectorySeparatorChar + name; " is 134.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,aliasKey,The length of the statement  "                            IRC.DeliverMessage("Unable to create alias for " + key + " because the target is alias' but not a key' if you really want to create this broken alias do !" + al + " force-alias " + key' chan.Name); " is 197.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,aliasKey,The length of the statement  "                        IRC.DeliverMessage("Unable to create alias for " + key + " because there is no such key' if you really want to create this broken alias do !" + al + " force-alias " + key' chan.Name); " is 183.
Long Statement,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,LoadAncientDB,The length of the statement  "                            Keys.Add(new InfobotKey(name.Replace("<separator>"' "|")' value.Replace("<separator>"' "|")' ""' Locked' NA.ToBinary().ToString()' " is 130.
Long Statement,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,getDB,The length of the statement  "            return GetConfig(chan' "Infobot.Keydb"' Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + chan.Name + ".db"); " is 124.
Long Statement,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,UpdateConfig,The length of the statement  "                List<List<string>> results = Core.DB.Select("SELECT count(1) FROM logs_meta WHERE channel = :channel and name = 'enabled';"' new List<Database.Bind> { new Database.Bind("channel"' channel.Name' Database.DataType.Text) }); " is 221.
Long Statement,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,UpdateConfig,The length of the statement  "                    r.Values.Add(new Database.Row.Value(GetConfig(channel' "Logging.Enabled"' false).ToString()' Database.DataType.Text' "value")); " is 127.
Long Statement,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,UpdateConfig,The length of the statement  "                    Core.DB.ExecuteNonQuery("UPDATE logs_meta SET value = '" + GetConfig(channel' "Logging.Enabled"' false).ToString() + "' where name = 'enabled' and channel = :channel;\ncommit;"' new List<Database.Bind> { new Database.Bind("channel"' channel.Name' Database.DataType.Text) }); " is 274.
Long Statement,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,WriteLog,The length of the statement  "                File.AppendAllText(TextPath + path + _datetime.Year + TDToString(_datetime.Month) + TDToString(_datetime.Day) + ".txt"' message); " is 129.
Long Statement,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Hook_ChannelDrop,The length of the statement  "                    Core.DB.ExecuteNonQuery(SQL' new List<Database.Bind> { new Database.Bind("channel"' chan.Name' Database.DataType.Text) }); " is 122.
Long Statement,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,Hook_PRIV,The length of the statement  "                    IRC.DeliverMessage("New token was generated for this channel' and it was sent to you in a private message"' channel.Name); " is 122.
Long Statement,wmib.Extensions,Notify,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\NotifyUs.cs,Hook_Join,The length of the statement  "                IRC.DeliverMessage(result.Source_Name + "! " + user.Nick + " just joined " + channel.Name + ". This message was delivered to you because you asked me to notify you about this user's activity. For more information' see http://meta.wikimedia.org/wiki/WM-Bot"' result.Source_Name); " is 278.
Long Statement,wmib.Extensions,Notify,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\NotifyUs.cs,Hook_Kick,The length of the statement  "                IRC.DeliverMessage(result.Source_Name + "! " + user + " just got kicked from " + channel.Name + ". This message was delivered to you because you asked me to notify you about this user's activity. For more information' see http://meta.wikimedia.org/wiki/WM-Bot"' result.Source_Name); " is 282.
Long Statement,wmib.Extensions,Notify,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\NotifyUs.cs,NotifyUser,The length of the statement  "                        IRC.DeliverMessage("This user is now online in " + item.Name + ". I'll let you know when they show some activity (talk' etc.)"' target_.TargetName); " is 148.
Long Statement,wmib.Extensions,Notify,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\NotifyUs.cs,NotifyUser,The length of the statement  "                    IRC.DeliverMessage("I will let you know when I see " + nick + " and I will deliver that message to them"' target_.TargetName); " is 126.
Long Statement,wmib.Extensions,Notify,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\NotifyUs.cs,Hook_PRIV,The length of the statement  "                IRC.DeliverMessage(result.Source_Name + "! " + invoker.Nick + " just said something in " + channel.Name + ". This message was delivered to you because you asked me to notify you about this user's activity. For more information' see http://meta.wikimedia.org/wiki/WM-Bot"' result.Source_Name); " is 292.
Long Statement,wmib.Extensions,Notify,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\NotifyUs.cs,Hook_OnPrivateFromUser,The length of the statement  "                IRC.DeliverMessage(result.Source_Name + "! " + user.Nick + " just sent me a private message. This message was delivered to you because you asked me to notify you about this user's activity. For more information' see http://meta.wikimedia.org/wiki/WM-Bot"' result.Source_Name); " is 276.
Long Statement,wmib.Extensions,Notify,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\NotifyUs.cs,Deliver,The length of the statement  "            IRC.DeliverMessage("Hi " + notification.User + "' " + notification.Source_Name + " was looking for you and wanted me to tell you this when you are here: " + " is 156.
Long Statement,wmib.Extensions,ScriptingEngine,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Scripting\ScriptingEngine.cs,Load,The length of the statement  "                                    IRC.DeliverMessage("The command produced multiline output' see " + Configuration.WebPages.WebpageURL + filename' ts.user); " is 122.
Long Statement,wmib.Extensions,ScriptingEngine,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Scripting\ScriptingEngine.cs,Load,The length of the statement  "                                    IRC.DeliverMessage("The command produced multiline output' see " + Configuration.WebPages.WebpageURL + filename' ts.channel); " is 125.
Long Statement,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Hook_OnPrivateFromUser,The length of the statement  "                IRC.DeliverMessage("Sorry but this command can be used in channels only (it's cpu expensive so it can be used on public by trusted users only)"' user); " is 151.
Long Statement,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,The length of the statement  "                                    response = "Last time I saw " + xx.nick + " they were " + action + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)"; " is 129.
Long Statement,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,The length of the statement  "                                    response = "Last time I saw " + xx.nick + " they were " + action + " " + xx.lastplace + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)"; " is 150.
Long Statement,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,RetrieveStatus2,The length of the statement  "                            response = "Last time I saw " + nick + " they were " + action + " " + xx.lastplace + " at " + xx.LastSeen + " (" + FormatTimeSpan(span) + " ago)"; " is 146.
Long Statement,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The length of the statement  "                                    item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason); " is 130.
Long Statement,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The length of the statement  "                        IRC.DeliverMessage("Hi " + invoker.Nick + "' you just managed to say pointless nick: ping. Now please try again with some proper meaning of your request' something like nick: I need this and that. Or don't do that at all' it's very annoying. Thank you"' channel); " is 263.
Long Statement,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The length of the statement  "                    if (ms == "i have a question" || ms == "can i ask a question" || ms == "is anyone willing to help" || ms == "can i ask" || ms == "i got a question" || ms == "can i have a question" || ms == "can someone help me" || ms == "i need help") " is 235.
Long Statement,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The length of the statement  "                        IRC.DeliverMessage("Hi " + invoker.Nick + "' just ask! There is no need to ask if you can ask' if you already asked the question please wait for someone to respond"' channel); " is 175.
Long Statement,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The length of the statement  "                    if (ms == "is anyone here" || ms == "is anybody here" || ms == "is anybody there" || ms == "is some one there" || ms == "is someone there" || ms == "is someone here" || ms == "anyone here" || ms == "someone here") " is 213.
Long Statement,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The length of the statement  "                        IRC.DeliverMessage("Hi " + invoker.Nick + "' I am here' if you need anything' please ask' otherwise no one is going to help you... Thank you"' channel); " is 152.
Long Statement,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The length of the statement  "                        IRC.DeliverMessage("Hi " + invoker.Nick + "' if you need any help' please state your question and please wait for someone to answer it."' channel); " is 147.
Long Statement,wmib.Extensions,StatisticsMod,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Extension_DumpHtml,The length of the statement  "                        "<tr><td>N.</td><th>Nick</th><th>Messages (average / day)</th><th>Number of posted messages</th><th>Active since</th></tr>"); " is 125.
Long Statement,wmib.Extensions,Statistics,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Save,The length of the statement  "            if (File.Exists(Configuration.TempName(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics"))) " is 135.
Long Statement,wmib.Extensions,Statistics,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Save,The length of the statement  "                File.Delete(Configuration.TempName(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics")); " is 131.
Long Statement,wmib.Extensions,Statistics,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Load,The length of the statement  "                Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics"' channel.Name); " is 126.
Long Statement,wmib.Extensions,Thanks,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Thanks\Thanks.cs,Hook_PRIV,The length of the statement  "                if (message.Contains(channel.PrimaryInstance.Nick) && !message.Contains("thanks to") && (message.Contains("thanks") || message.Contains("thank you")) && !message.Contains("no thank")) " is 183.
Long Statement,wmib.Extensions,Thanks,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Thanks\Thanks.cs,Hook_PRIV,The length of the statement  "                        response = "Hey " + invoker.Nick + "' you are welcome' but keep in mind I am just a stupid bot' it was actually " + x.User + " who helped you :-)"; " is 147.
Long Statement,wmib.Extensions,Translate,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Translate\Translate.cs,Load,The length of the statement  "                            string result = wx.DownloadString(this.URL + "translate?key=" + key + "&lang=" + System.Web.HttpUtility.UrlEncode(request.SourceLang) + "-" + " is 141.
Long Statement,wmib.Extensions,Translate,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Translate\Translate.cs,Load,The length of the statement  "                                                IRC.DeliverMessage("Translating from " + request.SourceLang + " to " + request.TargetLang + ": " + n2.InnerText + " (powered by Yandex)"' request.Channel); " is 155.
Long Statement,wmib.Extensions,Translate,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Translate\Translate.cs,Load,The length of the statement  "                                IRC.DeliverMessage("Error - unable to translate the message (wrong language?) check debug logs for more information"' request.Channel); " is 135.
Long Statement,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The length of the statement  "                        channel.PrimaryInstance.Network.Transfer("KICK " + channel.Name + " " + user.Nick + " :" + reason' libirc.Defs.Priority.High); " is 126.
Long Statement,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The length of the statement  "                        channel.PrimaryInstance.Network.Transfer("KICK " + channel.Name + " " + user.Nick + " :" + reason' libirc.Defs.Priority.High); " is 126.
Long Statement,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The length of the statement  "                            channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick' libirc.Defs.Priority.Low); " is 131.
Long Statement,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The length of the statement  "                            channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick' libirc.Defs.Priority.Low); " is 131.
Long Statement,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The length of the statement  "                            channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick' libirc.Defs.Priority.Low); " is 131.
Long Statement,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The length of the statement  "                        channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " +b " + nick + "!*@*$##fix_your_connection"' libirc.Defs.Priority.High); " is 139.
Long Statement,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The length of the statement  "                            channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick' libirc.Defs.Priority.Low); " is 131.
Long Statement,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The length of the statement  "                        channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -b " + nick + "!*@*$##fix_your_connection"' libirc.Defs.Priority.High); " is 139.
Long Statement,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The length of the statement  "                            channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick' libirc.Defs.Priority.Low); " is 131.
Long Statement,wmib.Extensions.RssFeed,Feed,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Feed.cs,Load,The length of the statement  "                                RSS.m.DebugLog("unable to load item for feed item name: " + i.Name + " channel name " + owner.Name + " item was removed"); " is 122.
Long Statement,wmib.Extensions.RssFeed,Feed,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Feed.cs,StyleItem,The length of the statement  "                    IRC.DeliverMessage("Item now has a different style you can restore the default style by removing this value"' owner.Name); " is 122.
Long Statement,wmib.Extensions.RssFeed,RSS,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Module.cs,Extension_DumpHtml,The length of the statement  "                        HTML += "\n<tr><td>" + feed.Name + "</td><td><a href=\"" + feed.URL + "\">" + feed.URL + "</a></td><td>" + feed.template + "</td><td>" + (!feed.disabled) + "</td></tr>"; " is 169.
Long Statement,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,CompareLists,The length of the statement  "                if (item.Link != target[curr].Link || item.Description != target[curr].Description || target[curr].PublishDate != item.PublishDate) " is 131.
Long Statement,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ContainsItem,The length of the statement  "                if (Item.Link == item.Link && Item.Title == item.Title && item.Description == Item.Description && Item.PublishDate == item.PublishDate) " is 135.
Long Statement,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ReadFeed,The length of the statement  "                    IRC.DeliverMessage("Unable to parse the feed from " + url + " this url is probably not a valid rss' the feed will be disabled' until you re-enable it by typing @rss+ " + item.Name' channel); " is 190.
Long Statement,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ReadFeed,The length of the statement  "                    IRC.DeliverMessage("Unable to parse the feed from " + url + " this url is probably not a valid rss' the feed will be disabled' until you re-enable it by typing @rss+ " + item.Name' channel); " is 190.
Complex Conditional,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,IsValid,The conditional expression  "i < 48 || i > 122 || (i > 90 && i < 97) || (i > 57 && i < 65)"  is complex.
Complex Conditional,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,RetrieveStatus2,The conditional expression  "(!by_host && (nick.ToUpper() == xx.nick.ToUpper())) || (by_host && (nick.ToUpper() == xx.hostname.ToUpper()))"  is complex.
Complex Conditional,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The conditional expression  "ms == "i have a question" || ms == "can i ask a question" || ms == "is anyone willing to help" || ms == "can i ask" || ms == "i got a question" || ms == "can i have a question" || ms == "can someone help me" || ms == "i need help""  is complex.
Complex Conditional,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The conditional expression  "ms == "is anyone here" || ms == "is anybody here" || ms == "is anybody there" || ms == "is some one there" || ms == "is someone there" || ms == "is someone here" || ms == "anyone here" || ms == "someone here""  is complex.
Complex Conditional,wmib.Extensions,Thanks,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Thanks\Thanks.cs,Hook_PRIV,The conditional expression  "message.Contains(channel.PrimaryInstance.Nick) && !message.Contains("thanks to") && (message.Contains("thanks") || message.Contains("thank you")) && !message.Contains("no thank")"  is complex.
Complex Conditional,wmib.Extensions,Translate,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Translate\Translate.cs,IsValid,The conditional expression  "language_code.Contains("+") ||                  language_code.Contains("-") ||                  language_code.Contains("_") ||                  language_code.Contains("&") ||                  language_code.Contains("?")"  is complex.
Complex Conditional,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ContainsItem,The conditional expression  "Item.Link == item.Link && Item.Title == item.Title && item.Description == Item.Description && Item.PublishDate == item.PublishDate"  is complex.
Empty Catch Block,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,StartRegex,The method has an empty catch block.
Magic Number,wmib.Extensions,HtmlDump,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,Construct,The following statement contains a magic number: Version = new Version(1' 0' 8' 6);
Magic Number,wmib.Extensions,HtmlDump,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,Construct,The following statement contains a magic number: Version = new Version(1' 0' 8' 6);
Magic Number,wmib.Extensions,HtmlDump,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,Load,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,wmib.Extensions,HtmlDump,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,Load,The following statement contains a magic number: while (true)              {                  foreach (Channel chan in Configuration.ChannelList)                  {                      if (GetConfig(chan' "HTML.Update"' true))                      {                          DebugLog("Making dump for " + chan.Name);                          HtmlDumpObj dump = new HtmlDumpObj(chan);                          dump.Make();                          SetConfig(chan' "HTML.Update"' false);                      }                  }                  HtmlDumpObj.Stat();                  Thread.Sleep(320000);              }
Magic Number,wmib.Extensions,HtmlDumpObj,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,getSize,The following statement contains a magic number: b = b / 1024;
Magic Number,wmib.Extensions,HtmlDumpObj,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,Stat,The following statement contains a magic number: try              {                  Thread.Sleep(2000);                  StringBuilder builder = new StringBuilder(CreateHeader("System info"));                  builder.AppendLine("<h1>System data</h1><p class=info>List of channels:</p>");                  builder.AppendLine("<table class=\"channels\">");                  builder.AppendLine("<tr><th>Channel name</th><th>Options</th></tr>");                  foreach (Channel chan in Configuration.ChannelList)                  {                      builder.AppendFormat("<tr id=\"{0}\">"' chan.Name.Replace("#"'"H-"));                      string user_count = "null";                      if (chan.GetChannel() != null)                          user_count = chan.GetChannel().UserCount.ToString();                      builder.AppendFormat("<td><a href=\"{0}.htm\"><span class=\"channel-name\">{1}</span></a> (<span class=\"user-count\">" + user_count + "</span>)</td><td>\n"' HttpUtility.UrlEncode(chan.Name)'                          chan.Name);                      builder.AppendLine("infobot: " + Module.GetConfig(chan' "Infobot.Enabled"' true)                                         + "' Recent Changes: " + Module.GetConfig(chan' "RC.Enabled"' false)                                         + "' Logs: " + Module.GetConfig(chan' "Logging.Enabled"' false)                                         + "' Suppress: " + chan.Suppress                                         + "' Seen: " + Module.GetConfig(chan' "Seen.Enabled"' false)                                         + "' rss: " + Module.GetConfig(chan' "Rss.Enabled"' false)                                         + "' statistics: " + Module.GetConfig(chan' "Statistics.Enabled"' false)                                         + " Instance: " + chan.PrimaryInstance.Nick + "</td></tr>");                  }                  builder.AppendLine("</table>Uptime: " + Core.getUptime() + " Memory usage: " +                          (Process.GetCurrentProcess().PrivateMemorySize64 / 1024) + "kb Database size: " + getSize());                  foreach (Module mm in ExtensionHandler.ExtensionList)                  {                      string text = string.Empty;                      mm.Hook_BeforeSysWeb(ref text);                      builder.AppendLine(text);                  }                  builder.AppendFormat("<br />Core version: {0}<br />\n"' Configuration.System.Version);                  builder.AppendFormat("<h2>Bots</h2>");                  builder.AppendFormat("<table class=\"text\"><th>Name</th><th>Status</th><th>Bouncer</th>");                  foreach (Instance xx in Instance.Instances.Values)                  {                      string status = "Online in " + xx.ChannelCount + " channels";                      if (!xx.IsWorking || !xx.IsConnected)                      {                          status = "Disconnected";                      }                      builder.AppendLine("<tr><td>" + xx.Nick + "</td><td>" + status + "</td><td>" + xx.Port + "</td></tr>");                  }                  builder.AppendLine("</table>");                  builder.AppendLine("<h2>Permissions</h2>");                  builder.AppendLine("<table class=\"permissions\">");                  builder.AppendLine("  <tr><th>Role</th><th>Permissions</th><th>Roles</th></tr>");                  lock (Security.Roles)                  {                      foreach (string rn in Security.Roles.Keys)                      {                          Security.Role role = Security.Roles[rn];                          builder.AppendLine("<tr><td valign=top>" + rn + "</td><td valign=top>");                          foreach (string permission in role.Permissions)                              builder.AppendLine(permission + "<br>");                          builder.AppendLine("</td><td valign=top>");                          foreach (Security.Role sr in role.Roles)                              builder.AppendLine(Security.GetNameOfRole(sr) + "</br>");                          builder.AppendLine("</td></tr>");                      }                  }                  builder.AppendLine("</table>");                  builder.AppendLine("<h2>Plugins</h2>");                  builder.AppendLine("<table class=\"modules\">");                  foreach (Module module in ExtensionHandler.ExtensionList)                  {                      string status = "Terminated";                      if (module.IsWorking)                      {                          status = "OK";                          if (module.Warning)                          {                              status += " - RECOVERING";                          }                      }                      builder.AppendLine("<tr><td>" + module.Name + " (" + module.Version + ")</td><td>" + status +                                         " (startup date: " + module.Date + ")</td></tr>");                  }                  builder.AppendLine("</table>");                  builder.AppendLine();                  builder.AppendLine(CreateFooter());                  File.WriteAllText(Configuration.Paths.DumpDir + "/systemdata.htm"' builder.ToString());              }              catch (Exception b)              {                  Core.HandleException(b' "HtmlDump");              }
Magic Number,wmib.Extensions,HtmlDumpObj,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\HtmlDump\HtmlDump.cs,Stat,The following statement contains a magic number: try              {                  Thread.Sleep(2000);                  StringBuilder builder = new StringBuilder(CreateHeader("System info"));                  builder.AppendLine("<h1>System data</h1><p class=info>List of channels:</p>");                  builder.AppendLine("<table class=\"channels\">");                  builder.AppendLine("<tr><th>Channel name</th><th>Options</th></tr>");                  foreach (Channel chan in Configuration.ChannelList)                  {                      builder.AppendFormat("<tr id=\"{0}\">"' chan.Name.Replace("#"'"H-"));                      string user_count = "null";                      if (chan.GetChannel() != null)                          user_count = chan.GetChannel().UserCount.ToString();                      builder.AppendFormat("<td><a href=\"{0}.htm\"><span class=\"channel-name\">{1}</span></a> (<span class=\"user-count\">" + user_count + "</span>)</td><td>\n"' HttpUtility.UrlEncode(chan.Name)'                          chan.Name);                      builder.AppendLine("infobot: " + Module.GetConfig(chan' "Infobot.Enabled"' true)                                         + "' Recent Changes: " + Module.GetConfig(chan' "RC.Enabled"' false)                                         + "' Logs: " + Module.GetConfig(chan' "Logging.Enabled"' false)                                         + "' Suppress: " + chan.Suppress                                         + "' Seen: " + Module.GetConfig(chan' "Seen.Enabled"' false)                                         + "' rss: " + Module.GetConfig(chan' "Rss.Enabled"' false)                                         + "' statistics: " + Module.GetConfig(chan' "Statistics.Enabled"' false)                                         + " Instance: " + chan.PrimaryInstance.Nick + "</td></tr>");                  }                  builder.AppendLine("</table>Uptime: " + Core.getUptime() + " Memory usage: " +                          (Process.GetCurrentProcess().PrivateMemorySize64 / 1024) + "kb Database size: " + getSize());                  foreach (Module mm in ExtensionHandler.ExtensionList)                  {                      string text = string.Empty;                      mm.Hook_BeforeSysWeb(ref text);                      builder.AppendLine(text);                  }                  builder.AppendFormat("<br />Core version: {0}<br />\n"' Configuration.System.Version);                  builder.AppendFormat("<h2>Bots</h2>");                  builder.AppendFormat("<table class=\"text\"><th>Name</th><th>Status</th><th>Bouncer</th>");                  foreach (Instance xx in Instance.Instances.Values)                  {                      string status = "Online in " + xx.ChannelCount + " channels";                      if (!xx.IsWorking || !xx.IsConnected)                      {                          status = "Disconnected";                      }                      builder.AppendLine("<tr><td>" + xx.Nick + "</td><td>" + status + "</td><td>" + xx.Port + "</td></tr>");                  }                  builder.AppendLine("</table>");                  builder.AppendLine("<h2>Permissions</h2>");                  builder.AppendLine("<table class=\"permissions\">");                  builder.AppendLine("  <tr><th>Role</th><th>Permissions</th><th>Roles</th></tr>");                  lock (Security.Roles)                  {                      foreach (string rn in Security.Roles.Keys)                      {                          Security.Role role = Security.Roles[rn];                          builder.AppendLine("<tr><td valign=top>" + rn + "</td><td valign=top>");                          foreach (string permission in role.Permissions)                              builder.AppendLine(permission + "<br>");                          builder.AppendLine("</td><td valign=top>");                          foreach (Security.Role sr in role.Roles)                              builder.AppendLine(Security.GetNameOfRole(sr) + "</br>");                          builder.AppendLine("</td></tr>");                      }                  }                  builder.AppendLine("</table>");                  builder.AppendLine("<h2>Plugins</h2>");                  builder.AppendLine("<table class=\"modules\">");                  foreach (Module module in ExtensionHandler.ExtensionList)                  {                      string status = "Terminated";                      if (module.IsWorking)                      {                          status = "OK";                          if (module.Warning)                          {                              status += " - RECOVERING";                          }                      }                      builder.AppendLine("<tr><td>" + module.Name + " (" + module.Version + ")</td><td>" + status +                                         " (startup date: " + module.Date + ")</td></tr>");                  }                  builder.AppendLine("</table>");                  builder.AppendLine();                  builder.AppendLine(CreateFooter());                  File.WriteAllText(Configuration.Paths.DumpDir + "/systemdata.htm"' builder.ToString());              }              catch (Exception b)              {                  Core.HandleException(b' "HtmlDump");              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotExec,The following statement contains a magic number: try              {                  // check if it starts with the prefix                  if (!message.StartsWith(prefix))                  {                      return true;                  }                  // check if this channel is allowed to access the db                  Channel data = RetrieveMasterDBChannel(chan);                  bool Allowed = (data != null);                  // handle prefix                  message = message.Substring(1);                  Infobot infobot = null;                    if (Allowed)                      infobot = (Infobot)data.RetrieveObject("Infobot");                    // check if key is ignored                  if (IsIgnored(message' chan))                      return true;                    // split by parameters so we can easily get the arguments user provided                  List<string> Parameters = new List<string>(message.Split(' '));                    // check if key has some parameters or command                  if (Parameters.Count > 1)                  {                      // someone want to create a new key                      if (Parameters[1] == "is" || Parameters[1] == "act")                      {                          bool isAct = Parameters[1] == "act";                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key;                              if (!isAct)                              {                                  key = message.Substring(message.IndexOf(" is") + 4);                              }                              else                              {                                  key = message.Substring(message.IndexOf(" act") + 5);                              }                              if (infobot != null)                              {                                  infobot.SetKey(key' Parameters[0]' user.Nick' chan' isAct);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      } else if (Parameters[1] == "replace")                      {                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key = message.Substring(message.IndexOf(" replace") + 9);                              if (infobot != null)                              {                                  infobot.replaceKey(key' Parameters[0]' user.Nick' chan);                                  return true;                              }                          }                          else if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // alias                      bool force = false;                      if (Parameters[1] == "alias" || Parameters[1] == "force-alias")                      {                          if (Parameters[1] == "force-alias")                          {                              force = true;                          }                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("InvalidAlias"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  infobot.aliasKey(message.Substring(message.IndexOf(" alias") + 7)' Parameters[0]' ""' chan' force);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                      if (Parameters[1] == "unalias")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  lock (infobot)                                  {                                      foreach (InfobotAlias b in infobot.Aliases)                                      {                                          if (b.Name == Parameters[0])                                          {                                              infobot.Aliases.Remove(b);                                              IRC.DeliverMessage(messages.Localize("AliasRemoved"' chan.Language)' chan);                                              this.StoreDB();                                              return false;                                          }                                      }                                  }                              }                              return false;                          }                          if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // remove key                      if (Parameters[1] == "del")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              if (infobot != null)                              {                                  infobot.rmKey(Parameters[0]' ""' chan);                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                  }                  if (!Allowed)                  {                      return true;                  }                    InfobotKey Key = infobot.GetKey(Parameters[0]);                  // let's try to deliver this as a key                  if (DeliverKey(Key' message' chan' user))                  {                      return true;                  }                                    string lower = Parameters[0].ToLower();                  // there is no key with this name' let's check if there is an alias for such a key                  lock (infobot)                  {                      foreach (InfobotAlias alias in infobot.Aliases)                      {                          if (Sensitive)                          {                              if (alias.Name == Parameters[0])                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                          else                          {                              if (alias.Name.ToLower() == lower)                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.auto-complete"' false))                  {                      if (infobot != null)                      {                          List<string> results = new List<string>();                          lock (infobot)                          {                              foreach (InfobotKey f in infobot.Keys)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                              foreach (InfobotAlias f in infobot.Aliases)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                          }                            if (results.Count == 1)                          {                              InfobotKey Key_ = infobot.GetKey(results[0]);                              if (DeliverKey(Key_' message' chan' user))                              {                                  return true;                              }                              lock (infobot)                              {                                  foreach (InfobotAlias alias in infobot.Aliases)                                  {                                      if (alias.Name == results[0])                                      {                                          Key_ = infobot.GetKey(alias.Name);                                          if (DeliverKey(Key_' message' chan' user))                                          {                                              return true;                                          }                                      }                                  }                              }                          }                            if (results.Count > 1)                          {                              if (Module.GetConfig(chan' "Infobot.Sorted"' false))                              {                                  results.Sort();                              }                              string x = "";                              foreach (string ix in results)                              {                                  x += ix + "' ";                              }                              IRC.DeliverMessage(messages.Localize("infobot-c-e"' chan.Language' new List<string> { x })' chan);                              return true;                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.Help"' false) && infobot != null)                  {                      List<string> Sugg = new List<string>();                      string key = Parameters[0].ToLower();                      lock (infobot)                      {                          foreach (InfobotKey f in infobot.Keys)                          {                              if (!Sugg.Contains(f.Key) && (f.Text.ToLower().Contains(key) || f.Key.ToLower().Contains(key)))                              {                                  Sugg.Add(f.Key);                              }                          }                      }                        if (Sugg.Count > 0)                      {                          string x = "";                          if (Module.GetConfig(chan' "Infobot.Sorted"' false))                          {                              Sugg.Sort();                          }                          foreach (string a in Sugg)                          {                              x += "!" + a + "' ";                          }                          IRC.DeliverMessage(messages.Localize("infobot-help"' chan.Language' new List<string> { x })' chan.Name);                          return true;                      }                  }              }              catch (Exception b)              {                  Parent.HandleException(b);              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotExec,The following statement contains a magic number: try              {                  // check if it starts with the prefix                  if (!message.StartsWith(prefix))                  {                      return true;                  }                  // check if this channel is allowed to access the db                  Channel data = RetrieveMasterDBChannel(chan);                  bool Allowed = (data != null);                  // handle prefix                  message = message.Substring(1);                  Infobot infobot = null;                    if (Allowed)                      infobot = (Infobot)data.RetrieveObject("Infobot");                    // check if key is ignored                  if (IsIgnored(message' chan))                      return true;                    // split by parameters so we can easily get the arguments user provided                  List<string> Parameters = new List<string>(message.Split(' '));                    // check if key has some parameters or command                  if (Parameters.Count > 1)                  {                      // someone want to create a new key                      if (Parameters[1] == "is" || Parameters[1] == "act")                      {                          bool isAct = Parameters[1] == "act";                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key;                              if (!isAct)                              {                                  key = message.Substring(message.IndexOf(" is") + 4);                              }                              else                              {                                  key = message.Substring(message.IndexOf(" act") + 5);                              }                              if (infobot != null)                              {                                  infobot.SetKey(key' Parameters[0]' user.Nick' chan' isAct);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      } else if (Parameters[1] == "replace")                      {                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key = message.Substring(message.IndexOf(" replace") + 9);                              if (infobot != null)                              {                                  infobot.replaceKey(key' Parameters[0]' user.Nick' chan);                                  return true;                              }                          }                          else if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // alias                      bool force = false;                      if (Parameters[1] == "alias" || Parameters[1] == "force-alias")                      {                          if (Parameters[1] == "force-alias")                          {                              force = true;                          }                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("InvalidAlias"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  infobot.aliasKey(message.Substring(message.IndexOf(" alias") + 7)' Parameters[0]' ""' chan' force);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                      if (Parameters[1] == "unalias")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  lock (infobot)                                  {                                      foreach (InfobotAlias b in infobot.Aliases)                                      {                                          if (b.Name == Parameters[0])                                          {                                              infobot.Aliases.Remove(b);                                              IRC.DeliverMessage(messages.Localize("AliasRemoved"' chan.Language)' chan);                                              this.StoreDB();                                              return false;                                          }                                      }                                  }                              }                              return false;                          }                          if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // remove key                      if (Parameters[1] == "del")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              if (infobot != null)                              {                                  infobot.rmKey(Parameters[0]' ""' chan);                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                  }                  if (!Allowed)                  {                      return true;                  }                    InfobotKey Key = infobot.GetKey(Parameters[0]);                  // let's try to deliver this as a key                  if (DeliverKey(Key' message' chan' user))                  {                      return true;                  }                                    string lower = Parameters[0].ToLower();                  // there is no key with this name' let's check if there is an alias for such a key                  lock (infobot)                  {                      foreach (InfobotAlias alias in infobot.Aliases)                      {                          if (Sensitive)                          {                              if (alias.Name == Parameters[0])                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                          else                          {                              if (alias.Name.ToLower() == lower)                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.auto-complete"' false))                  {                      if (infobot != null)                      {                          List<string> results = new List<string>();                          lock (infobot)                          {                              foreach (InfobotKey f in infobot.Keys)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                              foreach (InfobotAlias f in infobot.Aliases)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                          }                            if (results.Count == 1)                          {                              InfobotKey Key_ = infobot.GetKey(results[0]);                              if (DeliverKey(Key_' message' chan' user))                              {                                  return true;                              }                              lock (infobot)                              {                                  foreach (InfobotAlias alias in infobot.Aliases)                                  {                                      if (alias.Name == results[0])                                      {                                          Key_ = infobot.GetKey(alias.Name);                                          if (DeliverKey(Key_' message' chan' user))                                          {                                              return true;                                          }                                      }                                  }                              }                          }                            if (results.Count > 1)                          {                              if (Module.GetConfig(chan' "Infobot.Sorted"' false))                              {                                  results.Sort();                              }                              string x = "";                              foreach (string ix in results)                              {                                  x += ix + "' ";                              }                              IRC.DeliverMessage(messages.Localize("infobot-c-e"' chan.Language' new List<string> { x })' chan);                              return true;                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.Help"' false) && infobot != null)                  {                      List<string> Sugg = new List<string>();                      string key = Parameters[0].ToLower();                      lock (infobot)                      {                          foreach (InfobotKey f in infobot.Keys)                          {                              if (!Sugg.Contains(f.Key) && (f.Text.ToLower().Contains(key) || f.Key.ToLower().Contains(key)))                              {                                  Sugg.Add(f.Key);                              }                          }                      }                        if (Sugg.Count > 0)                      {                          string x = "";                          if (Module.GetConfig(chan' "Infobot.Sorted"' false))                          {                              Sugg.Sort();                          }                          foreach (string a in Sugg)                          {                              x += "!" + a + "' ";                          }                          IRC.DeliverMessage(messages.Localize("infobot-help"' chan.Language' new List<string> { x })' chan.Name);                          return true;                      }                  }              }              catch (Exception b)              {                  Parent.HandleException(b);              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotExec,The following statement contains a magic number: try              {                  // check if it starts with the prefix                  if (!message.StartsWith(prefix))                  {                      return true;                  }                  // check if this channel is allowed to access the db                  Channel data = RetrieveMasterDBChannel(chan);                  bool Allowed = (data != null);                  // handle prefix                  message = message.Substring(1);                  Infobot infobot = null;                    if (Allowed)                      infobot = (Infobot)data.RetrieveObject("Infobot");                    // check if key is ignored                  if (IsIgnored(message' chan))                      return true;                    // split by parameters so we can easily get the arguments user provided                  List<string> Parameters = new List<string>(message.Split(' '));                    // check if key has some parameters or command                  if (Parameters.Count > 1)                  {                      // someone want to create a new key                      if (Parameters[1] == "is" || Parameters[1] == "act")                      {                          bool isAct = Parameters[1] == "act";                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key;                              if (!isAct)                              {                                  key = message.Substring(message.IndexOf(" is") + 4);                              }                              else                              {                                  key = message.Substring(message.IndexOf(" act") + 5);                              }                              if (infobot != null)                              {                                  infobot.SetKey(key' Parameters[0]' user.Nick' chan' isAct);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      } else if (Parameters[1] == "replace")                      {                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key = message.Substring(message.IndexOf(" replace") + 9);                              if (infobot != null)                              {                                  infobot.replaceKey(key' Parameters[0]' user.Nick' chan);                                  return true;                              }                          }                          else if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // alias                      bool force = false;                      if (Parameters[1] == "alias" || Parameters[1] == "force-alias")                      {                          if (Parameters[1] == "force-alias")                          {                              force = true;                          }                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("InvalidAlias"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  infobot.aliasKey(message.Substring(message.IndexOf(" alias") + 7)' Parameters[0]' ""' chan' force);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                      if (Parameters[1] == "unalias")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  lock (infobot)                                  {                                      foreach (InfobotAlias b in infobot.Aliases)                                      {                                          if (b.Name == Parameters[0])                                          {                                              infobot.Aliases.Remove(b);                                              IRC.DeliverMessage(messages.Localize("AliasRemoved"' chan.Language)' chan);                                              this.StoreDB();                                              return false;                                          }                                      }                                  }                              }                              return false;                          }                          if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // remove key                      if (Parameters[1] == "del")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              if (infobot != null)                              {                                  infobot.rmKey(Parameters[0]' ""' chan);                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                  }                  if (!Allowed)                  {                      return true;                  }                    InfobotKey Key = infobot.GetKey(Parameters[0]);                  // let's try to deliver this as a key                  if (DeliverKey(Key' message' chan' user))                  {                      return true;                  }                                    string lower = Parameters[0].ToLower();                  // there is no key with this name' let's check if there is an alias for such a key                  lock (infobot)                  {                      foreach (InfobotAlias alias in infobot.Aliases)                      {                          if (Sensitive)                          {                              if (alias.Name == Parameters[0])                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                          else                          {                              if (alias.Name.ToLower() == lower)                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.auto-complete"' false))                  {                      if (infobot != null)                      {                          List<string> results = new List<string>();                          lock (infobot)                          {                              foreach (InfobotKey f in infobot.Keys)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                              foreach (InfobotAlias f in infobot.Aliases)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                          }                            if (results.Count == 1)                          {                              InfobotKey Key_ = infobot.GetKey(results[0]);                              if (DeliverKey(Key_' message' chan' user))                              {                                  return true;                              }                              lock (infobot)                              {                                  foreach (InfobotAlias alias in infobot.Aliases)                                  {                                      if (alias.Name == results[0])                                      {                                          Key_ = infobot.GetKey(alias.Name);                                          if (DeliverKey(Key_' message' chan' user))                                          {                                              return true;                                          }                                      }                                  }                              }                          }                            if (results.Count > 1)                          {                              if (Module.GetConfig(chan' "Infobot.Sorted"' false))                              {                                  results.Sort();                              }                              string x = "";                              foreach (string ix in results)                              {                                  x += ix + "' ";                              }                              IRC.DeliverMessage(messages.Localize("infobot-c-e"' chan.Language' new List<string> { x })' chan);                              return true;                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.Help"' false) && infobot != null)                  {                      List<string> Sugg = new List<string>();                      string key = Parameters[0].ToLower();                      lock (infobot)                      {                          foreach (InfobotKey f in infobot.Keys)                          {                              if (!Sugg.Contains(f.Key) && (f.Text.ToLower().Contains(key) || f.Key.ToLower().Contains(key)))                              {                                  Sugg.Add(f.Key);                              }                          }                      }                        if (Sugg.Count > 0)                      {                          string x = "";                          if (Module.GetConfig(chan' "Infobot.Sorted"' false))                          {                              Sugg.Sort();                          }                          foreach (string a in Sugg)                          {                              x += "!" + a + "' ";                          }                          IRC.DeliverMessage(messages.Localize("infobot-help"' chan.Language' new List<string> { x })' chan.Name);                          return true;                      }                  }              }              catch (Exception b)              {                  Parent.HandleException(b);              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotExec,The following statement contains a magic number: try              {                  // check if it starts with the prefix                  if (!message.StartsWith(prefix))                  {                      return true;                  }                  // check if this channel is allowed to access the db                  Channel data = RetrieveMasterDBChannel(chan);                  bool Allowed = (data != null);                  // handle prefix                  message = message.Substring(1);                  Infobot infobot = null;                    if (Allowed)                      infobot = (Infobot)data.RetrieveObject("Infobot");                    // check if key is ignored                  if (IsIgnored(message' chan))                      return true;                    // split by parameters so we can easily get the arguments user provided                  List<string> Parameters = new List<string>(message.Split(' '));                    // check if key has some parameters or command                  if (Parameters.Count > 1)                  {                      // someone want to create a new key                      if (Parameters[1] == "is" || Parameters[1] == "act")                      {                          bool isAct = Parameters[1] == "act";                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key;                              if (!isAct)                              {                                  key = message.Substring(message.IndexOf(" is") + 4);                              }                              else                              {                                  key = message.Substring(message.IndexOf(" act") + 5);                              }                              if (infobot != null)                              {                                  infobot.SetKey(key' Parameters[0]' user.Nick' chan' isAct);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      } else if (Parameters[1] == "replace")                      {                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key = message.Substring(message.IndexOf(" replace") + 9);                              if (infobot != null)                              {                                  infobot.replaceKey(key' Parameters[0]' user.Nick' chan);                                  return true;                              }                          }                          else if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // alias                      bool force = false;                      if (Parameters[1] == "alias" || Parameters[1] == "force-alias")                      {                          if (Parameters[1] == "force-alias")                          {                              force = true;                          }                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("InvalidAlias"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  infobot.aliasKey(message.Substring(message.IndexOf(" alias") + 7)' Parameters[0]' ""' chan' force);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                      if (Parameters[1] == "unalias")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  lock (infobot)                                  {                                      foreach (InfobotAlias b in infobot.Aliases)                                      {                                          if (b.Name == Parameters[0])                                          {                                              infobot.Aliases.Remove(b);                                              IRC.DeliverMessage(messages.Localize("AliasRemoved"' chan.Language)' chan);                                              this.StoreDB();                                              return false;                                          }                                      }                                  }                              }                              return false;                          }                          if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // remove key                      if (Parameters[1] == "del")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              if (infobot != null)                              {                                  infobot.rmKey(Parameters[0]' ""' chan);                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                  }                  if (!Allowed)                  {                      return true;                  }                    InfobotKey Key = infobot.GetKey(Parameters[0]);                  // let's try to deliver this as a key                  if (DeliverKey(Key' message' chan' user))                  {                      return true;                  }                                    string lower = Parameters[0].ToLower();                  // there is no key with this name' let's check if there is an alias for such a key                  lock (infobot)                  {                      foreach (InfobotAlias alias in infobot.Aliases)                      {                          if (Sensitive)                          {                              if (alias.Name == Parameters[0])                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                          else                          {                              if (alias.Name.ToLower() == lower)                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.auto-complete"' false))                  {                      if (infobot != null)                      {                          List<string> results = new List<string>();                          lock (infobot)                          {                              foreach (InfobotKey f in infobot.Keys)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                              foreach (InfobotAlias f in infobot.Aliases)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                          }                            if (results.Count == 1)                          {                              InfobotKey Key_ = infobot.GetKey(results[0]);                              if (DeliverKey(Key_' message' chan' user))                              {                                  return true;                              }                              lock (infobot)                              {                                  foreach (InfobotAlias alias in infobot.Aliases)                                  {                                      if (alias.Name == results[0])                                      {                                          Key_ = infobot.GetKey(alias.Name);                                          if (DeliverKey(Key_' message' chan' user))                                          {                                              return true;                                          }                                      }                                  }                              }                          }                            if (results.Count > 1)                          {                              if (Module.GetConfig(chan' "Infobot.Sorted"' false))                              {                                  results.Sort();                              }                              string x = "";                              foreach (string ix in results)                              {                                  x += ix + "' ";                              }                              IRC.DeliverMessage(messages.Localize("infobot-c-e"' chan.Language' new List<string> { x })' chan);                              return true;                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.Help"' false) && infobot != null)                  {                      List<string> Sugg = new List<string>();                      string key = Parameters[0].ToLower();                      lock (infobot)                      {                          foreach (InfobotKey f in infobot.Keys)                          {                              if (!Sugg.Contains(f.Key) && (f.Text.ToLower().Contains(key) || f.Key.ToLower().Contains(key)))                              {                                  Sugg.Add(f.Key);                              }                          }                      }                        if (Sugg.Count > 0)                      {                          string x = "";                          if (Module.GetConfig(chan' "Infobot.Sorted"' false))                          {                              Sugg.Sort();                          }                          foreach (string a in Sugg)                          {                              x += "!" + a + "' ";                          }                          IRC.DeliverMessage(messages.Localize("infobot-help"' chan.Language' new List<string> { x })' chan.Name);                          return true;                      }                  }              }              catch (Exception b)              {                  Parent.HandleException(b);              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotExec,The following statement contains a magic number: try              {                  // check if it starts with the prefix                  if (!message.StartsWith(prefix))                  {                      return true;                  }                  // check if this channel is allowed to access the db                  Channel data = RetrieveMasterDBChannel(chan);                  bool Allowed = (data != null);                  // handle prefix                  message = message.Substring(1);                  Infobot infobot = null;                    if (Allowed)                      infobot = (Infobot)data.RetrieveObject("Infobot");                    // check if key is ignored                  if (IsIgnored(message' chan))                      return true;                    // split by parameters so we can easily get the arguments user provided                  List<string> Parameters = new List<string>(message.Split(' '));                    // check if key has some parameters or command                  if (Parameters.Count > 1)                  {                      // someone want to create a new key                      if (Parameters[1] == "is" || Parameters[1] == "act")                      {                          bool isAct = Parameters[1] == "act";                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key;                              if (!isAct)                              {                                  key = message.Substring(message.IndexOf(" is") + 4);                              }                              else                              {                                  key = message.Substring(message.IndexOf(" act") + 5);                              }                              if (infobot != null)                              {                                  infobot.SetKey(key' Parameters[0]' user.Nick' chan' isAct);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      } else if (Parameters[1] == "replace")                      {                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key = message.Substring(message.IndexOf(" replace") + 9);                              if (infobot != null)                              {                                  infobot.replaceKey(key' Parameters[0]' user.Nick' chan);                                  return true;                              }                          }                          else if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // alias                      bool force = false;                      if (Parameters[1] == "alias" || Parameters[1] == "force-alias")                      {                          if (Parameters[1] == "force-alias")                          {                              force = true;                          }                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("InvalidAlias"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  infobot.aliasKey(message.Substring(message.IndexOf(" alias") + 7)' Parameters[0]' ""' chan' force);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                      if (Parameters[1] == "unalias")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  lock (infobot)                                  {                                      foreach (InfobotAlias b in infobot.Aliases)                                      {                                          if (b.Name == Parameters[0])                                          {                                              infobot.Aliases.Remove(b);                                              IRC.DeliverMessage(messages.Localize("AliasRemoved"' chan.Language)' chan);                                              this.StoreDB();                                              return false;                                          }                                      }                                  }                              }                              return false;                          }                          if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // remove key                      if (Parameters[1] == "del")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              if (infobot != null)                              {                                  infobot.rmKey(Parameters[0]' ""' chan);                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                  }                  if (!Allowed)                  {                      return true;                  }                    InfobotKey Key = infobot.GetKey(Parameters[0]);                  // let's try to deliver this as a key                  if (DeliverKey(Key' message' chan' user))                  {                      return true;                  }                                    string lower = Parameters[0].ToLower();                  // there is no key with this name' let's check if there is an alias for such a key                  lock (infobot)                  {                      foreach (InfobotAlias alias in infobot.Aliases)                      {                          if (Sensitive)                          {                              if (alias.Name == Parameters[0])                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                          else                          {                              if (alias.Name.ToLower() == lower)                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.auto-complete"' false))                  {                      if (infobot != null)                      {                          List<string> results = new List<string>();                          lock (infobot)                          {                              foreach (InfobotKey f in infobot.Keys)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                              foreach (InfobotAlias f in infobot.Aliases)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                          }                            if (results.Count == 1)                          {                              InfobotKey Key_ = infobot.GetKey(results[0]);                              if (DeliverKey(Key_' message' chan' user))                              {                                  return true;                              }                              lock (infobot)                              {                                  foreach (InfobotAlias alias in infobot.Aliases)                                  {                                      if (alias.Name == results[0])                                      {                                          Key_ = infobot.GetKey(alias.Name);                                          if (DeliverKey(Key_' message' chan' user))                                          {                                              return true;                                          }                                      }                                  }                              }                          }                            if (results.Count > 1)                          {                              if (Module.GetConfig(chan' "Infobot.Sorted"' false))                              {                                  results.Sort();                              }                              string x = "";                              foreach (string ix in results)                              {                                  x += ix + "' ";                              }                              IRC.DeliverMessage(messages.Localize("infobot-c-e"' chan.Language' new List<string> { x })' chan);                              return true;                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.Help"' false) && infobot != null)                  {                      List<string> Sugg = new List<string>();                      string key = Parameters[0].ToLower();                      lock (infobot)                      {                          foreach (InfobotKey f in infobot.Keys)                          {                              if (!Sugg.Contains(f.Key) && (f.Text.ToLower().Contains(key) || f.Key.ToLower().Contains(key)))                              {                                  Sugg.Add(f.Key);                              }                          }                      }                        if (Sugg.Count > 0)                      {                          string x = "";                          if (Module.GetConfig(chan' "Infobot.Sorted"' false))                          {                              Sugg.Sort();                          }                          foreach (string a in Sugg)                          {                              x += "!" + a + "' ";                          }                          IRC.DeliverMessage(messages.Localize("infobot-help"' chan.Language' new List<string> { x })' chan.Name);                          return true;                      }                  }              }              catch (Exception b)              {                  Parent.HandleException(b);              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotExec,The following statement contains a magic number: try              {                  // check if it starts with the prefix                  if (!message.StartsWith(prefix))                  {                      return true;                  }                  // check if this channel is allowed to access the db                  Channel data = RetrieveMasterDBChannel(chan);                  bool Allowed = (data != null);                  // handle prefix                  message = message.Substring(1);                  Infobot infobot = null;                    if (Allowed)                      infobot = (Infobot)data.RetrieveObject("Infobot");                    // check if key is ignored                  if (IsIgnored(message' chan))                      return true;                    // split by parameters so we can easily get the arguments user provided                  List<string> Parameters = new List<string>(message.Split(' '));                    // check if key has some parameters or command                  if (Parameters.Count > 1)                  {                      // someone want to create a new key                      if (Parameters[1] == "is" || Parameters[1] == "act")                      {                          bool isAct = Parameters[1] == "act";                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key;                              if (!isAct)                              {                                  key = message.Substring(message.IndexOf(" is") + 4);                              }                              else                              {                                  key = message.Substring(message.IndexOf(" act") + 5);                              }                              if (infobot != null)                              {                                  infobot.SetKey(key' Parameters[0]' user.Nick' chan' isAct);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      } else if (Parameters[1] == "replace")                      {                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key = message.Substring(message.IndexOf(" replace") + 9);                              if (infobot != null)                              {                                  infobot.replaceKey(key' Parameters[0]' user.Nick' chan);                                  return true;                              }                          }                          else if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // alias                      bool force = false;                      if (Parameters[1] == "alias" || Parameters[1] == "force-alias")                      {                          if (Parameters[1] == "force-alias")                          {                              force = true;                          }                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("InvalidAlias"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  infobot.aliasKey(message.Substring(message.IndexOf(" alias") + 7)' Parameters[0]' ""' chan' force);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                      if (Parameters[1] == "unalias")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  lock (infobot)                                  {                                      foreach (InfobotAlias b in infobot.Aliases)                                      {                                          if (b.Name == Parameters[0])                                          {                                              infobot.Aliases.Remove(b);                                              IRC.DeliverMessage(messages.Localize("AliasRemoved"' chan.Language)' chan);                                              this.StoreDB();                                              return false;                                          }                                      }                                  }                              }                              return false;                          }                          if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // remove key                      if (Parameters[1] == "del")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              if (infobot != null)                              {                                  infobot.rmKey(Parameters[0]' ""' chan);                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                  }                  if (!Allowed)                  {                      return true;                  }                    InfobotKey Key = infobot.GetKey(Parameters[0]);                  // let's try to deliver this as a key                  if (DeliverKey(Key' message' chan' user))                  {                      return true;                  }                                    string lower = Parameters[0].ToLower();                  // there is no key with this name' let's check if there is an alias for such a key                  lock (infobot)                  {                      foreach (InfobotAlias alias in infobot.Aliases)                      {                          if (Sensitive)                          {                              if (alias.Name == Parameters[0])                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                          else                          {                              if (alias.Name.ToLower() == lower)                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.auto-complete"' false))                  {                      if (infobot != null)                      {                          List<string> results = new List<string>();                          lock (infobot)                          {                              foreach (InfobotKey f in infobot.Keys)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                              foreach (InfobotAlias f in infobot.Aliases)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                          }                            if (results.Count == 1)                          {                              InfobotKey Key_ = infobot.GetKey(results[0]);                              if (DeliverKey(Key_' message' chan' user))                              {                                  return true;                              }                              lock (infobot)                              {                                  foreach (InfobotAlias alias in infobot.Aliases)                                  {                                      if (alias.Name == results[0])                                      {                                          Key_ = infobot.GetKey(alias.Name);                                          if (DeliverKey(Key_' message' chan' user))                                          {                                              return true;                                          }                                      }                                  }                              }                          }                            if (results.Count > 1)                          {                              if (Module.GetConfig(chan' "Infobot.Sorted"' false))                              {                                  results.Sort();                              }                              string x = "";                              foreach (string ix in results)                              {                                  x += ix + "' ";                              }                              IRC.DeliverMessage(messages.Localize("infobot-c-e"' chan.Language' new List<string> { x })' chan);                              return true;                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.Help"' false) && infobot != null)                  {                      List<string> Sugg = new List<string>();                      string key = Parameters[0].ToLower();                      lock (infobot)                      {                          foreach (InfobotKey f in infobot.Keys)                          {                              if (!Sugg.Contains(f.Key) && (f.Text.ToLower().Contains(key) || f.Key.ToLower().Contains(key)))                              {                                  Sugg.Add(f.Key);                              }                          }                      }                        if (Sugg.Count > 0)                      {                          string x = "";                          if (Module.GetConfig(chan' "Infobot.Sorted"' false))                          {                              Sugg.Sort();                          }                          foreach (string a in Sugg)                          {                              x += "!" + a + "' ";                          }                          IRC.DeliverMessage(messages.Localize("infobot-help"' chan.Language' new List<string> { x })' chan.Name);                          return true;                      }                  }              }              catch (Exception b)              {                  Parent.HandleException(b);              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,InfobotExec,The following statement contains a magic number: try              {                  // check if it starts with the prefix                  if (!message.StartsWith(prefix))                  {                      return true;                  }                  // check if this channel is allowed to access the db                  Channel data = RetrieveMasterDBChannel(chan);                  bool Allowed = (data != null);                  // handle prefix                  message = message.Substring(1);                  Infobot infobot = null;                    if (Allowed)                      infobot = (Infobot)data.RetrieveObject("Infobot");                    // check if key is ignored                  if (IsIgnored(message' chan))                      return true;                    // split by parameters so we can easily get the arguments user provided                  List<string> Parameters = new List<string>(message.Split(' '));                    // check if key has some parameters or command                  if (Parameters.Count > 1)                  {                      // someone want to create a new key                      if (Parameters[1] == "is" || Parameters[1] == "act")                      {                          bool isAct = Parameters[1] == "act";                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key;                              if (!isAct)                              {                                  key = message.Substring(message.IndexOf(" is") + 4);                              }                              else                              {                                  key = message.Substring(message.IndexOf(" act") + 5);                              }                              if (infobot != null)                              {                                  infobot.SetKey(key' Parameters[0]' user.Nick' chan' isAct);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      } else if (Parameters[1] == "replace")                      {                          // check if they are approved to do that                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  // check if we can deliver error message                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              // they can but there is only 1 parameter and we need at least 2                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                      IRC.DeliverMessage(messages.Localize("key"' chan.Language)' chan);                                  return true;                              }                              // get a key name                              string key = message.Substring(message.IndexOf(" replace") + 9);                              if (infobot != null)                              {                                  infobot.replaceKey(key' Parameters[0]' user.Nick' chan);                                  return true;                              }                          }                          else if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // alias                      bool force = false;                      if (Parameters[1] == "alias" || Parameters[1] == "force-alias")                      {                          if (Parameters[1] == "force-alias")                          {                              force = true;                          }                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionAdd))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (Parameters.Count < 3)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("InvalidAlias"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  infobot.aliasKey(message.Substring(message.IndexOf(" alias") + 7)' Parameters[0]' ""' chan' force);                                  return true;                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                      if (Parameters[1] == "unalias")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  if (!chan.SuppressWarnings)                                  {                                      IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  }                                  return true;                              }                              if (infobot != null)                              {                                  lock (infobot)                                  {                                      foreach (InfobotAlias b in infobot.Aliases)                                      {                                          if (b.Name == Parameters[0])                                          {                                              infobot.Aliases.Remove(b);                                              IRC.DeliverMessage(messages.Localize("AliasRemoved"' chan.Language)' chan);                                              this.StoreDB();                                              return false;                                          }                                      }                                  }                              }                              return false;                          }                          if (!chan.SuppressWarnings)                          {                              IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                          }                          return false;                      }                      // remove key                      if (Parameters[1] == "del")                      {                          if (chan.SystemUsers.IsApproved(user' InfobotModule.PermissionDel))                          {                              if (!Allowed)                              {                                  IRC.DeliverMessage(messages.Localize("db7"' chan.Language)' chan);                                  return true;                              }                              if (infobot != null)                              {                                  infobot.rmKey(Parameters[0]' ""' chan);                              }                          }                          else                          {                              if (!chan.SuppressWarnings)                              {                                  IRC.DeliverMessage(messages.Localize("Authorization"' chan.Language)' chan);                              }                          }                          return false;                      }                  }                  if (!Allowed)                  {                      return true;                  }                    InfobotKey Key = infobot.GetKey(Parameters[0]);                  // let's try to deliver this as a key                  if (DeliverKey(Key' message' chan' user))                  {                      return true;                  }                                    string lower = Parameters[0].ToLower();                  // there is no key with this name' let's check if there is an alias for such a key                  lock (infobot)                  {                      foreach (InfobotAlias alias in infobot.Aliases)                      {                          if (Sensitive)                          {                              if (alias.Name == Parameters[0])                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                          else                          {                              if (alias.Name.ToLower() == lower)                              {                                  // let's try to get a target key                                  InfobotKey Key_ = infobot.GetKey(alias.Key);                                  if (DeliverKey(Key_' message' chan' user))                                  {                                      return true;                                  }                              }                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.auto-complete"' false))                  {                      if (infobot != null)                      {                          List<string> results = new List<string>();                          lock (infobot)                          {                              foreach (InfobotKey f in infobot.Keys)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                              foreach (InfobotAlias f in infobot.Aliases)                              {                                  if (!results.Contains(f.Key) && f.Key.StartsWith(Parameters[0]))                                  {                                      results.Add(f.Key);                                  }                              }                          }                            if (results.Count == 1)                          {                              InfobotKey Key_ = infobot.GetKey(results[0]);                              if (DeliverKey(Key_' message' chan' user))                              {                                  return true;                              }                              lock (infobot)                              {                                  foreach (InfobotAlias alias in infobot.Aliases)                                  {                                      if (alias.Name == results[0])                                      {                                          Key_ = infobot.GetKey(alias.Name);                                          if (DeliverKey(Key_' message' chan' user))                                          {                                              return true;                                          }                                      }                                  }                              }                          }                            if (results.Count > 1)                          {                              if (Module.GetConfig(chan' "Infobot.Sorted"' false))                              {                                  results.Sort();                              }                              string x = "";                              foreach (string ix in results)                              {                                  x += ix + "' ";                              }                              IRC.DeliverMessage(messages.Localize("infobot-c-e"' chan.Language' new List<string> { x })' chan);                              return true;                          }                      }                  }                    if (Module.GetConfig(chan' "Infobot.Help"' false) && infobot != null)                  {                      List<string> Sugg = new List<string>();                      string key = Parameters[0].ToLower();                      lock (infobot)                      {                          foreach (InfobotKey f in infobot.Keys)                          {                              if (!Sugg.Contains(f.Key) && (f.Text.ToLower().Contains(key) || f.Key.ToLower().Contains(key)))                              {                                  Sugg.Add(f.Key);                              }                          }                      }                        if (Sugg.Count > 0)                      {                          string x = "";                          if (Module.GetConfig(chan' "Infobot.Sorted"' false))                          {                              Sugg.Sort();                          }                          foreach (string a in Sugg)                          {                              x += "!" + a + "' ";                          }                          IRC.DeliverMessage(messages.Localize("infobot-help"' chan.Language' new List<string> { x })' chan.Name);                          return true;                      }                  }              }              catch (Exception b)              {                  Parent.HandleException(b);              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,RSearch,The following statement contains a magic number: if (key.Length < 11)              {                  IRC.DeliverMessage(messages.Localize("Search1"' Chan.Language)' Chan.Name);                  return;              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,RSearch,The following statement contains a magic number: infobot.search_key = key.Substring(11);
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,RSearch,The following statement contains a magic number: while (InfobotModule.running)              {                  check++;                  Thread.Sleep(100);                  if (check > 8)                  {                      tSearch.Abort();                      IRC.DeliverMessage(messages.Localize("Error2"' Chan.Language)' Chan.Name);                      InfobotModule.running = false;                      return;                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,RSearch,The following statement contains a magic number: while (InfobotModule.running)              {                  check++;                  Thread.Sleep(100);                  if (check > 8)                  {                      tSearch.Abort();                      IRC.DeliverMessage(messages.Localize("Error2"' Chan.Language)' Chan.Name);                      InfobotModule.running = false;                      return;                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,Find,The following statement contains a magic number: if (key.Length < 9)              {                  IRC.DeliverMessage(messages.Localize("Error1"' Chan.Language)' Chan.Name);                  return;              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,Find,The following statement contains a magic number: key = key.Substring(8);
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,SnapshotStart,The following statement contains a magic number: try              {                  while (!this.stored)                  {                      Thread.Sleep(100);                  }                  lock (this)                  {                      DateTime creationdate = DateTime.Now;                      Syslog.Log("Creating snapshot " + temporary_data);                      File.Copy(datafile_xml' temporary_data);                      IRC.DeliverMessage("Snapshot " + temporary_data + " was created for current database as of " + creationdate' pChannel);                  }              }              catch (Exception fail)              {                  Syslog.Log("Unable to create a snapshot for " + pChannel.Name' true);                  Core.HandleException(fail' "infobot");              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,RecoverStart,The following statement contains a magic number: try              {                  while (!this.stored)                  {                      Thread.Sleep(100);                  }                  lock (this)                  {                      Syslog.Log("Recovering snapshot " + temporary_data);                      File.Copy(temporary_data' datafile_xml' true);                      this.Keys.Clear();                      this.Aliases.Clear();                      Parent.Log("Loading snapshot of " + pChannel.Name);                      LoadData();                      IRC.DeliverMessage("Snapshot " + temporary_data + " was loaded and previous database was permanently deleted"' pChannel);                  }              }              catch (Exception fail)              {                  Parent.Log("Unable to recover a snapshot for " + pChannel.Name + " the db is likely broken now"' true);                  Parent.HandleException(fail);              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,IsValid,The following statement contains a magic number: foreach (char i in name)              {                  if (i == '\0')                  {                      continue;                  }                  if (i < 48 || i > 122 || (i > 90 && i < 97) || (i > 57 && i < 65))                  {                      return false;                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,IsValid,The following statement contains a magic number: foreach (char i in name)              {                  if (i == '\0')                  {                      continue;                  }                  if (i < 48 || i > 122 || (i > 90 && i < 97) || (i > 57 && i < 65))                  {                      return false;                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,IsValid,The following statement contains a magic number: foreach (char i in name)              {                  if (i == '\0')                  {                      continue;                  }                  if (i < 48 || i > 122 || (i > 90 && i < 97) || (i > 57 && i < 65))                  {                      return false;                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,IsValid,The following statement contains a magic number: foreach (char i in name)              {                  if (i == '\0')                  {                      continue;                  }                  if (i < 48 || i > 122 || (i > 90 && i < 97) || (i > 57 && i < 65))                  {                      return false;                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,IsValid,The following statement contains a magic number: foreach (char i in name)              {                  if (i == '\0')                  {                      continue;                  }                  if (i < 48 || i > 122 || (i > 90 && i < 97) || (i > 57 && i < 65))                  {                      return false;                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,IsValid,The following statement contains a magic number: foreach (char i in name)              {                  if (i == '\0')                  {                      continue;                  }                  if (i < 48 || i > 122 || (i > 90 && i < 97) || (i > 57 && i < 65))                  {                      return false;                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,Save,The following statement contains a magic number: try              {                  Parent.DebugLog("Saving database of infobot"' 2);                  if (File.Exists(datafile_xml))                  {                      Core.BackupData(datafile_xml);                      if (!File.Exists(Configuration.TempName(datafile_xml)))                      {                          Parent.Log("Unable to create backup file for " + this.pChannel.Name);                      }                  }                    Parent.DebugLog("Generating xml document"' 4);                    XmlDocument data = new XmlDocument();                  XmlNode xmlnode = data.CreateElement("database");                  lock (this)                  {                      foreach (InfobotAlias key in Aliases)                      {                          XmlAttribute name = data.CreateAttribute("alias_key_name");                          name.Value = key.Name;                          XmlAttribute kk = data.CreateAttribute("alias_key_key");                          kk.Value = key.Key;                          XmlAttribute created = data.CreateAttribute("date");                          created.Value = "";                          XmlNode db = data.CreateElement("alias");                          db.Attributes.Append(name);                          db.Attributes.Append(kk);                          db.Attributes.Append(created);                          xmlnode.AppendChild(db);                      }                        foreach (InfobotKey key in Keys)                      {                          XmlAttribute name = data.CreateAttribute("key_name");                          name.Value = key.Key;                          XmlAttribute kk = data.CreateAttribute("data");                          kk.Value = key.Text;                          XmlAttribute created = data.CreateAttribute("created_date");                          created.Value = key.CreationTime.ToBinary().ToString();                          XmlAttribute nick = data.CreateAttribute("nickname");                          nick.Value = key.User;                          XmlAttribute last = data.CreateAttribute("touched");                          last.Value = key.LastTime.ToBinary().ToString();                          XmlAttribute triggered = data.CreateAttribute("triggered");                          triggered.Value = key.Displayed.ToString();                          XmlAttribute act = data.CreateAttribute("is_act");                          act.Value = key.IsAct.ToString();                          XmlAttribute raw = data.CreateAttribute("raw");                          raw.Value = key.Raw.ToString();                          XmlNode db = data.CreateElement("key");                          db.Attributes.Append(name);                          db.Attributes.Append(kk);                          db.Attributes.Append(nick);                          db.Attributes.Append(created);                          db.Attributes.Append(last);                          db.Attributes.Append(triggered);                          db.Attributes.Append(act);                          db.Attributes.Append(raw);                          xmlnode.AppendChild(db);                      }                      data.AppendChild(xmlnode);                  }                  Parent.DebugLog("Writing xml document to a file");                  data.Save(datafile_xml);                  Parent.DebugLog("Checking the previous file"' 6);                  if (File.Exists(Configuration.TempName(datafile_xml)))                  {                      Parent.DebugLog("Removing temp file"' 6);                      File.Delete(Configuration.TempName(datafile_xml));                  }              }              catch (Exception b)              {                  try                  {                      if (Core.RecoverFile(datafile_xml' pChannel.Name))                      {                          Parent.Log("Recovered db for channel " + pChannel.Name);                      }                      else                      {                          Parent.HandleException(b' pChannel.Name);                      }                  }                  catch (Exception bb)                  {                      Parent.HandleException(bb' pChannel.Name);                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,Save,The following statement contains a magic number: try              {                  Parent.DebugLog("Saving database of infobot"' 2);                  if (File.Exists(datafile_xml))                  {                      Core.BackupData(datafile_xml);                      if (!File.Exists(Configuration.TempName(datafile_xml)))                      {                          Parent.Log("Unable to create backup file for " + this.pChannel.Name);                      }                  }                    Parent.DebugLog("Generating xml document"' 4);                    XmlDocument data = new XmlDocument();                  XmlNode xmlnode = data.CreateElement("database");                  lock (this)                  {                      foreach (InfobotAlias key in Aliases)                      {                          XmlAttribute name = data.CreateAttribute("alias_key_name");                          name.Value = key.Name;                          XmlAttribute kk = data.CreateAttribute("alias_key_key");                          kk.Value = key.Key;                          XmlAttribute created = data.CreateAttribute("date");                          created.Value = "";                          XmlNode db = data.CreateElement("alias");                          db.Attributes.Append(name);                          db.Attributes.Append(kk);                          db.Attributes.Append(created);                          xmlnode.AppendChild(db);                      }                        foreach (InfobotKey key in Keys)                      {                          XmlAttribute name = data.CreateAttribute("key_name");                          name.Value = key.Key;                          XmlAttribute kk = data.CreateAttribute("data");                          kk.Value = key.Text;                          XmlAttribute created = data.CreateAttribute("created_date");                          created.Value = key.CreationTime.ToBinary().ToString();                          XmlAttribute nick = data.CreateAttribute("nickname");                          nick.Value = key.User;                          XmlAttribute last = data.CreateAttribute("touched");                          last.Value = key.LastTime.ToBinary().ToString();                          XmlAttribute triggered = data.CreateAttribute("triggered");                          triggered.Value = key.Displayed.ToString();                          XmlAttribute act = data.CreateAttribute("is_act");                          act.Value = key.IsAct.ToString();                          XmlAttribute raw = data.CreateAttribute("raw");                          raw.Value = key.Raw.ToString();                          XmlNode db = data.CreateElement("key");                          db.Attributes.Append(name);                          db.Attributes.Append(kk);                          db.Attributes.Append(nick);                          db.Attributes.Append(created);                          db.Attributes.Append(last);                          db.Attributes.Append(triggered);                          db.Attributes.Append(act);                          db.Attributes.Append(raw);                          xmlnode.AppendChild(db);                      }                      data.AppendChild(xmlnode);                  }                  Parent.DebugLog("Writing xml document to a file");                  data.Save(datafile_xml);                  Parent.DebugLog("Checking the previous file"' 6);                  if (File.Exists(Configuration.TempName(datafile_xml)))                  {                      Parent.DebugLog("Removing temp file"' 6);                      File.Delete(Configuration.TempName(datafile_xml));                  }              }              catch (Exception b)              {                  try                  {                      if (Core.RecoverFile(datafile_xml' pChannel.Name))                      {                          Parent.Log("Recovered db for channel " + pChannel.Name);                      }                      else                      {                          Parent.HandleException(b' pChannel.Name);                      }                  }                  catch (Exception bb)                  {                      Parent.HandleException(bb' pChannel.Name);                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,Save,The following statement contains a magic number: try              {                  Parent.DebugLog("Saving database of infobot"' 2);                  if (File.Exists(datafile_xml))                  {                      Core.BackupData(datafile_xml);                      if (!File.Exists(Configuration.TempName(datafile_xml)))                      {                          Parent.Log("Unable to create backup file for " + this.pChannel.Name);                      }                  }                    Parent.DebugLog("Generating xml document"' 4);                    XmlDocument data = new XmlDocument();                  XmlNode xmlnode = data.CreateElement("database");                  lock (this)                  {                      foreach (InfobotAlias key in Aliases)                      {                          XmlAttribute name = data.CreateAttribute("alias_key_name");                          name.Value = key.Name;                          XmlAttribute kk = data.CreateAttribute("alias_key_key");                          kk.Value = key.Key;                          XmlAttribute created = data.CreateAttribute("date");                          created.Value = "";                          XmlNode db = data.CreateElement("alias");                          db.Attributes.Append(name);                          db.Attributes.Append(kk);                          db.Attributes.Append(created);                          xmlnode.AppendChild(db);                      }                        foreach (InfobotKey key in Keys)                      {                          XmlAttribute name = data.CreateAttribute("key_name");                          name.Value = key.Key;                          XmlAttribute kk = data.CreateAttribute("data");                          kk.Value = key.Text;                          XmlAttribute created = data.CreateAttribute("created_date");                          created.Value = key.CreationTime.ToBinary().ToString();                          XmlAttribute nick = data.CreateAttribute("nickname");                          nick.Value = key.User;                          XmlAttribute last = data.CreateAttribute("touched");                          last.Value = key.LastTime.ToBinary().ToString();                          XmlAttribute triggered = data.CreateAttribute("triggered");                          triggered.Value = key.Displayed.ToString();                          XmlAttribute act = data.CreateAttribute("is_act");                          act.Value = key.IsAct.ToString();                          XmlAttribute raw = data.CreateAttribute("raw");                          raw.Value = key.Raw.ToString();                          XmlNode db = data.CreateElement("key");                          db.Attributes.Append(name);                          db.Attributes.Append(kk);                          db.Attributes.Append(nick);                          db.Attributes.Append(created);                          db.Attributes.Append(last);                          db.Attributes.Append(triggered);                          db.Attributes.Append(act);                          db.Attributes.Append(raw);                          xmlnode.AppendChild(db);                      }                      data.AppendChild(xmlnode);                  }                  Parent.DebugLog("Writing xml document to a file");                  data.Save(datafile_xml);                  Parent.DebugLog("Checking the previous file"' 6);                  if (File.Exists(Configuration.TempName(datafile_xml)))                  {                      Parent.DebugLog("Removing temp file"' 6);                      File.Delete(Configuration.TempName(datafile_xml));                  }              }              catch (Exception b)              {                  try                  {                      if (Core.RecoverFile(datafile_xml' pChannel.Name))                      {                          Parent.Log("Recovered db for channel " + pChannel.Name);                      }                      else                      {                          Parent.HandleException(b' pChannel.Name);                      }                  }                  catch (Exception bb)                  {                      Parent.HandleException(bb' pChannel.Name);                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,Save,The following statement contains a magic number: try              {                  Parent.DebugLog("Saving database of infobot"' 2);                  if (File.Exists(datafile_xml))                  {                      Core.BackupData(datafile_xml);                      if (!File.Exists(Configuration.TempName(datafile_xml)))                      {                          Parent.Log("Unable to create backup file for " + this.pChannel.Name);                      }                  }                    Parent.DebugLog("Generating xml document"' 4);                    XmlDocument data = new XmlDocument();                  XmlNode xmlnode = data.CreateElement("database");                  lock (this)                  {                      foreach (InfobotAlias key in Aliases)                      {                          XmlAttribute name = data.CreateAttribute("alias_key_name");                          name.Value = key.Name;                          XmlAttribute kk = data.CreateAttribute("alias_key_key");                          kk.Value = key.Key;                          XmlAttribute created = data.CreateAttribute("date");                          created.Value = "";                          XmlNode db = data.CreateElement("alias");                          db.Attributes.Append(name);                          db.Attributes.Append(kk);                          db.Attributes.Append(created);                          xmlnode.AppendChild(db);                      }                        foreach (InfobotKey key in Keys)                      {                          XmlAttribute name = data.CreateAttribute("key_name");                          name.Value = key.Key;                          XmlAttribute kk = data.CreateAttribute("data");                          kk.Value = key.Text;                          XmlAttribute created = data.CreateAttribute("created_date");                          created.Value = key.CreationTime.ToBinary().ToString();                          XmlAttribute nick = data.CreateAttribute("nickname");                          nick.Value = key.User;                          XmlAttribute last = data.CreateAttribute("touched");                          last.Value = key.LastTime.ToBinary().ToString();                          XmlAttribute triggered = data.CreateAttribute("triggered");                          triggered.Value = key.Displayed.ToString();                          XmlAttribute act = data.CreateAttribute("is_act");                          act.Value = key.IsAct.ToString();                          XmlAttribute raw = data.CreateAttribute("raw");                          raw.Value = key.Raw.ToString();                          XmlNode db = data.CreateElement("key");                          db.Attributes.Append(name);                          db.Attributes.Append(kk);                          db.Attributes.Append(nick);                          db.Attributes.Append(created);                          db.Attributes.Append(last);                          db.Attributes.Append(triggered);                          db.Attributes.Append(act);                          db.Attributes.Append(raw);                          xmlnode.AppendChild(db);                      }                      data.AppendChild(xmlnode);                  }                  Parent.DebugLog("Writing xml document to a file");                  data.Save(datafile_xml);                  Parent.DebugLog("Checking the previous file"' 6);                  if (File.Exists(Configuration.TempName(datafile_xml)))                  {                      Parent.DebugLog("Removing temp file"' 6);                      File.Delete(Configuration.TempName(datafile_xml));                  }              }              catch (Exception b)              {                  try                  {                      if (Core.RecoverFile(datafile_xml' pChannel.Name))                      {                          Parent.Log("Recovered db for channel " + pChannel.Name);                      }                      else                      {                          Parent.HandleException(b' pChannel.Name);                      }                  }                  catch (Exception bb)                  {                      Parent.HandleException(bb' pChannel.Name);                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,LoadAncientDB,The following statement contains a magic number: lock (this)              {                  Keys.Clear();                  // Checking if db isn't broken                  Core.RecoverFile(datafile_raw' pChannel.Name);                  if (!File.Exists(datafile_raw))                  {                      return false;                  }                    string[] db = File.ReadAllLines(datafile_raw);                  foreach (string x in db)                  {                      if (x.Contains(Configuration.System.Separator))                      {                          string[] info = x.Split(Char.Parse(Configuration.System.Separator));                          string type = info[2];                          string value = info[1];                          string name = info[0];                          if (type == "key")                          {                              string Locked = info[3];                              Keys.Add(new InfobotKey(name.Replace("<separator>"' "|")' value.Replace("<separator>"' "|")' ""' Locked' NA.ToBinary().ToString()'                                  NA.ToBinary().ToString()));                          }                          else                          {                              Aliases.Add(new InfobotAlias(name.Replace("<separator>"' "|")' value.Replace("<separator>"' "|")));                          }                      }                  }              }
Magic Number,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,LoadAncientDB,The following statement contains a magic number: lock (this)              {                  Keys.Clear();                  // Checking if db isn't broken                  Core.RecoverFile(datafile_raw' pChannel.Name);                  if (!File.Exists(datafile_raw))                  {                      return false;                  }                    string[] db = File.ReadAllLines(datafile_raw);                  foreach (string x in db)                  {                      if (x.Contains(Configuration.System.Separator))                      {                          string[] info = x.Split(Char.Parse(Configuration.System.Separator));                          string type = info[2];                          string value = info[1];                          string name = info[0];                          if (type == "key")                          {                              string Locked = info[3];                              Keys.Add(new InfobotKey(name.Replace("<separator>"' "|")' value.Replace("<separator>"' "|")' ""' Locked' NA.ToBinary().ToString()'                                  NA.ToBinary().ToString()));                          }                          else                          {                              Aliases.Add(new InfobotAlias(name.Replace("<separator>"' "|")' value.Replace("<separator>"' "|")));                          }                      }                  }              }
Magic Number,wmib.Extensions,InfobotWriter,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\IO.cs,Worker,The following statement contains a magic number: try              {                  while (true)                  {                      SaveData();                      Thread.Sleep(20000);                  }              }              catch (ThreadAbortException)              {                  SaveData();              }              catch (Exception fail)              {                  Core.HandleException(fail' "infobot");              }
Magic Number,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,Construct,The following statement contains a magic number: Version = new Version(1' 8' 0' 1);
Magic Number,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,Hook_PRIV,The following statement contains a magic number: if ((message.StartsWith("!") || message.StartsWith("\uff01")) && GetConfig(channel' "Infobot.Enabled"' true))              {                  while (Unwritable)                  {                      Thread.Sleep(10);                  }                  Unwritable = true;                  Infobot.InfoItem item = new Infobot.InfoItem                  {                      Channel = channel'                      Name = "!" + message.Substring(1)'                      User = invoker'                  };                  jobs.Add(item);                  Unwritable = false;              }
Magic Number,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,Hook_PRIV,The following statement contains a magic number: if (Snapshots)              {                  if (message.StartsWith(Configuration.System.CommandPrefix + "infobot-recovery "))                  {                      if (channel.SystemUsers.IsApproved(invoker' PermissionRestoreSnapshot))                      {                          string name = message.Substring("@infobot-recovery ".Length);                          if (!GetConfig(channel' "Infobot.Enabled"' true))                          {                              IRC.DeliverMessage("Infobot is not enabled in this channel"' channel' libirc.Defs.Priority.Low);                              return;                          }                          if (infobot != null)                          {                              infobot.RecoverSnapshot(channel' name);                          }                          return;                      }                      if (!channel.SuppressWarnings)                      {                          IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel' libirc.Defs.Priority.Low);                      }                      return;                  }                    if (message.StartsWith(Configuration.System.CommandPrefix + "infobot-snapshot "))                  {                      if (channel.SystemUsers.IsApproved(invoker' PermissionSnaphot))                      {                          string name = message.Substring("@infobot-snapshot ".Length);                          if (!GetConfig(channel' "Infobot.Enabled"' true))                          {                              IRC.DeliverMessage("Infobot is not enabled in this channel"' channel' libirc.Defs.Priority.Low);                              return;                          }                          if (infobot != null)                          {                              infobot.CreateSnapshot(channel' name);                          }                          return;                      }                      if (!channel.SuppressWarnings)                      {                          IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel' libirc.Defs.Priority.Low);                      }                      return;                  }                    if (message.StartsWith(Configuration.System.CommandPrefix + "infobot-set-raw "))                  {                      if (channel.SystemUsers.IsApproved(invoker' PermissionAdd))                      {                          string name = message.Substring("@infobot-set-raw ".Length);                          if (!GetConfig(channel' "Infobot.Enabled"' true))                          {                              IRC.DeliverMessage("Infobot is not enabled in this channel"' channel' libirc.Defs.Priority.Low);                              return;                          }                          if (infobot != null)                          {                              infobot.SetRaw(name' invoker.Nick' channel);                              return;                          }                      }                      if (!channel.SuppressWarnings)                      {                          IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel' libirc.Defs.Priority.Low);                      }                      return;                  }                    if (message.StartsWith(Configuration.System.CommandPrefix + "infobot-unset-raw "))                  {                      if (channel.SystemUsers.IsApproved(invoker' PermissionAdd))                      {                          string name = message.Substring("@infobot-unset-raw ".Length);                          if (!GetConfig(channel' "Infobot.Enabled"' true))                          {                              IRC.DeliverMessage("Infobot is not enabled in this channel"' channel' libirc.Defs.Priority.Low);                              return;                          }                          if (infobot != null)                          {                              infobot.UnsetRaw(name' invoker.Nick' channel);                              return;                          }                      }                      if (!channel.SuppressWarnings)                      {                          IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel' libirc.Defs.Priority.Low);                      }                      return;                  }                    if (message.StartsWith(Configuration.System.CommandPrefix + "infobot-snapshot-rm "))                  {                      if (channel.SystemUsers.IsApproved(invoker' PermissionDeleteSnapshot))                      {                          string name = message.Substring("@infobot-snapshot-rm ".Length);                          name.Replace("."' "");                          name.Replace("/"' "");                          name.Replace("\\"' "");                          name.Replace("*"' "");                          name.Replace("?"' "");                          if (name == "")                          {                              IRC.DeliverMessage("You should specify a file name"' channel);                              return;                          }                          if (!File.Exists(SnapshotsDirectory + Path.DirectorySeparatorChar + channel.Name + Path.DirectorySeparatorChar + name))                          {                              IRC.DeliverMessage("File not found"' channel);                              return;                          }                          File.Delete(SnapshotsDirectory + Path.DirectorySeparatorChar + channel.Name + Path.DirectorySeparatorChar + name);                          IRC.DeliverMessage("Requested file was removed"' channel);                          return;                      }                      if (!channel.SuppressWarnings)                      {                          IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel);                      }                      return;                  }                    if (message == Configuration.System.CommandPrefix + "infobot-snapshot-ls")                  {                      string files = "";                      DirectoryInfo di = new DirectoryInfo(SnapshotsDirectory + Path.DirectorySeparatorChar + channel.Name);                      FileInfo[] rgFiles = di.GetFiles("*");                      int curr = 0;                      int displaying = 0;                      foreach (FileInfo fi in rgFiles)                      {                          curr++;                          if (files.Length < 200)                          {                              files += fi.Name + " ";                              displaying++;                          }                      }                      string response;                      if (curr == displaying)                      {                          response = "There are " + displaying + " files: " + files;                      }                      else                      {                          response = "There are " + curr + " files' but displaying only " + displaying + " of them: " + files;                      }                      if (curr == 0)                      {                          response = "There is no snapshot so far' create one!:)";                      }                      IRC.DeliverMessage(response' channel.Name);                      return;                  }              }
Magic Number,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith(Configuration.System.CommandPrefix + "infobot-detail "))              {                  if ((message.Length) <= "@infobot-detail ".Length)                  {                      IRC.DeliverMessage(messages.Localize("db6"' channel.Language)' channel);                      return;                  }                  if (GetConfig(channel' "Infobot.Enabled"' true))                  {                      if (channel.SharedDB == "local" || channel.SharedDB == "")                      {                          if (infobot != null)                          {                              infobot.InfobotDetail(message.Substring(16)' channel);                          }                          return;                      }                      if (channel.SharedDB != "")                      {                          Channel db = Core.GetChannel(channel.SharedDB);                          if (db == null)                          {                              IRC.DeliverMessage("Error' null pointer to shared channel"' channel' libirc.Defs.Priority.Low);                              return;                          }                          if (infobot != null)                          {                              infobot.InfobotDetail(message.Substring(16)' channel);                          }                          return;                      }                      return;                  }                  IRC.DeliverMessage("Infobot is not enabled on this channel"' channel' libirc.Defs.Priority.Low);                  return;              }
Magic Number,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith(Configuration.System.CommandPrefix + "infobot-detail "))              {                  if ((message.Length) <= "@infobot-detail ".Length)                  {                      IRC.DeliverMessage(messages.Localize("db6"' channel.Language)' channel);                      return;                  }                  if (GetConfig(channel' "Infobot.Enabled"' true))                  {                      if (channel.SharedDB == "local" || channel.SharedDB == "")                      {                          if (infobot != null)                          {                              infobot.InfobotDetail(message.Substring(16)' channel);                          }                          return;                      }                      if (channel.SharedDB != "")                      {                          Channel db = Core.GetChannel(channel.SharedDB);                          if (db == null)                          {                              IRC.DeliverMessage("Error' null pointer to shared channel"' channel' libirc.Defs.Priority.Low);                              return;                          }                          if (infobot != null)                          {                              infobot.InfobotDetail(message.Substring(16)' channel);                          }                          return;                      }                      return;                  }                  IRC.DeliverMessage("Infobot is not enabled on this channel"' channel' libirc.Defs.Priority.Low);                  return;              }
Magic Number,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,Load,The following statement contains a magic number: try              {                  Unwritable = false;                  while (Core.IsRunning && IsWorking)                  {                      if (Unwritable)                      {                          Thread.Sleep(200);                      }                      else if (jobs.Count > 0)                      {                          Unwritable = true;                          List<Infobot.InfoItem> list = new List<Infobot.InfoItem>();                          list.AddRange(jobs);                          jobs.Clear();                          Unwritable = false;                          foreach (Infobot.InfoItem item in list)                          {                              Infobot infobot = (Infobot)item.Channel.RetrieveObject("Infobot");                              if (infobot != null)                              {                                  infobot.InfobotExec(item.Name' item.User' item.Channel);                              }                          }                      }                      Thread.Sleep(200);                  }              }              catch (Exception b)              {                  Unwritable = false;                  Console.WriteLine(b.InnerException);              }
Magic Number,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,Load,The following statement contains a magic number: try              {                  Unwritable = false;                  while (Core.IsRunning && IsWorking)                  {                      if (Unwritable)                      {                          Thread.Sleep(200);                      }                      else if (jobs.Count > 0)                      {                          Unwritable = true;                          List<Infobot.InfoItem> list = new List<Infobot.InfoItem>();                          list.AddRange(jobs);                          jobs.Clear();                          Unwritable = false;                          foreach (Infobot.InfoItem item in list)                          {                              Infobot infobot = (Infobot)item.Channel.RetrieveObject("Infobot");                              if (infobot != null)                              {                                  infobot.InfobotExec(item.Name' item.User' item.Channel);                              }                          }                      }                      Thread.Sleep(200);                  }              }              catch (Exception b)              {                  Unwritable = false;                  Console.WriteLine(b.InnerException);              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,WriteData,The following statement contains a magic number: if (jobs.Count > 0)              {                  List<Job> line = new List<Job>();                  List<Job> tr = new List<Job>();                  lock (jobs)                  {                      line.AddRange(jobs);                      jobs.Clear();                  }                  // remove them from queue                  foreach (Job curr in tr)                  {                      line.Remove(curr);                  }                  // write to disk                  foreach (Job curr in line)                  {                      while (!WriteLog(curr.message' curr.channel' curr.time))                      {                          Thread.Sleep(2000);                      }                  }              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,WriteData,The following statement contains a magic number: return 2;
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Hook_Nick,The following statement contains a magic number: if (GetConfig(channel' "Logging.Enabled"' false))              {                  Item item = new Item                  {                      channel = channel'                      act = false'                      host = Target.Host'                      message = OldNick'                      time = DateTime.Now'                      type = 6'                      username = NewNick                  };                  lock (DJ)                  {                      DJ.Add(item);                  }              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Hook_Part,The following statement contains a magic number: if (GetConfig(channel' "Logging.Enabled"' false))              {                  Item item = new Item                  {                      channel = channel'                      act = false'                      host = user.Host'                      message = ""'                      time = DateTime.Now'                      type = 3'                      username = user.Nick                  };                  lock (DJ)                  {                      DJ.Add(item);                  }              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Hook_Kick,The following statement contains a magic number: if (GetConfig(channel' "Logging.Enabled"' false))              {                  Item item = new Item                  {                      channel = channel'                      act = false'                      host = source.Host'                      message = source.Nick'                      time = DateTime.Now'                      type = 4'                      username = user                  };                  lock (DJ)                  {                      DJ.Add(item);                  }              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Hook_Join,The following statement contains a magic number: if (GetConfig(channel' "Logging.Enabled"' false))              {                  Item item = new Item                  {                      channel = channel'                      act = false'                      host = user.Host'                      message = ""'                      time = DateTime.Now'                      type = 2'                      username = user.Nick                  };                  lock (DJ)                  {                      DJ.Add(item);                  }              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Writer,The following statement contains a magic number: try              {                  if (Core.DB == null)                  {                      Log("No sql server is available' closing DB log writer");                      return;                  }                  DebugLog("The SQL writer started");                  while (Core.IsRunning)                  {                      string message = "";                      try                      {                          Thread.Sleep(2000);                          if (DJ.Count > 0)                          {                              List<Item> db = new List<Item>();                              lock (DJ)                              {                                  db.AddRange(DJ);                                  DJ.Clear();                              }                              lock (Core.DB.DatabaseLock)                              {                                  Core.DB.Connect();                                  while (!Core.DB.IsConnected)                                  {                                      if (Core.DB.ErrorBuffer != null)                                      {                                          Log("Unable to connect to SQL server: " + Core.DB.ErrorBuffer + " retrying in 20 seconds");                                      }                                      Thread.Sleep(20000);                                      Core.DB.Connect();                                  }                                  foreach (Item item in db)                                  {                                      Database.Row row = new Database.Row();                                      message = item.message;                                      //row.Values.Add(new Database.Row.Value(0));                                      row.Values.Add(new Database.Row.Value(item.channel.Name' Database.DataType.Varchar' "channel"));                                      row.Values.Add(new Database.Row.Value(item.username' Database.DataType.Varchar' "nick"));                                      row.Values.Add(new Database.Row.Value(item.time' "time"));                                      row.Values.Add(new Database.Row.Value(item.act' "act"));                                      row.Values.Add(new Database.Row.Value(item.message' Database.DataType.Varchar' "contents"));                                      row.Values.Add(new Database.Row.Value(item.type' "type"));                                      row.Values.Add(new Database.Row.Value(item.host' Database.DataType.Varchar' "host"));                                      if (!Core.DB.InsertRow("logs"' row))                                      {                                          Log("Failed to insert row: " + message);                                      }                                  }                                  Core.DB.Commit();                                  //Core.DB.Disconnect();                              }                          }                      }                      catch (ThreadAbortException)                      {                          Core.DB.Commit();                          Core.DB.Disconnect();                          Log("SQL Writer is shut down with " + DJ.Count + " unfinished lines");                          return;                      }                      catch (Exception fail)                      {                          HandleException(fail);                          Log("SQL Writer error: " + message' true);                      }                  }              }              catch (Exception fail)              {                  HandleException(fail);                  Core.ThreadManager.UnregisterThread(Thread.CurrentThread);                  Log("SQL Writer is down!!"' true);              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Writer,The following statement contains a magic number: try              {                  if (Core.DB == null)                  {                      Log("No sql server is available' closing DB log writer");                      return;                  }                  DebugLog("The SQL writer started");                  while (Core.IsRunning)                  {                      string message = "";                      try                      {                          Thread.Sleep(2000);                          if (DJ.Count > 0)                          {                              List<Item> db = new List<Item>();                              lock (DJ)                              {                                  db.AddRange(DJ);                                  DJ.Clear();                              }                              lock (Core.DB.DatabaseLock)                              {                                  Core.DB.Connect();                                  while (!Core.DB.IsConnected)                                  {                                      if (Core.DB.ErrorBuffer != null)                                      {                                          Log("Unable to connect to SQL server: " + Core.DB.ErrorBuffer + " retrying in 20 seconds");                                      }                                      Thread.Sleep(20000);                                      Core.DB.Connect();                                  }                                  foreach (Item item in db)                                  {                                      Database.Row row = new Database.Row();                                      message = item.message;                                      //row.Values.Add(new Database.Row.Value(0));                                      row.Values.Add(new Database.Row.Value(item.channel.Name' Database.DataType.Varchar' "channel"));                                      row.Values.Add(new Database.Row.Value(item.username' Database.DataType.Varchar' "nick"));                                      row.Values.Add(new Database.Row.Value(item.time' "time"));                                      row.Values.Add(new Database.Row.Value(item.act' "act"));                                      row.Values.Add(new Database.Row.Value(item.message' Database.DataType.Varchar' "contents"));                                      row.Values.Add(new Database.Row.Value(item.type' "type"));                                      row.Values.Add(new Database.Row.Value(item.host' Database.DataType.Varchar' "host"));                                      if (!Core.DB.InsertRow("logs"' row))                                      {                                          Log("Failed to insert row: " + message);                                      }                                  }                                  Core.DB.Commit();                                  //Core.DB.Disconnect();                              }                          }                      }                      catch (ThreadAbortException)                      {                          Core.DB.Commit();                          Core.DB.Disconnect();                          Log("SQL Writer is shut down with " + DJ.Count + " unfinished lines");                          return;                      }                      catch (Exception fail)                      {                          HandleException(fail);                          Log("SQL Writer error: " + message' true);                      }                  }              }              catch (Exception fail)              {                  HandleException(fail);                  Core.ThreadManager.UnregisterThread(Thread.CurrentThread);                  Log("SQL Writer is down!!"' true);              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Load,The following statement contains a magic number: while (!Unloading)              {                  try                  {                      int timer = 0;                      WriteData();                      while (!Unloading)                      {                          timer++;                          if (timer > 20)                          {                              break;                          }                          Thread.Sleep(900);                      }                  }                  catch (ThreadAbortException)                  {                      Finish();                      Log("Writer thread stopped");                      return;                  }                  catch (Exception fail)                  {                      HandleException(fail);                  }              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Load,The following statement contains a magic number: while (!Unloading)              {                  try                  {                      int timer = 0;                      WriteData();                      while (!Unloading)                      {                          timer++;                          if (timer > 20)                          {                              break;                          }                          Thread.Sleep(900);                      }                  }                  catch (ThreadAbortException)                  {                      Finish();                      Log("Writer thread stopped");                      return;                  }                  catch (Exception fail)                  {                      HandleException(fail);                  }              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Construct,The following statement contains a magic number: Version = new Version(2' 6' 1);
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Construct,The following statement contains a magic number: Version = new Version(2' 6' 1);
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Hook_OnUnload,The following statement contains a magic number: try              {                  int wait = 0;                  Unloading = true;                  Log("Unloading log system' terminating the writer thread...");                  if (this.thread.ThreadState == ThreadState.Running || this.thread.ThreadState == ThreadState.WaitSleepJoin)                  {                      while (Unloading)                      {                          if (wait > 1000)                          {                              Log("Writer thread didn't finish within grace time");                              return false;                          }                          wait++;                          Thread.Sleep(10);                      }                      Log("Writer thread was unloaded OK");                      return true;                  }                  Log("Writer thread is " + this.thread.ThreadState + " - doing nothing");                  return true;              }              catch (Exception fail)              {                  HandleException(fail);                  return false;              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,Hook_OnUnload,The following statement contains a magic number: try              {                  int wait = 0;                  Unloading = true;                  Log("Unloading log system' terminating the writer thread...");                  if (this.thread.ThreadState == ThreadState.Running || this.thread.ThreadState == ThreadState.WaitSleepJoin)                  {                      while (Unloading)                      {                          if (wait > 1000)                          {                              Log("Writer thread didn't finish within grace time");                              return false;                          }                          wait++;                          Thread.Sleep(10);                      }                      Log("Writer thread was unloaded OK");                      return true;                  }                  Log("Writer thread is " + this.thread.ThreadState + " - doing nothing");                  return true;              }              catch (Exception fail)              {                  HandleException(fail);                  return false;              }
Magic Number,wmib.Extensions,LogsModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Logs\Log.cs,TDToString,The following statement contains a magic number: if (number <= 9 && number >= 0)              {                  return "0" + number;              }
Magic Number,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,Construct,The following statement contains a magic number: Version = new Version(1' 0' 2' 0);
Magic Number,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,Client,The following statement contains a magic number: try              {                  // #channel token message goes here and needs a newline on end                  DebugLog("Accepted connection");                  TcpClient client = (TcpClient)data;                  string IP = client.Client.RemoteEndPoint.ToString();                  DebugLog("Incoming connection from: " + IP);                  NetworkStream ns = client.GetStream();                  StreamWriter _StreamWriter = new StreamWriter(ns);                  StreamReader _StreamReader = new StreamReader(ns' Encoding.UTF8);                  while (!_StreamReader.EndOfStream)                  {                      string text = _StreamReader.ReadLine();                      if (!text.Contains(" "))                      {                          DebugLog("Invalid text from " + IP + ": " + text' 2);                          SendMessage(ref _StreamWriter' "ERROR1 (invalid text): " + text);                          continue;                      }                      string channel = text.Substring(0' text.IndexOf(" "));                      string value = text.Substring(text.IndexOf(" ") + 1);                      DebugLog("Request to send text to channel " + channel + " text: " + value' 4);                      Channel ch = Core.GetChannel(channel);                      if (ch == null)                      {                          DebugLog("Nonexistent channel " + channel + " message was rejected");                          SendMessage(ref _StreamWriter' "ERROR2 (invalid channel " + channel + "): " + value);                          continue;                      }                      if (!GetConfig(ch' "NetCat.Enabled"' false))                      {                          DebugLog("Channel doesn't allow relay " + channel + " message was rejected");                          SendMessage(ref _StreamWriter' "ERROR3 (disallowed): " + channel + " :" + value);                          continue;                      }                      if (GetConfig(ch' "NetCat.Token"' false))                      {                          DebugLog("Channel requires the token for relay " + channel' 6);                          if (!value.Contains(" "))                          {                              DebugLog("Invalid token from " + IP + " to " + channel);                              SendMessage(ref _StreamWriter' "ERROR4 (invalid token): " + channel + " :" + value);                              continue;                          }                          string token = value.Substring(0' value.IndexOf(" "));                          value = value.Substring(value.IndexOf(" ") + 1);                          if (token != GetConfig(ch' "NetCat.TokenData"' "<invalid>"))                          {                              DebugLog("Channel requires the token for relay " + channel' 6);                              SendMessage(ref _StreamWriter' "ERROR4 (invalid token): " + channel + " :" + value);                              continue;                          }                      }                      DebugLog("Relaying message from " + IP + " to " + channel + ":" + value' 2);                      IRC.DeliverMessage(value' ch' libirc.Defs.Priority.Low);                  }              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,Client,The following statement contains a magic number: try              {                  // #channel token message goes here and needs a newline on end                  DebugLog("Accepted connection");                  TcpClient client = (TcpClient)data;                  string IP = client.Client.RemoteEndPoint.ToString();                  DebugLog("Incoming connection from: " + IP);                  NetworkStream ns = client.GetStream();                  StreamWriter _StreamWriter = new StreamWriter(ns);                  StreamReader _StreamReader = new StreamReader(ns' Encoding.UTF8);                  while (!_StreamReader.EndOfStream)                  {                      string text = _StreamReader.ReadLine();                      if (!text.Contains(" "))                      {                          DebugLog("Invalid text from " + IP + ": " + text' 2);                          SendMessage(ref _StreamWriter' "ERROR1 (invalid text): " + text);                          continue;                      }                      string channel = text.Substring(0' text.IndexOf(" "));                      string value = text.Substring(text.IndexOf(" ") + 1);                      DebugLog("Request to send text to channel " + channel + " text: " + value' 4);                      Channel ch = Core.GetChannel(channel);                      if (ch == null)                      {                          DebugLog("Nonexistent channel " + channel + " message was rejected");                          SendMessage(ref _StreamWriter' "ERROR2 (invalid channel " + channel + "): " + value);                          continue;                      }                      if (!GetConfig(ch' "NetCat.Enabled"' false))                      {                          DebugLog("Channel doesn't allow relay " + channel + " message was rejected");                          SendMessage(ref _StreamWriter' "ERROR3 (disallowed): " + channel + " :" + value);                          continue;                      }                      if (GetConfig(ch' "NetCat.Token"' false))                      {                          DebugLog("Channel requires the token for relay " + channel' 6);                          if (!value.Contains(" "))                          {                              DebugLog("Invalid token from " + IP + " to " + channel);                              SendMessage(ref _StreamWriter' "ERROR4 (invalid token): " + channel + " :" + value);                              continue;                          }                          string token = value.Substring(0' value.IndexOf(" "));                          value = value.Substring(value.IndexOf(" ") + 1);                          if (token != GetConfig(ch' "NetCat.TokenData"' "<invalid>"))                          {                              DebugLog("Channel requires the token for relay " + channel' 6);                              SendMessage(ref _StreamWriter' "ERROR4 (invalid token): " + channel + " :" + value);                              continue;                          }                      }                      DebugLog("Relaying message from " + IP + " to " + channel + ":" + value' 2);                      IRC.DeliverMessage(value' ch' libirc.Defs.Priority.Low);                  }              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,Client,The following statement contains a magic number: try              {                  // #channel token message goes here and needs a newline on end                  DebugLog("Accepted connection");                  TcpClient client = (TcpClient)data;                  string IP = client.Client.RemoteEndPoint.ToString();                  DebugLog("Incoming connection from: " + IP);                  NetworkStream ns = client.GetStream();                  StreamWriter _StreamWriter = new StreamWriter(ns);                  StreamReader _StreamReader = new StreamReader(ns' Encoding.UTF8);                  while (!_StreamReader.EndOfStream)                  {                      string text = _StreamReader.ReadLine();                      if (!text.Contains(" "))                      {                          DebugLog("Invalid text from " + IP + ": " + text' 2);                          SendMessage(ref _StreamWriter' "ERROR1 (invalid text): " + text);                          continue;                      }                      string channel = text.Substring(0' text.IndexOf(" "));                      string value = text.Substring(text.IndexOf(" ") + 1);                      DebugLog("Request to send text to channel " + channel + " text: " + value' 4);                      Channel ch = Core.GetChannel(channel);                      if (ch == null)                      {                          DebugLog("Nonexistent channel " + channel + " message was rejected");                          SendMessage(ref _StreamWriter' "ERROR2 (invalid channel " + channel + "): " + value);                          continue;                      }                      if (!GetConfig(ch' "NetCat.Enabled"' false))                      {                          DebugLog("Channel doesn't allow relay " + channel + " message was rejected");                          SendMessage(ref _StreamWriter' "ERROR3 (disallowed): " + channel + " :" + value);                          continue;                      }                      if (GetConfig(ch' "NetCat.Token"' false))                      {                          DebugLog("Channel requires the token for relay " + channel' 6);                          if (!value.Contains(" "))                          {                              DebugLog("Invalid token from " + IP + " to " + channel);                              SendMessage(ref _StreamWriter' "ERROR4 (invalid token): " + channel + " :" + value);                              continue;                          }                          string token = value.Substring(0' value.IndexOf(" "));                          value = value.Substring(value.IndexOf(" ") + 1);                          if (token != GetConfig(ch' "NetCat.TokenData"' "<invalid>"))                          {                              DebugLog("Channel requires the token for relay " + channel' 6);                              SendMessage(ref _StreamWriter' "ERROR4 (invalid token): " + channel + " :" + value);                              continue;                          }                      }                      DebugLog("Relaying message from " + IP + " to " + channel + ":" + value' 2);                      IRC.DeliverMessage(value' ch' libirc.Defs.Priority.Low);                  }              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,Client,The following statement contains a magic number: try              {                  // #channel token message goes here and needs a newline on end                  DebugLog("Accepted connection");                  TcpClient client = (TcpClient)data;                  string IP = client.Client.RemoteEndPoint.ToString();                  DebugLog("Incoming connection from: " + IP);                  NetworkStream ns = client.GetStream();                  StreamWriter _StreamWriter = new StreamWriter(ns);                  StreamReader _StreamReader = new StreamReader(ns' Encoding.UTF8);                  while (!_StreamReader.EndOfStream)                  {                      string text = _StreamReader.ReadLine();                      if (!text.Contains(" "))                      {                          DebugLog("Invalid text from " + IP + ": " + text' 2);                          SendMessage(ref _StreamWriter' "ERROR1 (invalid text): " + text);                          continue;                      }                      string channel = text.Substring(0' text.IndexOf(" "));                      string value = text.Substring(text.IndexOf(" ") + 1);                      DebugLog("Request to send text to channel " + channel + " text: " + value' 4);                      Channel ch = Core.GetChannel(channel);                      if (ch == null)                      {                          DebugLog("Nonexistent channel " + channel + " message was rejected");                          SendMessage(ref _StreamWriter' "ERROR2 (invalid channel " + channel + "): " + value);                          continue;                      }                      if (!GetConfig(ch' "NetCat.Enabled"' false))                      {                          DebugLog("Channel doesn't allow relay " + channel + " message was rejected");                          SendMessage(ref _StreamWriter' "ERROR3 (disallowed): " + channel + " :" + value);                          continue;                      }                      if (GetConfig(ch' "NetCat.Token"' false))                      {                          DebugLog("Channel requires the token for relay " + channel' 6);                          if (!value.Contains(" "))                          {                              DebugLog("Invalid token from " + IP + " to " + channel);                              SendMessage(ref _StreamWriter' "ERROR4 (invalid token): " + channel + " :" + value);                              continue;                          }                          string token = value.Substring(0' value.IndexOf(" "));                          value = value.Substring(value.IndexOf(" ") + 1);                          if (token != GetConfig(ch' "NetCat.TokenData"' "<invalid>"))                          {                              DebugLog("Channel requires the token for relay " + channel' 6);                              SendMessage(ref _StreamWriter' "ERROR4 (invalid token): " + channel + " :" + value);                              continue;                          }                      }                      DebugLog("Relaying message from " + IP + " to " + channel + ":" + value' 2);                      IRC.DeliverMessage(value' ch' libirc.Defs.Priority.Low);                  }              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,Client,The following statement contains a magic number: try              {                  // #channel token message goes here and needs a newline on end                  DebugLog("Accepted connection");                  TcpClient client = (TcpClient)data;                  string IP = client.Client.RemoteEndPoint.ToString();                  DebugLog("Incoming connection from: " + IP);                  NetworkStream ns = client.GetStream();                  StreamWriter _StreamWriter = new StreamWriter(ns);                  StreamReader _StreamReader = new StreamReader(ns' Encoding.UTF8);                  while (!_StreamReader.EndOfStream)                  {                      string text = _StreamReader.ReadLine();                      if (!text.Contains(" "))                      {                          DebugLog("Invalid text from " + IP + ": " + text' 2);                          SendMessage(ref _StreamWriter' "ERROR1 (invalid text): " + text);                          continue;                      }                      string channel = text.Substring(0' text.IndexOf(" "));                      string value = text.Substring(text.IndexOf(" ") + 1);                      DebugLog("Request to send text to channel " + channel + " text: " + value' 4);                      Channel ch = Core.GetChannel(channel);                      if (ch == null)                      {                          DebugLog("Nonexistent channel " + channel + " message was rejected");                          SendMessage(ref _StreamWriter' "ERROR2 (invalid channel " + channel + "): " + value);                          continue;                      }                      if (!GetConfig(ch' "NetCat.Enabled"' false))                      {                          DebugLog("Channel doesn't allow relay " + channel + " message was rejected");                          SendMessage(ref _StreamWriter' "ERROR3 (disallowed): " + channel + " :" + value);                          continue;                      }                      if (GetConfig(ch' "NetCat.Token"' false))                      {                          DebugLog("Channel requires the token for relay " + channel' 6);                          if (!value.Contains(" "))                          {                              DebugLog("Invalid token from " + IP + " to " + channel);                              SendMessage(ref _StreamWriter' "ERROR4 (invalid token): " + channel + " :" + value);                              continue;                          }                          string token = value.Substring(0' value.IndexOf(" "));                          value = value.Substring(value.IndexOf(" ") + 1);                          if (token != GetConfig(ch' "NetCat.TokenData"' "<invalid>"))                          {                              DebugLog("Channel requires the token for relay " + channel' 6);                              SendMessage(ref _StreamWriter' "ERROR4 (invalid token): " + channel + " :" + value);                              continue;                          }                      }                      DebugLog("Relaying message from " + IP + " to " + channel + ":" + value' 2);                      IRC.DeliverMessage(value' ch' libirc.Defs.Priority.Low);                  }              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,Load,The following statement contains a magic number: try              {                  Log("NetCat listening on port " + Port);                  TcpListener server = new TcpListener(IPAddress.Any' Port);                  server.Start();                  while (IsWorking)                  {                      try                      {                          TcpClient connection = server.AcceptTcpClient();                          Thread _client = new Thread(Client);                          //threads.Add(_client);                          _client.Start(connection);                          Thread.Sleep(200);                      }                      catch (ThreadAbortException)                      {                          return;                      }                      catch (Exception fail)                      {                          HandleException(fail);                      }                  }              }              catch (ThreadAbortException)              {                  return;              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,GenerateToken,The following statement contains a magic number: for (int i = 0; i < 40; i++)              {                  char ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));                  builder.Append(ch);              }
Magic Number,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,GenerateToken,The following statement contains a magic number: for (int i = 0; i < 40; i++)              {                  char ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));                  builder.Append(ch);              }
Magic Number,wmib.Extensions,NetCat,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\NetCat\NetCat.cs,GenerateToken,The following statement contains a magic number: for (int i = 0; i < 40; i++)              {                  char ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));                  builder.Append(ch);              }
Magic Number,wmib.Extensions,Notification,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\Notification.cs,Notification,The following statement contains a magic number: this.Expiry = DateTime.Now.AddDays(20);
Magic Number,wmib.Extensions,Notify,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\NotifyUs.cs,Construct,The following statement contains a magic number: Version = new Version(1' 2' 0' 0);
Magic Number,wmib.Extensions,Notify,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Notify\NotifyUs.cs,Load,The following statement contains a magic number: try              {                  while (true)                  {                      Notification.RemoveOld();                      Thread.Sleep(360000);                  }              }              catch (ThreadAbortException)              {                  return;              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,ScriptingEngine,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Scripting\ScriptingEngine.cs,Load,The following statement contains a magic number: try              {                  while (Core.IsRunning && this.IsWorking)                  {                      List<Task> tasks = new List<Task>();                      lock (Tasks)                      {                          tasks.AddRange(Tasks);                          Tasks.Clear();                      }                      foreach (Task ts in tasks)                      {                          try                          {                              Process proc = new Process                              {                                  StartInfo = new ProcessStartInfo                                  {                                      FileName = ts.task.Path'                                      Arguments = ts.parameters'                                      UseShellExecute = false'                                      RedirectStandardOutput = true'                                      RedirectStandardError = true'                                      CreateNoWindow = true                                  }                              };                                proc.Start();                              string output = "";                              bool write_file = false;                              while (!proc.StandardOutput.EndOfStream || !proc.StandardError.EndOfStream)                              {                                  string line;                                  if (!proc.StandardOutput.EndOfStream)                                      line = proc.StandardOutput.ReadLine();                                  else                                      line = proc.StandardError.ReadLine();                                  if (write_file || (ts.task.OneLine && !string.IsNullOrEmpty(output)))                                  {                                      output += line + "\n";                                      write_file = true;                                      continue;                                  }                                  output += line + "\n";                                  if (ts.channel == null)                                  {                                      // send back to channel                                      IRC.DeliverMessage(line' ts.user);                                  }                                  else                                  {                                      // to user                                      IRC.DeliverMessage(line' ts.channel);                                  }                              }                              proc.WaitForExit();                              proc.Close();                              proc.Dispose();                              if (write_file)                              {                                  string filename = Path.GetTempFileName();                                  if (filename.EndsWith(".tmp"))                                  {                                      filename = filename.Substring(0' filename.Length - 3);                                      filename += "txt";                                  }                                  File.WriteAllText(filename' output);  #if __MonoCS__                                  Mono.Unix.Native.Syscall.chmod(filename' Mono.Unix.Native.FilePermissions.S_IROTH);  #endif                                  if (ts.channel == null)                                  {                                      // send back to channel                                      IRC.DeliverMessage("The command produced multiline output' see " + Configuration.WebPages.WebpageURL + filename' ts.user);                                  }                                  else                                  {                                      // to user                                      IRC.DeliverMessage("The command produced multiline output' see " + Configuration.WebPages.WebpageURL + filename' ts.channel);                                  }                              }                          }                          catch (ThreadAbortException)                          {                              return;                          }                          catch (Exception ef)                          {                              HandleException(ef);                          }                      }                      System.Threading.Thread.Sleep(200);                  }              }              catch (System.Threading.ThreadAbortException)              {                  return;              }
Magic Number,wmib.Extensions,ScriptingEngine,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Scripting\ScriptingEngine.cs,Load,The following statement contains a magic number: try              {                  while (Core.IsRunning && this.IsWorking)                  {                      List<Task> tasks = new List<Task>();                      lock (Tasks)                      {                          tasks.AddRange(Tasks);                          Tasks.Clear();                      }                      foreach (Task ts in tasks)                      {                          try                          {                              Process proc = new Process                              {                                  StartInfo = new ProcessStartInfo                                  {                                      FileName = ts.task.Path'                                      Arguments = ts.parameters'                                      UseShellExecute = false'                                      RedirectStandardOutput = true'                                      RedirectStandardError = true'                                      CreateNoWindow = true                                  }                              };                                proc.Start();                              string output = "";                              bool write_file = false;                              while (!proc.StandardOutput.EndOfStream || !proc.StandardError.EndOfStream)                              {                                  string line;                                  if (!proc.StandardOutput.EndOfStream)                                      line = proc.StandardOutput.ReadLine();                                  else                                      line = proc.StandardError.ReadLine();                                  if (write_file || (ts.task.OneLine && !string.IsNullOrEmpty(output)))                                  {                                      output += line + "\n";                                      write_file = true;                                      continue;                                  }                                  output += line + "\n";                                  if (ts.channel == null)                                  {                                      // send back to channel                                      IRC.DeliverMessage(line' ts.user);                                  }                                  else                                  {                                      // to user                                      IRC.DeliverMessage(line' ts.channel);                                  }                              }                              proc.WaitForExit();                              proc.Close();                              proc.Dispose();                              if (write_file)                              {                                  string filename = Path.GetTempFileName();                                  if (filename.EndsWith(".tmp"))                                  {                                      filename = filename.Substring(0' filename.Length - 3);                                      filename += "txt";                                  }                                  File.WriteAllText(filename' output);  #if __MonoCS__                                  Mono.Unix.Native.Syscall.chmod(filename' Mono.Unix.Native.FilePermissions.S_IROTH);  #endif                                  if (ts.channel == null)                                  {                                      // send back to channel                                      IRC.DeliverMessage("The command produced multiline output' see " + Configuration.WebPages.WebpageURL + filename' ts.user);                                  }                                  else                                  {                                      // to user                                      IRC.DeliverMessage("The command produced multiline output' see " + Configuration.WebPages.WebpageURL + filename' ts.channel);                                  }                              }                          }                          catch (ThreadAbortException)                          {                              return;                          }                          catch (Exception ef)                          {                              HandleException(ef);                          }                      }                      System.Threading.Thread.Sleep(200);                  }              }              catch (System.Threading.ThreadAbortException)              {                  return;              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Construct,The following statement contains a magic number: Version = new Version(2' 3' 0' 0);
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Construct,The following statement contains a magic number: Version = new Version(2' 3' 0' 0);
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Load,The following statement contains a magic number: try              {                  LoadData();                  while (this.IsWorking)                  {                      if (save)                      {                          save = false;                          Save();                      }                      Thread.Sleep(20000);                  }              }              catch (ThreadAbortException)              {                  Save();                  if (SearchThread != null && SearchThread.ThreadState == ThreadState.Running)                      wmib.Core.ThreadManager.KillThread(SearchThread);              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,The following statement contains a magic number: try              {                  if (misc.IsValidRegex(temp_nick))                  {                      Regex ex = new Regex(temp_nick);                      string response = "I have never seen " + temp_nick;                      bool found = false;                      bool multiple = false;                      string results = "";                      int cn = 0;                      string action = "quitting the network with reason " ;                      lock (GlobalList)                      {                          foreach (item xx in GlobalList)                          {                              if (ex.IsMatch(xx.nick))                              {                                  if (found)                                  {                                      cn++;                                      if (cn < 6)                                      {                                          results += xx.nick + "' ";                                      }                                      multiple = true;                                      continue;                                  }                                  found = true;                                  Channel last;                                  switch (xx.LastAc)                                  {                                      case item.Action.Join:                                          action = "joining the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why' in";                                              }                                          }                                          break;                                      case item.Action.Kick:                                          action = "kicked from the channel";                                          break;                                      case item.Action.Nick:                                          if (xx.newnick == null)                                          {                                              action = "error NULL pointer at record";                                          }                                          else                                          {                                              action = "changing the nickname to " + xx.newnick;                                              last = Core.GetChannel(xx.lastplace);                                              if (last.ContainsUser(xx.newnick))                                              {                                                  action += " and " + xx.newnick + " is still in the channel";                                              }                                              else                                              {                                                  action += "' but " + xx.newnick + " is no longer in channel";                                              }                                              item nick = getItem(xx.newnick);                                              if (nick != null)                                              {                                                  TimeSpan span3 = DateTime.Now - nick.LastSeen;                                                  switch (nick.LastAc)                                                  {                                                      case item.Action.Exit:                                                          action += " because he quit the network " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Kick:                                                          action += " because he was kicked from the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Part:                                                          action += " because he left the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                  }                                              }                                          }                                          break;                                      case item.Action.Part:                                          action = "leaving the channel";                                          break;                                      case item.Action.Talk:                                          action = "talking in the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel. It was in";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why. It was in";                                              }                                          }                                          break;                                      case item.Action.Exit:                                          string reason = xx.quit;                                          if (String.IsNullOrEmpty(reason))                                          {                                              reason = "no reason was given";                                          }                                          action = "quitting the network with reason: " + reason;                                          break;                                  }                                  TimeSpan span2 = DateTime.Now - xx.LastSeen;                                  if (xx.lastplace == null)                                      xx.lastplace = "N/A";                                  if (xx.LastAc == item.Action.Exit)                                      response = "Last time I saw " + xx.nick + " they were " + action + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)";                                  else                                      response = "Last time I saw " + xx.nick + " they were " + action + " " + xx.lastplace + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)";                              }                          }                      }                      if (temp_nick.ToUpper() == temp_source.ToUpper())                      {                          response = "are you really looking for yourself?";                          IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                          Working = false;                          goto ex;                      }                      if (temp_nick.ToUpper() == Configuration.IRC.NickName.ToUpper())                      {                          response = "I am right here";                          IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                          Working = false;                          goto ex;                      }                      if (chan.ContainsUser(temp_nick))                          response = temp_nick + " is in here' right now";                      if (multiple)                      {                          if (results.Length > 2)                              results = results.Substring(0' results.Length - 2);                          if (cn > 5)                              results = results + " and " + (cn - 5) + " more results";                          response += " (multiple results were found: " + results + ")";                      }                      IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                      Working = false;                      goto ex;                  }                  IRC.DeliverMessage(messages.Localize("Error1"' chan.Language)' chan.Name);                  Working = false;              }              catch (ThreadAbortException)              {                  goto ex;              }              catch (Exception fail)              {                  HandleException(fail);                  IsWorking = false;              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,The following statement contains a magic number: try              {                  if (misc.IsValidRegex(temp_nick))                  {                      Regex ex = new Regex(temp_nick);                      string response = "I have never seen " + temp_nick;                      bool found = false;                      bool multiple = false;                      string results = "";                      int cn = 0;                      string action = "quitting the network with reason " ;                      lock (GlobalList)                      {                          foreach (item xx in GlobalList)                          {                              if (ex.IsMatch(xx.nick))                              {                                  if (found)                                  {                                      cn++;                                      if (cn < 6)                                      {                                          results += xx.nick + "' ";                                      }                                      multiple = true;                                      continue;                                  }                                  found = true;                                  Channel last;                                  switch (xx.LastAc)                                  {                                      case item.Action.Join:                                          action = "joining the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why' in";                                              }                                          }                                          break;                                      case item.Action.Kick:                                          action = "kicked from the channel";                                          break;                                      case item.Action.Nick:                                          if (xx.newnick == null)                                          {                                              action = "error NULL pointer at record";                                          }                                          else                                          {                                              action = "changing the nickname to " + xx.newnick;                                              last = Core.GetChannel(xx.lastplace);                                              if (last.ContainsUser(xx.newnick))                                              {                                                  action += " and " + xx.newnick + " is still in the channel";                                              }                                              else                                              {                                                  action += "' but " + xx.newnick + " is no longer in channel";                                              }                                              item nick = getItem(xx.newnick);                                              if (nick != null)                                              {                                                  TimeSpan span3 = DateTime.Now - nick.LastSeen;                                                  switch (nick.LastAc)                                                  {                                                      case item.Action.Exit:                                                          action += " because he quit the network " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Kick:                                                          action += " because he was kicked from the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Part:                                                          action += " because he left the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                  }                                              }                                          }                                          break;                                      case item.Action.Part:                                          action = "leaving the channel";                                          break;                                      case item.Action.Talk:                                          action = "talking in the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel. It was in";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why. It was in";                                              }                                          }                                          break;                                      case item.Action.Exit:                                          string reason = xx.quit;                                          if (String.IsNullOrEmpty(reason))                                          {                                              reason = "no reason was given";                                          }                                          action = "quitting the network with reason: " + reason;                                          break;                                  }                                  TimeSpan span2 = DateTime.Now - xx.LastSeen;                                  if (xx.lastplace == null)                                      xx.lastplace = "N/A";                                  if (xx.LastAc == item.Action.Exit)                                      response = "Last time I saw " + xx.nick + " they were " + action + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)";                                  else                                      response = "Last time I saw " + xx.nick + " they were " + action + " " + xx.lastplace + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)";                              }                          }                      }                      if (temp_nick.ToUpper() == temp_source.ToUpper())                      {                          response = "are you really looking for yourself?";                          IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                          Working = false;                          goto ex;                      }                      if (temp_nick.ToUpper() == Configuration.IRC.NickName.ToUpper())                      {                          response = "I am right here";                          IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                          Working = false;                          goto ex;                      }                      if (chan.ContainsUser(temp_nick))                          response = temp_nick + " is in here' right now";                      if (multiple)                      {                          if (results.Length > 2)                              results = results.Substring(0' results.Length - 2);                          if (cn > 5)                              results = results + " and " + (cn - 5) + " more results";                          response += " (multiple results were found: " + results + ")";                      }                      IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                      Working = false;                      goto ex;                  }                  IRC.DeliverMessage(messages.Localize("Error1"' chan.Language)' chan.Name);                  Working = false;              }              catch (ThreadAbortException)              {                  goto ex;              }              catch (Exception fail)              {                  HandleException(fail);                  IsWorking = false;              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,The following statement contains a magic number: try              {                  if (misc.IsValidRegex(temp_nick))                  {                      Regex ex = new Regex(temp_nick);                      string response = "I have never seen " + temp_nick;                      bool found = false;                      bool multiple = false;                      string results = "";                      int cn = 0;                      string action = "quitting the network with reason " ;                      lock (GlobalList)                      {                          foreach (item xx in GlobalList)                          {                              if (ex.IsMatch(xx.nick))                              {                                  if (found)                                  {                                      cn++;                                      if (cn < 6)                                      {                                          results += xx.nick + "' ";                                      }                                      multiple = true;                                      continue;                                  }                                  found = true;                                  Channel last;                                  switch (xx.LastAc)                                  {                                      case item.Action.Join:                                          action = "joining the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why' in";                                              }                                          }                                          break;                                      case item.Action.Kick:                                          action = "kicked from the channel";                                          break;                                      case item.Action.Nick:                                          if (xx.newnick == null)                                          {                                              action = "error NULL pointer at record";                                          }                                          else                                          {                                              action = "changing the nickname to " + xx.newnick;                                              last = Core.GetChannel(xx.lastplace);                                              if (last.ContainsUser(xx.newnick))                                              {                                                  action += " and " + xx.newnick + " is still in the channel";                                              }                                              else                                              {                                                  action += "' but " + xx.newnick + " is no longer in channel";                                              }                                              item nick = getItem(xx.newnick);                                              if (nick != null)                                              {                                                  TimeSpan span3 = DateTime.Now - nick.LastSeen;                                                  switch (nick.LastAc)                                                  {                                                      case item.Action.Exit:                                                          action += " because he quit the network " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Kick:                                                          action += " because he was kicked from the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Part:                                                          action += " because he left the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                  }                                              }                                          }                                          break;                                      case item.Action.Part:                                          action = "leaving the channel";                                          break;                                      case item.Action.Talk:                                          action = "talking in the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel. It was in";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why. It was in";                                              }                                          }                                          break;                                      case item.Action.Exit:                                          string reason = xx.quit;                                          if (String.IsNullOrEmpty(reason))                                          {                                              reason = "no reason was given";                                          }                                          action = "quitting the network with reason: " + reason;                                          break;                                  }                                  TimeSpan span2 = DateTime.Now - xx.LastSeen;                                  if (xx.lastplace == null)                                      xx.lastplace = "N/A";                                  if (xx.LastAc == item.Action.Exit)                                      response = "Last time I saw " + xx.nick + " they were " + action + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)";                                  else                                      response = "Last time I saw " + xx.nick + " they were " + action + " " + xx.lastplace + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)";                              }                          }                      }                      if (temp_nick.ToUpper() == temp_source.ToUpper())                      {                          response = "are you really looking for yourself?";                          IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                          Working = false;                          goto ex;                      }                      if (temp_nick.ToUpper() == Configuration.IRC.NickName.ToUpper())                      {                          response = "I am right here";                          IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                          Working = false;                          goto ex;                      }                      if (chan.ContainsUser(temp_nick))                          response = temp_nick + " is in here' right now";                      if (multiple)                      {                          if (results.Length > 2)                              results = results.Substring(0' results.Length - 2);                          if (cn > 5)                              results = results + " and " + (cn - 5) + " more results";                          response += " (multiple results were found: " + results + ")";                      }                      IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                      Working = false;                      goto ex;                  }                  IRC.DeliverMessage(messages.Localize("Error1"' chan.Language)' chan.Name);                  Working = false;              }              catch (ThreadAbortException)              {                  goto ex;              }              catch (Exception fail)              {                  HandleException(fail);                  IsWorking = false;              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,The following statement contains a magic number: try              {                  if (misc.IsValidRegex(temp_nick))                  {                      Regex ex = new Regex(temp_nick);                      string response = "I have never seen " + temp_nick;                      bool found = false;                      bool multiple = false;                      string results = "";                      int cn = 0;                      string action = "quitting the network with reason " ;                      lock (GlobalList)                      {                          foreach (item xx in GlobalList)                          {                              if (ex.IsMatch(xx.nick))                              {                                  if (found)                                  {                                      cn++;                                      if (cn < 6)                                      {                                          results += xx.nick + "' ";                                      }                                      multiple = true;                                      continue;                                  }                                  found = true;                                  Channel last;                                  switch (xx.LastAc)                                  {                                      case item.Action.Join:                                          action = "joining the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why' in";                                              }                                          }                                          break;                                      case item.Action.Kick:                                          action = "kicked from the channel";                                          break;                                      case item.Action.Nick:                                          if (xx.newnick == null)                                          {                                              action = "error NULL pointer at record";                                          }                                          else                                          {                                              action = "changing the nickname to " + xx.newnick;                                              last = Core.GetChannel(xx.lastplace);                                              if (last.ContainsUser(xx.newnick))                                              {                                                  action += " and " + xx.newnick + " is still in the channel";                                              }                                              else                                              {                                                  action += "' but " + xx.newnick + " is no longer in channel";                                              }                                              item nick = getItem(xx.newnick);                                              if (nick != null)                                              {                                                  TimeSpan span3 = DateTime.Now - nick.LastSeen;                                                  switch (nick.LastAc)                                                  {                                                      case item.Action.Exit:                                                          action += " because he quit the network " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Kick:                                                          action += " because he was kicked from the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Part:                                                          action += " because he left the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                  }                                              }                                          }                                          break;                                      case item.Action.Part:                                          action = "leaving the channel";                                          break;                                      case item.Action.Talk:                                          action = "talking in the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel. It was in";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why. It was in";                                              }                                          }                                          break;                                      case item.Action.Exit:                                          string reason = xx.quit;                                          if (String.IsNullOrEmpty(reason))                                          {                                              reason = "no reason was given";                                          }                                          action = "quitting the network with reason: " + reason;                                          break;                                  }                                  TimeSpan span2 = DateTime.Now - xx.LastSeen;                                  if (xx.lastplace == null)                                      xx.lastplace = "N/A";                                  if (xx.LastAc == item.Action.Exit)                                      response = "Last time I saw " + xx.nick + " they were " + action + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)";                                  else                                      response = "Last time I saw " + xx.nick + " they were " + action + " " + xx.lastplace + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)";                              }                          }                      }                      if (temp_nick.ToUpper() == temp_source.ToUpper())                      {                          response = "are you really looking for yourself?";                          IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                          Working = false;                          goto ex;                      }                      if (temp_nick.ToUpper() == Configuration.IRC.NickName.ToUpper())                      {                          response = "I am right here";                          IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                          Working = false;                          goto ex;                      }                      if (chan.ContainsUser(temp_nick))                          response = temp_nick + " is in here' right now";                      if (multiple)                      {                          if (results.Length > 2)                              results = results.Substring(0' results.Length - 2);                          if (cn > 5)                              results = results + " and " + (cn - 5) + " more results";                          response += " (multiple results were found: " + results + ")";                      }                      IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                      Working = false;                      goto ex;                  }                  IRC.DeliverMessage(messages.Localize("Error1"' chan.Language)' chan.Name);                  Working = false;              }              catch (ThreadAbortException)              {                  goto ex;              }              catch (Exception fail)              {                  HandleException(fail);                  IsWorking = false;              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,The following statement contains a magic number: try              {                  if (misc.IsValidRegex(temp_nick))                  {                      Regex ex = new Regex(temp_nick);                      string response = "I have never seen " + temp_nick;                      bool found = false;                      bool multiple = false;                      string results = "";                      int cn = 0;                      string action = "quitting the network with reason " ;                      lock (GlobalList)                      {                          foreach (item xx in GlobalList)                          {                              if (ex.IsMatch(xx.nick))                              {                                  if (found)                                  {                                      cn++;                                      if (cn < 6)                                      {                                          results += xx.nick + "' ";                                      }                                      multiple = true;                                      continue;                                  }                                  found = true;                                  Channel last;                                  switch (xx.LastAc)                                  {                                      case item.Action.Join:                                          action = "joining the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why' in";                                              }                                          }                                          break;                                      case item.Action.Kick:                                          action = "kicked from the channel";                                          break;                                      case item.Action.Nick:                                          if (xx.newnick == null)                                          {                                              action = "error NULL pointer at record";                                          }                                          else                                          {                                              action = "changing the nickname to " + xx.newnick;                                              last = Core.GetChannel(xx.lastplace);                                              if (last.ContainsUser(xx.newnick))                                              {                                                  action += " and " + xx.newnick + " is still in the channel";                                              }                                              else                                              {                                                  action += "' but " + xx.newnick + " is no longer in channel";                                              }                                              item nick = getItem(xx.newnick);                                              if (nick != null)                                              {                                                  TimeSpan span3 = DateTime.Now - nick.LastSeen;                                                  switch (nick.LastAc)                                                  {                                                      case item.Action.Exit:                                                          action += " because he quit the network " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Kick:                                                          action += " because he was kicked from the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Part:                                                          action += " because he left the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                  }                                              }                                          }                                          break;                                      case item.Action.Part:                                          action = "leaving the channel";                                          break;                                      case item.Action.Talk:                                          action = "talking in the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel. It was in";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why. It was in";                                              }                                          }                                          break;                                      case item.Action.Exit:                                          string reason = xx.quit;                                          if (String.IsNullOrEmpty(reason))                                          {                                              reason = "no reason was given";                                          }                                          action = "quitting the network with reason: " + reason;                                          break;                                  }                                  TimeSpan span2 = DateTime.Now - xx.LastSeen;                                  if (xx.lastplace == null)                                      xx.lastplace = "N/A";                                  if (xx.LastAc == item.Action.Exit)                                      response = "Last time I saw " + xx.nick + " they were " + action + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)";                                  else                                      response = "Last time I saw " + xx.nick + " they were " + action + " " + xx.lastplace + " at " + xx.LastSeen + " (" + FormatTimeSpan(span2) + " ago)";                              }                          }                      }                      if (temp_nick.ToUpper() == temp_source.ToUpper())                      {                          response = "are you really looking for yourself?";                          IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                          Working = false;                          goto ex;                      }                      if (temp_nick.ToUpper() == Configuration.IRC.NickName.ToUpper())                      {                          response = "I am right here";                          IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                          Working = false;                          goto ex;                      }                      if (chan.ContainsUser(temp_nick))                          response = temp_nick + " is in here' right now";                      if (multiple)                      {                          if (results.Length > 2)                              results = results.Substring(0' results.Length - 2);                          if (cn > 5)                              results = results + " and " + (cn - 5) + " more results";                          response += " (multiple results were found: " + results + ")";                      }                      IRC.DeliverMessage(temp_source + ": " + response' chan.Name);                      Working = false;                      goto ex;                  }                  IRC.DeliverMessage(messages.Localize("Error1"' chan.Language)' chan.Name);                  Working = false;              }              catch (ThreadAbortException)              {                  goto ex;              }              catch (Exception fail)              {                  HandleException(fail);                  IsWorking = false;              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,StartRegex,The following statement contains a magic number: try              {                  while (true)                  {                      if (requests.Count > 0)                      {                          List<ChannelRequest> Requests = new List<ChannelRequest>();                          lock (requests)                          {                              Requests.AddRange(requests);                              requests.Clear();                          }                          foreach (ChannelRequest ch in Requests)                          {                              if (ch.rg)                              {                                  RegEx2(ch.nick' ch.channel' ch.source);                                  continue;                              }                              RetrieveStatus2(ch.nick' ch.channel' ch.source' ch.hostname_check);                          }                          Requests.Clear();                      }                      Thread.Sleep(100);                  }              }              catch (ThreadAbortException)              { }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,RegEx2,The following statement contains a magic number: try              {                  temp_nick = nick;                  temp_source = source;                  chan = channel;                  SearchThread = new Thread(Search) {Name = "Module:Seen/Search"};                  wmib.Core.ThreadManager.RegisterThread(SearchThread);                  SearchThread.Start();                  Working = true;                  int curr = 0;                  while (Working)                  {                      Thread.Sleep(10);                      curr++;                      if (curr > 80)                      {                          Core.ThreadManager.KillThread(SearchThread);                          IRC.DeliverMessage("This search took too much time' please optimize query"' channel.Name);                          Working = false;                          break;                      }                  }              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,RegEx2,The following statement contains a magic number: try              {                  temp_nick = nick;                  temp_source = source;                  chan = channel;                  SearchThread = new Thread(Search) {Name = "Module:Seen/Search"};                  wmib.Core.ThreadManager.RegisterThread(SearchThread);                  SearchThread.Start();                  Working = true;                  int curr = 0;                  while (Working)                  {                      Thread.Sleep(10);                      curr++;                      if (curr > 80)                      {                          Core.ThreadManager.KillThread(SearchThread);                          IRC.DeliverMessage("This search took too much time' please optimize query"' channel.Name);                          Working = false;                          break;                      }                  }              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db"))                  {                      GlobalList = new List<item>();                      lock (GlobalList)                      {                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + "seen.db");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  try                                  {                                      string user = curr.Attributes[0].Value;                                      item.Action action = item.Action.Exit;                                      switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }                                      string Newnick = "";                                      string Reason = "";                                      if (curr.Attributes.Count > 4)                                      {                                          if (curr.Attributes[4].Name == "newnick")                                          {                                              Newnick = curr.Attributes[4].Value;                                          }                                          else if (curr.Attributes[4].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      if (curr.Attributes.Count > 5)                                      {                                          if (curr.Attributes[5].Name == "reason")                                          {                                              Reason = curr.Attributes[5].Value;                                          }                                      }                                      item User = new item(user' curr.Attributes[1].Value' curr.Attributes[2].Value' action' curr.Attributes[4].Value' Newnick' Reason);                                      GlobalList.Add(User);                                  }                                  catch (Exception fail)                                  {                                      HandleException(fail);                                  }                              }                          }                      }                  }              }              catch (Exception f)              {                  HandleException(f);              }
Magic Number,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The following statement contains a magic number: if (!message.StartsWith(Configuration.System.CommandPrefix) && GetConfig(channel' "Slap.Enabled"' false))              {                  string ms = message.Trim();                  ms = ms.Replace("!"' "");                  ms = ms.Replace("?"' "");                  ms = ms.ToLower();                  if (ms.StartsWith("hi "))                      ms = ms.Substring(3);                  if (ms.StartsWith("hi' "))                      ms = ms.Substring(4);                  if (ms.StartsWith("hello "))                      ms = ms.Substring(6);                  if (ms.StartsWith("hello' "))                      ms = ms.Substring(7);                  if (ms.EndsWith(":ping") || ms.EndsWith(": ping"))                  {                      string target = message.Substring(0' message.IndexOf(":"));                      if (GetConfig(channel' "Slap.Ping." + target' false))                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' you just managed to say pointless nick: ping. Now please try again with some proper meaning of your request' something like nick: I need this and that. Or don't do that at all' it's very annoying. Thank you"' channel);                          return;                      }                  }                    if (!channel.SystemUsers.IsKnown(invoker))                  {                      if (ms == "i have a question" || ms == "can i ask a question" || ms == "is anyone willing to help" || ms == "can i ask" || ms == "i got a question" || ms == "can i have a question" || ms == "can someone help me" || ms == "i need help")                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' just ask! There is no need to ask if you can ask' if you already asked the question please wait for someone to respond"' channel);                          return;                      }                        if (ms == "is anyone here" || ms == "is anybody here" || ms == "is anybody there" || ms == "is some one there" || ms == "is someone there" || ms == "is someone here" || ms == "anyone here" || ms == "someone here")                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' I am here' if you need anything' please ask' otherwise no one is going to help you... Thank you"' channel);                          return;                      }                  }              }
Magic Number,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The following statement contains a magic number: if (!message.StartsWith(Configuration.System.CommandPrefix) && GetConfig(channel' "Slap.Enabled"' false))              {                  string ms = message.Trim();                  ms = ms.Replace("!"' "");                  ms = ms.Replace("?"' "");                  ms = ms.ToLower();                  if (ms.StartsWith("hi "))                      ms = ms.Substring(3);                  if (ms.StartsWith("hi' "))                      ms = ms.Substring(4);                  if (ms.StartsWith("hello "))                      ms = ms.Substring(6);                  if (ms.StartsWith("hello' "))                      ms = ms.Substring(7);                  if (ms.EndsWith(":ping") || ms.EndsWith(": ping"))                  {                      string target = message.Substring(0' message.IndexOf(":"));                      if (GetConfig(channel' "Slap.Ping." + target' false))                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' you just managed to say pointless nick: ping. Now please try again with some proper meaning of your request' something like nick: I need this and that. Or don't do that at all' it's very annoying. Thank you"' channel);                          return;                      }                  }                    if (!channel.SystemUsers.IsKnown(invoker))                  {                      if (ms == "i have a question" || ms == "can i ask a question" || ms == "is anyone willing to help" || ms == "can i ask" || ms == "i got a question" || ms == "can i have a question" || ms == "can someone help me" || ms == "i need help")                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' just ask! There is no need to ask if you can ask' if you already asked the question please wait for someone to respond"' channel);                          return;                      }                        if (ms == "is anyone here" || ms == "is anybody here" || ms == "is anybody there" || ms == "is some one there" || ms == "is someone there" || ms == "is someone here" || ms == "anyone here" || ms == "someone here")                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' I am here' if you need anything' please ask' otherwise no one is going to help you... Thank you"' channel);                          return;                      }                  }              }
Magic Number,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The following statement contains a magic number: if (!message.StartsWith(Configuration.System.CommandPrefix) && GetConfig(channel' "Slap.Enabled"' false))              {                  string ms = message.Trim();                  ms = ms.Replace("!"' "");                  ms = ms.Replace("?"' "");                  ms = ms.ToLower();                  if (ms.StartsWith("hi "))                      ms = ms.Substring(3);                  if (ms.StartsWith("hi' "))                      ms = ms.Substring(4);                  if (ms.StartsWith("hello "))                      ms = ms.Substring(6);                  if (ms.StartsWith("hello' "))                      ms = ms.Substring(7);                  if (ms.EndsWith(":ping") || ms.EndsWith(": ping"))                  {                      string target = message.Substring(0' message.IndexOf(":"));                      if (GetConfig(channel' "Slap.Ping." + target' false))                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' you just managed to say pointless nick: ping. Now please try again with some proper meaning of your request' something like nick: I need this and that. Or don't do that at all' it's very annoying. Thank you"' channel);                          return;                      }                  }                    if (!channel.SystemUsers.IsKnown(invoker))                  {                      if (ms == "i have a question" || ms == "can i ask a question" || ms == "is anyone willing to help" || ms == "can i ask" || ms == "i got a question" || ms == "can i have a question" || ms == "can someone help me" || ms == "i need help")                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' just ask! There is no need to ask if you can ask' if you already asked the question please wait for someone to respond"' channel);                          return;                      }                        if (ms == "is anyone here" || ms == "is anybody here" || ms == "is anybody there" || ms == "is some one there" || ms == "is someone there" || ms == "is someone here" || ms == "anyone here" || ms == "someone here")                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' I am here' if you need anything' please ask' otherwise no one is going to help you... Thank you"' channel);                          return;                      }                  }              }
Magic Number,wmib.Extensions,Slap,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Slap\Slap.cs,Hook_PRIV,The following statement contains a magic number: if (!message.StartsWith(Configuration.System.CommandPrefix) && GetConfig(channel' "Slap.Enabled"' false))              {                  string ms = message.Trim();                  ms = ms.Replace("!"' "");                  ms = ms.Replace("?"' "");                  ms = ms.ToLower();                  if (ms.StartsWith("hi "))                      ms = ms.Substring(3);                  if (ms.StartsWith("hi' "))                      ms = ms.Substring(4);                  if (ms.StartsWith("hello "))                      ms = ms.Substring(6);                  if (ms.StartsWith("hello' "))                      ms = ms.Substring(7);                  if (ms.EndsWith(":ping") || ms.EndsWith(": ping"))                  {                      string target = message.Substring(0' message.IndexOf(":"));                      if (GetConfig(channel' "Slap.Ping." + target' false))                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' you just managed to say pointless nick: ping. Now please try again with some proper meaning of your request' something like nick: I need this and that. Or don't do that at all' it's very annoying. Thank you"' channel);                          return;                      }                  }                    if (!channel.SystemUsers.IsKnown(invoker))                  {                      if (ms == "i have a question" || ms == "can i ask a question" || ms == "is anyone willing to help" || ms == "can i ask" || ms == "i got a question" || ms == "can i have a question" || ms == "can someone help me" || ms == "i need help")                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' just ask! There is no need to ask if you can ask' if you already asked the question please wait for someone to respond"' channel);                          return;                      }                        if (ms == "is anyone here" || ms == "is anybody here" || ms == "is anybody there" || ms == "is some one there" || ms == "is someone there" || ms == "is someone here" || ms == "anyone here" || ms == "someone here")                      {                          IRC.DeliverMessage("Hi " + invoker.Nick + "' I am here' if you need anything' please ask' otherwise no one is going to help you... Thank you"' channel);                          return;                      }                  }              }
Magic Number,wmib.Extensions,StatisticsMod,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Construct,The following statement contains a magic number: Version = new Version(1' 0' 28' 0);
Magic Number,wmib.Extensions,StatisticsMod,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Extension_DumpHtml,The following statement contains a magic number: if (GetConfig(channel' "Statistics.Enabled"' false))              {                  Statistics list = (Statistics) channel.RetrieveObject(NAME);                  if (list != null)                  {                      builder.AppendLine("<br />");                      builder.AppendLine("<h4>Most active users :)</h4>");                      builder.AppendLine("<br />");                      builder.AppendLine();                      builder.AppendLine("<table class=\"infobot\" width=100% border=1>");                      builder.AppendLine(                          "<tr><td>N.</td><th>Nick</th><th>Messages (average / day)</th><th>Number of posted messages</th><th>Active since</th></tr>");                      int id = 0;                      int totalms = 0;                      DateTime startime = DateTime.Now;                      lock (list.data)                      {                          list.data.Sort();                          list.data.Reverse();                          foreach (Statistics.list user in list.data)                          {                              id++;                              totalms += user.messages;                              if (id > 100)                              {                                  continue;                              }                              if (startime > user.logging_since)                              {                                  startime = user.logging_since;                              }                              TimeSpan uptime = DateTime.Now - user.logging_since;                              float average = (user.messages/(float) (uptime.Days + 1));                              if (user.URL != "")                              {                                  builder.AppendFormat(                                      "<tr><td>{0}.</td><td><a target=\"_blank\" href=\"{1}\">{2}</a></td><td>{3}</td><td>{4}</td><td>{5}</td></tr>\n"'                                      id' user.URL' user.user' average' user.messages' user.logging_since                                      );                              }                              else                              {                                  builder.AppendFormat("<tr><td>{0}.</td><td>{1}</td><td>{2}</td><td>{3}</td><td>{4}</td></tr>\n"'                                                     id' user.user' average' user.messages' user.logging_since);                              }                              builder.AppendLine();                          }                      }                      TimeSpan uptime_total = DateTime.Now - startime;                      float average2 = (float) totalms/(1 + uptime_total.Days);                      builder.AppendFormat("<tr><td>N/A</td><th>Total:</th><th>{0}</th><th>{1}</th><td>N/A</td></tr>\n"' average2' totalms);                      builder.AppendLine();                      builder.AppendLine("</table>");                  }              }
Magic Number,wmib.Extensions,StatisticsMod,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Load,The following statement contains a magic number: while (Core.IsRunning)              {                  Thread.Sleep(8000);                  try                  {                      lock (Configuration.Channels)                      {                          foreach (Channel chan in Configuration.Channels)                          {                              Statistics st = (Statistics)chan.RetrieveObject(NAME);                              if (st != null)                              {                                  if (st.Stored == false)                                  {                                      st.Save();                                  }                                  st.Stored = true;                              }                          }                      }                      Thread.Sleep(8000);                  }                  catch (ThreadAbortException)                  {                      return;                  }                  catch (Exception f)                  {                      HandleException(f);                  }              }
Magic Number,wmib.Extensions,StatisticsMod,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Load,The following statement contains a magic number: while (Core.IsRunning)              {                  Thread.Sleep(8000);                  try                  {                      lock (Configuration.Channels)                      {                          foreach (Channel chan in Configuration.Channels)                          {                              Statistics st = (Statistics)chan.RetrieveObject(NAME);                              if (st != null)                              {                                  if (st.Stored == false)                                  {                                      st.Save();                                  }                                  st.Stored = true;                              }                          }                      }                      Thread.Sleep(8000);                  }                  catch (ThreadAbortException)                  {                      return;                  }                  catch (Exception f)                  {                      HandleException(f);                  }              }
Magic Number,wmib.Extensions,Statistics,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Load,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics"' channel.Name);                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics"))                  {                      lock (data)                      {                          data = new List<list>();                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  list item = new list                                  {                                      user = curr.Attributes[0].Value'                                      messages = int.Parse(curr.Attributes[1].Value)'                                      logging_since = DateTime.FromBinary(long.Parse(curr.Attributes[3].Value))                                  };                                  if (curr.Attributes.Count > 4)                                  {                                      item.URL = curr.Attributes[4].Value;                                  }                                  data.Add(item);                              }                          }                      }                  }              }              catch (Exception f)              {                  Core.HandleException(f' "statistics");              }
Magic Number,wmib.Extensions,Statistics,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Load,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics"' channel.Name);                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics"))                  {                      lock (data)                      {                          data = new List<list>();                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  list item = new list                                  {                                      user = curr.Attributes[0].Value'                                      messages = int.Parse(curr.Attributes[1].Value)'                                      logging_since = DateTime.FromBinary(long.Parse(curr.Attributes[3].Value))                                  };                                  if (curr.Attributes.Count > 4)                                  {                                      item.URL = curr.Attributes[4].Value;                                  }                                  data.Add(item);                              }                          }                      }                  }              }              catch (Exception f)              {                  Core.HandleException(f' "statistics");              }
Magic Number,wmib.Extensions,Statistics,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Statistics\Statistics.cs,Load,The following statement contains a magic number: try              {                  Core.RecoverFile(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics"' channel.Name);                  if (File.Exists(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics"))                  {                      lock (data)                      {                          data = new List<list>();                          XmlDocument stat = new XmlDocument();                          stat.Load(Variables.ConfigurationDirectory + Path.DirectorySeparatorChar + channel.Name + ".statistics");                          if (stat.ChildNodes[0].ChildNodes.Count > 0)                          {                              foreach (XmlNode curr in stat.ChildNodes[0].ChildNodes)                              {                                  list item = new list                                  {                                      user = curr.Attributes[0].Value'                                      messages = int.Parse(curr.Attributes[1].Value)'                                      logging_since = DateTime.FromBinary(long.Parse(curr.Attributes[3].Value))                                  };                                  if (curr.Attributes.Count > 4)                                  {                                      item.URL = curr.Attributes[4].Value;                                  }                                  data.Add(item);                              }                          }                      }                  }              }              catch (Exception f)              {                  Core.HandleException(f' "statistics");              }
Magic Number,wmib.Extensions,Thanks,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Thanks\Thanks.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith("!") && message.Contains("|"))              {                  DebugLog("Parsing: " + message' 6);                  string user = message.Substring(message.IndexOf("|") + 1);                  user = user.Trim();                  DebugLog("Parsed user - " + user' 6);                  if (user.Contains(" "))                  {                      user = user.Substring(0' user.IndexOf(" "));                  }                  if (user != "")                  {                      DebugLog("Adding user to list " + user' 6);                      Ring.Add(new Buffer.Item(invoker.Nick' user));                  }              }              else              {                  message = message.ToLower();                  if (message.Contains(channel.PrimaryInstance.Nick) && !message.Contains("thanks to") && (message.Contains("thanks") || message.Contains("thank you")) && !message.Contains("no thank"))                  {                      string response = "Hey " + invoker.Nick + "' you are welcome!";                      Buffer.Item x = Ring.getUser(invoker.Nick);                      DebugLog("Checking if user was recently informed using infobot");                      if (x != null)                      {                          response = "Hey " + invoker.Nick + "' you are welcome' but keep in mind I am just a stupid bot' it was actually " + x.User + " who helped you :-)";                          Ring.Delete(x);                      }                      IRC.DeliverMessage(response' channel);                  }              }
Magic Number,wmib.Extensions,Thanks,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Thanks\Thanks.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith("!") && message.Contains("|"))              {                  DebugLog("Parsing: " + message' 6);                  string user = message.Substring(message.IndexOf("|") + 1);                  user = user.Trim();                  DebugLog("Parsed user - " + user' 6);                  if (user.Contains(" "))                  {                      user = user.Substring(0' user.IndexOf(" "));                  }                  if (user != "")                  {                      DebugLog("Adding user to list " + user' 6);                      Ring.Add(new Buffer.Item(invoker.Nick' user));                  }              }              else              {                  message = message.ToLower();                  if (message.Contains(channel.PrimaryInstance.Nick) && !message.Contains("thanks to") && (message.Contains("thanks") || message.Contains("thank you")) && !message.Contains("no thank"))                  {                      string response = "Hey " + invoker.Nick + "' you are welcome!";                      Buffer.Item x = Ring.getUser(invoker.Nick);                      DebugLog("Checking if user was recently informed using infobot");                      if (x != null)                      {                          response = "Hey " + invoker.Nick + "' you are welcome' but keep in mind I am just a stupid bot' it was actually " + x.User + " who helped you :-)";                          Ring.Delete(x);                      }                      IRC.DeliverMessage(response' channel);                  }              }
Magic Number,wmib.Extensions,Thanks,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Thanks\Thanks.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith("!") && message.Contains("|"))              {                  DebugLog("Parsing: " + message' 6);                  string user = message.Substring(message.IndexOf("|") + 1);                  user = user.Trim();                  DebugLog("Parsed user - " + user' 6);                  if (user.Contains(" "))                  {                      user = user.Substring(0' user.IndexOf(" "));                  }                  if (user != "")                  {                      DebugLog("Adding user to list " + user' 6);                      Ring.Add(new Buffer.Item(invoker.Nick' user));                  }              }              else              {                  message = message.ToLower();                  if (message.Contains(channel.PrimaryInstance.Nick) && !message.Contains("thanks to") && (message.Contains("thanks") || message.Contains("thank you")) && !message.Contains("no thank"))                  {                      string response = "Hey " + invoker.Nick + "' you are welcome!";                      Buffer.Item x = Ring.getUser(invoker.Nick);                      DebugLog("Checking if user was recently informed using infobot");                      if (x != null)                      {                          response = "Hey " + invoker.Nick + "' you are welcome' but keep in mind I am just a stupid bot' it was actually " + x.User + " who helped you :-)";                          Ring.Delete(x);                      }                      IRC.DeliverMessage(response' channel);                  }              }
Magic Number,wmib.Extensions,DynamicRoles,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\DynamicRole\DynamicRoles.cs,Construct,The following statement contains a magic number: Version = new Version(1' 0' 0' 4);
Magic Number,wmib.Extensions,DynamicRoles,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\DynamicRole\DynamicRoles.cs,cmRevoke,The following statement contains a magic number: if (parameters.Count != 2)              {                  IRC.DeliverMessage("Invalid number of parameters"' pm.SourceChannel);                  return;              }
Magic Number,wmib.Extensions,DynamicRoles,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\DynamicRole\DynamicRoles.cs,cmRevokeRole,The following statement contains a magic number: if (parameters.Count != 2)              {                  IRC.DeliverMessage("Invalid number of parameters"' pm.SourceChannel);                  return;              }
Magic Number,wmib.Extensions,DynamicRoles,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\DynamicRole\DynamicRoles.cs,cmGrant,The following statement contains a magic number: if (parameters.Count != 2)              {                  IRC.DeliverMessage("Invalid number of parameters"' pm.SourceChannel);                  return;              }
Magic Number,wmib.Extensions,DynamicRoles,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\DynamicRole\DynamicRoles.cs,cmGrantRole,The following statement contains a magic number: if (parameters.Count != 2)              {                  IRC.DeliverMessage("Invalid number of parameters"' pm.SourceChannel);                  return;              }
Magic Number,wmib.Extensions,DynamicRoles,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\DynamicRole\DynamicRoles.cs,Load,The following statement contains a magic number: try              {                  while (IsWorking)                  {                      if (IsUpdated)                      {                          IsUpdated = false;                          Save();                      }                      Thread.Sleep(2000);                  }              }              catch (ThreadAbortException)              {                  Save();              }              catch (Exception fail)              {                  HandleException(fail);              }
Magic Number,wmib.Extensions,Translate,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Translate\Translate.cs,translate,The following statement contains a magic number: if (parts.Count < 3)              {                  IRC.DeliverMessage("Invalid number of parameters"' p.SourceChannel);                  return;              }
Magic Number,wmib.Extensions,Translate,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Translate\Translate.cs,Load,The following statement contains a magic number: while (IsWorking)              {                  if (Ring.data.Count > 0)                  {                      List<Buffer.Item> data = new List<Buffer.Item>();                      lock(Ring.data)                      {                          data.AddRange(Ring.data);                          Ring.data.Clear();                      }                      foreach (Buffer.Item request in data)                      {                          try                          {                              // get a translation for this item                              string result = wx.DownloadString(this.URL + "translate?key=" + key + "&lang=" + System.Web.HttpUtility.UrlEncode(request.SourceLang) + "-" +                                                                System.Web.HttpUtility.UrlEncode(request.TargetLang) + "&text=" +                                                                 System.Web.HttpUtility.UrlEncode(request.Message));                              XmlDocument xd = new XmlDocument();                              xd.LoadXml(result);                              bool ok = false;                              foreach(XmlNode n1 in xd.ChildNodes)                              {                                  if (n1.Name == "Translation" && n1.ChildNodes.Count > 0)                                  {                                      foreach (XmlNode n2 in n1.ChildNodes)                                      {                                          if (n2.Name == "text")                                          {                                              ok = true;                                              if (request.TargetName == null)                                              {                                                  IRC.DeliverMessage("Translating from " + request.SourceLang + " to " + request.TargetLang + ": " + n2.InnerText + " (powered by Yandex)"' request.Channel);                                              } else                                              {                                                  IRC.DeliverMessage(request.TargetName + ": " + n2.InnerText + " (powered by Yandex)"' request.Channel);                                              }                                          }                                      }                                  }                              }                              if (!ok)                              {                                  DebugLog(result);                                  IRC.DeliverMessage("Error - unable to translate the message (wrong language?) check debug logs for more information"' request.Channel);                              }                          } catch (ThreadAbortException)                          {                              return;                          } catch (System.Exception fail)                          {                              HandleException(fail);                          }                      }                  }                  Thread.Sleep(100);              }
Magic Number,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith(Configuration.System.CommandPrefix + "kick "))              {                  if (channel.SystemUsers.IsApproved(invoker' "admin"))                  {                      if (GetConfig(channel' "OP.Enabled"' false))                      {                          string nick = message.Substring(6);                          string reason = "Removed from the channel";                          if (nick.Contains(" "))                          {                              reason = nick.Substring(nick.IndexOf(" ") + 1);                              nick = nick.Substring(0' nick.IndexOf(" "));                          }                          libirc.User user = getUser(nick' channel);                          if (user == null)                          {                              IRC.DeliverMessage(messages.Localize("OpE5"' channel.Language)' channel' libirc.Defs.Priority.High);                              return;                          }                          // op self                          GetOp(channel);                          channel.PrimaryInstance.Network.Transfer("KICK " + channel.Name + " " + user.Nick + " :" + reason' libirc.Defs.Priority.High);                          if (!GetConfig(channel' "OP.Permanent"' false))                          {                              channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick);                          }                          return;                      }                      return;                  }                  if (!channel.SuppressWarnings)                  {                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel.Name);                  }                  return;              }
Magic Number,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith(Configuration.System.CommandPrefix + "kb "))              {                  if (channel.SystemUsers.IsApproved(invoker' "admin"))                  {                      if (GetConfig(channel' "OP.Enabled"' false))                      {                          string nick = message.Substring(4);                          string reason = "Removed from the channel";                          if (nick.Contains(" "))                          {                              reason = nick.Substring(nick.IndexOf(" ") + 1);                              nick = nick.Substring(0' nick.IndexOf(" "));                          }                          libirc.User user = getUser(nick' channel);                          if (user == null)                          {                              IRC.DeliverMessage(messages.Localize("OpE5"' channel.Language)' channel);                              return;                          }                          // op self                          GetOp(channel);                          if (string.IsNullOrEmpty(user.Host))                          {                              IRC.DeliverMessage(messages.Localize("OpE6"' channel.Language)' channel' libirc.Defs.Priority.High);                          }                          else                          {                              channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " +b *!*@" + user.Host' libirc.Defs.Priority.High);                          }                          channel.PrimaryInstance.Network.Transfer("KICK " + channel.Name + " " + user.Nick + " :" + reason' libirc.Defs.Priority.High);                          if (!GetConfig(channel' "OP.Permanent"' false))                          {                              channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick' libirc.Defs.Priority.Low);                          }                          return;                      }                      return;                  }                  if (!channel.SuppressWarnings)                  {                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel.Name' libirc.Defs.Priority.Low);                  }                  return;              }
Magic Number,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith(Configuration.System.CommandPrefix + "unkb "))              {                  if (channel.SystemUsers.IsApproved(invoker' "admin"))                  {                      if (GetConfig(channel' "OP.Enabled"' false))                      {                          string nick = message.Substring(6);                          GetOp(channel);                          channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -b *!*@" + nick' libirc.Defs.Priority.High);                          if (!GetConfig(channel' "OP.Permanent"' false))                          {                              channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick' libirc.Defs.Priority.Low);                          }                          return;                      }                      return;                  }                  if (!channel.SuppressWarnings)                  {                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel.Name' libirc.Defs.Priority.Low);                  }                  return;              }
Magic Number,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith(Configuration.System.CommandPrefix + "unq "))              {                  if (channel.SystemUsers.IsApproved(invoker' "admin"))                  {                      if (GetConfig(channel' "OP.Enabled"' false))                      {                          string nick = message.Substring(5);                          if (nick.Contains(" "))                          {                              nick = nick.Substring(0' nick.IndexOf(" "));                          }                          libirc.User user = getUser(nick' channel);                          if (user == null)                          {                              IRC.DeliverMessage(messages.Localize("OpE5"' channel.Language)' channel' libirc.Defs.Priority.High);                              return;                          }                            if (string.IsNullOrEmpty(user.Host))                          {                              IRC.DeliverMessage(messages.Localize("OpE6"' channel.Language)' channel' libirc.Defs.Priority.High);                              return;                          }                          // op self                          GetOp(channel);                          channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -q *!*@" + user.Host' libirc.Defs.Priority.High);                          if (!GetConfig(channel' "OP.Permanent"' false))                          {                              channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick);                          }                          return;                      }                      return;                  }                  if (!channel.SuppressWarnings)                  {                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel.Name' libirc.Defs.Priority.Low);                  }                  return;              }
Magic Number,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith(Configuration.System.CommandPrefix + "q "))              {                  if (channel.SystemUsers.IsApproved(invoker' "admin"))                  {                      if (GetConfig(channel' "OP.Enabled"' false))                      {                          string nick = message.Substring(3);                          if (nick.Contains(" "))                          {                              nick = nick.Substring(0' nick.IndexOf(" "));                          }                          libirc.User user = getUser(nick' channel);                          if (user == null)                          {                              IRC.DeliverMessage(messages.Localize("OpE5"' channel.Language)' channel' libirc.Defs.Priority.High);                              return;                          }                                                    if (string.IsNullOrEmpty(user.Host))                          {                              IRC.DeliverMessage(messages.Localize("OpE6"' channel.Language)' channel' libirc.Defs.Priority.High);                              return;                          }                          GetOp(channel);                          channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " +q *!*@" + user.Host' libirc.Defs.Priority.High);                          if (!GetConfig(channel' "OP.Permanent"' false))                          {                              channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick' libirc.Defs.Priority.Low);                          }                          return;                      }                      return;                  }                  if (!channel.SuppressWarnings)                  {                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel.Name' libirc.Defs.Priority.Low);                  }                  return;              }
Magic Number,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith(Configuration.System.CommandPrefix + "jb "))              {                  if (channel.SystemUsers.IsApproved(invoker' "admin"))                  {                      if (GetConfig(channel' "OP.Enabled"' false))                      {                          string nick = message.Substring(4);                          if (nick.Contains(" "))                          {                              nick = nick.Substring(0' nick.IndexOf(" "));                          }                          libirc.User user = getUser(nick' channel);                          if (user != null)                          {                              nick = user.Nick;                          }                          // op self                          GetOp(channel);                          channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " +b " + nick + "!*@*$##fix_your_connection"' libirc.Defs.Priority.High);                          if (!GetConfig(channel' "OP.Permanent"' false))                          {                              channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick' libirc.Defs.Priority.Low);                          }                          return;                      }                      return;                  }                  if (!channel.SuppressWarnings)                  {                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel.Name' libirc.Defs.Priority.Low);                  }                  return;              }
Magic Number,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Hook_PRIV,The following statement contains a magic number: if (message.StartsWith(Configuration.System.CommandPrefix + "unjb "))              {                  if (channel.SystemUsers.IsApproved(invoker' "admin"))                  {                      if (GetConfig(channel' "OP.Enabled"' false))                      {                          string nick = message.Substring(6);                          if (nick.Contains(" "))                          {                              nick = nick.Substring(0' nick.IndexOf(" "));                          }                          libirc.User user = getUser(nick' channel);                          if (user != null)                          {                              nick = user.Nick;                          }                          // op self                          GetOp(channel);                          channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -b " + nick + "!*@*$##fix_your_connection"' libirc.Defs.Priority.High);                          if (!GetConfig(channel' "OP.Permanent"' false))                          {                              channel.PrimaryInstance.Network.Transfer("MODE " + channel.Name + " -o " + channel.PrimaryInstance.Nick' libirc.Defs.Priority.Low);                          }                          return;                      }                      return;                  }                  if (!channel.SuppressWarnings)                  {                      IRC.DeliverMessage(messages.Localize("PermissionDenied"' channel.Language)' channel.Name' libirc.Defs.Priority.Low);                  }              }
Magic Number,wmib.Extensions,ChannelTools,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\OperatorTools\ChannelTools.cs,Construct,The following statement contains a magic number: Version = new Version(1' 0' 20);
Magic Number,wmib.Extensions.RssFeed,Feed,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Feed.cs,Fetch,The following statement contains a magic number: lock (RssProviders)              {                  foreach (Subscription curr in RssProviders)                  {                      if (curr.disabled)                          continue;                      if (curr.data == null)                      {                          // we didn't retrieve any list of items so far so let's get a first one and later compare it                          curr.data = RssManager.ReadFeed(curr.URL' curr' owner.Name);                          continue;                      }                      List<RssFeedItem> feed = RssManager.ReadFeed(curr.URL' curr' owner.Name);                      if (feed == null)                      {                          Syslog.DebugLog("NULL feed for " + curr.Name' 6);                          continue;                      }                      if (feed.Count == 0)                      {                          Syslog.DebugLog("0 items for " + curr.Name' 6);                          continue;                      }                      // now we retrieved a new list of items                      Syslog.DebugLog("there are " + feed.Count + "feed:" + curr.Name' 6);                      if (!RssManager.CompareLists(curr.data' feed))                      {                          List<RssFeedItem> diff = new List<RssFeedItem>();                          foreach (RssFeedItem item in feed)                              if (!RssManager.ContainsItem(curr.data' item))                                  diff.Add(item);                          curr.data = feed;                          diff.Reverse();                          foreach (RssFeedItem di in diff)                          {                              string description = di.Description.Replace("\n"' " ");                              if (description.Length > 200)                              {                                  description = description.Substring(0' 200);                              }                              if (curr.ScannerOnly)                              {                                  if (!Matches(di.Title) && !Matches(di.Description))                                  {                                      continue;                                  }                              }                              string temp = Module.GetConfig(owner' "Rss.Style"' "[$name] $title: $description $link");                              if (curr.template != "")                              {                                  temp = curr.template;                              }                              string message = temp.Replace("$link"' di.Link)                                  .Replace("$title"' di.Title)                                  .Replace("$name"' curr.Name)                                  .Replace("$author"' di.Author)                                  .Replace("$description"' description)                                  .Replace("$bugzilla_assignee"' di.bugzilla_assignee)                                  .Replace("$bugzilla_component"' di.bugzilla_component)                                  .Replace("$bugzilla_creation"' di.bugzilla_creation)                                  .Replace("$bugzilla_priority"' di.bugzilla_priority)                                  .Replace("$bugzilla_product"' di.bugzilla_product)                                  .Replace("$bugzilla_reporter"' di.bugzilla_reporter)                                  .Replace("$bugzilla_resolution"' di.bugzilla_reso)                                  .Replace("$bugzilla_severity"' di.bugzilla_severity)                                  .Replace("$bugzilla_status"' di.bugzilla_status)                                  .Replace("$bugzilla_target"' di.bugzilla_target);                              IRC.DeliverMessage(message' owner.Name' libirc.Defs.Priority.Low);                          }                      }                  }              }
Magic Number,wmib.Extensions.RssFeed,Feed,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Feed.cs,Fetch,The following statement contains a magic number: lock (RssProviders)              {                  foreach (Subscription curr in RssProviders)                  {                      if (curr.disabled)                          continue;                      if (curr.data == null)                      {                          // we didn't retrieve any list of items so far so let's get a first one and later compare it                          curr.data = RssManager.ReadFeed(curr.URL' curr' owner.Name);                          continue;                      }                      List<RssFeedItem> feed = RssManager.ReadFeed(curr.URL' curr' owner.Name);                      if (feed == null)                      {                          Syslog.DebugLog("NULL feed for " + curr.Name' 6);                          continue;                      }                      if (feed.Count == 0)                      {                          Syslog.DebugLog("0 items for " + curr.Name' 6);                          continue;                      }                      // now we retrieved a new list of items                      Syslog.DebugLog("there are " + feed.Count + "feed:" + curr.Name' 6);                      if (!RssManager.CompareLists(curr.data' feed))                      {                          List<RssFeedItem> diff = new List<RssFeedItem>();                          foreach (RssFeedItem item in feed)                              if (!RssManager.ContainsItem(curr.data' item))                                  diff.Add(item);                          curr.data = feed;                          diff.Reverse();                          foreach (RssFeedItem di in diff)                          {                              string description = di.Description.Replace("\n"' " ");                              if (description.Length > 200)                              {                                  description = description.Substring(0' 200);                              }                              if (curr.ScannerOnly)                              {                                  if (!Matches(di.Title) && !Matches(di.Description))                                  {                                      continue;                                  }                              }                              string temp = Module.GetConfig(owner' "Rss.Style"' "[$name] $title: $description $link");                              if (curr.template != "")                              {                                  temp = curr.template;                              }                              string message = temp.Replace("$link"' di.Link)                                  .Replace("$title"' di.Title)                                  .Replace("$name"' curr.Name)                                  .Replace("$author"' di.Author)                                  .Replace("$description"' description)                                  .Replace("$bugzilla_assignee"' di.bugzilla_assignee)                                  .Replace("$bugzilla_component"' di.bugzilla_component)                                  .Replace("$bugzilla_creation"' di.bugzilla_creation)                                  .Replace("$bugzilla_priority"' di.bugzilla_priority)                                  .Replace("$bugzilla_product"' di.bugzilla_product)                                  .Replace("$bugzilla_reporter"' di.bugzilla_reporter)                                  .Replace("$bugzilla_resolution"' di.bugzilla_reso)                                  .Replace("$bugzilla_severity"' di.bugzilla_severity)                                  .Replace("$bugzilla_status"' di.bugzilla_status)                                  .Replace("$bugzilla_target"' di.bugzilla_target);                              IRC.DeliverMessage(message' owner.Name' libirc.Defs.Priority.Low);                          }                      }                  }              }
Magic Number,wmib.Extensions.RssFeed,Feed,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Feed.cs,Fetch,The following statement contains a magic number: lock (RssProviders)              {                  foreach (Subscription curr in RssProviders)                  {                      if (curr.disabled)                          continue;                      if (curr.data == null)                      {                          // we didn't retrieve any list of items so far so let's get a first one and later compare it                          curr.data = RssManager.ReadFeed(curr.URL' curr' owner.Name);                          continue;                      }                      List<RssFeedItem> feed = RssManager.ReadFeed(curr.URL' curr' owner.Name);                      if (feed == null)                      {                          Syslog.DebugLog("NULL feed for " + curr.Name' 6);                          continue;                      }                      if (feed.Count == 0)                      {                          Syslog.DebugLog("0 items for " + curr.Name' 6);                          continue;                      }                      // now we retrieved a new list of items                      Syslog.DebugLog("there are " + feed.Count + "feed:" + curr.Name' 6);                      if (!RssManager.CompareLists(curr.data' feed))                      {                          List<RssFeedItem> diff = new List<RssFeedItem>();                          foreach (RssFeedItem item in feed)                              if (!RssManager.ContainsItem(curr.data' item))                                  diff.Add(item);                          curr.data = feed;                          diff.Reverse();                          foreach (RssFeedItem di in diff)                          {                              string description = di.Description.Replace("\n"' " ");                              if (description.Length > 200)                              {                                  description = description.Substring(0' 200);                              }                              if (curr.ScannerOnly)                              {                                  if (!Matches(di.Title) && !Matches(di.Description))                                  {                                      continue;                                  }                              }                              string temp = Module.GetConfig(owner' "Rss.Style"' "[$name] $title: $description $link");                              if (curr.template != "")                              {                                  temp = curr.template;                              }                              string message = temp.Replace("$link"' di.Link)                                  .Replace("$title"' di.Title)                                  .Replace("$name"' curr.Name)                                  .Replace("$author"' di.Author)                                  .Replace("$description"' description)                                  .Replace("$bugzilla_assignee"' di.bugzilla_assignee)                                  .Replace("$bugzilla_component"' di.bugzilla_component)                                  .Replace("$bugzilla_creation"' di.bugzilla_creation)                                  .Replace("$bugzilla_priority"' di.bugzilla_priority)                                  .Replace("$bugzilla_product"' di.bugzilla_product)                                  .Replace("$bugzilla_reporter"' di.bugzilla_reporter)                                  .Replace("$bugzilla_resolution"' di.bugzilla_reso)                                  .Replace("$bugzilla_severity"' di.bugzilla_severity)                                  .Replace("$bugzilla_status"' di.bugzilla_status)                                  .Replace("$bugzilla_target"' di.bugzilla_target);                              IRC.DeliverMessage(message' owner.Name' libirc.Defs.Priority.Low);                          }                      }                  }              }
Magic Number,wmib.Extensions.RssFeed,Feed,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Feed.cs,Fetch,The following statement contains a magic number: lock (RssProviders)              {                  foreach (Subscription curr in RssProviders)                  {                      if (curr.disabled)                          continue;                      if (curr.data == null)                      {                          // we didn't retrieve any list of items so far so let's get a first one and later compare it                          curr.data = RssManager.ReadFeed(curr.URL' curr' owner.Name);                          continue;                      }                      List<RssFeedItem> feed = RssManager.ReadFeed(curr.URL' curr' owner.Name);                      if (feed == null)                      {                          Syslog.DebugLog("NULL feed for " + curr.Name' 6);                          continue;                      }                      if (feed.Count == 0)                      {                          Syslog.DebugLog("0 items for " + curr.Name' 6);                          continue;                      }                      // now we retrieved a new list of items                      Syslog.DebugLog("there are " + feed.Count + "feed:" + curr.Name' 6);                      if (!RssManager.CompareLists(curr.data' feed))                      {                          List<RssFeedItem> diff = new List<RssFeedItem>();                          foreach (RssFeedItem item in feed)                              if (!RssManager.ContainsItem(curr.data' item))                                  diff.Add(item);                          curr.data = feed;                          diff.Reverse();                          foreach (RssFeedItem di in diff)                          {                              string description = di.Description.Replace("\n"' " ");                              if (description.Length > 200)                              {                                  description = description.Substring(0' 200);                              }                              if (curr.ScannerOnly)                              {                                  if (!Matches(di.Title) && !Matches(di.Description))                                  {                                      continue;                                  }                              }                              string temp = Module.GetConfig(owner' "Rss.Style"' "[$name] $title: $description $link");                              if (curr.template != "")                              {                                  temp = curr.template;                              }                              string message = temp.Replace("$link"' di.Link)                                  .Replace("$title"' di.Title)                                  .Replace("$name"' curr.Name)                                  .Replace("$author"' di.Author)                                  .Replace("$description"' description)                                  .Replace("$bugzilla_assignee"' di.bugzilla_assignee)                                  .Replace("$bugzilla_component"' di.bugzilla_component)                                  .Replace("$bugzilla_creation"' di.bugzilla_creation)                                  .Replace("$bugzilla_priority"' di.bugzilla_priority)                                  .Replace("$bugzilla_product"' di.bugzilla_product)                                  .Replace("$bugzilla_reporter"' di.bugzilla_reporter)                                  .Replace("$bugzilla_resolution"' di.bugzilla_reso)                                  .Replace("$bugzilla_severity"' di.bugzilla_severity)                                  .Replace("$bugzilla_status"' di.bugzilla_status)                                  .Replace("$bugzilla_target"' di.bugzilla_target);                              IRC.DeliverMessage(message' owner.Name' libirc.Defs.Priority.Low);                          }                      }                  }              }
Magic Number,wmib.Extensions.RssFeed,Feed,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Feed.cs,Fetch,The following statement contains a magic number: lock (RssProviders)              {                  foreach (Subscription curr in RssProviders)                  {                      if (curr.disabled)                          continue;                      if (curr.data == null)                      {                          // we didn't retrieve any list of items so far so let's get a first one and later compare it                          curr.data = RssManager.ReadFeed(curr.URL' curr' owner.Name);                          continue;                      }                      List<RssFeedItem> feed = RssManager.ReadFeed(curr.URL' curr' owner.Name);                      if (feed == null)                      {                          Syslog.DebugLog("NULL feed for " + curr.Name' 6);                          continue;                      }                      if (feed.Count == 0)                      {                          Syslog.DebugLog("0 items for " + curr.Name' 6);                          continue;                      }                      // now we retrieved a new list of items                      Syslog.DebugLog("there are " + feed.Count + "feed:" + curr.Name' 6);                      if (!RssManager.CompareLists(curr.data' feed))                      {                          List<RssFeedItem> diff = new List<RssFeedItem>();                          foreach (RssFeedItem item in feed)                              if (!RssManager.ContainsItem(curr.data' item))                                  diff.Add(item);                          curr.data = feed;                          diff.Reverse();                          foreach (RssFeedItem di in diff)                          {                              string description = di.Description.Replace("\n"' " ");                              if (description.Length > 200)                              {                                  description = description.Substring(0' 200);                              }                              if (curr.ScannerOnly)                              {                                  if (!Matches(di.Title) && !Matches(di.Description))                                  {                                      continue;                                  }                              }                              string temp = Module.GetConfig(owner' "Rss.Style"' "[$name] $title: $description $link");                              if (curr.template != "")                              {                                  temp = curr.template;                              }                              string message = temp.Replace("$link"' di.Link)                                  .Replace("$title"' di.Title)                                  .Replace("$name"' curr.Name)                                  .Replace("$author"' di.Author)                                  .Replace("$description"' description)                                  .Replace("$bugzilla_assignee"' di.bugzilla_assignee)                                  .Replace("$bugzilla_component"' di.bugzilla_component)                                  .Replace("$bugzilla_creation"' di.bugzilla_creation)                                  .Replace("$bugzilla_priority"' di.bugzilla_priority)                                  .Replace("$bugzilla_product"' di.bugzilla_product)                                  .Replace("$bugzilla_reporter"' di.bugzilla_reporter)                                  .Replace("$bugzilla_resolution"' di.bugzilla_reso)                                  .Replace("$bugzilla_severity"' di.bugzilla_severity)                                  .Replace("$bugzilla_status"' di.bugzilla_status)                                  .Replace("$bugzilla_target"' di.bugzilla_target);                              IRC.DeliverMessage(message' owner.Name' libirc.Defs.Priority.Low);                          }                      }                  }              }
Magic Number,wmib.Extensions.RssFeed,Subscription,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Feed.cs,Reset,The following statement contains a magic number: retries = 2;
Magic Number,wmib.Extensions.RssFeed,RSS,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Module.cs,Construct,The following statement contains a magic number: Version = new Version(1' 0' 20' 0);
Magic Number,wmib.Extensions.RssFeed,RSS,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Module.cs,Load,The following statement contains a magic number: try              {                  Core.Help.Register("rss-on"' null);                  Core.Help.Register("rss-off"' null);                  Core.Help.Register("rss+"' null);                  Core.Help.Register("rss-"' null);                  while (IsWorking)                  {                      foreach (Channel channel in Configuration.ChannelList)                      {                          try                          {                              if (GetConfig(channel' "Rss.Enable"' false))                              {                                  Feed feed = (Feed)channel.RetrieveObject("rss");                                  if (feed != null)                                  {                                      feed.Fetch();                                  }                                  else                                  {                                      Log("WARNING: Feed is enabled but object is not present in " + channel.Name' true);                                  }                              }                          }                          catch (ThreadAbortException)                          {                              return;                          }                          catch (Exception fail)                          {                              HandleException(fail);                          }                      }                      Thread.Sleep(10000);                  }              }              catch (ThreadAbortException)              {                  return;              }              catch (Exception fail)              {                  HandleException(fail);                  Log("Rss feed is permanently down"' true);              }
Duplicate Code,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ReadFeed,The method contains a code clone-set at the following line numbers (starting from the method definition): ((19' 48)' (118' 147))
Missing Default,wmib.Extensions,Infobot,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Definitions.cs,LoadData,The following switch statement is missing a default case: switch (x.Name)                          {                              case "key_name":                                  name = x.Value;                                  break;                              case "data":                                  value = x.Value;                                  break;                              case "created_date":                                  date = x.Value;                                  break;                              case "nickname":                                  user = x.Value;                                  break;                              case "touched":                                  time = x.Value;                                  break;                              case "triggered":                                  number = int.Parse(x.Value);                                  break;                              case "raw":                                  raw = bool.Parse(x.Value);                                  break;                              case "is_act":                                  is_act = bool.Parse(x.Value);                                  break;                          }
Missing Default,wmib.Extensions,InfobotModule,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Infobot\Plugin.cs,Hook_SetConfig,The following switch statement is missing a default case: switch (config)              {                  case "infobot-trim-white-space-in-name":                      if (bool.TryParse(value' out _temp_a))                      {                          SetConfig(chan' "Infobot.Trim-white-space-in-name"' _temp_a);                          IRC.DeliverMessage(messages.Localize("configuresave"' chan.Language' new List<string> { value' config })' chan.Name);                          chan.SaveConfig();                          return true;                      }                      IRC.DeliverMessage(messages.Localize("configure-va"' chan.Language' new List<string> { config' value })' chan.Name);                      return true;                  case "infobot-auto-complete":                      if (bool.TryParse(value' out _temp_a))                      {                          SetConfig(chan' "Infobot.auto-complete"' _temp_a);                          IRC.DeliverMessage(messages.Localize("configuresave"' chan.Language' new List<string> { value' config })' chan.Name);                          chan.SaveConfig();                          return true;                      }                      IRC.DeliverMessage(messages.Localize("configure-va"' chan.Language' new List<string> { config' value })' chan.Name);                      return true;                  case "infobot-sorted":                      if (bool.TryParse(value' out _temp_a))                      {                          SetConfig(chan' "Infobot.Sorted"' _temp_a);                          IRC.DeliverMessage(messages.Localize("configuresave"' chan.Language' new List<string> { value' config })' chan.Name);                          chan.SaveConfig();                          return true;                      }                      IRC.DeliverMessage(messages.Localize("configure-va"' chan.Language' new List<string> { config' value })' chan.Name);                      return true;                  case "infobot-help":                      if (bool.TryParse(value' out _temp_a))                      {                          SetConfig(chan' "Infobot.Help"' _temp_a);                          IRC.DeliverMessage(messages.Localize("configuresave"' chan.Language' new List<string> { value' config })' chan.Name);                          chan.SaveConfig();                          return true;                      }                      IRC.DeliverMessage(messages.Localize("configure-va"' chan.Language' new List<string> { config' value })' chan.Name);                      return true;                  case "infobot-case":                      if (bool.TryParse(value' out _temp_a))                      {                          SetConfig(chan' "Infobot.Case"' _temp_a);                          IRC.DeliverMessage(messages.Localize("configuresave"' chan.Language' new List<string> { value' config })' chan.Name);                          chan.SaveConfig();                          Infobot infobot = (Infobot)chan.RetrieveObject("Infobot");                          if (infobot != null)                          {                              infobot.Sensitive = _temp_a;                          }                          return true;                      }                      IRC.DeliverMessage(messages.Localize("configure-va"' chan.Language' new List<string> { config' value })' chan.Name);                      return true;              }
Missing Default,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,The following switch statement is missing a default case: switch (xx.LastAc)                                  {                                      case item.Action.Join:                                          action = "joining the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why' in";                                              }                                          }                                          break;                                      case item.Action.Kick:                                          action = "kicked from the channel";                                          break;                                      case item.Action.Nick:                                          if (xx.newnick == null)                                          {                                              action = "error NULL pointer at record";                                          }                                          else                                          {                                              action = "changing the nickname to " + xx.newnick;                                              last = Core.GetChannel(xx.lastplace);                                              if (last.ContainsUser(xx.newnick))                                              {                                                  action += " and " + xx.newnick + " is still in the channel";                                              }                                              else                                              {                                                  action += "' but " + xx.newnick + " is no longer in channel";                                              }                                              item nick = getItem(xx.newnick);                                              if (nick != null)                                              {                                                  TimeSpan span3 = DateTime.Now - nick.LastSeen;                                                  switch (nick.LastAc)                                                  {                                                      case item.Action.Exit:                                                          action += " because he quit the network " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Kick:                                                          action += " because he was kicked from the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Part:                                                          action += " because he left the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                  }                                              }                                          }                                          break;                                      case item.Action.Part:                                          action = "leaving the channel";                                          break;                                      case item.Action.Talk:                                          action = "talking in the channel";                                          last = Core.GetChannel(xx.lastplace);                                          if (last != null)                                          {                                              if (last.ContainsUser(xx.nick))                                              {                                                  action += "' they are still in the channel. It was in";                                              }                                              else                                              {                                                  action += "' but they are not in the channel now and I don't know why. It was in";                                              }                                          }                                          break;                                      case item.Action.Exit:                                          string reason = xx.quit;                                          if (String.IsNullOrEmpty(reason))                                          {                                              reason = "no reason was given";                                          }                                          action = "quitting the network with reason: " + reason;                                          break;                                  }
Missing Default,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Search,The following switch statement is missing a default case: switch (nick.LastAc)                                                  {                                                      case item.Action.Exit:                                                          action += " because he quit the network " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Kick:                                                          action += " because he was kicked from the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                      case item.Action.Part:                                                          action += " because he left the channel " + span3 + " ago. The nick change was done in";                                                          break;                                                  }
Missing Default,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,RetrieveStatus2,The following switch statement is missing a default case: switch (xx.LastAc)                              {                                  case item.Action.Join:                                      action = "joining the channel";                                      last = Core.GetChannel(xx.lastplace);                                      if (last != null)                                      {                                          if (last.ContainsUser(nick))                                          {                                              action += "' they are still in the channel";                                          }                                          else                                          {                                              action += "' but they are not in the channel now and I don't know why' in";                                          }                                      }                                      break;                                  case item.Action.Kick:                                      action = "kicked from the channel";                                      break;                                  case item.Action.Nick:                                      if (xx.newnick == null)                                      {                                          action = "error NULL pointer at record";                                          break;                                      }                                      action = "changing the nickname to " + xx.newnick;                                      last = Core.GetChannel(xx.lastplace);                                      if (last.ContainsUser(xx.newnick))                                      {                                          action += " and " + xx.newnick + " is still in the channel";                                      }                                      else                                      {                                          action += "' but " + xx.newnick + " is no longer in channel";                                      }                                      item nick2 = getItem(xx.newnick);                                      if (nick2 != null)                                      {                                          TimeSpan span3 = DateTime.Now - nick2.LastSeen;                                          switch (nick2.LastAc)                                          {                                              case item.Action.Exit:                                                  action += " because he quit the network " + span3 + " ago. The nick change was done in";                                                  break;                                              case item.Action.Kick:                                                  action += " because he was kicked from the channel " + span3 + " ago. The nick change was done in";                                                  break;                                              case item.Action.Part:                                                  action += " because he left the channel " + span3 + " ago. The nick change was done in";                                                  break;                                          }                                      }                                      break;                                  case item.Action.Part:                                      action = "leaving the channel";                                      break;                                  case item.Action.Talk:                                      action = "talking in the channel";                                      last = Core.GetChannel(xx.lastplace);                                      if (last != null)                                      {                                          if (last.ContainsUser(nick))                                          {                                              action += "' they are still in the channel";                                          }                                          else                                          {                                              action += "' but they are not in the channel now and I don't know why' in";                                          }                                      }                                      break;                                  case item.Action.Exit:                                      string reason = xx.quit;                                      if (reason == "")                                      {                                          reason = "no reason was given";                                      }                                      action = "quitting the network with reason: " + reason;                                      break;                              }
Missing Default,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,RetrieveStatus2,The following switch statement is missing a default case: switch (nick2.LastAc)                                          {                                              case item.Action.Exit:                                                  action += " because he quit the network " + span3 + " ago. The nick change was done in";                                                  break;                                              case item.Action.Kick:                                                  action += " because he was kicked from the channel " + span3 + " ago. The nick change was done in";                                                  break;                                              case item.Action.Part:                                                  action += " because he left the channel " + span3 + " ago. The nick change was done in";                                                  break;                                          }
Missing Default,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,Save,The following switch statement is missing a default case: switch (curr.LastAc)                          {                              case item.Action.Nick:                                  action.Value = "Nick";                                  break;                              case item.Action.Join:                                  action.Value = "Join";                                  break;                              case item.Action.Part:                                  action.Value = "Part";                                  break;                              case item.Action.Kick:                                  action.Value = "Kick";                                  break;                              case item.Action.Talk:                                  action.Value = "Talk";                                  break;                          }
Missing Default,wmib.Extensions,Seen,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\Seen\Seen.cs,LoadData,The following switch statement is missing a default case: switch (curr.Attributes[3].Value)                                      {                                          case "Join":                                              action = item.Action.Join;                                              break;                                          case "Part":                                              action = item.Action.Part;                                              break;                                          case "Talk":                                              action = item.Action.Talk;                                              break;                                          case "Kick":                                              action = item.Action.Kick;                                              break;                                          case "Nick":                                              action = item.Action.Nick;                                              break;                                      }
Missing Default,wmib.Extensions,DynamicRoles,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\DynamicRole\DynamicRoles.cs,cmGrant,The following switch statement is missing a default case: switch (parameters[1])              {                  case "root":                  case "terminal":                  case "halt":                      IRC.DeliverMessage("This permission can't be granted to anyone' sorry"' pm.SourceChannel);                      return;              }
Missing Default,wmib.Extensions.RssFeed,Feed,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\Feed.cs,Load,The following switch statement is missing a default case: switch (property.Name)                                      {                                          case "name":                                              i.Name = property.Value;                                              break;                                          case "url":                                              i.URL = property.Value;                                              break;                                          case "disb":                                          case "disabled":                                              i.disabled = bool.Parse(property.Value);                                              break;                                          case "template":                                              i.template = property.Value;                                              break;                                          case "so":                                              if (property.Value.Length > 0)                                                  i.ScannerOnly = bool.Parse(property.Value);                                              break;                                      }
Missing Default,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ReadFeed,The following switch statement is missing a default case: switch (data.Name.ToLower())                                      {                                          case "title":                                              curr.Title = data.InnerText;                                              break;                                          case "link":                                              foreach (XmlAttribute attribute in data.Attributes)                                              {                                                  if (attribute.Name == "href")                                                  {                                                      curr.Link = attribute.Value;                                                  }                                              }                                              break;                                          case "author":                                              if (data.ChildNodes.Count > 0)                                              {                                                  curr.Author = data.ChildNodes[0].InnerText;                                              }                                              break;                                          case "summary":                                              string html = HttpUtility.HtmlDecode(data.InnerText);                                              if (html.Contains("<table>"))                                              {                                                  XmlDocument summary = new XmlDocument();                                                  summary.LoadXml(html);                                                  foreach (XmlNode tr in summary.ChildNodes[0].ChildNodes)                                                  {                                                      bool type = true;                                                      string st = "";                                                      foreach (XmlNode td in tr.ChildNodes)                                                      {                                                          if (type)                                                          {                                                              st = td.InnerText;                                                          }                                                          else                                                          {                                                              switch (st.Replace(" "' ""))                                                              {                                                                  case "Product":                                                                      curr.bugzilla_product = td.InnerText;                                                                      break;                                                                  case "Status":                                                                      curr.bugzilla_status = td.InnerText;                                                                      break;                                                                  case "Component":                                                                      curr.bugzilla_component = td.InnerText;                                                                      break;                                                                  case "Assignee":                                                                      curr.bugzilla_assignee = td.InnerText;                                                                      break;                                                                  case "Reporter":                                                                      curr.bugzilla_reporter = td.InnerText;                                                                      break;                                                                  case "Resolution":                                                                      curr.bugzilla_reso = td.InnerText;                                                                      break;                                                                  case "Priority":                                                                      curr.bugzilla_priority = td.InnerText;                                                                      break;                                                                  case "Severity":                                                                      curr.bugzilla_severity = td.InnerText;                                                                      break;                                                              }                                                          }                                                          type = !type;                                                      }                                                  }                                              }                                              break;                                          case "guid":                                              curr.ItemId = data.InnerText;                                              break;                                          case "channelid":                                              curr.ChannelId = data.InnerText;                                              break;                                          case "date":                                              curr.PublishDate = data.Value;                                              break;                                      }
Missing Default,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ReadFeed,The following switch statement is missing a default case: switch (st.Replace(" "' ""))                                                              {                                                                  case "Product":                                                                      curr.bugzilla_product = td.InnerText;                                                                      break;                                                                  case "Status":                                                                      curr.bugzilla_status = td.InnerText;                                                                      break;                                                                  case "Component":                                                                      curr.bugzilla_component = td.InnerText;                                                                      break;                                                                  case "Assignee":                                                                      curr.bugzilla_assignee = td.InnerText;                                                                      break;                                                                  case "Reporter":                                                                      curr.bugzilla_reporter = td.InnerText;                                                                      break;                                                                  case "Resolution":                                                                      curr.bugzilla_reso = td.InnerText;                                                                      break;                                                                  case "Priority":                                                                      curr.bugzilla_priority = td.InnerText;                                                                      break;                                                                  case "Severity":                                                                      curr.bugzilla_severity = td.InnerText;                                                                      break;                                                              }
Missing Default,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ReadFeed,The following switch statement is missing a default case: switch (data.Name.ToLower())                                  {                                      case "title":                                          curr.Title = data.InnerText;                                          break;                                      case "link":                                          foreach (XmlAttribute attribute in data.Attributes)                                          {                                              if (attribute.Name == "href")                                              {                                                  curr.Link = attribute.Value;                                              }                                          }                                          break;                                      case "author":                                          if (data.ChildNodes.Count > 0)                                          {                                              curr.Author = data.ChildNodes[0].InnerText;                                          }                                          break;                                      case "summary":                                          curr.Description = data.InnerText;                                          break;                                      case "guid":                                          curr.ItemId = data.InnerText;                                          break;                                      case "channelid":                                          curr.ChannelId = data.InnerText;                                          break;                                      case "date":                                          curr.PublishDate = data.Value;                                          break;                                  }
Missing Default,wmib.Extensions.RssFeed,RssManager,C:\repos\benapetr_wikimedia-bot\src\WMBot.Plugins\RssFeed\RssManager.cs,ReadFeed,The following switch statement is missing a default case: switch (data.Name.ToLower())                                      {                                          case "title":                                              curr.Title = data.InnerText;                                              break;                                          case "link":                                              curr.Link = data.InnerText;                                              break;                                          case "description":                                              curr.Description = data.InnerText;                                              break;                                          case "guid":                                              curr.ItemId = data.InnerText;                                              break;                                          case "channelid":                                              curr.ChannelId = data.InnerText;                                              break;                                          case "date":                                              curr.PublishDate = data.Value;                                              break;                                      }
