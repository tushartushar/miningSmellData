Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,JetBrains.DotPeek.Plugins.NuPeek.Infrastructure,CREDUI,C:\repos\JetBrains_dotpeek-nupeek\src\NuPeek\Infrastructure\CredentialsDialog.cs,PromptForCredentials,The method has 10 parameters. Parameters: creditUR' targetName' reserved1' iError' userName' maxUserName' password' maxPassword' iSave' flags
Long Statement,JetBrains.DotPeek.Plugins.NuPeek.Infrastructure,DotPeekCredentialProvider,C:\repos\JetBrains_dotpeek-nupeek\src\NuPeek\Infrastructure\DotPeekCredentialProvider.cs,GetCredentials,The length of the statement  "                var dialog = new CredentialsDialog(uri.ToString()' "Connecting to " + uri.Host + "..."' "Please provide credentials to connect to " + uri); " is 139.
Long Statement,JetBrains.DotPeek.Plugins.NuPeek.Handlers,OpenFromNuGetHandler,C:\repos\JetBrains_dotpeek-nupeek\src\NuPeek\Handlers\OpenFromNuGetHandler.cs,Execute,The length of the statement  "                    var packagesToOpen = GetPackagesToOpen(PackageRepositoryFactory.Default.CreateRepository(model.PackageSource.ToString())' model.SelectedPackage.Id' model.SelectedPackage.Version' model.LoadDependencies); " is 203.
Long Statement,JetBrains.DotPeek.Plugins.NuPeek.ViewModels,PackageSelectorViewModel,C:\repos\JetBrains_dotpeek-nupeek\src\NuPeek\ViewModels\PackageSelectorViewModel.cs,InitializePackageSources,The length of the statement  "            HttpClient.DefaultCredentialProvider = new SettingsCredentialProvider(new DotPeekCredentialProvider()' packageSourceProvider); " is 126.
Magic Number,JetBrains.DotPeek.Plugins.NuPeek.Infrastructure,CredentialsDialog,C:\repos\JetBrains_dotpeek-nupeek\src\NuPeek\Infrastructure\CredentialsDialog.cs,Show,The following statement contains a magic number: if (Environment.OSVersion.Version.Major < 5)              {                  throw new ApplicationException("The Credential Management API requires Windows XP / Windows Server 2003 or later.");              }
Magic Number,JetBrains.DotPeek.Plugins.NuPeek.Handlers,OpenFromNuGetHandler,C:\repos\JetBrains_dotpeek-nupeek\src\NuPeek\Handlers\OpenFromNuGetHandler.cs,Execute,The following statement contains a magic number: var window = new Window              {                  Title = "Select Package"'                  Content = new PackageSelector(model)'                  Width = 520'                  Height = 520'                  WindowStartupLocation = WindowStartupLocation.CenterScreen'                  ResizeMode = ResizeMode.NoResize              };
Magic Number,JetBrains.DotPeek.Plugins.NuPeek.Handlers,OpenFromNuGetHandler,C:\repos\JetBrains_dotpeek-nupeek\src\NuPeek\Handlers\OpenFromNuGetHandler.cs,Execute,The following statement contains a magic number: var window = new Window              {                  Title = "Select Package"'                  Content = new PackageSelector(model)'                  Width = 520'                  Height = 520'                  WindowStartupLocation = WindowStartupLocation.CenterScreen'                  ResizeMode = ResizeMode.NoResize              };
Magic Number,JetBrains.DotPeek.Plugins.NuPeek.ViewModels,PackageSelectorViewModel,C:\repos\JetBrains_dotpeek-nupeek\src\NuPeek\ViewModels\PackageSelectorViewModel.cs,PackageSelectorViewModel,The following statement contains a magic number: PropertyChanged += (sender' args) =>                  {                      if (args.PropertyName == "SearchTerm")                      {                          var searchTerm = SearchTerm.ToLowerInvariant();                            if (searchTerm.Length < 3)                          {                              return;                          }                            SearchesInProgress++;                            Task.Factory.StartNew(() =>                              {                                  var repository = PackageRepositoryFactory.Default.CreateRepository(PackageSource.ToString());                                  return repository.Search(searchTerm' true)                                                   .Where(p => p.Id.ToLower().StartsWith(searchTerm))                                                   .OrderBy(p => p.Id)                                                   .ThenByDescending(p => p.Version)                                                   .ToList()                                                   .Select(p =>                                                       {                                                           var id = p.Id;                                                           var version = p.Version.ToString();                                                           return new PackageDefinitionViewModel(id' version);                                                       })                                                   .ToList();                              }).ContinueWith(r =>                                  {                                      if (r.IsFaulted)                                      {                                          var exception = r.Exception.InnerExceptions.FirstOrDefault();                                          if (exception != null)                                          {                                              Status = exception.Message;                                          }                                          else                                          {                                              Status = "An unknown error occured accessing the Package Source.";                                          }                                      }                                      if (!r.IsFaulted && r.IsCompleted && searchTerm == SearchTerm.ToLowerInvariant())                                      {                                          Status = "";                                          Packages.Clear();                                          Packages.AddRange(r.Result);                                      }                                      SearchesInProgress--;                                  }' TaskScheduler.FromCurrentSynchronizationContext());                      }                  };
