Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Drawing,DdsHeader,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsHeader,The method has 148 lines of code.
Long Method,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The method has 101 lines of code.
Long Method,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The method has 238 lines of code.
Complex Method,System.Drawing,DdsHeader,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsHeader,Cyclomatic complexity of the method is 16
Complex Method,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,Cyclomatic complexity of the method is 18
Complex Method,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,ckb_CheckedChanged,Cyclomatic complexity of the method is 8
Long Parameter List,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,CreateImage,The method has 7 parameters. Parameters: r' g' b' a' width' height' supportHSV
Long Parameter List,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,GetImage,The method has 5 parameters. Parameters: red' green' blue' alpha' invert
Long Parameter List,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,MaskedSetColour,The method has 5 parameters. Parameters: mask' ch1Colour' ch2Colour' ch3Colour' ch4Colour
Long Parameter List,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,MaskedApplyImage,The method has 5 parameters. Parameters: mask' ch1DdsFile' ch2DdsFile' ch3DdsFile' ch4DdsFile
Long Parameter List,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,MaskedApplyImage,The method has 5 parameters. Parameters: mask' ch1Image' ch2Image' ch3Image' ch4Image
Long Parameter List,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,MaskedApplyImage,The method has 5 parameters. Parameters: mask' ch1Bitmap' ch2Bitmap' ch3Bitmap' ch4Bitmap
Long Parameter List,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,MaskedApplyImage,The method has 9 parameters. Parameters: mask' ch1image' ch1imageSize' ch2image' ch2imageSize' ch3image' ch3imageSize' ch4image' ch4imageSize
Long Parameter List,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,MaskedApply,The method has 6 parameters. Parameters: image' imageSize' mask' maskSize' channel' argbAt
Long Parameter List,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,MaskedHSVShift,The method has 5 parameters. Parameters: mask' ch1Shift' ch2Shift' ch3Shift' ch4Shift
Long Parameter List,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,MaskedHSVShiftNoBlend,The method has 5 parameters. Parameters: mask' ch1Shift' ch2Shift' ch3Shift' ch4Shift
Long Parameter List,System.Drawing,DdsSquish,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,CompressImage,The method has 5 parameters. Parameters: pixelInput' width' height' flags' metric
Long Parameter List,System.Drawing,DdsSquish,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,SquishCompressImage,The method has 6 parameters. Parameters: rgba' width' height' blocks' flags' metric
Long Parameter List,System.Drawing,DdsSquish,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,SquishDecompressImage,The method has 5 parameters. Parameters: rgba' width' height' blocks' flags
Long Parameter List,System.Drawing,SquishInterface_32,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,SquishCompressImage,The method has 6 parameters. Parameters: rgba' width' height' blocks' flags' metric
Long Parameter List,System.Drawing,SquishInterface_32,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,SquishDecompressImage,The method has 5 parameters. Parameters: rgba' width' height' blocks' flags
Long Parameter List,System.Drawing,SquishInterface_64,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,SquishCompressImage,The method has 6 parameters. Parameters: rgba' width' height' blocks' flags' metric
Long Parameter List,System.Drawing,SquishInterface_64,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,SquishDecompressImage,The method has 5 parameters. Parameters: rgba' width' height' blocks' flags
Long Parameter List,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,CreateImage,The method has 5 parameters. Parameters: red' green' blue' size' supportHSV
Long Parameter List,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,CreateImage,The method has 6 parameters. Parameters: red' green' blue' width' height' supportHSV
Long Parameter List,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,CreateImage,The method has 6 parameters. Parameters: red' green' blue' alpha' size' supportHSV
Long Parameter List,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,CreateImage,The method has 7 parameters. Parameters: red' green' blue' alpha' width' height' supportHSV
Long Parameter List,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,ApplyHSVShift,The method has 6 parameters. Parameters: mask' ch1Shift' ch2Shift' ch3Shift' ch4Shift' blend
Long Parameter List,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,ApplyHSVShift,The method has 5 parameters. Parameters: ch1Shift' ch2Shift' ch3Shift' ch4Shift' blend
Long Parameter List,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,ApplyColours,The method has 5 parameters. Parameters: mask' ch1Colour' ch2Colour' ch3Colour' ch4Colour
Long Parameter List,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,ApplyImage,The method has 5 parameters. Parameters: mask' ch1Image' ch2Image' ch3Image' ch4Image
Long Parameter List,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,ApplyImage,The method has 5 parameters. Parameters: mask' ch1Image' ch2Image' ch3Image' ch4Image
Long Parameter List,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,ApplyImage,The method has 5 parameters. Parameters: mask' ch1Image' ch2Image' ch3Image' ch4Image
Long Statement,System.Drawing,Dds,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Write,The length of the statement  "                    throw new Exception(String.Format("DdsSquish returned an unexpected buffer size' 0x{0:X8}.  Expected 0x{1:X8}"' buffer.Length' header.DataSize)); " is 145.
Long Statement,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,GetGreyscaleFromAlpha,The length of the statement  "            DoAction((x' y' value) => greyscale[x + y * width] = ((uint)0xFF << 24) | value.A() << 16 | value.A() << 8 | value.A() << 0); " is 125.
Long Statement,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,GetImage,The length of the statement  "            uint mask = (alpha ? (uint)0xFF000000 : 0) | (red ? (uint)0x00FF0000 : 0) | (green ? (uint)0x0000FF00 : 0) | (blue ? (uint)0x000000FF : 0); " is 139.
Long Statement,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,GetImage,The length of the statement  "            Bitmap bitmap = new Bitmap(width' height' width * sizeof(uint)' alpha ? Imaging.PixelFormat.Format32bppArgb : Imaging.PixelFormat.Format32bppRgb' p_data); " is 154.
Long Statement,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,MaskedApplyImage,The length of the statement  "            MaskedApply(this.currentImage' this.Size' mask.currentImage' mask.Size' channel' (x' y) => image[((y % imageSize.Height) * imageSize.Width) + (x % imageSize.Width)]); " is 166.
Long Statement,System.Drawing,ColorHSVA,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\RGBHSV.cs,ToARGB,The length of the statement  "            return (uint)this.a << 24 | (uint)Math.Round(r * 255.0f) << 16| (uint)Math.Round(g * 255.0f) << 8 | (uint)Math.Round(b * 255.0f); " is 129.
Long Statement,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 153.
Long Statement,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The length of the statement  "            this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 142.
Complex Conditional,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The conditional expression  "(flags & PFFlags.luminence) != 0                              && (                                  aBitMask != 0x0000ff00 || rBitMask != 0x000000ff                                  || gBitMask != 0 || bBitMask != 0                              )"  is complex.
Complex Conditional,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The conditional expression  "(flags & PFFlags.rgb) != 0                              && (rBitMask == 0 || gBitMask == 0 || bBitMask == 0)"  is complex.
Complex Conditional,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,GetImage,The conditional expression  "!red || !green || !blue || !alpha || invert"  is complex.
Magic Number,System.Drawing,Dds,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Dds,The following statement contains a magic number: if (header.IsBlockCompressed)              {                  // Decompress                  byte[] pixelData = DdsSquish.DecompressImage(buffer' (int)header.width' (int)header.height' header.SquishFourCC);                    // Convert R' G' B' A byte array to ARGB uint array...                  baseImage = new uint[pixelData.Length / sizeof(uint)];                  Enumerable.Range(0' baseImage.Length).AsParallel()                      .ForAll(i => baseImage[i] = decoder(BitConverter.ToUInt32(pixelData' i * sizeof(uint))));              }              else              {                  // Convert encoded data to ARGB uint array                  baseImage = new uint[header.width * header.height];                  int rowPitch = buffer.Length / (int)header.height;                  int pixelSize = (int)header.UncompressedPixelSize;                  Enumerable.Range(0' (int)header.width).AsParallel()                      .ForAll(destX => Enumerable.Range(0' (int)header.height).AsParallel()                          .ForAll(destY =>                          {                              // Compute pixel offsets                              int srcPixelOffset = (destY * rowPitch) + (destX * pixelSize);                              int destPixelOffset = (destY * (int)header.width) + destX;                                // Build our pixel colour as a DWORD - parallelism overhead costs too much                              uint pixelColour = 0;                              for (int loop = 0; loop < pixelSize; loop++)                                  pixelColour |= (uint)(buffer[srcPixelOffset + loop] << (8 * loop));                                // delegate takes care of calculation                              baseImage[destPixelOffset] = decoder(pixelColour);                          }));              }
Magic Number,System.Drawing,Dds,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Write,The following statement contains a magic number: if (header.IsBlockCompressed)              {                  // Convert ARGB uint array to R' G' B' A byte array...                  byte[] pixelData = new byte[baseImage.Length * sizeof(uint)];                  Enumerable.Range(0' baseImage.Length).AsParallel()                      .ForAll(i => Array.Copy(BitConverter.GetBytes(encoder(baseImage[i]))' 0' pixelData' i * sizeof(uint)' sizeof(uint)));                    // Compress                  buffer = DdsSquish.CompressImage(pixelData' (int)header.width' (int)header.height' header.SquishFourCC);                  if (buffer.Length != header.DataSize)                      throw new Exception(String.Format("DdsSquish returned an unexpected buffer size' 0x{0:X8}.  Expected 0x{1:X8}"' buffer.Length' header.DataSize));              }              else              {                  buffer = new byte[header.DataSize];                  int rowPitch = buffer.Length / (int)header.height;                  int pixelSize = (int)header.UncompressedPixelSize;                  Enumerable.Range(0' (int)header.width).AsParallel()                      .ForAll(srcX => Enumerable.Range(0' (int)header.height).AsParallel()                          .ForAll(srcY =>                          {                              // Compute pixel offsets                              int destPixelOffset = (srcY * rowPitch) + (srcX * pixelSize);                              int srcPixelOffset = (srcY * (int)header.width) + srcX;                                // delegate takes care of calculation                              uint pixelColour = encoder(baseImage[destPixelOffset]);                                // Store each computed byte - parallelism overhead costs too much                              for (int loop = 0; loop < pixelSize; loop++)                                  buffer[destPixelOffset + loop] = (byte)((pixelColour >> (8 * loop)) & 0xff);                          }));              }
Magic Number,System.Drawing,DdsHeader,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsHeader,The following statement contains a magic number: this.size = 124;
Magic Number,System.Drawing,DdsHeader,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsHeader,The following statement contains a magic number: if (size == 0)                  {                      Console.WriteLine(String.Format(                          "DDS Header Size is zero' expected 124.  At 0x{0:X8}.  Correcting..."                          ' s.Position                          ));                      size = 124;                  }                  else if (size != 124)                      throw new InvalidDataException(String.Format(                          "DDS Header Size invalid.  Got {0}' expected 124.  At 0x{1:X8}."                          ' size                          ' s.Position                          ));
Magic Number,System.Drawing,DdsHeader,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsHeader,The following statement contains a magic number: if (size == 0)                  {                      Console.WriteLine(String.Format(                          "DDS Header Size is zero' expected 124.  At 0x{0:X8}.  Correcting..."                          ' s.Position                          ));                      size = 124;                  }                  else if (size != 124)                      throw new InvalidDataException(String.Format(                          "DDS Header Size invalid.  Got {0}' expected 124.  At 0x{1:X8}."                          ' size                          ' s.Position                          ));
Magic Number,System.Drawing,DdsHeader,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Write,The following statement contains a magic number: w.Write((uint)124);
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: size = 32;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: switch (ddsFormat)                      {                          case DdsFormat.DXT1:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt1;                              break;                          case DdsFormat.DXT3:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt3;                              break;                          case DdsFormat.DXT5:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt5;                              break;                          case DdsFormat.A8L8:                              flags |= PFFlags.luminence | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000ff00;                              rBitMask = 0x000000ff;                              break;                          case DdsFormat.A8R8G8B8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.X8R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A8B8G8R8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.X8B8G8R8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 24;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A4R4G4B4:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000f000;                              rBitMask = 0x00000f00;                              gBitMask = 0x000000f0;                              bBitMask = 0x0000000f;                              break;                          case DdsFormat.A1R5G5B5:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x00008000;                              rBitMask = 0x00007c00;                              gBitMask = 0x000003e0;                              bBitMask = 0x0000001f;                              break;                          case DdsFormat.R5G6B5:                              flags |= PFFlags.rgb;                              rgbBitCount = 16;                              rBitMask = 0x0000f800;                              gBitMask = 0x000007e0;                              bBitMask = 0x0000001f;                              break;                          default:                              throw new ArgumentOutOfRangeException("Unsupported DDS format.");                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: switch (ddsFormat)                      {                          case DdsFormat.DXT1:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt1;                              break;                          case DdsFormat.DXT3:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt3;                              break;                          case DdsFormat.DXT5:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt5;                              break;                          case DdsFormat.A8L8:                              flags |= PFFlags.luminence | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000ff00;                              rBitMask = 0x000000ff;                              break;                          case DdsFormat.A8R8G8B8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.X8R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A8B8G8R8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.X8B8G8R8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 24;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A4R4G4B4:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000f000;                              rBitMask = 0x00000f00;                              gBitMask = 0x000000f0;                              bBitMask = 0x0000000f;                              break;                          case DdsFormat.A1R5G5B5:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x00008000;                              rBitMask = 0x00007c00;                              gBitMask = 0x000003e0;                              bBitMask = 0x0000001f;                              break;                          case DdsFormat.R5G6B5:                              flags |= PFFlags.rgb;                              rgbBitCount = 16;                              rBitMask = 0x0000f800;                              gBitMask = 0x000007e0;                              bBitMask = 0x0000001f;                              break;                          default:                              throw new ArgumentOutOfRangeException("Unsupported DDS format.");                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: switch (ddsFormat)                      {                          case DdsFormat.DXT1:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt1;                              break;                          case DdsFormat.DXT3:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt3;                              break;                          case DdsFormat.DXT5:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt5;                              break;                          case DdsFormat.A8L8:                              flags |= PFFlags.luminence | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000ff00;                              rBitMask = 0x000000ff;                              break;                          case DdsFormat.A8R8G8B8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.X8R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A8B8G8R8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.X8B8G8R8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 24;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A4R4G4B4:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000f000;                              rBitMask = 0x00000f00;                              gBitMask = 0x000000f0;                              bBitMask = 0x0000000f;                              break;                          case DdsFormat.A1R5G5B5:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x00008000;                              rBitMask = 0x00007c00;                              gBitMask = 0x000003e0;                              bBitMask = 0x0000001f;                              break;                          case DdsFormat.R5G6B5:                              flags |= PFFlags.rgb;                              rgbBitCount = 16;                              rBitMask = 0x0000f800;                              gBitMask = 0x000007e0;                              bBitMask = 0x0000001f;                              break;                          default:                              throw new ArgumentOutOfRangeException("Unsupported DDS format.");                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: switch (ddsFormat)                      {                          case DdsFormat.DXT1:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt1;                              break;                          case DdsFormat.DXT3:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt3;                              break;                          case DdsFormat.DXT5:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt5;                              break;                          case DdsFormat.A8L8:                              flags |= PFFlags.luminence | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000ff00;                              rBitMask = 0x000000ff;                              break;                          case DdsFormat.A8R8G8B8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.X8R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A8B8G8R8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.X8B8G8R8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 24;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A4R4G4B4:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000f000;                              rBitMask = 0x00000f00;                              gBitMask = 0x000000f0;                              bBitMask = 0x0000000f;                              break;                          case DdsFormat.A1R5G5B5:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x00008000;                              rBitMask = 0x00007c00;                              gBitMask = 0x000003e0;                              bBitMask = 0x0000001f;                              break;                          case DdsFormat.R5G6B5:                              flags |= PFFlags.rgb;                              rgbBitCount = 16;                              rBitMask = 0x0000f800;                              gBitMask = 0x000007e0;                              bBitMask = 0x0000001f;                              break;                          default:                              throw new ArgumentOutOfRangeException("Unsupported DDS format.");                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: switch (ddsFormat)                      {                          case DdsFormat.DXT1:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt1;                              break;                          case DdsFormat.DXT3:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt3;                              break;                          case DdsFormat.DXT5:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt5;                              break;                          case DdsFormat.A8L8:                              flags |= PFFlags.luminence | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000ff00;                              rBitMask = 0x000000ff;                              break;                          case DdsFormat.A8R8G8B8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.X8R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A8B8G8R8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.X8B8G8R8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 24;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A4R4G4B4:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000f000;                              rBitMask = 0x00000f00;                              gBitMask = 0x000000f0;                              bBitMask = 0x0000000f;                              break;                          case DdsFormat.A1R5G5B5:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x00008000;                              rBitMask = 0x00007c00;                              gBitMask = 0x000003e0;                              bBitMask = 0x0000001f;                              break;                          case DdsFormat.R5G6B5:                              flags |= PFFlags.rgb;                              rgbBitCount = 16;                              rBitMask = 0x0000f800;                              gBitMask = 0x000007e0;                              bBitMask = 0x0000001f;                              break;                          default:                              throw new ArgumentOutOfRangeException("Unsupported DDS format.");                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: switch (ddsFormat)                      {                          case DdsFormat.DXT1:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt1;                              break;                          case DdsFormat.DXT3:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt3;                              break;                          case DdsFormat.DXT5:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt5;                              break;                          case DdsFormat.A8L8:                              flags |= PFFlags.luminence | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000ff00;                              rBitMask = 0x000000ff;                              break;                          case DdsFormat.A8R8G8B8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.X8R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A8B8G8R8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.X8B8G8R8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 24;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A4R4G4B4:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000f000;                              rBitMask = 0x00000f00;                              gBitMask = 0x000000f0;                              bBitMask = 0x0000000f;                              break;                          case DdsFormat.A1R5G5B5:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x00008000;                              rBitMask = 0x00007c00;                              gBitMask = 0x000003e0;                              bBitMask = 0x0000001f;                              break;                          case DdsFormat.R5G6B5:                              flags |= PFFlags.rgb;                              rgbBitCount = 16;                              rBitMask = 0x0000f800;                              gBitMask = 0x000007e0;                              bBitMask = 0x0000001f;                              break;                          default:                              throw new ArgumentOutOfRangeException("Unsupported DDS format.");                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: switch (ddsFormat)                      {                          case DdsFormat.DXT1:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt1;                              break;                          case DdsFormat.DXT3:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt3;                              break;                          case DdsFormat.DXT5:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt5;                              break;                          case DdsFormat.A8L8:                              flags |= PFFlags.luminence | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000ff00;                              rBitMask = 0x000000ff;                              break;                          case DdsFormat.A8R8G8B8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.X8R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A8B8G8R8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.X8B8G8R8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 24;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A4R4G4B4:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000f000;                              rBitMask = 0x00000f00;                              gBitMask = 0x000000f0;                              bBitMask = 0x0000000f;                              break;                          case DdsFormat.A1R5G5B5:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x00008000;                              rBitMask = 0x00007c00;                              gBitMask = 0x000003e0;                              bBitMask = 0x0000001f;                              break;                          case DdsFormat.R5G6B5:                              flags |= PFFlags.rgb;                              rgbBitCount = 16;                              rBitMask = 0x0000f800;                              gBitMask = 0x000007e0;                              bBitMask = 0x0000001f;                              break;                          default:                              throw new ArgumentOutOfRangeException("Unsupported DDS format.");                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: switch (ddsFormat)                      {                          case DdsFormat.DXT1:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt1;                              break;                          case DdsFormat.DXT3:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt3;                              break;                          case DdsFormat.DXT5:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt5;                              break;                          case DdsFormat.A8L8:                              flags |= PFFlags.luminence | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000ff00;                              rBitMask = 0x000000ff;                              break;                          case DdsFormat.A8R8G8B8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.X8R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A8B8G8R8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.X8B8G8R8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 24;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A4R4G4B4:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000f000;                              rBitMask = 0x00000f00;                              gBitMask = 0x000000f0;                              bBitMask = 0x0000000f;                              break;                          case DdsFormat.A1R5G5B5:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x00008000;                              rBitMask = 0x00007c00;                              gBitMask = 0x000003e0;                              bBitMask = 0x0000001f;                              break;                          case DdsFormat.R5G6B5:                              flags |= PFFlags.rgb;                              rgbBitCount = 16;                              rBitMask = 0x0000f800;                              gBitMask = 0x000007e0;                              bBitMask = 0x0000001f;                              break;                          default:                              throw new ArgumentOutOfRangeException("Unsupported DDS format.");                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: switch (ddsFormat)                      {                          case DdsFormat.DXT1:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt1;                              break;                          case DdsFormat.DXT3:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt3;                              break;                          case DdsFormat.DXT5:                              flags |= PFFlags.fourCC;                              fourCC = PFFourCC.dxt5;                              break;                          case DdsFormat.A8L8:                              flags |= PFFlags.luminence | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000ff00;                              rBitMask = 0x000000ff;                              break;                          case DdsFormat.A8R8G8B8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.X8R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A8B8G8R8:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 32;                              aBitMask = 0xff000000;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.X8B8G8R8:                              flags |= PFFlags.rgb;                              rgbBitCount = 32;                              rBitMask = 0x000000ff;                              gBitMask = 0x0000ff00;                              bBitMask = 0x00ff0000;                              break;                          case DdsFormat.R8G8B8:                              flags |= PFFlags.rgb;                              rgbBitCount = 24;                              rBitMask = 0x00ff0000;                              gBitMask = 0x0000ff00;                              bBitMask = 0x000000ff;                              break;                          case DdsFormat.A4R4G4B4:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x0000f000;                              rBitMask = 0x00000f00;                              gBitMask = 0x000000f0;                              bBitMask = 0x0000000f;                              break;                          case DdsFormat.A1R5G5B5:                              flags |= PFFlags.rgb | PFFlags.alphaPixels;                              rgbBitCount = 16;                              aBitMask = 0x00008000;                              rBitMask = 0x00007c00;                              gBitMask = 0x000003e0;                              bBitMask = 0x0000001f;                              break;                          case DdsFormat.R5G6B5:                              flags |= PFFlags.rgb;                              rgbBitCount = 16;                              rBitMask = 0x0000f800;                              gBitMask = 0x000007e0;                              bBitMask = 0x0000001f;                              break;                          default:                              throw new ArgumentOutOfRangeException("Unsupported DDS format.");                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: if (size != 32)                      {                          Console.WriteLine(String.Format(                              "DDS Pixel Format Size invalid.  Got {0}' expected 32.  At 0x{1:X8}.  Correcting..."                              ' size                              ' s.Position                              ));                          size = 32;                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: if (size != 32)                      {                          Console.WriteLine(String.Format(                              "DDS Pixel Format Size invalid.  Got {0}' expected 32.  At 0x{1:X8}.  Correcting..."                              ' size                              ' s.Position                              ));                          size = 32;                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: if (fourCC == 0)                      {                          // Fix some of my previous breakage...                          if (((uint)(flags & (PFFlags.alphaPixels | PFFlags.alpha | PFFlags.rgb))).Bits() == 3)                          {                              Console.WriteLine("Alpha-only indicated but AlphaPixels and RGB also set.  Cleaing Alpha-only flag.");                              flags &= ~PFFlags.alpha;                          }                          if (((uint)(flags & (PFFlags.alpha | PFFlags.rgb))).Bits() == 2)                          {                              Console.WriteLine("Alpha-only and RGB both set.  Cleaing Alpha-only flag and ensuring alpha-pixels set.");                              flags &= ~PFFlags.alpha;                              flags |= PFFlags.alphaPixels;                          }                            if (((uint)(flags & notFourCC)).Bits() > 1)                              throw new NotSupportedException(String.Format(                                  "Unsupported DDS Pixel Format Flags.  Got {0}' only one of _alpha' _paletteIndexed8' _rgb' _yuv' _luminence or _nVidiaNormal should be set."                                  ' flags                                  )                              );                            if ((flags & PFFlags.alpha) != 0)                              throw new NotSupportedException("Alpha-only format data is not supported.");                            if ((flags & PFFlags.paletteIndexed8) != 0)                              throw new NotSupportedException("Palette indexed format data is not supported.");                            if ((flags & PFFlags.yuv) != 0)                              throw new NotSupportedException("YUV format data is not supported.");                            if ((flags & PFFlags.nVidiaNormal) != 0)                              throw new NotSupportedException("nVidia normal format data is not supported.");                            if ((flags & PFFlags.luminence) != 0                              && (                                  aBitMask != 0x0000ff00 || rBitMask != 0x000000ff                                  || gBitMask != 0 || bBitMask != 0                              ))                              throw new NotSupportedException("Only A8L8 luminence data is supported.");                            if (((uint)(flags & notFourCC)).Bits() == 0)                          {                              Console.WriteLine("Uncompressed texture but no format indicated.  Defaulting to RGB.");                              flags |= PFFlags.rgb;                          }                            if ((flags & PFFlags.alphaPixels) != 0                              && aBitMask == 0)                          {                              Console.WriteLine("AlphaPixels indicated but no alpha mask.  Cleaing AlphaPixels flag.");                              flags &= ~PFFlags.alphaPixels;                          }                            if ((flags & PFFlags.rgb) != 0                              && rgbBitCount == 0)                          {                              Console.WriteLine("RGB Bit Count needed but not set - calculating.");                              rgbBitCount = (uint)(aBitMask.Bits() + rBitMask.Bits() + gBitMask.Bits() + bBitMask.Bits());                          }                          if ((flags & PFFlags.rgb) != 0                              && rgbBitCount == 0)                              throw new InvalidDataException("Invalid uncompressed header.  RGB Bit Count is zero and no masks set.");                            if ((flags & PFFlags.rgb) != 0                              && (rBitMask == 0 || gBitMask == 0 || bBitMask == 0))                              throw new NotSupportedException(String.Format(                                  "RGB is supported only where data is present for all channels.  RGB mask is {0:X6}."                                  ' rBitMask | gBitMask | bBitMask                                  ));                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,DdsPixelFormat,The following statement contains a magic number: if (fourCC == 0)                      {                          // Fix some of my previous breakage...                          if (((uint)(flags & (PFFlags.alphaPixels | PFFlags.alpha | PFFlags.rgb))).Bits() == 3)                          {                              Console.WriteLine("Alpha-only indicated but AlphaPixels and RGB also set.  Cleaing Alpha-only flag.");                              flags &= ~PFFlags.alpha;                          }                          if (((uint)(flags & (PFFlags.alpha | PFFlags.rgb))).Bits() == 2)                          {                              Console.WriteLine("Alpha-only and RGB both set.  Cleaing Alpha-only flag and ensuring alpha-pixels set.");                              flags &= ~PFFlags.alpha;                              flags |= PFFlags.alphaPixels;                          }                            if (((uint)(flags & notFourCC)).Bits() > 1)                              throw new NotSupportedException(String.Format(                                  "Unsupported DDS Pixel Format Flags.  Got {0}' only one of _alpha' _paletteIndexed8' _rgb' _yuv' _luminence or _nVidiaNormal should be set."                                  ' flags                                  )                              );                            if ((flags & PFFlags.alpha) != 0)                              throw new NotSupportedException("Alpha-only format data is not supported.");                            if ((flags & PFFlags.paletteIndexed8) != 0)                              throw new NotSupportedException("Palette indexed format data is not supported.");                            if ((flags & PFFlags.yuv) != 0)                              throw new NotSupportedException("YUV format data is not supported.");                            if ((flags & PFFlags.nVidiaNormal) != 0)                              throw new NotSupportedException("nVidia normal format data is not supported.");                            if ((flags & PFFlags.luminence) != 0                              && (                                  aBitMask != 0x0000ff00 || rBitMask != 0x000000ff                                  || gBitMask != 0 || bBitMask != 0                              ))                              throw new NotSupportedException("Only A8L8 luminence data is supported.");                            if (((uint)(flags & notFourCC)).Bits() == 0)                          {                              Console.WriteLine("Uncompressed texture but no format indicated.  Defaulting to RGB.");                              flags |= PFFlags.rgb;                          }                            if ((flags & PFFlags.alphaPixels) != 0                              && aBitMask == 0)                          {                              Console.WriteLine("AlphaPixels indicated but no alpha mask.  Cleaing AlphaPixels flag.");                              flags &= ~PFFlags.alphaPixels;                          }                            if ((flags & PFFlags.rgb) != 0                              && rgbBitCount == 0)                          {                              Console.WriteLine("RGB Bit Count needed but not set - calculating.");                              rgbBitCount = (uint)(aBitMask.Bits() + rBitMask.Bits() + gBitMask.Bits() + bBitMask.Bits());                          }                          if ((flags & PFFlags.rgb) != 0                              && rgbBitCount == 0)                              throw new InvalidDataException("Invalid uncompressed header.  RGB Bit Count is zero and no masks set.");                            if ((flags & PFFlags.rgb) != 0                              && (rBitMask == 0 || gBitMask == 0 || bBitMask == 0))                              throw new NotSupportedException(String.Format(                                  "RGB is supported only where data is present for all channels.  RGB mask is {0:X6}."                                  ' rBitMask | gBitMask | bBitMask                                  ));                      }
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Write,The following statement contains a magic number: w.Write((uint)32);
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A8B8G8R8,The following statement contains a magic number: return (pixelColour & 0xFF00FF00) | (pixelColour & 0x00FF0000) >> 16 | (pixelColour & 0x000000FF) << 16;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A8B8G8R8,The following statement contains a magic number: return (pixelColour & 0xFF00FF00) | (pixelColour & 0x00FF0000) >> 16 | (pixelColour & 0x000000FF) << 16;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_X8B8G8R8,The following statement contains a magic number: return 0xFF000000 | (pixelColour & 0x00FF0000) >> 16 | (pixelColour & 0x000000FF) << 16;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_X8B8G8R8,The following statement contains a magic number: return 0xFF000000 | (pixelColour & 0x00FF0000) >> 16 | (pixelColour & 0x000000FF) << 16;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: uint A = (pixelColour >> 15) & 0xff;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: uint R = (pixelColour >> 10) & 0x1f;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: uint G = (pixelColour >> 5) & 0x1f;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: return (A << 24) | ((R << 3) | (R >> 2) << 16) | ((G << 3) | (G >> 2) << 8) | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: return (A << 24) | ((R << 3) | (R >> 2) << 16) | ((G << 3) | (G >> 2) << 8) | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: return (A << 24) | ((R << 3) | (R >> 2) << 16) | ((G << 3) | (G >> 2) << 8) | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: return (A << 24) | ((R << 3) | (R >> 2) << 16) | ((G << 3) | (G >> 2) << 8) | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: return (A << 24) | ((R << 3) | (R >> 2) << 16) | ((G << 3) | (G >> 2) << 8) | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: return (A << 24) | ((R << 3) | (R >> 2) << 16) | ((G << 3) | (G >> 2) << 8) | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: return (A << 24) | ((R << 3) | (R >> 2) << 16) | ((G << 3) | (G >> 2) << 8) | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: return (A << 24) | ((R << 3) | (R >> 2) << 16) | ((G << 3) | (G >> 2) << 8) | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A1R5G5B5,The following statement contains a magic number: return (A << 24) | ((R << 3) | (R >> 2) << 16) | ((G << 3) | (G >> 2) << 8) | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A4R4G4B4,The following statement contains a magic number: uint A = (pixelColour >> 12) & 0x0f;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A4R4G4B4,The following statement contains a magic number: uint R = (pixelColour >> 8) & 0x0f;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A4R4G4B4,The following statement contains a magic number: uint G = (pixelColour >> 4) & 0x0f;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A4R4G4B4,The following statement contains a magic number: return ((A << 4) | A) << 24 | ((R << 4) | R) << 16 | ((G << 4) | G) << 8 | ((B << 4) | B);
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A4R4G4B4,The following statement contains a magic number: return ((A << 4) | A) << 24 | ((R << 4) | R) << 16 | ((G << 4) | G) << 8 | ((B << 4) | B);
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A4R4G4B4,The following statement contains a magic number: return ((A << 4) | A) << 24 | ((R << 4) | R) << 16 | ((G << 4) | G) << 8 | ((B << 4) | B);
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A4R4G4B4,The following statement contains a magic number: return ((A << 4) | A) << 24 | ((R << 4) | R) << 16 | ((G << 4) | G) << 8 | ((B << 4) | B);
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A4R4G4B4,The following statement contains a magic number: return ((A << 4) | A) << 24 | ((R << 4) | R) << 16 | ((G << 4) | G) << 8 | ((B << 4) | B);
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A4R4G4B4,The following statement contains a magic number: return ((A << 4) | A) << 24 | ((R << 4) | R) << 16 | ((G << 4) | G) << 8 | ((B << 4) | B);
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A4R4G4B4,The following statement contains a magic number: return ((A << 4) | A) << 24 | ((R << 4) | R) << 16 | ((G << 4) | G) << 8 | ((B << 4) | B);
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: uint R = (pixelColour >> 11) & 0x1f;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: uint G = (pixelColour >> 5) & 0x3f;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: return ((uint)0xff << 24) | ((R << 3) | (R >> 2)) << 16 | ((G << 2) | (G >> 4)) << 8 | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: return ((uint)0xff << 24) | ((R << 3) | (R >> 2)) << 16 | ((G << 2) | (G >> 4)) << 8 | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: return ((uint)0xff << 24) | ((R << 3) | (R >> 2)) << 16 | ((G << 2) | (G >> 4)) << 8 | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: return ((uint)0xff << 24) | ((R << 3) | (R >> 2)) << 16 | ((G << 2) | (G >> 4)) << 8 | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: return ((uint)0xff << 24) | ((R << 3) | (R >> 2)) << 16 | ((G << 2) | (G >> 4)) << 8 | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: return ((uint)0xff << 24) | ((R << 3) | (R >> 2)) << 16 | ((G << 2) | (G >> 4)) << 8 | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: return ((uint)0xff << 24) | ((R << 3) | (R >> 2)) << 16 | ((G << 2) | (G >> 4)) << 8 | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: return ((uint)0xff << 24) | ((R << 3) | (R >> 2)) << 16 | ((G << 2) | (G >> 4)) << 8 | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_R5G6B5,The following statement contains a magic number: return ((uint)0xff << 24) | ((R << 3) | (R >> 2)) << 16 | ((G << 2) | (G >> 4)) << 8 | ((B << 3) | (B >> 2));
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A8L8,The following statement contains a magic number: uint A = (pixelColour & 0x0000FF00) >> 8;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A8L8,The following statement contains a magic number: return A << 24 | L << 16 | L << 8 | L;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A8L8,The following statement contains a magic number: return A << 24 | L << 16 | L << 8 | L;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,fromDDS_A8L8,The following statement contains a magic number: return A << 24 | L << 16 | L << 8 | L;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A8B8G8R8,The following statement contains a magic number: return (argb & 0xFF00FF00) | (argb & 0x00FF0000) >> 16 | (argb & 0x000000FF) << 16;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A8B8G8R8,The following statement contains a magic number: return (argb & 0xFF00FF00) | (argb & 0x00FF0000) >> 16 | (argb & 0x000000FF) << 16;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_X8B8G8R8,The following statement contains a magic number: return (argb & 0x0000FF00) | (argb & 0x00FF0000) >> 16 | (argb & 0x000000FF) << 16;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_X8B8G8R8,The following statement contains a magic number: return (argb & 0x0000FF00) | (argb & 0x00FF0000) >> 16 | (argb & 0x000000FF) << 16;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A1R5G5B5,The following statement contains a magic number: uint A = (uint)((argb & 0xFF000000) == 0 ? 0 : 1) << 15;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A1R5G5B5,The following statement contains a magic number: uint R = ((argb & 0x00F80000) >> 3) >> 6;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A1R5G5B5,The following statement contains a magic number: uint R = ((argb & 0x00F80000) >> 3) >> 6;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A1R5G5B5,The following statement contains a magic number: uint G = ((argb & 0x0000F800) >> 3) >> 3;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A1R5G5B5,The following statement contains a magic number: uint G = ((argb & 0x0000F800) >> 3) >> 3;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A1R5G5B5,The following statement contains a magic number: uint B = ((argb & 0x000000F8) >> 3) >> 0;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A4R4G4B4,The following statement contains a magic number: uint A = ((argb & 0xF0000000) >> 4) >> 12;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A4R4G4B4,The following statement contains a magic number: uint A = ((argb & 0xF0000000) >> 4) >> 12;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A4R4G4B4,The following statement contains a magic number: uint R = ((argb & 0x00F00000) >> 4) >> 8;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A4R4G4B4,The following statement contains a magic number: uint R = ((argb & 0x00F00000) >> 4) >> 8;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A4R4G4B4,The following statement contains a magic number: uint G = ((argb & 0x0000F000) >> 4) >> 4;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A4R4G4B4,The following statement contains a magic number: uint G = ((argb & 0x0000F000) >> 4) >> 4;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A4R4G4B4,The following statement contains a magic number: uint B = ((argb & 0x000000F0) >> 4);
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_R5G6B5,The following statement contains a magic number: uint R = ((argb & 0x00F80000) >> 3) >> 5;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_R5G6B5,The following statement contains a magic number: uint R = ((argb & 0x00F80000) >> 3) >> 5;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_R5G6B5,The following statement contains a magic number: uint G = ((argb & 0x0000FC00) >> 2) >> 3;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_R5G6B5,The following statement contains a magic number: uint G = ((argb & 0x0000FC00) >> 2) >> 3;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_R5G6B5,The following statement contains a magic number: uint B = (argb & 0x000000F8) >> 3;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A8L8,The following statement contains a magic number: uint L = (argb.R() + argb.G() + argb.B()) / 3;
Magic Number,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,toDDS_A8L8,The following statement contains a magic number: return argb.A() << 8 | (L & 0xFF);
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,CreateImage,The following statement contains a magic number: CreateImage((uint)(a << 24 | r << 16 | g << 8 | b)' width' height' supportHSV);
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,CreateImage,The following statement contains a magic number: CreateImage((uint)(a << 24 | r << 16 | g << 8 | b)' width' height' supportHSV);
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,CreateImage,The following statement contains a magic number: CreateImage((uint)(a << 24 | r << 16 | g << 8 | b)' width' height' supportHSV);
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,CreateImage,The following statement contains a magic number: this.alphaDepth = 5;
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,CreateImage,The following statement contains a magic number: this.alphaDepth = 5;
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Load,The following statement contains a magic number: switch (fmt)              {                  case Dds.DdsFormat.DXT1: useBlockCompression = true; alphaDepth = 1; break;                  case Dds.DdsFormat.DXT3: useBlockCompression = true; alphaDepth = 3; break;                  case Dds.DdsFormat.DXT5: useBlockCompression = true; alphaDepth = 5; break;                  case Dds.DdsFormat.A8L8: useLuminence = true; alphaDepth = 8; break;                  case Dds.DdsFormat.A1R5G5B5: alphaDepth = 1; break;                  case Dds.DdsFormat.A4R4G4B4: alphaDepth = 4; break;                  case Dds.DdsFormat.A8B8G8R8:                  case Dds.DdsFormat.A8R8G8B8: alphaDepth = 8; break;              }
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Load,The following statement contains a magic number: switch (fmt)              {                  case Dds.DdsFormat.DXT1: useBlockCompression = true; alphaDepth = 1; break;                  case Dds.DdsFormat.DXT3: useBlockCompression = true; alphaDepth = 3; break;                  case Dds.DdsFormat.DXT5: useBlockCompression = true; alphaDepth = 5; break;                  case Dds.DdsFormat.A8L8: useLuminence = true; alphaDepth = 8; break;                  case Dds.DdsFormat.A1R5G5B5: alphaDepth = 1; break;                  case Dds.DdsFormat.A4R4G4B4: alphaDepth = 4; break;                  case Dds.DdsFormat.A8B8G8R8:                  case Dds.DdsFormat.A8R8G8B8: alphaDepth = 8; break;              }
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Load,The following statement contains a magic number: switch (fmt)              {                  case Dds.DdsFormat.DXT1: useBlockCompression = true; alphaDepth = 1; break;                  case Dds.DdsFormat.DXT3: useBlockCompression = true; alphaDepth = 3; break;                  case Dds.DdsFormat.DXT5: useBlockCompression = true; alphaDepth = 5; break;                  case Dds.DdsFormat.A8L8: useLuminence = true; alphaDepth = 8; break;                  case Dds.DdsFormat.A1R5G5B5: alphaDepth = 1; break;                  case Dds.DdsFormat.A4R4G4B4: alphaDepth = 4; break;                  case Dds.DdsFormat.A8B8G8R8:                  case Dds.DdsFormat.A8R8G8B8: alphaDepth = 8; break;              }
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Load,The following statement contains a magic number: switch (fmt)              {                  case Dds.DdsFormat.DXT1: useBlockCompression = true; alphaDepth = 1; break;                  case Dds.DdsFormat.DXT3: useBlockCompression = true; alphaDepth = 3; break;                  case Dds.DdsFormat.DXT5: useBlockCompression = true; alphaDepth = 5; break;                  case Dds.DdsFormat.A8L8: useLuminence = true; alphaDepth = 8; break;                  case Dds.DdsFormat.A1R5G5B5: alphaDepth = 1; break;                  case Dds.DdsFormat.A4R4G4B4: alphaDepth = 4; break;                  case Dds.DdsFormat.A8B8G8R8:                  case Dds.DdsFormat.A8R8G8B8: alphaDepth = 8; break;              }
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Load,The following statement contains a magic number: switch (fmt)              {                  case Dds.DdsFormat.DXT1: useBlockCompression = true; alphaDepth = 1; break;                  case Dds.DdsFormat.DXT3: useBlockCompression = true; alphaDepth = 3; break;                  case Dds.DdsFormat.DXT5: useBlockCompression = true; alphaDepth = 5; break;                  case Dds.DdsFormat.A8L8: useLuminence = true; alphaDepth = 8; break;                  case Dds.DdsFormat.A1R5G5B5: alphaDepth = 1; break;                  case Dds.DdsFormat.A4R4G4B4: alphaDepth = 4; break;                  case Dds.DdsFormat.A8B8G8R8:                  case Dds.DdsFormat.A8R8G8B8: alphaDepth = 8; break;              }
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Save,The following statement contains a magic number: if (useBlockCompression)                  switch (alphaDepth)                  {                      case 1: ddsFormat = Dds.DdsFormat.DXT1; break;                      case 3: ddsFormat = Dds.DdsFormat.DXT3; break;                      default: ddsFormat = Dds.DdsFormat.DXT5; break;                  }              else if (useLuminence)                  ddsFormat = Dds.DdsFormat.A8L8;              else                  switch (alphaDepth)                  {                      case 0: ddsFormat = Dds.DdsFormat.R8G8B8; break;                      case 1: ddsFormat = Dds.DdsFormat.A1R5G5B5; break;                      case 4: ddsFormat = Dds.DdsFormat.A4R4G4B4; break;                      default: ddsFormat = Dds.DdsFormat.A8R8G8B8; break;                  }
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Save,The following statement contains a magic number: if (useBlockCompression)                  switch (alphaDepth)                  {                      case 1: ddsFormat = Dds.DdsFormat.DXT1; break;                      case 3: ddsFormat = Dds.DdsFormat.DXT3; break;                      default: ddsFormat = Dds.DdsFormat.DXT5; break;                  }              else if (useLuminence)                  ddsFormat = Dds.DdsFormat.A8L8;              else                  switch (alphaDepth)                  {                      case 0: ddsFormat = Dds.DdsFormat.R8G8B8; break;                      case 1: ddsFormat = Dds.DdsFormat.A1R5G5B5; break;                      case 4: ddsFormat = Dds.DdsFormat.A4R4G4B4; break;                      default: ddsFormat = Dds.DdsFormat.A8R8G8B8; break;                  }
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,SetAlphaFromGreyscale,The following statement contains a magic number: AlphaDepth = UseDXT ? 5 : 8;
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,SetAlphaFromGreyscale,The following statement contains a magic number: AlphaDepth = UseDXT ? 5 : 8;
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,SetAlphaFromGreyscale,The following statement contains a magic number: SetPixels((x' y' value) =>              {                  uint alpha;                  lock (image)                  {                      uint srcValue = image.GetPixel(x % image.width' y % image.height);                      alpha = ((srcValue.R() + srcValue.G() + srcValue.B()) / 3) & 0xff;                  }                    return (value & 0x00FFFFFF) | (alpha << 24);              });
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,SetAlphaFromGreyscale,The following statement contains a magic number: SetPixels((x' y' value) =>              {                  uint alpha;                  lock (image)                  {                      uint srcValue = image.GetPixel(x % image.width' y % image.height);                      alpha = ((srcValue.R() + srcValue.G() + srcValue.B()) / 3) & 0xff;                  }                    return (value & 0x00FFFFFF) | (alpha << 24);              });
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,SetAlphaFromGreyscale,The following statement contains a magic number: AlphaDepth = UseDXT ? 5 : 8;
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,SetAlphaFromGreyscale,The following statement contains a magic number: AlphaDepth = UseDXT ? 5 : 8;
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,SetAlphaFromGreyscale,The following statement contains a magic number: SetPixels((x' y' value) =>              {                  uint alpha;                  lock (image)                  {                      Color srcValue = image.GetPixel(x % image.Width' y % image.Height);                      alpha = ((uint)(srcValue.R + srcValue.G + srcValue.B) / 3) & 0xff;                  }                    return (value & 0x00FFFFFF) | (alpha << 24);              });
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,SetAlphaFromGreyscale,The following statement contains a magic number: SetPixels((x' y' value) =>              {                  uint alpha;                  lock (image)                  {                      Color srcValue = image.GetPixel(x % image.Width' y % image.Height);                      alpha = ((uint)(srcValue.R + srcValue.G + srcValue.B) / 3) & 0xff;                  }                    return (value & 0x00FFFFFF) | (alpha << 24);              });
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,GetGreyscaleFromAlpha,The following statement contains a magic number: DoAction((x' y' value) => greyscale[x + y * width] = ((uint)0xFF << 24) | value.A() << 16 | value.A() << 8 | value.A() << 0);
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,GetGreyscaleFromAlpha,The following statement contains a magic number: DoAction((x' y' value) => greyscale[x + y * width] = ((uint)0xFF << 24) | value.A() << 16 | value.A() << 8 | value.A() << 0);
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,GetGreyscaleFromAlpha,The following statement contains a magic number: DoAction((x' y' value) => greyscale[x + y * width] = ((uint)0xFF << 24) | value.A() << 16 | value.A() << 8 | value.A() << 0);
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,GetImage,The following statement contains a magic number: if (!red || !green || !blue || !alpha || invert)              {                  destPixels = new uint[sourcePixels.Length];                    Enumerable.Range(0' height).AsParallel()                      .ForAll(y =>                      {                          int offset = y * width;                          Enumerable.Range(0' width).AsParallel()                              .ForAll(x =>                              {                                  uint pixel = sourcePixels[offset + x] & mask;                                  if (alpha) { if (invert) pixel = (pixel & 0x00FFFFFF) | ((255 - pixel.A()) << 24); }                                  else pixel |= 0xFF000000;                                    destPixels[offset + x] = pixel;                              });                      });              }              else                  destPixels = sourcePixels;
Magic Number,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,GetImage,The following statement contains a magic number: if (!red || !green || !blue || !alpha || invert)              {                  destPixels = new uint[sourcePixels.Length];                    Enumerable.Range(0' height).AsParallel()                      .ForAll(y =>                      {                          int offset = y * width;                          Enumerable.Range(0' width).AsParallel()                              .ForAll(x =>                              {                                  uint pixel = sourcePixels[offset + x] & mask;                                  if (alpha) { if (invert) pixel = (pixel & 0x00FFFFFF) | ((255 - pixel.A()) << 24); }                                  else pixel |= 0xFF000000;                                    destPixels[offset + x] = pixel;                              });                      });              }              else                  destPixels = sourcePixels;
Magic Number,System.Drawing,Extensions,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,A,The following statement contains a magic number: return (argb & 0xFF000000) >> 24;
Magic Number,System.Drawing,Extensions,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,R,The following statement contains a magic number: return (argb & 0x00FF0000) >> 16;
Magic Number,System.Drawing,Extensions,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,G,The following statement contains a magic number: return (argb & 0x0000FF00) >> 8;
Magic Number,System.Drawing,DdsSquish,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,CompressImage,The following statement contains a magic number: if (metric != null && metric.Length != 3)                  throw new ArgumentException("Non-null metric must reference an array of three floats.");
Magic Number,System.Drawing,DdsSquish,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,CompressImage,The following statement contains a magic number: byte[] blocks = new byte[((width + 3) >> ((flags & DdsSquish.SquishFlags.kDxt1) == 0 ? 2 : 3)) * 4 * height];
Magic Number,System.Drawing,DdsSquish,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,CompressImage,The following statement contains a magic number: byte[] blocks = new byte[((width + 3) >> ((flags & DdsSquish.SquishFlags.kDxt1) == 0 ? 2 : 3)) * 4 * height];
Magic Number,System.Drawing,DdsSquish,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,CompressImage,The following statement contains a magic number: byte[] blocks = new byte[((width + 3) >> ((flags & DdsSquish.SquishFlags.kDxt1) == 0 ? 2 : 3)) * 4 * height];
Magic Number,System.Drawing,DdsSquish,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,CompressImage,The following statement contains a magic number: byte[] blocks = new byte[((width + 3) >> ((flags & DdsSquish.SquishFlags.kDxt1) == 0 ? 2 : 3)) * 4 * height];
Magic Number,System.Drawing,DdsSquish,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,DecompressImage,The following statement contains a magic number: byte[]	pixelOutput	= new byte[ width * height * 4 ];
Magic Number,System.Drawing,DdsSquish,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsSquish.cs,Is64Bit,The following statement contains a magic number: return (Marshal.SizeOf(IntPtr.Zero) == 8);
Magic Number,System.Drawing,ColorHSVA,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\RGBHSV.cs,ToARGB,The following statement contains a magic number: if (s == 0) r = g = b = v;//Grey              else              {                  float f' p' q' t;                  int i;                  h *= 6; //to bring hue to a number between 0 and 6' better for the calculations                  i = (int)(Math.Floor(h));  //e.g. 2.7 becomes 2 and 3.01 becomes 3 or 4.9999 becomes 4                  f = h - i;  //the fractional part of h                  p = v * (1 - s);                  q = v * (1 - (s * f));                  t = v * (1 - (s * (1 - f)));                  switch (i)                  {                      case 0: r = v; g = t; b = p; break;                      case 1: r = q; g = v; b = p; break;                      case 2: r = p; g = v; b = t; break;                      case 3: r = p; g = q; b = v; break;                      case 4: r = t; g = p; b = v; break;                      case 5: r = v; g = p; b = q; break;                  }              }
Magic Number,System.Drawing,ColorHSVA,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\RGBHSV.cs,ToARGB,The following statement contains a magic number: if (s == 0) r = g = b = v;//Grey              else              {                  float f' p' q' t;                  int i;                  h *= 6; //to bring hue to a number between 0 and 6' better for the calculations                  i = (int)(Math.Floor(h));  //e.g. 2.7 becomes 2 and 3.01 becomes 3 or 4.9999 becomes 4                  f = h - i;  //the fractional part of h                  p = v * (1 - s);                  q = v * (1 - (s * f));                  t = v * (1 - (s * (1 - f)));                  switch (i)                  {                      case 0: r = v; g = t; b = p; break;                      case 1: r = q; g = v; b = p; break;                      case 2: r = p; g = v; b = t; break;                      case 3: r = p; g = q; b = v; break;                      case 4: r = t; g = p; b = v; break;                      case 5: r = v; g = p; b = q; break;                  }              }
Magic Number,System.Drawing,ColorHSVA,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\RGBHSV.cs,ToARGB,The following statement contains a magic number: if (s == 0) r = g = b = v;//Grey              else              {                  float f' p' q' t;                  int i;                  h *= 6; //to bring hue to a number between 0 and 6' better for the calculations                  i = (int)(Math.Floor(h));  //e.g. 2.7 becomes 2 and 3.01 becomes 3 or 4.9999 becomes 4                  f = h - i;  //the fractional part of h                  p = v * (1 - s);                  q = v * (1 - (s * f));                  t = v * (1 - (s * (1 - f)));                  switch (i)                  {                      case 0: r = v; g = t; b = p; break;                      case 1: r = q; g = v; b = p; break;                      case 2: r = p; g = v; b = t; break;                      case 3: r = p; g = q; b = v; break;                      case 4: r = t; g = p; b = v; break;                      case 5: r = v; g = p; b = q; break;                  }              }
Magic Number,System.Drawing,ColorHSVA,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\RGBHSV.cs,ToARGB,The following statement contains a magic number: if (s == 0) r = g = b = v;//Grey              else              {                  float f' p' q' t;                  int i;                  h *= 6; //to bring hue to a number between 0 and 6' better for the calculations                  i = (int)(Math.Floor(h));  //e.g. 2.7 becomes 2 and 3.01 becomes 3 or 4.9999 becomes 4                  f = h - i;  //the fractional part of h                  p = v * (1 - s);                  q = v * (1 - (s * f));                  t = v * (1 - (s * (1 - f)));                  switch (i)                  {                      case 0: r = v; g = t; b = p; break;                      case 1: r = q; g = v; b = p; break;                      case 2: r = p; g = v; b = t; break;                      case 3: r = p; g = q; b = v; break;                      case 4: r = t; g = p; b = v; break;                      case 5: r = v; g = p; b = q; break;                  }              }
Magic Number,System.Drawing,ColorHSVA,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\RGBHSV.cs,ToARGB,The following statement contains a magic number: if (s == 0) r = g = b = v;//Grey              else              {                  float f' p' q' t;                  int i;                  h *= 6; //to bring hue to a number between 0 and 6' better for the calculations                  i = (int)(Math.Floor(h));  //e.g. 2.7 becomes 2 and 3.01 becomes 3 or 4.9999 becomes 4                  f = h - i;  //the fractional part of h                  p = v * (1 - s);                  q = v * (1 - (s * f));                  t = v * (1 - (s * (1 - f)));                  switch (i)                  {                      case 0: r = v; g = t; b = p; break;                      case 1: r = q; g = v; b = p; break;                      case 2: r = p; g = v; b = t; break;                      case 3: r = p; g = q; b = v; break;                      case 4: r = t; g = p; b = v; break;                      case 5: r = v; g = p; b = q; break;                  }              }
Magic Number,System.Drawing,ColorHSVA,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\RGBHSV.cs,ToARGB,The following statement contains a magic number: return (uint)this.a << 24 | (uint)Math.Round(r * 255.0f) << 16| (uint)Math.Round(g * 255.0f) << 8 | (uint)Math.Round(b * 255.0f);
Magic Number,System.Drawing,ColorHSVA,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\RGBHSV.cs,ToARGB,The following statement contains a magic number: return (uint)this.a << 24 | (uint)Math.Round(r * 255.0f) << 16| (uint)Math.Round(g * 255.0f) << 8 | (uint)Math.Round(b * 255.0f);
Magic Number,System.Drawing,ColorHSVA,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\RGBHSV.cs,ToARGB,The following statement contains a magic number: return (uint)this.a << 24 | (uint)Math.Round(r * 255.0f) << 16| (uint)Math.Round(g * 255.0f) << 8 | (uint)Math.Round(b * 255.0f);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,CreateImage,The following statement contains a magic number: CreateImage(red' green' blue' 255' size.Width' size.Height' supportHSV);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,CreateImage,The following statement contains a magic number: CreateImage(red' green' blue' 255' width' height' supportHSV);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,doResize,The following statement contains a magic number: Size targetSize = loaded ? image.Size : new Size(128' 128);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,doResize,The following statement contains a magic number: Size targetSize = loaded ? image.Size : new Size(128' 128);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,ScaleToFit,The following statement contains a magic number: return new Size((int)Math.Max(1' Math.Round(from.Width * scale - 0.5' MidpointRounding.AwayFromZero))'                  (int)Math.Max(1'Math.Round(from.Height * scale - 0.5' MidpointRounding.AwayFromZero)));
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,ScaleToFit,The following statement contains a magic number: return new Size((int)Math.Max(1' Math.Round(from.Width * scale - 0.5' MidpointRounding.AwayFromZero))'                  (int)Math.Max(1'Math.Round(from.Height * scale - 0.5' MidpointRounding.AwayFromZero)));
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,DDSPanel_Resize,The following statement contains a magic number: if (fit && DateTime.UtcNow > now.AddMilliseconds(25))              {                  pictureBox1.Image = doResize();                  now = DateTime.UtcNow;              }              else                  timer1.Interval = 10;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,DDSPanel_Resize,The following statement contains a magic number: if (fit && DateTime.UtcNow > now.AddMilliseconds(25))              {                  pictureBox1.Image = doResize();                  now = DateTime.UtcNow;              }              else                  timer1.Interval = 10;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 2;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(543' 157);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(543' 157);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(0' 29);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(543' 128);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(543' 128);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 2;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(128' 128);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(128' 128);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.TabIndex = 3;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Location = new System.Drawing.Point(0' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Margin = new System.Windows.Forms.Padding(0' 3' 0' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Margin = new System.Windows.Forms.Padding(0' 3' 0' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Size = new System.Drawing.Size(512' 23);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Size = new System.Drawing.Size(512' 23);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 5);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 5);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(89' 13);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(89' 13);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 4;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbR.Location = new System.Drawing.Point(98' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbR.Location = new System.Drawing.Point(98' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbR.Size = new System.Drawing.Size(46' 17);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbR.Size = new System.Drawing.Size(46' 17);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbG.Location = new System.Drawing.Point(150' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbG.Location = new System.Drawing.Point(150' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbG.Size = new System.Drawing.Size(55' 17);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbG.Size = new System.Drawing.Size(55' 17);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbB.Location = new System.Drawing.Point(211' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbB.Location = new System.Drawing.Point(211' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbB.Size = new System.Drawing.Size(47' 17);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbB.Size = new System.Drawing.Size(47' 17);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbB.TabIndex = 2;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbA.Location = new System.Drawing.Point(264' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbA.Location = new System.Drawing.Point(264' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbA.Size = new System.Drawing.Size(53' 17);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbA.Size = new System.Drawing.Size(53' 17);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbA.TabIndex = 3;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbI.Location = new System.Drawing.Point(323' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbI.Location = new System.Drawing.Point(323' 3);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbI.Size = new System.Drawing.Size(53' 17);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbI.Size = new System.Drawing.Size(53' 17);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.ckbI.TabIndex = 5;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.tlpSize.ColumnCount = 3;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.tlpSize.Controls.Add(this.lbDDSFmt' 2' 0);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.tlpSize.Location = new System.Drawing.Point(379' 5);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.tlpSize.Location = new System.Drawing.Point(379' 5);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.tlpSize.Size = new System.Drawing.Size(133' 13);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.tlpSize.Size = new System.Drawing.Size(133' 13);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.tlpSize.TabIndex = 6;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 0);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(30' 13);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(30' 13);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.lbSize.Location = new System.Drawing.Point(39' 0);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.lbSize.Size = new System.Drawing.Size(41' 13);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.lbSize.Size = new System.Drawing.Size(41' 13);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.lbDDSFmt.Location = new System.Drawing.Point(86' 0);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.lbDDSFmt.Size = new System.Drawing.Size(44' 13);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.lbDDSFmt.Size = new System.Drawing.Size(44' 13);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.lbDDSFmt.TabIndex = 2;
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(543' 157);
Magic Number,System.Windows.Forms,DDSPanel,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DDSPanel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(543' 157);
Missing Default,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,ToARGB,The following switch statement is missing a default case: switch (FileFormat)                      {                          case DdsFormat.A8R8G8B8: return fromDDS_A8R8G8B8;                          case DdsFormat.X8R8G8B8: return fromDDS_X8R8G8B8;                          case DdsFormat.A8B8G8R8: return fromDDS_A8B8G8R8;                          case DdsFormat.X8B8G8R8: return fromDDS_X8B8G8R8;                          case DdsFormat.A1R5G5B5: return fromDDS_A1R5G5B5;                          case DdsFormat.A4R4G4B4: return fromDDS_A4R4G4B4;                          case DdsFormat.R8G8B8: return fromDDS_R8G8B8;                          case DdsFormat.R5G6B5: return fromDDS_R5G6B5;                          case DdsFormat.A8L8: return fromDDS_A8L8;                      }
Missing Default,System.Drawing,DdsPixelFormat,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,FromARGB,The following switch statement is missing a default case: switch (FileFormat)                      {                          case DdsFormat.A8R8G8B8: return toDDS_A8R8G8B8;                          case DdsFormat.X8R8G8B8: return toDDS_X8R8G8B8;                          case DdsFormat.A8B8G8R8: return toDDS_A8B8G8R8;                          case DdsFormat.X8B8G8R8: return toDDS_X8B8G8R8;                          case DdsFormat.A1R5G5B5: return toDDS_A1R5G5B5;                          case DdsFormat.A4R4G4B4: return toDDS_A4R4G4B4;                          case DdsFormat.R8G8B8: return toDDS_R8G8B8;                          case DdsFormat.R5G6B5: return toDDS_R5G6B5;                          case DdsFormat.A8L8: return toDDS_A8L8;                      }
Missing Default,System.Drawing,DdsFile,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\DdsFile.cs,Load,The following switch statement is missing a default case: switch (fmt)              {                  case Dds.DdsFormat.DXT1: useBlockCompression = true; alphaDepth = 1; break;                  case Dds.DdsFormat.DXT3: useBlockCompression = true; alphaDepth = 3; break;                  case Dds.DdsFormat.DXT5: useBlockCompression = true; alphaDepth = 5; break;                  case Dds.DdsFormat.A8L8: useLuminence = true; alphaDepth = 8; break;                  case Dds.DdsFormat.A1R5G5B5: alphaDepth = 1; break;                  case Dds.DdsFormat.A4R4G4B4: alphaDepth = 4; break;                  case Dds.DdsFormat.A8B8G8R8:                  case Dds.DdsFormat.A8R8G8B8: alphaDepth = 8; break;              }
Missing Default,System.Drawing,ColorHSVA,C:\repos\Sims4Group_Sims4Tools\s4pi Extras\DDSPanel\RGBHSV.cs,ToARGB,The following switch statement is missing a default case: switch (i)                  {                      case 0: r = v; g = t; b = p; break;                      case 1: r = q; g = v; b = p; break;                      case 2: r = p; g = v; b = t; break;                      case 3: r = p; g = q; b = v; break;                      case 4: r = t; g = p; b = v; break;                      case 5: r = v; g = p; b = q; break;                  }
