Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The method has 143 lines of code.
Complex Method,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetExactVersion,Cyclomatic complexity of the method is 10
Complex Method,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetServicePackLevel,Cyclomatic complexity of the method is 10
Complex Method,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,CheckFxVersion,Cyclomatic complexity of the method is 10
Complex Method,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetRegistryKey,Cyclomatic complexity of the method is 10
Complex Method,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsAspNetRegistered,Cyclomatic complexity of the method is 8
Complex Method,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,Cyclomatic complexity of the method is 17
Complex Method,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,Cyclomatic complexity of the method is 45
Long Parameter List,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetRegistryValue,The method has 5 parameters. Parameters: hive' key' value' kind' data
Long Parameter List,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,GetRegistryValue,The method has 5 parameters. Parameters: hive' key' value' kind' data
Long Identifier,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,,The length of the parameter Netfx30PlusWFPlusVersionRegValueName is 36.
Long Identifier,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,,The length of the parameter CardSpaceServicesPlusImagePathRegName is 37.
Long Identifier,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,,The length of the parameter Netfx35ClientProfileRegKeyName is 30.
Long Identifier,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,,The length of the parameter Netfx35ServerCoreProfileRegKeyName is 34.
Long Identifier,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,,The length of the parameter Netfx40ClientProfileRegKeyName is 30.
Long Identifier,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,,The length of the parameter NetfxStandardVersionRegValueName is 32.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetExactVersion,The length of the statement  "                    version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx35ServerCoreProfile)' NetfxStandardVersionRegValueName); " is 121.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetServicePackLevel,The length of the statement  "                    servicePackLevel = GetNetfxSPLevel(GetRegistryKey(FrameworkVersion.Fx35ServerCoreProfile)' NetfxStandrdSpxRegValueName); " is 120.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,CheckFxVersion,The length of the statement  "                    version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx35ServerCoreProfile)' NetfxStandardVersionRegValueName); " is 121.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,CheckFxVersion,The length of the statement  "            valid = GetCoreFrameworkVersion(frameworkVersion' out Version coreVersion) ? (version >= max && coreVersion >= min) : version >= max; " is 133.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetInstallRoot,The length of the statement  "            if (!GetRegistryValue(RegistryHive.LocalMachine' NetfxInstallRootRegKeyName' NetFxInstallRootRegValueName' RegistryValueKind.String' out installRoot)) " is 150.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx10SPLevel,The length of the statement  "                foundKey = GetRegistryValue(RegistryHive.LocalMachine' Netfx10SPxOCMRegKeyName' NetfxStandardVersionRegValueName' RegistryValueKind.String' out regValue); " is 154.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx10SPLevel,The length of the statement  "                foundKey = GetRegistryValue(RegistryHive.LocalMachine' Netfx10SPxMSIRegKeyName' NetfxStandardVersionRegValueName' RegistryValueKind.String' out regValue); " is 154.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx10ExactVersion,The length of the statement  "                foundKey = GetRegistryValue(RegistryHive.LocalMachine' Netfx10SPxOCMRegKeyName' NetfxStandardVersionRegValueName' RegistryValueKind.String' out regValue); " is 154.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx10ExactVersion,The length of the statement  "                foundKey = GetRegistryValue(RegistryHive.LocalMachine' Netfx10SPxMSIRegKeyName' NetfxStandardVersionRegValueName' RegistryValueKind.String' out regValue); " is 154.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx10ExactVersion,The length of the statement  "                        version = new Version(Convert.ToInt32(tokens[0]' NumberFormatInfo.InvariantInfo)' Convert.ToInt32(tokens[1]' NumberFormatInfo.InvariantInfo)' Convert.ToInt32(tokens[2]' NumberFormatInfo.InvariantInfo)); " is 202.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx11ExactVersion,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' Netfx11RegKeyName' NetfxStandardRegValueName' RegistryValueKind.DWord' out int regValue)) " is 137.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx20ExactVersion,The length of the statement  "                if (GetRegistryValue(RegistryHive.LocalMachine' Netfx20RegKeyName' Netfx20PlusBuildRegValueName' RegistryValueKind.String' out regValue)) " is 137.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx20ExactVersion,The length of the statement  "                                version = new Version(Convert.ToInt32(tokens[0]' NumberFormatInfo.InvariantInfo)' Convert.ToInt32(tokens[1]' NumberFormatInfo.InvariantInfo)' Convert.ToInt32(tokens[2]' NumberFormatInfo.InvariantInfo)' Convert.ToInt32(regValue' NumberFormatInfo.InvariantInfo)); " is 261.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetRegistryValue,The length of the statement  "            using (var registryKey = RegistryKey.OpenBaseKey(hive' RegistryView.Registry32)?.OpenSubKey(key' RegistryRights.ReadKey)) " is 121.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx10Installed,The length of the statement  "            var found = GetRegistryValue(RegistryHive.LocalMachine' GetRegistryKey(FrameworkVersion.Fx10)' Netfx10RegKeyValue' RegistryValueKind.String' out string regValue); " is 162.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx11Installed,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' GetRegistryKey(FrameworkVersion.Fx11)' NetfxStandardRegValueName' RegistryValueKind.DWord' out int regValue)) " is 157.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx20Installed,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' GetRegistryKey(FrameworkVersion.Fx20)' NetfxStandardRegValueName' RegistryValueKind.DWord' out int regValue)) " is 157.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx30Installed,The length of the statement  "                if (GetRegistryValue(RegistryHive.LocalMachine' GetRegistryKey(FrameworkVersion.Fx30)' Netfx30RegValueName' RegistryValueKind.DWord' out int regValue)) " is 151.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx35Installed,The length of the statement  "                if (GetRegistryValue(RegistryHive.LocalMachine' GetRegistryKey(frameworkVersion)' NetfxStandardRegValueName' RegistryValueKind.DWord' out int regValue)) " is 152.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx40Installed,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' GetRegistryKey(frameworkVersion)' NetfxStandardRegValueName' RegistryValueKind.DWord' out int regValue)) " is 152.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx45OrLaterInstalled,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' GetRegistryKey(frameworkVersion)' Netfx45RegValueName' RegistryValueKind.DWord' out int regValue)) " is 146.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsTabletOrMediaCenter,The length of the statement  "            return (SafeNativeMethods.GetSystemMetrics(SystemMetric.SM_TABLETPC) != 0) || (SafeNativeMethods.GetSystemMetrics(SystemMetric.SM_MEDIACENTER) != 0); " is 149.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx30CardSpaceInstalled,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' CardSpaceServicesRegKeyName' CardSpaceServicesPlusImagePathRegName' RegistryValueKind.ExpandString' out regValue)) " is 162.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx30CardSpaceExactVersion,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' CardSpaceServicesRegKeyName' CardSpaceServicesPlusImagePathRegName' RegistryValueKind.ExpandString' out regValue)) " is 162.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx30WCFInstalled,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' Netfx30PlusWCFRegKeyName' Netfx30RegValueName' RegistryValueKind.DWord' out int regValue)) " is 138.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx30WCFExactVersion,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' Netfx30PlusWCFRegKeyName' NetfxStandardVersionRegValueName' RegistryValueKind.String' out regValue)) " is 148.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx30WPFInstalled,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' Netfx30PlusWPFRegKeyName' Netfx30RegValueName' RegistryValueKind.DWord' out int regValue)) " is 138.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx30WPFExactVersion,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' Netfx30PlusWPFRegKeyName' NetfxStandardVersionRegValueName' RegistryValueKind.String' out regValue)) " is 148.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsNetfx30WFInstalled,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' Netfx30PlusWFRegKeyName' Netfx30RegValueName' RegistryValueKind.DWord' out int regValue)) " is 137.
Long Statement,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx30WFExactVersion,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' Netfx30PlusWFRegKeyName' Netfx30PlusWFPlusVersionRegValueName' RegistryValueKind.String' out regValue)) " is 151.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The length of the statement  "                        ret = IsFeatureInstalled(new string[] { "W3SVC"' "CachingBase"' "CachingBaseBinaries"' "Caching"' "HttpCache"' "HttpCacheBinaries" }); " is 134.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,GetInstalledVersion,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' IISRegKeyName' IISRegKeyValue' RegistryValueKind.DWord' out majorVersion)) " is 122.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,GetInstalledVersion,The length of the statement  "                GetRegistryValue(RegistryHive.LocalMachine' IISRegKeyName' IISRegKeyMinorVersionValue' RegistryValueKind.DWord' out minorVersion); " is 130.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsAspNet11Registered,The length of the statement  "            return GetRegistryValue(RegistryHive.LocalMachine' Netfx11RegKeyName' NetRegKeyValue' RegistryValueKind.String' out regValue); " is 126.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsAspNet20Registered,The length of the statement  "            return GetRegistryValue(RegistryHive.LocalMachine' Netfx20RegKeyName' NetRegKeyValue' RegistryValueKind.String' out regValue); " is 126.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsAspNet40Registered,The length of the statement  "            return GetRegistryValue(RegistryHive.LocalMachine' Netfx40RegKeyName' NetRegKeyValue' RegistryValueKind.String' out regValue); " is 126.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsFeatureInstalled,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' IISComponentRegKeyName' featureKey' RegistryValueKind.DWord' out regValue)) " is 123.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsFeatureInstalled,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' IISComponentRegKeyName' featureKey1' RegistryValueKind.DWord' out regValue)) " is 124.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsFeatureInstalled,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' IISComponentRegKeyName' featureKey2' RegistryValueKind.DWord' out regValue)) " is 124.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsFeatureInstalled,The length of the statement  "                if (GetRegistryValue(RegistryHive.LocalMachine' IISComponentRegKeyName' featureKeys[i]' RegistryValueKind.DWord' out regValue)) " is 127.
Long Statement,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsSubcomponentInstalled,The length of the statement  "            if (GetRegistryValue(RegistryHive.LocalMachine' IISLegacyComponentRegKeyName' subcomponent' RegistryValueKind.DWord' out regValue)) " is 131.
Empty Catch Block,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetRegistryValue,The method has an empty catch block.
Empty Catch Block,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,GetRegistryValue,The method has an empty catch block.
Magic Number,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx10ExactVersion,The following statement contains a magic number: version = new Version(Convert.ToInt32(tokens[0]' NumberFormatInfo.InvariantInfo)' Convert.ToInt32(tokens[1]' NumberFormatInfo.InvariantInfo)' Convert.ToInt32(tokens[2]' NumberFormatInfo.InvariantInfo));
Magic Number,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx10ExactVersion,The following statement contains a magic number: tokens.Length == 3
Magic Number,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetNetfx11ExactVersion,The following statement contains a magic number: tokens.Length == 2
Magic Number,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following statement contains a magic number: switch (iisVersion)              {                  case InternetInformationServicesVersion.IIS4:                      ret = installedVersion.Major == 4;                      break;                    case InternetInformationServicesVersion.IIS5:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 0;                      break;                    case InternetInformationServicesVersion.IIS51:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 1;                      break;                    case InternetInformationServicesVersion.IIS6:                      ret = installedVersion.Major == 6;                      break;                    case InternetInformationServicesVersion.IIS7:                      ret = installedVersion.Major == 7;                      break;                    case InternetInformationServicesVersion.IIS8:                      ret = installedVersion.Major == 8;                      break;              }
Magic Number,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following statement contains a magic number: switch (iisVersion)              {                  case InternetInformationServicesVersion.IIS4:                      ret = installedVersion.Major == 4;                      break;                    case InternetInformationServicesVersion.IIS5:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 0;                      break;                    case InternetInformationServicesVersion.IIS51:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 1;                      break;                    case InternetInformationServicesVersion.IIS6:                      ret = installedVersion.Major == 6;                      break;                    case InternetInformationServicesVersion.IIS7:                      ret = installedVersion.Major == 7;                      break;                    case InternetInformationServicesVersion.IIS8:                      ret = installedVersion.Major == 8;                      break;              }
Magic Number,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following statement contains a magic number: switch (iisVersion)              {                  case InternetInformationServicesVersion.IIS4:                      ret = installedVersion.Major == 4;                      break;                    case InternetInformationServicesVersion.IIS5:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 0;                      break;                    case InternetInformationServicesVersion.IIS51:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 1;                      break;                    case InternetInformationServicesVersion.IIS6:                      ret = installedVersion.Major == 6;                      break;                    case InternetInformationServicesVersion.IIS7:                      ret = installedVersion.Major == 7;                      break;                    case InternetInformationServicesVersion.IIS8:                      ret = installedVersion.Major == 8;                      break;              }
Magic Number,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following statement contains a magic number: switch (iisVersion)              {                  case InternetInformationServicesVersion.IIS4:                      ret = installedVersion.Major == 4;                      break;                    case InternetInformationServicesVersion.IIS5:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 0;                      break;                    case InternetInformationServicesVersion.IIS51:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 1;                      break;                    case InternetInformationServicesVersion.IIS6:                      ret = installedVersion.Major == 6;                      break;                    case InternetInformationServicesVersion.IIS7:                      ret = installedVersion.Major == 7;                      break;                    case InternetInformationServicesVersion.IIS8:                      ret = installedVersion.Major == 8;                      break;              }
Magic Number,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following statement contains a magic number: switch (iisVersion)              {                  case InternetInformationServicesVersion.IIS4:                      ret = installedVersion.Major == 4;                      break;                    case InternetInformationServicesVersion.IIS5:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 0;                      break;                    case InternetInformationServicesVersion.IIS51:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 1;                      break;                    case InternetInformationServicesVersion.IIS6:                      ret = installedVersion.Major == 6;                      break;                    case InternetInformationServicesVersion.IIS7:                      ret = installedVersion.Major == 7;                      break;                    case InternetInformationServicesVersion.IIS8:                      ret = installedVersion.Major == 8;                      break;              }
Magic Number,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following statement contains a magic number: switch (iisVersion)              {                  case InternetInformationServicesVersion.IIS4:                      ret = installedVersion.Major == 4;                      break;                    case InternetInformationServicesVersion.IIS5:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 0;                      break;                    case InternetInformationServicesVersion.IIS51:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 1;                      break;                    case InternetInformationServicesVersion.IIS6:                      ret = installedVersion.Major == 6;                      break;                    case InternetInformationServicesVersion.IIS7:                      ret = installedVersion.Major == 7;                      break;                    case InternetInformationServicesVersion.IIS8:                      ret = installedVersion.Major == 8;                      break;              }
Magic Number,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following statement contains a magic number: majorVersion < 7
Magic Number,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following statement contains a magic number: switch (feature)                  {                      case InternetInformationServicesFeature.ApplicationInitialization:                          ret = IsFeatureInstalled("AppWarmUp");                          break;                        case InternetInformationServicesFeature.NetFxExtensibility:                          ret = IsFeatureInstalled("NetFxExtensibility"' "NetFxEnvironment");                          break;                        case InternetInformationServicesFeature.NetFxExtensibility45:                          ret = IsFeatureInstalled("NetFxExtensibility45");                          break;                        case InternetInformationServicesFeature.ASP:                          ret = IsFeatureInstalled("ASP"' "ASPBinaries");                          break;                        case InternetInformationServicesFeature.AspNet:                          ret = IsFeatureInstalled("ASPNET");                          break;                        case InternetInformationServicesFeature.AspNet45:                          ret = IsFeatureInstalled("ASPNET45");                          break;                        case InternetInformationServicesFeature.CGI:                          ret = IsFeatureInstalled(new string[] { "CGI"' "CGIBinaries"' "FastCgi"' "FastCgiBinaries" });                          break;                        case InternetInformationServicesFeature.ISAPIExtensions:                          ret = IsFeatureInstalled("ISAPIExtensions"' "ISAPIExtensionsBinaries");                          break;                        case InternetInformationServicesFeature.ISAPIFilters:                          ret = IsFeatureInstalled("ISAPIFilter"' "ISAPIFilterBinaries");                          break;                        case InternetInformationServicesFeature.ServerSideIncludes:                          ret = IsFeatureInstalled("ServerSideInclude"' "ServerSideIncludeBinaries");                          break;                        case InternetInformationServicesFeature.WebSockets:                          ret = IsFeatureInstalled("WebSockets");                          break;                        case InternetInformationServicesFeature.DefaultDocument:                          ret = IsFeatureInstalled("DefaultDocument"' "DefaultDocumentBinaries");                          break;                        case InternetInformationServicesFeature.DirectoryBrowsing:                          ret = IsFeatureInstalled("DirectoryBrowse"' "DirectoryBrowseBinaries");                          break;                        case InternetInformationServicesFeature.HttpErrors:                          ret = IsFeatureInstalled("HttpErrors"' "HttpErrorsBinaries");                          break;                        case InternetInformationServicesFeature.HttpRedirection:                          ret = IsFeatureInstalled("HttpRedirect"' "HttpRedirectBinaries");                          break;                        case InternetInformationServicesFeature.StaticContent:                          ret = IsFeatureInstalled("StaticContent"' "StaticContentBinaries");                          break;                        case InternetInformationServicesFeature.WebDAV:                          ret = IsFeatureInstalled("WebDAV"' "WebDAVBinaries");                          break;                        case InternetInformationServicesFeature.Webserver:                          ret = IsFeatureInstalled(new string[] { "W3SVC"' "CachingBase"' "CachingBaseBinaries"' "Caching"' "HttpCache"' "HttpCacheBinaries" });                          break;                         case InternetInformationServicesFeature.CustomLogging:                          ret = IsFeatureInstalled("CustomLogging"' "CustomLoggingBinaries");                          break;                        case InternetInformationServicesFeature.HttpLogging:                          ret = IsFeatureInstalled("HttpLogging"' "HttpLoggingBinaries");                          break;                        case InternetInformationServicesFeature.ODBCLogging:                          ret = IsFeatureInstalled("ODBCLogging"' "ODBCLoggingBinaries");                          break;                        case InternetInformationServicesFeature.RequestMonitor:                          ret = IsFeatureInstalled("RequestMonitor"' "RequestMonitorBinaries");                          break;                        case InternetInformationServicesFeature.Tracing:                          ret = IsFeatureInstalled("HttpTracing"' "HttpTracingBinaries");                          break;                        case InternetInformationServicesFeature.LoggingTools:                          ret = IsFeatureInstalled("LoggingLibraries");                          break;                        case InternetInformationServicesFeature.DynamicContentCompression:                          ret = IsFeatureInstalled("HttpCompressionDynamic"' "HttpCompressionDynamicBinaries");                          break;                        case InternetInformationServicesFeature.StaticContentCompression:                          ret = IsFeatureInstalled("HttpCompressionStatic"' "HttpCompressionStaticBinaries");                          break;                         case InternetInformationServicesFeature.Authorization:                          ret = IsFeatureInstalled("Authorization"' "AuthorizationBinaries");                          break;                        case InternetInformationServicesFeature.BasicAuthentication:                          ret = IsFeatureInstalled("BasicAuthentication"' "BasicAuthenticationBinaries");                          break;                        case InternetInformationServicesFeature.ClientCertificateMappingAuthentication:                          ret = IsFeatureInstalled("ClientCertificateMappingAuthentication"' "ClientCertificateMappingAuthenticationBinaries");                          break;                        case InternetInformationServicesFeature.CentralizedSSLCertificateSupport:                          ret = IsFeatureInstalled("CertProvider");                          break;                        case InternetInformationServicesFeature.DigestAuthentication:                          ret = IsFeatureInstalled("DigestAuthentication"' "DigestAuthenticationBinaries");                          break;                        case InternetInformationServicesFeature.IISCertificateMappingAuthentication:                          ret = IsFeatureInstalled("IISCertificateMappingAuthentication"' "IISCertificateMappingAuthenticationBinaries");                          break;                        case InternetInformationServicesFeature.IPSecurity:                          ret = IsFeatureInstalled("IPSecurity"' "IPSecurityBinaries");                          break;                        case InternetInformationServicesFeature.RequestFiltering:                          ret = IsFeatureInstalled("RequestFiltering"' "RequestFilteringBinaries");                          break;                        case InternetInformationServicesFeature.WindowsAuthentication:                          ret = IsFeatureInstalled("WindowsAuthentication"' "WindowsAuthenticationBinaries");                          break;                        case InternetInformationServicesFeature.ManagementConsole:                          ret = IsFeatureInstalled("ManagementConsole"' "WASConfigurationAPI");                          break;                        case InternetInformationServicesFeature.ManagementScriptingTools:                          ret = IsFeatureInstalled("ManagementScriptingTools"' "WASConfigurationAPI");                          break;                        case InternetInformationServicesFeature.ManagementService:                          ret = IsFeatureInstalled("AdminService"' "WASConfigurationAPI");                          break;                        case InternetInformationServicesFeature.MetabaseCompatibility:                          ret = IsFeatureInstalled("Metabase");                          break;                        case InternetInformationServicesFeature.WMICompatibility:                          ret = IsFeatureInstalled("WMICompatibility"' "Metabase");                          break;                        case InternetInformationServicesFeature.LegacyScripts:                          ret = IsFeatureInstalled("LegacyScripts");                          break;                        case InternetInformationServicesFeature.LegacySnapin:                          ret = IsFeatureInstalled(new string[] { "LegacySnapin"' "ADSICompatability"' "Metabase" });                          break;                        case InternetInformationServicesFeature.FTP:                          ret = IsFeatureInstalled(majorVersion >= 8 ? "FTPSvc" : "FTPServer");                          break;                        case InternetInformationServicesFeature.FTPExtensibility:                          ret = IsFeatureInstalled("FTPExtensibility");                          break;                  }
Magic Number,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following statement contains a magic number: majorVersion >= 7
Missing Default,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetExactVersion,The following switch statement is missing a default case: switch (frameworkVersion)              {                  case FrameworkVersion.Fx10:                      version = GetNetfx10ExactVersion();                      break;                    case FrameworkVersion.Fx11:                      version = GetNetfx11ExactVersion();                      break;                    case FrameworkVersion.Fx20:                      version = GetNetfx20ExactVersion();                      break;                    case FrameworkVersion.Fx30:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx30)' NetfxStandardVersionRegValueName);                      break;                    case FrameworkVersion.Fx35:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx35)' NetfxStandardVersionRegValueName);                      break;                    case FrameworkVersion.Fx35ClientProfile:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx35ClientProfile)' NetfxStandardVersionRegValueName);                      break;                    case FrameworkVersion.Fx35ServerCoreProfile:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx35ServerCoreProfile)' NetfxStandardVersionRegValueName);                      break;                    case FrameworkVersion.Fx40:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx40)' NetfxStandardVersionRegValueName);                      break;                    case FrameworkVersion.Fx40ClientProfile:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx40ClientProfile)' NetfxStandardVersionRegValueName);                      break;                    case FrameworkVersion.Fx45:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx45)' NetfxStandardVersionRegValueName);                      break;              }
Missing Default,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetExactVersion,The following switch statement is missing a default case: switch (foundationLibrary)              {                  case WindowsFoundationLibrary.CardSpace:                      version = GetNetfx30CardSpaceExactVersion();                      break;                    case WindowsFoundationLibrary.WCF:                      version = GetNetfx30WCFExactVersion();                      break;                    case WindowsFoundationLibrary.WF:                      version = GetNetfx30WFExactVersion();                      break;                    case WindowsFoundationLibrary.WPF:                      version = GetNetfx30WPFExactVersion();                      break;              }
Missing Default,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetServicePackLevel,The following switch statement is missing a default case: switch (frameworkVersion)              {                  case FrameworkVersion.Fx10:                      servicePackLevel = GetNetfx10SPLevel();                      break;                    case FrameworkVersion.Fx11:                      servicePackLevel = GetNetfxSPLevel(GetRegistryKey(FrameworkVersion.Fx11)' NetfxStandrdSpxRegValueName);                      break;                    case FrameworkVersion.Fx20:                      servicePackLevel = GetNetfxSPLevel(GetRegistryKey(FrameworkVersion.Fx20)' NetfxStandrdSpxRegValueName);                      break;                    case FrameworkVersion.Fx30:                      servicePackLevel = GetNetfxSPLevel(Netfx30SpRegKeyName' NetfxStandrdSpxRegValueName);                      break;                    case FrameworkVersion.Fx35:                      servicePackLevel = GetNetfxSPLevel(GetRegistryKey(FrameworkVersion.Fx35)' NetfxStandrdSpxRegValueName);                      break;                    case FrameworkVersion.Fx35ClientProfile:                      servicePackLevel = GetNetfxSPLevel(GetRegistryKey(FrameworkVersion.Fx35ClientProfile)' NetfxStandrdSpxRegValueName);                      break;                    case FrameworkVersion.Fx35ServerCoreProfile:                      servicePackLevel = GetNetfxSPLevel(GetRegistryKey(FrameworkVersion.Fx35ServerCoreProfile)' NetfxStandrdSpxRegValueName);                      break;                    case FrameworkVersion.Fx40:                      servicePackLevel = GetNetfxSPLevel(GetRegistryKey(FrameworkVersion.Fx40)' Netfx40SPxRegValueName);                      break;                    case FrameworkVersion.Fx40ClientProfile:                      servicePackLevel = GetNetfxSPLevel(GetRegistryKey(FrameworkVersion.Fx40ClientProfile)' Netfx40SPxRegValueName);                      break;                    case FrameworkVersion.Fx45:                      servicePackLevel = GetNetfxSPLevel(GetRegistryKey(FrameworkVersion.Fx45)' Netfx40SPxRegValueName);                      break;              }
Missing Default,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetServicePackLevel,The following switch statement is missing a default case: switch (foundationLibrary)              {                  case WindowsFoundationLibrary.CardSpace:                      servicePackLevel = GetNetfx30CardSpaceSPLevel();                      break;                    case WindowsFoundationLibrary.WCF:                      servicePackLevel = GetNetfx30WCFSPLevel();                      break;                    case WindowsFoundationLibrary.WF:                      servicePackLevel = GetNetfx30WFSPLevel();                      break;                    case WindowsFoundationLibrary.WPF:                      servicePackLevel = GetNetfx30WPFSPLevel();                      break;              }
Missing Default,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsInstalled,The following switch statement is missing a default case: switch (frameworkVersion)              {                  case FrameworkVersion.Fx10:                      ret = IsNetfx10Installed();                      break;                    case FrameworkVersion.Fx11:                      ret = IsNetfx11Installed();                      break;                    case FrameworkVersion.Fx20:                      ret = IsNetfx20Installed();                      break;                    case FrameworkVersion.Fx30:                      ret = IsNetfx30Installed();                      break;                    case FrameworkVersion.Fx35:                  case FrameworkVersion.Fx35ClientProfile:                  case FrameworkVersion.Fx35ServerCoreProfile:                      ret = IsNetfx35Installed(frameworkVersion);                      break;                    case FrameworkVersion.Fx40:                  case FrameworkVersion.Fx40ClientProfile:                      ret = IsNetfx40Installed(frameworkVersion);                      break;                    case FrameworkVersion.Fx45:                  case FrameworkVersion.Fx451:                  case FrameworkVersion.Fx452:                  case FrameworkVersion.Fx46:                  case FrameworkVersion.Fx461:                  case FrameworkVersion.Fx462:                  case FrameworkVersion.Fx47:                      ret = IsNetfx45OrLaterInstalled(frameworkVersion);                      break;              }
Missing Default,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,IsInstalled,The following switch statement is missing a default case: switch (foundationLibrary)              {                  case WindowsFoundationLibrary.CardSpace:                      ret = IsNetfx30CardSpaceInstalled();                      break;                    case WindowsFoundationLibrary.WCF:                      ret = IsNetfx30WCFInstalled();                      break;                    case WindowsFoundationLibrary.WF:                      ret = IsNetfx30WFInstalled();                      break;                    case WindowsFoundationLibrary.WPF:                      ret = IsNetfx30WPFInstalled();                      break;              }
Missing Default,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,CheckFxVersion,The following switch statement is missing a default case: switch (frameworkVersion)              {                  case FrameworkVersion.Fx10:                      version = GetNetfx10ExactVersion();                      min = Netfx10Version;                      max = Netfx10Version;                      break;                    case FrameworkVersion.Fx11:                      version = GetNetfx11ExactVersion();                      min = Netfx11Version;                      max = Netfx11Version;                      break;                    case FrameworkVersion.Fx20:                      version = GetNetfx20ExactVersion();                      min = Netfx20Version;                      max = Netfx20Version;                      break;                    case FrameworkVersion.Fx30:                      version = GetNetfxExactVersion(Netfx30RegKeyName' NetfxStandardVersionRegValueName);                      min = Netfx20Version;                      max = Netfx30Version;                      break;                    case FrameworkVersion.Fx35:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx35)' NetfxStandardVersionRegValueName);                      min = Netfx20Version;                      max = Netfx35Version;                      break;                    case FrameworkVersion.Fx35ClientProfile:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx35ClientProfile)' NetfxStandardVersionRegValueName);                      min = Netfx20Version;                      max = Netfx35Version;                      break;                    case FrameworkVersion.Fx35ServerCoreProfile:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx35ServerCoreProfile)' NetfxStandardVersionRegValueName);                      min = Netfx20Version;                      max = Netfx35Version;                      break;                    case FrameworkVersion.Fx40:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx40)' NetfxStandardVersionRegValueName);                      min = Netfx40Version;                      max = Netfx40Version;                      break;                    case FrameworkVersion.Fx40ClientProfile:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx40ClientProfile)' NetfxStandardVersionRegValueName);                      min = Netfx40Version;                      max = Netfx40Version;                      break;                    case FrameworkVersion.Fx45:                      version = GetNetfxExactVersion(GetRegistryKey(FrameworkVersion.Fx45)' NetfxStandardVersionRegValueName);                      min = Netfx40Version;                      max = Netfx45Version;                      break;              }
Missing Default,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetCorePath,The following switch statement is missing a default case: switch (frameworkVersion)              {                  case FrameworkVersion.Fx10:                      ret = Path.Combine(GetInstallRoot()' Netfx10VersionString' NetfxMscorlib);                      break;                    case FrameworkVersion.Fx11:                      ret = Path.Combine(GetInstallRoot()' Netfx11VersionString' NetfxMscorlib);                      break;                    case FrameworkVersion.Fx20:                  case FrameworkVersion.Fx30:                  case FrameworkVersion.Fx35:                  case FrameworkVersion.Fx35ClientProfile:                  case FrameworkVersion.Fx35ServerCoreProfile:                      ret = Path.Combine(GetInstallRoot()' Netfx20VersionString' NetfxMscorlib);                      break;                    case FrameworkVersion.Fx40:                  case FrameworkVersion.Fx40ClientProfile:                  case FrameworkVersion.Fx45:                      ret = Path.Combine(GetInstallRoot()' Netfx40VersionString' NetfxMscorlib);                      break;              }
Missing Default,Cadru.Environment,FrameworkVersionDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\FrameworkVersionDetection.cs,GetRegistryKey,The following switch statement is missing a default case: switch (frameworkVersion)              {                  case FrameworkVersion.Fx10:                      regKeyName = Netfx10RegKeyName;                      break;                    case FrameworkVersion.Fx11:                      regKeyName = Netfx11RegKeyName;                      break;                    case FrameworkVersion.Fx20:                      regKeyName = Netfx20RegKeyName;                      break;                    case FrameworkVersion.Fx30:                      regKeyName = Netfx30RegKeyName;                      break;                    case FrameworkVersion.Fx35:                      regKeyName = Netfx35RegKeyName;                      break;                    case FrameworkVersion.Fx35ClientProfile:                      regKeyName = Netfx35ClientProfileRegKeyName;                      break;                    case FrameworkVersion.Fx35ServerCoreProfile:                      regKeyName = Netfx35ServerCoreProfileRegKeyName;                      break;                    case FrameworkVersion.Fx40:                      regKeyName = Netfx40FullProfileRegKeyName;                      break;                    case FrameworkVersion.Fx40ClientProfile:                      regKeyName = Netfx40ClientProfileRegKeyName;                      break;                    case FrameworkVersion.Fx45:                  case FrameworkVersion.Fx451:                  case FrameworkVersion.Fx452:                  case FrameworkVersion.Fx46:                  case FrameworkVersion.Fx461:                  case FrameworkVersion.Fx462:                  case FrameworkVersion.Fx47:                      regKeyName = Netfx45RegKeyName;                      break;              }
Missing Default,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsAspNetRegistered,The following switch statement is missing a default case: switch (frameworkVersion)              {                  case FrameworkVersion.Fx10:                      ret = IsAspNet10Registered();                      break;                    case FrameworkVersion.Fx11:                      ret = IsAspNet11Registered();                      break;                    case FrameworkVersion.Fx20:                  case FrameworkVersion.Fx30:                  case FrameworkVersion.Fx35:                      ret = IsAspNet20Registered();                      break;                    case FrameworkVersion.Fx35ClientProfile:                      ret = false;                      break;                    case FrameworkVersion.Fx35ServerCoreProfile:                      ret = IsAspNet20Registered();                      break;                    case FrameworkVersion.Fx40:                      ret = IsAspNet40Registered();                      break;                    case FrameworkVersion.Fx40ClientProfile:                      ret = false;                      break;                    case FrameworkVersion.Fx45:                      ret = IsAspNet40Registered();                      break;              }
Missing Default,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following switch statement is missing a default case: switch (iisVersion)              {                  case InternetInformationServicesVersion.IIS4:                      ret = installedVersion.Major == 4;                      break;                    case InternetInformationServicesVersion.IIS5:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 0;                      break;                    case InternetInformationServicesVersion.IIS51:                      ret = installedVersion.Major == 5 && installedVersion.Minor == 1;                      break;                    case InternetInformationServicesVersion.IIS6:                      ret = installedVersion.Major == 6;                      break;                    case InternetInformationServicesVersion.IIS7:                      ret = installedVersion.Major == 7;                      break;                    case InternetInformationServicesVersion.IIS8:                      ret = installedVersion.Major == 8;                      break;              }
Missing Default,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following switch statement is missing a default case: switch (subcomponent)                  {                      case InternetInformationServicesSubcomponent.Common:                          ret = IsSubcomponentInstalled("iis_common");                          break;                        case InternetInformationServicesSubcomponent.ASP:                          ret = IsSubcomponentInstalled("iis_asp");                          break;                        case InternetInformationServicesSubcomponent.FTP:                          ret = IsSubcomponentInstalled("iis_ftp");                          break;                        case InternetInformationServicesSubcomponent.ManagementConsole:                          ret = IsSubcomponentInstalled("iis_inetmgr");                          break;                        case InternetInformationServicesSubcomponent.InternetDataConnector:                          ret = IsSubcomponentInstalled("iis_internetdataconnector");                          break;                        case InternetInformationServicesSubcomponent.NNTP:                          ret = IsSubcomponentInstalled("iis_nntp");                          break;                        case InternetInformationServicesSubcomponent.ServerSideIncludes:                          ret = IsSubcomponentInstalled("iis_serversideincludes");                          break;                        case InternetInformationServicesSubcomponent.SMTP:                          ret = IsSubcomponentInstalled("iis_smtp");                          break;                        case InternetInformationServicesSubcomponent.WebDAV:                          ret = IsSubcomponentInstalled("iis_webdav");                          break;                        case InternetInformationServicesSubcomponent.WWW:                          ret = IsSubcomponentInstalled("iis_www");                          break;                        case InternetInformationServicesSubcomponent.RemoteAdmin:                          ret = IsSubcomponentInstalled("sakit_web");                          break;                        case InternetInformationServicesSubcomponent.BitsISAPI:                          ret = IsSubcomponentInstalled("BitsServerExtensionsISAPI");                          break;                        case InternetInformationServicesSubcomponent.Bits:                          ret = IsSubcomponentInstalled("BitsServerExtensionsManager");                          break;                        case InternetInformationServicesSubcomponent.FrontPageExtensions:                          ret = IsSubcomponentInstalled("fp_extensions");                          break;                        case InternetInformationServicesSubcomponent.InternetPrinting:                          ret = IsSubcomponentInstalled("inetprint ");                          break;                        case InternetInformationServicesSubcomponent.TSWebClient:                          ret = IsSubcomponentInstalled("TSWebClient ");                          break;                  }
Missing Default,Cadru.Environment,InternetInformationServicesDetection,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.Environment\InternetInformationServicesDetection.cs,IsInstalled,The following switch statement is missing a default case: switch (feature)                  {                      case InternetInformationServicesFeature.ApplicationInitialization:                          ret = IsFeatureInstalled("AppWarmUp");                          break;                        case InternetInformationServicesFeature.NetFxExtensibility:                          ret = IsFeatureInstalled("NetFxExtensibility"' "NetFxEnvironment");                          break;                        case InternetInformationServicesFeature.NetFxExtensibility45:                          ret = IsFeatureInstalled("NetFxExtensibility45");                          break;                        case InternetInformationServicesFeature.ASP:                          ret = IsFeatureInstalled("ASP"' "ASPBinaries");                          break;                        case InternetInformationServicesFeature.AspNet:                          ret = IsFeatureInstalled("ASPNET");                          break;                        case InternetInformationServicesFeature.AspNet45:                          ret = IsFeatureInstalled("ASPNET45");                          break;                        case InternetInformationServicesFeature.CGI:                          ret = IsFeatureInstalled(new string[] { "CGI"' "CGIBinaries"' "FastCgi"' "FastCgiBinaries" });                          break;                        case InternetInformationServicesFeature.ISAPIExtensions:                          ret = IsFeatureInstalled("ISAPIExtensions"' "ISAPIExtensionsBinaries");                          break;                        case InternetInformationServicesFeature.ISAPIFilters:                          ret = IsFeatureInstalled("ISAPIFilter"' "ISAPIFilterBinaries");                          break;                        case InternetInformationServicesFeature.ServerSideIncludes:                          ret = IsFeatureInstalled("ServerSideInclude"' "ServerSideIncludeBinaries");                          break;                        case InternetInformationServicesFeature.WebSockets:                          ret = IsFeatureInstalled("WebSockets");                          break;                        case InternetInformationServicesFeature.DefaultDocument:                          ret = IsFeatureInstalled("DefaultDocument"' "DefaultDocumentBinaries");                          break;                        case InternetInformationServicesFeature.DirectoryBrowsing:                          ret = IsFeatureInstalled("DirectoryBrowse"' "DirectoryBrowseBinaries");                          break;                        case InternetInformationServicesFeature.HttpErrors:                          ret = IsFeatureInstalled("HttpErrors"' "HttpErrorsBinaries");                          break;                        case InternetInformationServicesFeature.HttpRedirection:                          ret = IsFeatureInstalled("HttpRedirect"' "HttpRedirectBinaries");                          break;                        case InternetInformationServicesFeature.StaticContent:                          ret = IsFeatureInstalled("StaticContent"' "StaticContentBinaries");                          break;                        case InternetInformationServicesFeature.WebDAV:                          ret = IsFeatureInstalled("WebDAV"' "WebDAVBinaries");                          break;                        case InternetInformationServicesFeature.Webserver:                          ret = IsFeatureInstalled(new string[] { "W3SVC"' "CachingBase"' "CachingBaseBinaries"' "Caching"' "HttpCache"' "HttpCacheBinaries" });                          break;                         case InternetInformationServicesFeature.CustomLogging:                          ret = IsFeatureInstalled("CustomLogging"' "CustomLoggingBinaries");                          break;                        case InternetInformationServicesFeature.HttpLogging:                          ret = IsFeatureInstalled("HttpLogging"' "HttpLoggingBinaries");                          break;                        case InternetInformationServicesFeature.ODBCLogging:                          ret = IsFeatureInstalled("ODBCLogging"' "ODBCLoggingBinaries");                          break;                        case InternetInformationServicesFeature.RequestMonitor:                          ret = IsFeatureInstalled("RequestMonitor"' "RequestMonitorBinaries");                          break;                        case InternetInformationServicesFeature.Tracing:                          ret = IsFeatureInstalled("HttpTracing"' "HttpTracingBinaries");                          break;                        case InternetInformationServicesFeature.LoggingTools:                          ret = IsFeatureInstalled("LoggingLibraries");                          break;                        case InternetInformationServicesFeature.DynamicContentCompression:                          ret = IsFeatureInstalled("HttpCompressionDynamic"' "HttpCompressionDynamicBinaries");                          break;                        case InternetInformationServicesFeature.StaticContentCompression:                          ret = IsFeatureInstalled("HttpCompressionStatic"' "HttpCompressionStaticBinaries");                          break;                         case InternetInformationServicesFeature.Authorization:                          ret = IsFeatureInstalled("Authorization"' "AuthorizationBinaries");                          break;                        case InternetInformationServicesFeature.BasicAuthentication:                          ret = IsFeatureInstalled("BasicAuthentication"' "BasicAuthenticationBinaries");                          break;                        case InternetInformationServicesFeature.ClientCertificateMappingAuthentication:                          ret = IsFeatureInstalled("ClientCertificateMappingAuthentication"' "ClientCertificateMappingAuthenticationBinaries");                          break;                        case InternetInformationServicesFeature.CentralizedSSLCertificateSupport:                          ret = IsFeatureInstalled("CertProvider");                          break;                        case InternetInformationServicesFeature.DigestAuthentication:                          ret = IsFeatureInstalled("DigestAuthentication"' "DigestAuthenticationBinaries");                          break;                        case InternetInformationServicesFeature.IISCertificateMappingAuthentication:                          ret = IsFeatureInstalled("IISCertificateMappingAuthentication"' "IISCertificateMappingAuthenticationBinaries");                          break;                        case InternetInformationServicesFeature.IPSecurity:                          ret = IsFeatureInstalled("IPSecurity"' "IPSecurityBinaries");                          break;                        case InternetInformationServicesFeature.RequestFiltering:                          ret = IsFeatureInstalled("RequestFiltering"' "RequestFilteringBinaries");                          break;                        case InternetInformationServicesFeature.WindowsAuthentication:                          ret = IsFeatureInstalled("WindowsAuthentication"' "WindowsAuthenticationBinaries");                          break;                        case InternetInformationServicesFeature.ManagementConsole:                          ret = IsFeatureInstalled("ManagementConsole"' "WASConfigurationAPI");                          break;                        case InternetInformationServicesFeature.ManagementScriptingTools:                          ret = IsFeatureInstalled("ManagementScriptingTools"' "WASConfigurationAPI");                          break;                        case InternetInformationServicesFeature.ManagementService:                          ret = IsFeatureInstalled("AdminService"' "WASConfigurationAPI");                          break;                        case InternetInformationServicesFeature.MetabaseCompatibility:                          ret = IsFeatureInstalled("Metabase");                          break;                        case InternetInformationServicesFeature.WMICompatibility:                          ret = IsFeatureInstalled("WMICompatibility"' "Metabase");                          break;                        case InternetInformationServicesFeature.LegacyScripts:                          ret = IsFeatureInstalled("LegacyScripts");                          break;                        case InternetInformationServicesFeature.LegacySnapin:                          ret = IsFeatureInstalled(new string[] { "LegacySnapin"' "ADSICompatability"' "Metabase" });                          break;                        case InternetInformationServicesFeature.FTP:                          ret = IsFeatureInstalled(majorVersion >= 8 ? "FTPSvc" : "FTPServer");                          break;                        case InternetInformationServicesFeature.FTPExtensibility:                          ret = IsFeatureInstalled("FTPExtensibility");                          break;                  }
