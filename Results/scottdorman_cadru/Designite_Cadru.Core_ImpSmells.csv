Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToString,The method has 107 lines of code.
Complex Method,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParse,Cyclomatic complexity of the method is 13
Complex Method,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,Clean,Cyclomatic complexity of the method is 11
Long Parameter List,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The method has 11 parameters. Parameters: a' b' c' d' e' f' g' h' i' j' k
Long Parameter List,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,UnixTimestamp,The method has 6 parameters. Parameters: year' month' day' hour' minute' second
Long Parameter List,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,DateToSeconds,The method has 6 parameters. Parameters: year' month' day' hour' minute' second
Long Parameter List,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,Between,The method has 5 parameters. Parameters: expression' minimum' maximum' options' comparer
Long Parameter List,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendFormatIf,The method has 5 parameters. Parameters: source' condition' provider' format' args
Long Parameter List,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendFormatLineIf,The method has 5 parameters. Parameters: source' condition' provider' format' args
Long Parameter List,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendIf,The method has 5 parameters. Parameters: source' condition' value' startIndex' charCount
Long Parameter List,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendIf,The method has 5 parameters. Parameters: source' condition' value' startIndex' count
Long Parameter List,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,IndexOfOccurrence,The method has 5 parameters. Parameters: source' value' startIndex' count' occurrence
Long Parameter List,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,IndexOfOccurrence,The method has 5 parameters. Parameters: source' value' startIndex' count' occurrence
Long Parameter List,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,IndexOfOccurrence,The method has 5 parameters. Parameters: source' value' startIndex' occurrence' comparisonType
Long Parameter List,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,IndexOfOccurrence,The method has 6 parameters. Parameters: source' value' startIndex' count' occurrence' comparisonType
Long Parameter List,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,Replace,The method has 5 parameters. Parameters: source' oldValue' newValue' occurrences' comparisonType
Long Parameter List,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,ReplaceBetween,The method has 5 parameters. Parameters: source' start' end' newValue' inclusive
Long Parameter List,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,ReplaceBetween,The method has 5 parameters. Parameters: source' start' end' newValue' inclusive
Long Parameter List,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,ReplaceBetween,The method has 5 parameters. Parameters: source' start' end' newValue' inclusive
Long Parameter List,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,ReplaceBetween,The method has 6 parameters. Parameters: source' start' end' newValue' inclusive' comparisonType
Long Parameter List,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,SubstringBetween,The method has 5 parameters. Parameters: source' start' end' inclusive' comparisonType
Long Statement,Cadru,Enum<TEnum>,C:\repos\scottdorman_cadru\src\Cadru.Core\Enum{T}.cs,GetDescription,The length of the statement  "            var attribute = ((EnumDescriptionAttribute[])type.GetTypeInfo().GetDeclaredField(fieldValue)?.GetCustomAttributes(typeof(EnumDescriptionAttribute)' false)).FirstOrDefault(); " is 173.
Long Statement,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddYears,The length of the statement  "                throw ExceptionBuilder.CreateArgumentOutOfRangeException(nameof(years)' Strings.ArgumentOutOfRange_UnixTimestampBadYears); " is 122.
Long Statement,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,GetWeekOfYear,The length of the statement  "            return GetWeekOfYear(time' CalendarWeekRule.FirstFourDayWeek' CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek); " is 120.
Long Statement,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeDateString,The length of the statement  "                    format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days); " is 200.
Long Statement,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeDateString,The length of the statement  "                    format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days)); " is 206.
Long Statement,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeString,The length of the statement  "                    format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds); " is 179.
Long Statement,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeString,The length of the statement  "                    format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths); " is 165.
Long Statement,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeString,The length of the statement  "                    format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears); " is 161.
Long Statement,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,FirstDayOfQuarter,The length of the statement  "            return new DateTimeOffset(date.Year' ((date.Quarter() - 1) * 3) + 1' 1' date.Hour' date.Minute' date.Second' date.Offset); " is 122.
Long Statement,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,GetWeekOfYear,The length of the statement  "            return GetWeekOfYear(time' CalendarWeekRule.FirstFourDayWeek' CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek); " is 120.
Long Statement,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,IsUtcDateTime,The length of the statement  "            return date.UtcDateTime == date.DateTime && date.Offset == UtcOffset && date.Offset == TimeZoneInfo.Utc.GetUtcOffset(date); " is 123.
Long Statement,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeDateString,The length of the statement  "                    format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days); " is 200.
Long Statement,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeDateString,The length of the statement  "                    format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days)); " is 206.
Long Statement,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeTimeString,The length of the statement  "                    format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds); " is 179.
Long Statement,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeTimeString,The length of the statement  "                    format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths); " is 165.
Long Statement,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeTimeString,The length of the statement  "                    format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears); " is 161.
Long Statement,Cadru.Extensions,EnumerableExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\EnumerableExtensions.cs,Slice,The length of the statement  "            Contracts.Requires.ValidRange(startIndex > endIndex' nameof(startIndex)' Strings.Argument_StartIndexGreaterThanEndIndex); " is 121.
Long Statement,Cadru.Extensions,EnumExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\EnumExtensions.cs,GetDescription,The length of the statement  "            var attribute = ((EnumDescriptionAttribute[])value.GetType().GetTypeInfo().GetDeclaredField(fieldValue).GetCustomAttributes(typeof(EnumDescriptionAttribute)' false)).FirstOrDefault(); " is 183.
Long Statement,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,Clean,The length of the statement  "            if ((int)options < 0 || ((int)options & (int)~(NormalizationOptions.ControlCharacters | NormalizationOptions.Whitespace)) != 0) " is 127.
Long Statement,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,Clean,The length of the statement  "                throw ExceptionBuilder.CreateArgumentException("options"' String.Format(CultureInfo.CurrentUICulture' Strings.Argument_EnumIllegalVal' (int)options)); " is 150.
Long Statement,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,IndexOfOccurrence,The length of the statement  "            Contracts.Requires.ValidRange(startIndex > source.Length' nameof(startIndex)' Strings.ArgumentOutOfRange_IndexLessThanLength); " is 126.
Long Statement,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,IndexOfOccurrence,The length of the statement  "            Contracts.Requires.ValidRange(startIndex > source.Length' nameof(startIndex)' Strings.ArgumentOutOfRange_IndexLessThanLength); " is 126.
Long Statement,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,LeftSubstring,The length of the statement  "            Contracts.Requires.ValidRange(endingIndex > source.Length' nameof(endingIndex)' Strings.ArgumentOutOfRange_IndexLessThanLength); " is 128.
Long Statement,Cadru.Extensions,StringExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringExtensions.cs,RightSubstring,The length of the statement  "            Contracts.Requires.ValidRange(endingIndex > source.Length' nameof(endingIndex)' Strings.ArgumentOutOfRange_IndexLessThanLength); " is 128.
Long Statement,Cadru.Extensions,TypeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\TypeExtensions.cs,IsNullable,The length of the statement  "            return typeInfo.IsGenericType && !typeInfo.IsGenericTypeDefinition && typeInfo.GetGenericTypeDefinition() == typeof(Nullable<>); " is 128.
Long Statement,Cadru.Text,DataValidation,C:\repos\scottdorman_cadru\src\Cadru.Core\Text\DataValidation.cs,IsAlpha,The length of the statement  "            return Char.IsLetter(expression) || Char.IsPunctuation(expression) || CharUnicodeInfo.GetUnicodeCategory(expression) == UnicodeCategory.SpaceSeparator; " is 151.
Long Statement,Cadru.Text,DataValidation,C:\repos\scottdorman_cadru\src\Cadru.Core\Text\DataValidation.cs,IsAlpha,The length of the statement  "                if (!(Char.IsLetter(expression' i) || Char.IsPunctuation(expression' i) || CharUnicodeInfo.GetUnicodeCategory(expression' i) == UnicodeCategory.SpaceSeparator)) " is 160.
Long Statement,Cadru.Text,DataValidation,C:\repos\scottdorman_cadru\src\Cadru.Core\Text\DataValidation.cs,IsAlphanumeric,The length of the statement  "            return Char.IsLetter(expression) || Char.IsNumber(expression) || Char.IsPunctuation(expression) || CharUnicodeInfo.GetUnicodeCategory(expression) == UnicodeCategory.SpaceSeparator; " is 180.
Long Statement,Cadru.Text,DataValidation,C:\repos\scottdorman_cadru\src\Cadru.Core\Text\DataValidation.cs,IsAlphanumeric,The length of the statement  "                if (!(Char.IsLetter(expression' i) || Char.IsNumber(expression' i) || Char.IsPunctuation(expression' i) || CharUnicodeInfo.GetUnicodeCategory(expression' i) == UnicodeCategory.SpaceSeparator)) " is 192.
Long Statement,Cadru.Text,DataValidation,C:\repos\scottdorman_cadru\src\Cadru.Core\Text\DataValidation.cs,IsValidFileName,The length of the statement  "                pattern = @"^(([a-zA-Z]:|\\)\\)?(((\.)|(\.\.)|([^\\/:\*\?""\|<>\. ](([^\\/:\*\?""\|<>\. ])|([^\\/:\*\?""\|<>]*[^\\/:\*\?""\|<>\. ]))?))\\)*[^\\/:\*\?""\|<>\. ](([^\\/:\*\?""\|<>\. ])|([^\\/:\*\?""\|<>]*[^\\/:\*\?""\|<>\. ]))?$"; " is 228.
Complex Conditional,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParse,The conditional expression  "(format == "B" && !this.ParseChar('{')) || (format == "P" && !this.ParseChar('('))"  is complex.
Complex Conditional,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParse,The conditional expression  "(format == "B" && !this.ParseChar('}')) || (format == "P" && !this.ParseChar(')'))"  is complex.
Complex Conditional,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParseHex,The conditional expression  "!(this.ParseChar('{')                  && this.ParseHexPrefix()                  && this.ParseHex(8' false' out ulong a)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseHexPrefix()                  && this.ParseHex(4' false' out ulong b)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseHexPrefix()                  && this.ParseHex(4' false' out ulong c)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseCharWithWhiteSpaces('{'))"  is complex.
Complex Conditional,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ParseHex,The conditional expression  "(c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')"  is complex.
Complex Conditional,Cadru.Text,DataValidation,C:\repos\scottdorman_cadru\src\Cadru.Core\Text\DataValidation.cs,IsAlphanumeric,The conditional expression  "!(Char.IsLetter(expression' i) || Char.IsNumber(expression' i) || Char.IsPunctuation(expression' i) || CharUnicodeInfo.GetUnicodeCategory(expression' i) == UnicodeCategory.SpaceSeparator)"  is complex.
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: Contracts.Requires.IsTrue(array.Length == 16);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.a = ((int)array[0] << 24) | ((int)array[1] << 16) | ((int)array[2] << 8) | array[3];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.a = ((int)array[0] << 24) | ((int)array[1] << 16) | ((int)array[2] << 8) | array[3];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.a = ((int)array[0] << 24) | ((int)array[1] << 16) | ((int)array[2] << 8) | array[3];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.a = ((int)array[0] << 24) | ((int)array[1] << 16) | ((int)array[2] << 8) | array[3];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.a = ((int)array[0] << 24) | ((int)array[1] << 16) | ((int)array[2] << 8) | array[3];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.b = (short)(((int)array[4] << 8) | array[5]);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.b = (short)(((int)array[4] << 8) | array[5]);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.b = (short)(((int)array[4] << 8) | array[5]);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.c = (short)(((int)array[6] << 8) | array[7]);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.c = (short)(((int)array[6] << 8) | array[7]);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.c = (short)(((int)array[6] << 8) | array[7]);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.d = array[8];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.e = array[9];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.f = array[10];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.g = array[11];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.h = array[12];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.i = array[13];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.j = array[14];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.k = array[15];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: Contracts.Requires.IsTrue(d.Length == 8);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.f = d[2];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.g = d[3];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.h = d[4];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.i = d[5];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.j = d[6];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Comb,The following statement contains a magic number: this.k = d[7];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: byte[] buffer = new byte[16];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[0] = (byte)(days >> 8);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[4] = (byte)(days >> 16);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[4] = (byte)(days >> 16);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[5] = (byte)(days >> 24);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[5] = (byte)(days >> 24);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[6] = (byte)days;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[7] = (byte)(((byte)(days >> 8) & 0x0f) | 0x40);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[7] = (byte)(((byte)(days >> 8) & 0x0f) | 0x40);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[8] = (byte)((msecsArray[1] & 0x3f) | 0x80);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[9] = msecsArray[0];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[10] = msecsArray[7];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[10] = msecsArray[7];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[11] = msecsArray[6];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[11] = msecsArray[6];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[12] = msecsArray[5];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[12] = msecsArray[5];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[13] = msecsArray[4];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[13] = msecsArray[4];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[14] = msecsArray[3];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[14] = msecsArray[3];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[15] = msecsArray[2];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,NewComb,The following statement contains a magic number: buffer[15] = msecsArray[2];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetHashCode,The following statement contains a magic number: return this.a ^ (((int)this.b << 16) | (int)(ushort)this.c) ^ (((int)this.f << 24) | this.k);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetHashCode,The following statement contains a magic number: return this.a ^ (((int)this.b << 16) | (int)(ushort)this.c) ^ (((int)this.f << 24) | this.k);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToString,The following statement contains a magic number: switch (format)              {                  case "B":                      res = new StringBuilder(38)                          .Append('{')                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k)                          .Append('}');                      break;                    case "P":                      res = new StringBuilder(38)                          .Append('(')                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k)                          .Append(')');                      break;                    case "D":                      res = new StringBuilder(36)                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k);                      break;                    case "N":                      res = new StringBuilder(32)                          .AppendAsHexadecimal(this.a)                          .AppendAsHexadecimal(this.b)                          .AppendAsHexadecimal(this.c)                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k);                      break;                    case "X":                      res = new StringBuilder(68)                          .Append(new[] { '{'' '0'' 'x' })                          .AppendAsHexadecimal(this.a)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.b)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.c)                          .Append(new[] { '''' '{'' '0'' 'x' })                          .AppendAsHexadecimal(this.d)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.e)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.f)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.g)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.h)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.i)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.j)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.k)                          .Append(new[] { '}'' '}' });                      break;                    default:                      throw new NotImplementedException(Strings.Format_InvalidGuidFormatSpecification);              }
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToString,The following statement contains a magic number: switch (format)              {                  case "B":                      res = new StringBuilder(38)                          .Append('{')                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k)                          .Append('}');                      break;                    case "P":                      res = new StringBuilder(38)                          .Append('(')                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k)                          .Append(')');                      break;                    case "D":                      res = new StringBuilder(36)                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k);                      break;                    case "N":                      res = new StringBuilder(32)                          .AppendAsHexadecimal(this.a)                          .AppendAsHexadecimal(this.b)                          .AppendAsHexadecimal(this.c)                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k);                      break;                    case "X":                      res = new StringBuilder(68)                          .Append(new[] { '{'' '0'' 'x' })                          .AppendAsHexadecimal(this.a)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.b)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.c)                          .Append(new[] { '''' '{'' '0'' 'x' })                          .AppendAsHexadecimal(this.d)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.e)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.f)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.g)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.h)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.i)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.j)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.k)                          .Append(new[] { '}'' '}' });                      break;                    default:                      throw new NotImplementedException(Strings.Format_InvalidGuidFormatSpecification);              }
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToString,The following statement contains a magic number: switch (format)              {                  case "B":                      res = new StringBuilder(38)                          .Append('{')                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k)                          .Append('}');                      break;                    case "P":                      res = new StringBuilder(38)                          .Append('(')                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k)                          .Append(')');                      break;                    case "D":                      res = new StringBuilder(36)                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k);                      break;                    case "N":                      res = new StringBuilder(32)                          .AppendAsHexadecimal(this.a)                          .AppendAsHexadecimal(this.b)                          .AppendAsHexadecimal(this.c)                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k);                      break;                    case "X":                      res = new StringBuilder(68)                          .Append(new[] { '{'' '0'' 'x' })                          .AppendAsHexadecimal(this.a)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.b)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.c)                          .Append(new[] { '''' '{'' '0'' 'x' })                          .AppendAsHexadecimal(this.d)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.e)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.f)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.g)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.h)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.i)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.j)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.k)                          .Append(new[] { '}'' '}' });                      break;                    default:                      throw new NotImplementedException(Strings.Format_InvalidGuidFormatSpecification);              }
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToString,The following statement contains a magic number: switch (format)              {                  case "B":                      res = new StringBuilder(38)                          .Append('{')                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k)                          .Append('}');                      break;                    case "P":                      res = new StringBuilder(38)                          .Append('(')                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k)                          .Append(')');                      break;                    case "D":                      res = new StringBuilder(36)                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k);                      break;                    case "N":                      res = new StringBuilder(32)                          .AppendAsHexadecimal(this.a)                          .AppendAsHexadecimal(this.b)                          .AppendAsHexadecimal(this.c)                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k);                      break;                    case "X":                      res = new StringBuilder(68)                          .Append(new[] { '{'' '0'' 'x' })                          .AppendAsHexadecimal(this.a)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.b)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.c)                          .Append(new[] { '''' '{'' '0'' 'x' })                          .AppendAsHexadecimal(this.d)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.e)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.f)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.g)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.h)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.i)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.j)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.k)                          .Append(new[] { '}'' '}' });                      break;                    default:                      throw new NotImplementedException(Strings.Format_InvalidGuidFormatSpecification);              }
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToString,The following statement contains a magic number: switch (format)              {                  case "B":                      res = new StringBuilder(38)                          .Append('{')                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k)                          .Append('}');                      break;                    case "P":                      res = new StringBuilder(38)                          .Append('(')                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k)                          .Append(')');                      break;                    case "D":                      res = new StringBuilder(36)                          .AppendAsHexadecimal(this.a)                          .Append('-')                          .AppendAsHexadecimal(this.b)                          .Append('-')                          .AppendAsHexadecimal(this.c)                          .Append('-')                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .Append('-')                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k);                      break;                    case "N":                      res = new StringBuilder(32)                          .AppendAsHexadecimal(this.a)                          .AppendAsHexadecimal(this.b)                          .AppendAsHexadecimal(this.c)                          .AppendAsHexadecimal(this.d)                          .AppendAsHexadecimal(this.e)                          .AppendAsHexadecimal(this.f)                          .AppendAsHexadecimal(this.g)                          .AppendAsHexadecimal(this.h)                          .AppendAsHexadecimal(this.i)                          .AppendAsHexadecimal(this.j)                          .AppendAsHexadecimal(this.k);                      break;                    case "X":                      res = new StringBuilder(68)                          .Append(new[] { '{'' '0'' 'x' })                          .AppendAsHexadecimal(this.a)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.b)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.c)                          .Append(new[] { '''' '{'' '0'' 'x' })                          .AppendAsHexadecimal(this.d)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.e)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.f)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.g)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.h)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.i)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.j)                          .Append(new[] { '''' '0'' 'x' })                          .AppendAsHexadecimal(this.k)                          .Append(new[] { '}'' '}' });                      break;                    default:                      throw new NotImplementedException(Strings.Format_InvalidGuidFormatSpecification);              }
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: byte[] buffer = new byte[16];
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[0] = (byte)(this.a >> 24);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[1] = (byte)(this.a >> 16);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[2] = (byte)(this.a >> 8);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[2] = (byte)(this.a >> 8);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[3] = (byte)this.a;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[4] = (byte)(this.b >> 8);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[4] = (byte)(this.b >> 8);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[5] = (byte)this.b;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[6] = (byte)(this.c >> 8);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[6] = (byte)(this.c >> 8);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[7] = (byte)this.c;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[8] = this.d;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[9] = this.e;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[10] = this.f;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[11] = this.g;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[12] = this.h;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[13] = this.i;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[14] = this.j;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ToByteArray,The following statement contains a magic number: buffer[15] = this.k;
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Compare,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  byte b1' b2;                    b1 = xBuffer[CompareOrder[i]];                  b2 = yBuffer[CompareOrder[i]];                  if (b1 != b2)                  {                      return (b1 < b2) ? -1 : 1;                  }              }
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var msecsArray = new byte[]              {                 buffer[9]'                 buffer[1]'                 buffer[15]'                 buffer[14]'                 buffer[13]'                 buffer[12]'                 buffer[11]'                 buffer[10]              };
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var msecsArray = new byte[]              {                 buffer[9]'                 buffer[1]'                 buffer[15]'                 buffer[14]'                 buffer[13]'                 buffer[12]'                 buffer[11]'                 buffer[10]              };
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var msecsArray = new byte[]              {                 buffer[9]'                 buffer[1]'                 buffer[15]'                 buffer[14]'                 buffer[13]'                 buffer[12]'                 buffer[11]'                 buffer[10]              };
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var msecsArray = new byte[]              {                 buffer[9]'                 buffer[1]'                 buffer[15]'                 buffer[14]'                 buffer[13]'                 buffer[12]'                 buffer[11]'                 buffer[10]              };
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var msecsArray = new byte[]              {                 buffer[9]'                 buffer[1]'                 buffer[15]'                 buffer[14]'                 buffer[13]'                 buffer[12]'                 buffer[11]'                 buffer[10]              };
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var msecsArray = new byte[]              {                 buffer[9]'                 buffer[1]'                 buffer[15]'                 buffer[14]'                 buffer[13]'                 buffer[12]'                 buffer[11]'                 buffer[10]              };
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var msecsArray = new byte[]              {                 buffer[9]'                 buffer[1]'                 buffer[15]'                 buffer[14]'                 buffer[13]'                 buffer[12]'                 buffer[11]'                 buffer[10]              };
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var days = buffer[6] + (buffer[0] << 8) + (buffer[4] << 16) + (buffer[5] << 24);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var days = buffer[6] + (buffer[0] << 8) + (buffer[4] << 16) + (buffer[5] << 24);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var days = buffer[6] + (buffer[0] << 8) + (buffer[4] << 16) + (buffer[5] << 24);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var days = buffer[6] + (buffer[0] << 8) + (buffer[4] << 16) + (buffer[5] << 24);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var days = buffer[6] + (buffer[0] << 8) + (buffer[4] << 16) + (buffer[5] << 24);
Magic Number,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,GetDateTimeOffset,The following statement contains a magic number: var days = buffer[6] + (buffer[0] << 8) + (buffer[4] << 16) + (buffer[5] << 24);
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Parse,The following statement contains a magic number: switch (this.sourceLength)                  {                      case 32:                          format = "N";                          break;                        case 36:                          format = "D";                          break;                        case 38:                          switch (this.source[0])                          {                              case '{':                                  format = "B";                                  break;                                case '(':                                  format = "P";                                  break;                          }                            break;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Parse,The following statement contains a magic number: switch (this.sourceLength)                  {                      case 32:                          format = "N";                          break;                        case 36:                          format = "D";                          break;                        case 38:                          switch (this.source[0])                          {                              case '{':                                  format = "B";                                  break;                                case '(':                                  format = "P";                                  break;                          }                            break;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Parse,The following statement contains a magic number: switch (this.sourceLength)                  {                      case 32:                          format = "N";                          break;                        case 36:                          format = "D";                          break;                        case 38:                          switch (this.source[0])                          {                              case '{':                                  format = "B";                                  break;                                case '(':                                  format = "P";                                  break;                          }                            break;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParse,The following statement contains a magic number: if (!this.ParseHex(8' true' out ulong a))                  {                      return false;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParse,The following statement contains a magic number: if (!this.ParseHex(4' true' out ulong b))                  {                      return false;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParse,The following statement contains a magic number: if (!this.ParseHex(4' true' out ulong c))                  {                      return false;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParse,The following statement contains a magic number: var d = new byte[8];
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParse,The following statement contains a magic number: for (int i = 0; i < d.Length; i++)                  {                      if (!this.ParseHex(2' true' out ulong dd))                      {                          return false;                      }                        if (i == 1 && hasHyphen && !this.ParseChar('-'))                      {                          return false;                      }                        d[i] = (byte)dd;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParseHex,The following statement contains a magic number: if (!(this.ParseChar('{')                  && this.ParseHexPrefix()                  && this.ParseHex(8' false' out ulong a)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseHexPrefix()                  && this.ParseHex(4' false' out ulong b)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseHexPrefix()                  && this.ParseHex(4' false' out ulong c)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseCharWithWhiteSpaces('{')))                  {                      return false;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParseHex,The following statement contains a magic number: if (!(this.ParseChar('{')                  && this.ParseHexPrefix()                  && this.ParseHex(8' false' out ulong a)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseHexPrefix()                  && this.ParseHex(4' false' out ulong b)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseHexPrefix()                  && this.ParseHex(4' false' out ulong c)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseCharWithWhiteSpaces('{')))                  {                      return false;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParseHex,The following statement contains a magic number: if (!(this.ParseChar('{')                  && this.ParseHexPrefix()                  && this.ParseHex(8' false' out ulong a)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseHexPrefix()                  && this.ParseHex(4' false' out ulong b)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseHexPrefix()                  && this.ParseHex(4' false' out ulong c)                  && this.ParseCharWithWhiteSpaces(''')                  && this.ParseCharWithWhiteSpaces('{')))                  {                      return false;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParseHex,The following statement contains a magic number: var d = new byte[8];
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParseHex,The following statement contains a magic number: for (int i = 0; i < d.Length; ++i)                  {                      if (!(this.ParseHexPrefix() && this.ParseHex(2' false' out ulong dd)))                      {                          return false;                      }                        d[i] = (byte)dd;                        if (i != 7 && !this.ParseCharWithWhiteSpaces('''))                      {                          return false;                      }                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,TryParseHex,The following statement contains a magic number: for (int i = 0; i < d.Length; ++i)                  {                      if (!(this.ParseHexPrefix() && this.ParseHex(2' false' out ulong dd)))                      {                          return false;                      }                        d[i] = (byte)dd;                        if (i != 7 && !this.ParseCharWithWhiteSpaces('''))                      {                          return false;                      }                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ParseHex,The following statement contains a magic number: for (int i = 0; i < length; i++)                  {                      if (this.EOF)                      {                          return !(strict && (i + 1 != length));                      }                        char c = this.source[this.current];                      if (Char.IsDigit(c))                      {                          result = ((result * 16) + c) - '0';                          this.current++;                          continue;                      }                        if ((c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))                      {                          result = (((result * 16) + c) - (c >= 'a' ? 'a' : 'A')) + 10;                          this.current++;                          continue;                      }                        if (!strict)                      {                          return true;                      }                        return false;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ParseHex,The following statement contains a magic number: for (int i = 0; i < length; i++)                  {                      if (this.EOF)                      {                          return !(strict && (i + 1 != length));                      }                        char c = this.source[this.current];                      if (Char.IsDigit(c))                      {                          result = ((result * 16) + c) - '0';                          this.current++;                          continue;                      }                        if ((c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))                      {                          result = (((result * 16) + c) - (c >= 'a' ? 'a' : 'A')) + 10;                          this.current++;                          continue;                      }                        if (!strict)                      {                          return true;                      }                        return false;                  }
Magic Number,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ParseHex,The following statement contains a magic number: for (int i = 0; i < length; i++)                  {                      if (this.EOF)                      {                          return !(strict && (i + 1 != length));                      }                        char c = this.source[this.current];                      if (Char.IsDigit(c))                      {                          result = ((result * 16) + c) - '0';                          this.current++;                          continue;                      }                        if ((c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))                      {                          result = (((result * 16) + c) - (c >= 'a' ? 'a' : 'A')) + 10;                          this.current++;                          continue;                      }                        if (!strict)                      {                          return true;                      }                        return false;                  }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddMonths,The following statement contains a magic number: if (months < -120000 || months > 120000)              {                  throw new ArgumentOutOfRangeException("months"' Strings.ArgumentOutOfRange_UnixTimestampBadMonths);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddMonths,The following statement contains a magic number: if (months < -120000 || months > 120000)              {                  throw new ArgumentOutOfRangeException("months"' Strings.ArgumentOutOfRange_UnixTimestampBadMonths);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddMonths,The following statement contains a magic number: if (i >= 0)              {                  m = (i % 12) + 1;                  y = y + (i / 12);              }              else              {                  m = 12 + ((i + 1) % 12);                  y = y + ((i - 11) / 12);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddMonths,The following statement contains a magic number: if (i >= 0)              {                  m = (i % 12) + 1;                  y = y + (i / 12);              }              else              {                  m = 12 + ((i + 1) % 12);                  y = y + ((i - 11) / 12);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddMonths,The following statement contains a magic number: if (i >= 0)              {                  m = (i % 12) + 1;                  y = y + (i / 12);              }              else              {                  m = 12 + ((i + 1) % 12);                  y = y + ((i - 11) / 12);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddMonths,The following statement contains a magic number: if (i >= 0)              {                  m = (i % 12) + 1;                  y = y + (i / 12);              }              else              {                  m = 12 + ((i + 1) % 12);                  y = y + ((i - 11) / 12);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddMonths,The following statement contains a magic number: if (i >= 0)              {                  m = (i % 12) + 1;                  y = y + (i / 12);              }              else              {                  m = 12 + ((i + 1) % 12);                  y = y + ((i - 11) / 12);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddMonths,The following statement contains a magic number: if (i >= 0)              {                  m = (i % 12) + 1;                  y = y + (i / 12);              }              else              {                  m = 12 + ((i + 1) % 12);                  y = y + ((i - 11) / 12);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddMonths,The following statement contains a magic number: if (y < 1 || y > 9999)              {                  throw new ArgumentOutOfRangeException(nameof(months)' Strings.ArgumentOutOfRange_DateArithmetic);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddYears,The following statement contains a magic number: if (years < -10000 || years > 10000)              {                  throw ExceptionBuilder.CreateArgumentOutOfRangeException(nameof(years)' Strings.ArgumentOutOfRange_UnixTimestampBadYears);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddYears,The following statement contains a magic number: if (years < -10000 || years > 10000)              {                  throw ExceptionBuilder.CreateArgumentOutOfRangeException(nameof(years)' Strings.ArgumentOutOfRange_UnixTimestampBadYears);              }
Magic Number,Cadru,UnixTimestamp,C:\repos\scottdorman_cadru\src\Cadru.Core\UnixTimestamp.cs,AddYears,The following statement contains a magic number: return this.AddMonths(years * 12);
Magic Number,Cadru.Color,ColorUtils,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\ColorUtils.cs,GenerateColor,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace(value))              {                  var hash = 0;                  for (var i = 0; i < value.Length; i++)                  {                      hash = value[i] + ((hash << 5) - hash);                  }                    color = new RGB(hash);              }
Magic Number,Cadru.Color,ColorUtils,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\ColorUtils.cs,GetBestForegroundColor,The following statement contains a magic number: return (color.Value < .5) ? HSV.White : HSV.Black;
Magic Number,Cadru.Color,ColorUtils,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\ColorUtils.cs,Luminance,The following statement contains a magic number: return 0.299 * red + 0.587 * green + 0.114 * blue;
Magic Number,Cadru.Color,ColorUtils,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\ColorUtils.cs,Luminance,The following statement contains a magic number: return 0.299 * red + 0.587 * green + 0.114 * blue;
Magic Number,Cadru.Color,ColorUtils,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\ColorUtils.cs,Luminance,The following statement contains a magic number: return 0.299 * red + 0.587 * green + 0.114 * blue;
Magic Number,Cadru.Color,HSV,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\HSV.cs,HSV,The following statement contains a magic number: this.Hue = hue.Clamp(360' 0);
Magic Number,Cadru.Color,RGB,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGB.cs,RGB,The following statement contains a magic number: this.Red = (byte)((value & 0x00ff0000) >> 16);
Magic Number,Cadru.Color,RGB,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGB.cs,RGB,The following statement contains a magic number: this.Green = (byte)((value & 0x0000ff00) >> 8);
Magic Number,Cadru.Color,RGB,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGB.cs,RGB,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGB,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGB.cs,RGB,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGB,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGB.cs,RGB,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGB,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGB.cs,RGB,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGB,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGB.cs,RGB,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGB,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGB.cs,RGB,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: this.Red = (byte)((value & 0x00ff0000) >> 16);
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: this.Green = (byte)((value & 0x0000ff00) >> 8);
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,RGBA,The following statement contains a magic number: try              {                  hex = hex.TrimStart('#');                  if (hex.Length == 6)                  {                      this.Alpha = 1;                      this.Red = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else if (hex.Length == 8)                  {                      this.Alpha = Byte.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Red = Byte.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Green = Byte.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                      this.Blue = Byte.Parse(hex.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);                  }                  else                  {                      this.Alpha = 1;                      this.Red = 0;                      this.Green = 0;                      this.Blue = 0;                  }              }              catch (Exception e)              {                  throw new InvalidCastException("Unable to convert the given value in to a color."' e);              }
Magic Number,Cadru.Color,RGBA,C:\repos\scottdorman_cadru\src\Cadru.Core\Color\RGBA.cs,ToHexString,The following statement contains a magic number: if (this.Alpha < 1)              {                  return $"#{(byte)(this.Alpha * 255): X2}{this.Red: X2}{this.Green: X2}{this.Blue: X2}";              }
Magic Number,Cadru.Extensions,ArrayExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\ArrayExtensions.cs,BytesToBinaryString,The following statement contains a magic number: var buffer = new StringBuilder(source.Length * 8);
Magic Number,Cadru.Extensions,ArrayExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\ArrayExtensions.cs,BytesToBinaryString,The following statement contains a magic number: foreach (var b in source)              {                  buffer.AppendFormat(CultureInfo.InvariantCulture' "[{0}]"' Convert.ToString(b' 2));              }
Magic Number,Cadru.Extensions,ArrayExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\ArrayExtensions.cs,BytesToString,The following statement contains a magic number: var buffer = new StringBuilder(source.Length * 8);
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,AddQuarters,The following statement contains a magic number: return date.AddMonths(checked((int)value * 3));
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,AddWeeks,The following statement contains a magic number: return date.AddDays(value * 7);
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,FirstDayOfNextQuarter,The following statement contains a magic number: return date.FirstDayOfQuarter().AddMonths(3);
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,FirstDayOfQuarter,The following statement contains a magic number: return new DateTime(date.Year' ((date.Quarter() - 1) * 3) + 1' 1);
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,FirstDayOfWeek,The following statement contains a magic number: if (diff < 0)              {                  diff += 7;              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,Last,The following statement contains a magic number: var diff = (day - yesterday.DayOfWeek - 7) % 7;
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,Last,The following statement contains a magic number: var diff = (day - yesterday.DayOfWeek - 7) % 7;
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,LastDayOfWeek,The following statement contains a magic number: return date.FirstDayOfWeek(firstDayOfWeek).AddDays(6);
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,LastDayOfYear,The following statement contains a magic number: return new DateTime(date.Year' 12' 31);
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,LastDayOfYear,The following statement contains a magic number: return new DateTime(date.Year' 12' 31);
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,Next,The following statement contains a magic number: var diff = (day - tomorrow.DayOfWeek + 7) % 7;
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,Next,The following statement contains a magic number: var diff = (day - tomorrow.DayOfWeek + 7) % 7;
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,Next,The following statement contains a magic number: return tomorrow.AddDays(diff <= 0 ? diff + 7 : diff);
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,Quarter,The following statement contains a magic number: return ((date.Month - 1) / 3) + 1;
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,TryParseFromSerialDate,The following statement contains a magic number: var num = (long)((serialDateValue * 86400000.0) + ((serialDateValue >= 0.0) ? 0.5 : -0.5));
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,TryParseFromSerialDate,The following statement contains a magic number: var num = (long)((serialDateValue * 86400000.0) + ((serialDateValue >= 0.0) ? 0.5 : -0.5));
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,TryParseFromSerialDate,The following statement contains a magic number: var num = (long)((serialDateValue * 86400000.0) + ((serialDateValue >= 0.0) ? 0.5 : -0.5));
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToDateTime,The following statement contains a magic number: var num = (long)((serialDateValue * 86400000.0) + ((serialDateValue >= 0.0) ? 0.5 : -0.5));
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToDateTime,The following statement contains a magic number: var num = (long)((serialDateValue * 86400000.0) + ((serialDateValue >= 0.0) ? 0.5 : -0.5));
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,ToDateTime,The following statement contains a magic number: var num = (long)((serialDateValue * 86400000.0) + ((serialDateValue >= 0.0) ? 0.5 : -0.5));
Magic Number,Cadru.Extensions,DateTimeExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeExtensions.cs,DaysBetween,The following statement contains a magic number: return days < 0 ? days + 7 : days;
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,AddQuarters,The following statement contains a magic number: return date.AddMonths(checked((int)value * 3));
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,AddWeeks,The following statement contains a magic number: return date.AddDays(value * 7);
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,FirstDayOfNextQuarter,The following statement contains a magic number: return date.FirstDayOfQuarter().AddMonths(3);
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,FirstDayOfQuarter,The following statement contains a magic number: return new DateTimeOffset(date.Year' ((date.Quarter() - 1) * 3) + 1' 1' date.Hour' date.Minute' date.Second' date.Offset);
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,FirstDayOfWeek,The following statement contains a magic number: if (diff < 0)              {                  diff += 7;              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,Last,The following statement contains a magic number: var diff = (day - yesterday.DayOfWeek - 7) % 7;
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,Last,The following statement contains a magic number: var diff = (day - yesterday.DayOfWeek - 7) % 7;
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,LastDayOfWeek,The following statement contains a magic number: return date.FirstDayOfWeek(firstDayOfWeek).AddDays(6);
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,LastDayOfYear,The following statement contains a magic number: return new DateTimeOffset(date.Year' 12' 31' date.Hour' date.Minute' date.Second' date.Offset);
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,LastDayOfYear,The following statement contains a magic number: return new DateTimeOffset(date.Year' 12' 31' date.Hour' date.Minute' date.Second' date.Offset);
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,Next,The following statement contains a magic number: var diff = (day - tomorrow.DayOfWeek + 7) % 7;
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,Next,The following statement contains a magic number: var diff = (day - tomorrow.DayOfWeek + 7) % 7;
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,Next,The following statement contains a magic number: return tomorrow.AddDays(diff <= 0 ? diff + 7 : diff);
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,Quarter,The following statement contains a magic number: return ((date.Month - 1) / 3) + 1;
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeDateString,The following statement contains a magic number: switch (days)              {                  case 0:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringToday' value);                      break;                    case 1:                      format = Strings.RelativeDateFormatStringTomorrow;                      break;                    case -1:                      format = Strings.RelativeDateFormatStringYesterday;                      break;                    case 2:                  case 3:                  case 4:                  case 5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysFromNow' days);                      break;                    case -2:                  case -3:                  case -4:                  case -5:                      format = options == RelativeDateFormatting.DayNames ? value.ToString("dddd"' CultureInfo.CurrentCulture) : String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDaysAgo' Math.Abs(days));                      break;                    default:                      format = String.Format(CultureInfo.CurrentCulture' Strings.RelativeDateFormatStringDefault' value);                      break;              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,ToRelativeTimeString,The following statement contains a magic number: if (Math.Sign(delta) != 0)              {                  var baseFormat = Strings.RelativeTimeFormatStringPast;                  if (delta < -0.1)                  {                      baseFormat = Strings.RelativeTimeFormatStringFuture;                      delta = -delta;                      diff = -diff;                  }                    if (delta < Constants.SecondsPerMinute)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Seconds' diff.Seconds == 1 ? Strings.RelativeTimeFormatStringSecond : Strings.RelativeTimeFormatStringSeconds);                  }                  else if (delta < Constants.SecondsPerMinute * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinute);                  }                  else if (delta < Constants.SecondsPerHour)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Minutes' Strings.RelativeTimeFormatStringMinutes);                  }                  else if (delta < Constants.SecondsPerHour * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHour);                  }                  else if (delta < Constants.SecondsPerDay)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Hours' Strings.RelativeTimeFormatStringHours);                  }                  else if (delta < Constants.SecondsPerDay * 2)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDay);                  }                  else if (delta < Constants.ApproximateSecondsPerMonth)                  {                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' diff.Days' Strings.RelativeTimeFormatStringDays);                  }                  else if (delta < Constants.ApproximateSecondsPerYear)                  {                      var months = Convert.ToInt32(Math.Floor((double)diff.Days / 30));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' months' months <= 1 ? Strings.RelativeTimeFormatStringMonth : Strings.RelativeTimeFormatStringMonths);                  }                  else                  {                      var years = Convert.ToInt32(Math.Floor((double)diff.Days / 365));                      format = String.Format(CultureInfo.CurrentCulture' baseFormat' years' years <= 1 ? Strings.RelativeTimeFormatStringYear : Strings.RelativeTimeFormatStringYears);                  }              }
Magic Number,Cadru.Extensions,DateTimeOffsetExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\DateTimeOffsetExtensions.cs,DaysBetween,The following statement contains a magic number: return days < 0 ? days + 7 : days;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsEven,The following statement contains a magic number: return (expression % 2) == 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsEven,The following statement contains a magic number: return (expression % 2) == 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsEven,The following statement contains a magic number: return (expression % 2) == 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsEven,The following statement contains a magic number: return (expression % 2) == 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsEven,The following statement contains a magic number: return (expression % 2) == 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsEven,The following statement contains a magic number: return (expression % 2) == 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsOdd,The following statement contains a magic number: return (expression % 2) != 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsOdd,The following statement contains a magic number: return (expression % 2) != 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsOdd,The following statement contains a magic number: return (expression % 2) != 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsOdd,The following statement contains a magic number: return (expression % 2) != 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsOdd,The following statement contains a magic number: return (expression % 2) != 0;
Magic Number,Cadru.Extensions,NumericExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\NumericExtensions.cs,IsOdd,The following statement contains a magic number: return (expression % 2) != 0;
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 28) & 0xf));
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 24) & 0xf));
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 20) & 0xf));
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 16) & 0xf));
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 12) & 0xf));
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 8) & 0xf));
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 4) & 0xf));
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 12) & 0xf));
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 8) & 0xf));
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 4) & 0xf));
Magic Number,Cadru.Extensions,StringBuilderExtensions,C:\repos\scottdorman_cadru\src\Cadru.Core\Extensions\StringBuilderExtensions.cs,AppendAsHexadecimal,The following statement contains a magic number: source.Append(ToHex((value >> 4) & 0xf));
Missing Default,Cadru,Comb,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,ParseFormat,The following switch statement is missing a default case: switch (format[0])              {                  case 'N':                  case 'n':                      return "N";                    case 'D':                  case 'd':                      return "D";                    case 'B':                  case 'b':                      return "B";                    case 'P':                  case 'p':                      return "P";                    case 'X':                  case 'x':                      return "X";              }
Missing Default,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,FormatHasHyphen,The following switch statement is missing a default case: switch (format)                  {                      case "D":                      case "B":                      case "P":                          hasHyphen = true;                          break;                  }
Missing Default,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Parse,The following switch statement is missing a default case: switch (this.sourceLength)                  {                      case 32:                          format = "N";                          break;                        case 36:                          format = "D";                          break;                        case 38:                          switch (this.source[0])                          {                              case '{':                                  format = "B";                                  break;                                case '(':                                  format = "P";                                  break;                          }                            break;                  }
Missing Default,Cadru,CombParser,C:\repos\scottdorman_cadru\src\Cadru.Core\Comb+CombParser.cs,Parse,The following switch statement is missing a default case: switch (this.source[0])                          {                              case '{':                                  format = "B";                                  break;                                case '(':                                  format = "P";                                  break;                          }
