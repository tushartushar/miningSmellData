Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Cadru.TransientFaultHandling,AsyncExecution,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\AsyncExecution.cs,AsyncExecution,The method has 6 parameters. Parameters: taskAction' shouldRetry' isTransient' onRetrying' fastFirstRetry' cancellationToken
Long Parameter List,Cadru.TransientFaultHandling,AsyncExecution<TResult>,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\AsyncExecution{T}.cs,AsyncExecution,The method has 6 parameters. Parameters: taskFunc' shouldRetry' isTransient' onRetrying' fastFirstRetry' cancellationToken
Long Parameter List,Cadru.TransientFaultHandling,RetryPolicy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryPolicy.cs,RetryPolicy,The method has 5 parameters. Parameters: errorDetectionStrategy' retryCount' minimum' maximum' delta
Long Parameter List,Cadru.TransientFaultHandling.RetryStrategies,ExponentialBackoffRetryStrategy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryStrategies\ExponentialBackoffRetryStategy.cs,ExponentialBackoffRetryStrategy,The method has 5 parameters. Parameters: name' retryCount' minimum' maximum' delta
Long Parameter List,Cadru.TransientFaultHandling.RetryStrategies,ExponentialBackoffRetryStrategy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryStrategies\ExponentialBackoffRetryStategy.cs,ExponentialBackoffRetryStrategy,The method has 6 parameters. Parameters: name' retryCount' minimum' maximum' delta' firstFastRetry
Long Parameter List,Cadru.TransientFaultHandling.RetryStrategies,IncrementalRetryStrategy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryStrategies\IncrementalRetryStrategy.cs,IncrementalRetryStrategy,The method has 5 parameters. Parameters: name' retryCount' initialInterval' increment' firstFastRetry
Long Statement,Cadru.TransientFaultHandling,AsyncExecution,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\AsyncExecution.cs,StartAsGenericTask,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.InvariantCulture' Strings.TaskCannotBeNull' nameof(taskAction))' nameof(taskAction)); " is 139.
Long Statement,Cadru.TransientFaultHandling,AsyncExecution,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\AsyncExecution.cs,StartAsGenericTask,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.InvariantCulture' Strings.TaskMustBeScheduled' nameof(taskAction))' nameof(taskAction)); " is 142.
Long Statement,Cadru.TransientFaultHandling,AsyncExecution<TResult>,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\AsyncExecution{T}.cs,ExecuteAsyncImpl,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.InvariantCulture' Strings.TaskMustBeScheduled' nameof(taskFunc))); " is 128.
Long Statement,Cadru.TransientFaultHandling,RetryManager,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryManager.cs,GetRetryStrategy,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.CurrentCulture' Strings.StringCannotBeEmpty' nameof(retryStrategyName))); " is 127.
Long Statement,Cadru.TransientFaultHandling,RetryManager,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryManager.cs,GetDefaultRetryStrategy,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.CurrentCulture' Strings.StringCannotBeEmpty' nameof(technology))); " is 120.
Long Statement,Cadru.TransientFaultHandling,RetryPolicy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryPolicy.cs,ExecuteAction,The length of the statement  "                // Perform an extra check in the delay interval. Should prevent from accidentally ending up with the value of -1 that will block a thread indefinitely. " is 151.
Long Statement,Cadru.TransientFaultHandling,RetryPolicy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryPolicy.cs,ExecuteAction,The length of the statement  "                // In addition' any other negative numbers will cause an ArgumentOutOfRangeException fault that will be thrown by Thread.Sleep. " is 127.
Long Statement,Cadru.TransientFaultHandling.RetryStrategies,ExponentialBackoffRetryStrategy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryStrategies\ExponentialBackoffRetryStategy.cs,GetShouldRetry,The length of the statement  "                    var delta = (int)((Math.Pow(2.0' currentRetryCount) - 1.0) * random.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2))); " is 174.
Long Statement,Cadru.TransientFaultHandling.RetryStrategies,IncrementalRetryStrategy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryStrategies\IncrementalRetryStrategy.cs,GetShouldRetry,The length of the statement  "                    var retryInterval = TimeSpan.FromMilliseconds(this.initialInterval.TotalMilliseconds + (this.increment.TotalMilliseconds * currentRetryCount)); " is 143.
Magic Number,Cadru.TransientFaultHandling.RetryStrategies,ExponentialBackoffRetryStrategy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryStrategies\ExponentialBackoffRetryStategy.cs,GetShouldRetry,The following statement contains a magic number: return delegate (int currentRetryCount' Exception lastException)              {                  var retryCondition = new RetryCondition(true' TimeSpan.Zero);                  if (currentRetryCount < this.retryCount)                  {                      var random = new Random();                        var delta = (int)((Math.Pow(2.0' currentRetryCount) - 1.0) * random.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));                      var interval = (int)Math.Min(checked(this.minBackoff.TotalMilliseconds + delta)' this.maxBackoff.TotalMilliseconds);                        var retryInterval = TimeSpan.FromMilliseconds(interval);                        retryCondition = new RetryCondition(true' retryInterval);                  }                    return retryCondition;              };
Magic Number,Cadru.TransientFaultHandling.RetryStrategies,ExponentialBackoffRetryStrategy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryStrategies\ExponentialBackoffRetryStategy.cs,GetShouldRetry,The following statement contains a magic number: return delegate (int currentRetryCount' Exception lastException)              {                  var retryCondition = new RetryCondition(true' TimeSpan.Zero);                  if (currentRetryCount < this.retryCount)                  {                      var random = new Random();                        var delta = (int)((Math.Pow(2.0' currentRetryCount) - 1.0) * random.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));                      var interval = (int)Math.Min(checked(this.minBackoff.TotalMilliseconds + delta)' this.maxBackoff.TotalMilliseconds);                        var retryInterval = TimeSpan.FromMilliseconds(interval);                        retryCondition = new RetryCondition(true' retryInterval);                  }                    return retryCondition;              };
Magic Number,Cadru.TransientFaultHandling.RetryStrategies,ExponentialBackoffRetryStrategy,D:\research\architectureSmells\repos1\scottdorman_cadru\src\Cadru.TransientFaultHandling\RetryStrategies\ExponentialBackoffRetryStategy.cs,GetShouldRetry,The following statement contains a magic number: return delegate (int currentRetryCount' Exception lastException)              {                  var retryCondition = new RetryCondition(true' TimeSpan.Zero);                  if (currentRetryCount < this.retryCount)                  {                      var random = new Random();                        var delta = (int)((Math.Pow(2.0' currentRetryCount) - 1.0) * random.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));                      var interval = (int)Math.Min(checked(this.minBackoff.TotalMilliseconds + delta)' this.maxBackoff.TotalMilliseconds);                        var retryInterval = TimeSpan.FromMilliseconds(interval);                        retryCondition = new RetryCondition(true' retryInterval);                  }                    return retryCondition;              };
