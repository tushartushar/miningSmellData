Implementation smell,Namespace,Class,File,Method,Description
Long Method,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The method has 151 lines of code.
Long Method,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The method has 190 lines of code.
Long Method,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The method has 135 lines of code.
Long Method,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The method has 207 lines of code.
Long Method,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The method has 151 lines of code.
Long Method,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The method has 297 lines of code.
Long Method,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,The method has 235 lines of code.
Complex Method,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,Cyclomatic complexity of the method is 11
Complex Method,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,Cyclomatic complexity of the method is 9
Complex Method,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,Cyclomatic complexity of the method is 17
Long Parameter List,AngryNinjas,CustomAnimation,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\CustomAnimation.cs,CustomAnimation,The method has 9 parameters. Parameters: theFileNameToAnimate' theFrameToStartWith' theNumberOfFramesToAnimate' theX' theY' flipOnX' flipOnY' doesItLoop' doesItUseRandomFrameToLoop
Long Parameter List,AngryNinjas,CustomAnimation,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\CustomAnimation.cs,InitWithOurOwnProperties,The method has 9 parameters. Parameters: theFileNameToAnimate' theFrameToStartWith' theNumberOfFramesToAnimate' theX' theY' flipOnX' flipOnY' doesItLoop' doesItUseRandomFrameToLoop
Long Parameter List,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,Enemy,The method has 13 parameters. Parameters: world' location' spriteFileName' isTheRotationFixed' getsDamageFromGround' doesGetDamageFromDamageEnabledStackObjects' breaksFromHowMuchContact' hasDifferentSpritesForDamage' numberOfFramesToAnimateOnBreak' density' createHow' points' simpleScoreVisualFXType
Long Parameter List,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,InitWithWorld,The method has 13 parameters. Parameters: world' location' spriteFileName' isTheRotationFixed' getsDamageFromGround' doesGetDamageFromDamageEnabledStackObjects' breaksFromHowMuchContact' hasDifferentSpritesForDamage' numberOfFramesToAnimateOnBreak' density' createHow' points' simpleScoreVisualFXType
Long Parameter List,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,StackObject,The method has 13 parameters. Parameters: world' location' spriteFileName' breaksOnGround' breaksFromNinja' hasAnimatedBreakFrames' damagesEnemy' density' createHow' angleChange' makeImmovable' points' simpleScoreVisualFXType
Long Parameter List,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,InitWithWorld,The method has 13 parameters. Parameters: world' location' spriteFileName' breaksOnGround' breaksFromNinja' hasAnimatedBreakFrames' damagesEnemy' density' createHow' angleChange' makeImmovable' points' simpleScoreVisualFXType
Long Parameter List,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,OnGamePadButtonUpdate,The method has 10 parameters. Parameters: backButton' startButton' systemButton' aButton' bButton' xButton' yButton' leftShoulder' rightShoulder' player
Long Parameter List,CocosSharp,StringData,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,StringData,The method has 5 parameters. Parameters: x' y' s' args' color
Long Identifier,AngryNinjas,Constants,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\Constants.cs,,The length of the parameter TagForWhiteDotsEvenNumberedTurn is 31.
Long Identifier,AngryNinjas,Constants,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\Constants.cs,,The length of the parameter TagForWhiteDotsOddNumberedTurn is 30.
Long Identifier,AngryNinjas,GameData,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameData.cs,,The length of the parameter eachLevelSectionIsHowManyLevels is 31.
Long Identifier,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,Enemy,The length of the parameter doesGetDamageFromDamageEnabledStackObjects is 42.
Long Identifier,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,Enemy,The length of the parameter numberOfFramesToAnimateOnBreak is 30.
Long Identifier,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,InitWithWorld,The length of the parameter doesGetDamageFromDamageEnabledStackObjects is 42.
Long Identifier,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,InitWithWorld,The length of the parameter numberOfFramesToAnimateOnBreak is 30.
Long Identifier,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,,The length of the parameter enemyCantBeDamagedForShortInterval is 34.
Long Identifier,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,,The length of the parameter continuePanningScreenOnFingerRelease is 36.
Long Identifier,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,,The length of the parameter currentScoreLabelStartPosition is 30.
Long Statement,AngryNinjas,GameData,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameData.cs,CanYouGoToTheFirstLevelOfThisSection,The length of the statement  "				CCLog.Log("you need to pass level {0} before jumping to here"'  ( thePreviousSection * eachLevelSectionIsHowManyLevels)); " is 121.
Long Statement,AngryNinjas,GameData,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameData.cs,ResetGame,The length of the statement  "{   //this method never gets called in my version. Not really a need to since I'm not showing the pointTotalForAllLevels ever " is 125.
Long Statement,AngryNinjas,BodyNode,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\BodyNode.cs,CreateBodyWithSpriteAndFixture,The length of the statement  "            // this is the meat of our class' it creates (OR recreates) the body in the world with the body definition' fixture definition and sprite name " is 142.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,InitWithWorld,The length of the statement  "            this.damageLevel = 0; //starts at 0' if breaksAfterHowMuchContact also equals 0 then the enemy will break on first/next contact " is 127.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,InitWithWorld,The length of the statement  "            this.breaksAfterHowMuchContact = breaksFromHowMuchContact; //contact must be made this many times before breaking' or if set to 0' the enemy will break on first/next contact  " is 173.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,InitWithWorld,The length of the statement  "            this.differentSpritesForDamage = hasDifferentSpritesForDamage; //will progress through damage frames if this is YES' for example'  enemy_damage1.png' enemy_damage2.png " is 167.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,InitWithWorld,The length of the statement  "            this.framesToAnimateOnBreak = numberOfFramesToAnimateOnBreak;  //will animate through breaks frames if this is more than 0' for example'  enemy_break0001.png' enemy_break0002.png " is 178.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner " is 182.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner " is 186.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner " is 185.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner " is 181.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner " is 191.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner " is 194.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner " is 194.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner " is 189.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner " is 186.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner " is 186.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image " is 137.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner " is 183.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner " is 182.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner " is 184.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across " is 193.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across " is 194.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner " is 186.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner " is 186.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across " is 191.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center " is 133.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across " is 195.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across " is 196.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center " is 133.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across " is 191.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center  " is 136.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center " is 133.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across " is 195.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across " is 196.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center " is 133.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference " is 218.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'  " is 165.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'  " is 166.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'  " is 165.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'  " is 164.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'  " is 165.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'  " is 164.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)  " is 162.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across " is 191.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner " is 186.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across " is 196.
Long Statement,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner " is 181.
Long Statement,AngryNinjas,Ninja,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Ninja.cs,CreateNinja,The length of the statement  "			var radiusInMeters = (40 / Constants.PTM_RATIO) * 0.5f; //increase or decrease 40 for a different circle size definition " is 120.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner " is 182.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner " is 186.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner " is 185.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner " is 181.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner " is 185.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner " is 186.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image " is 137.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner " is 182.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner " is 182.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner " is 184.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across " is 192.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across " is 194.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner " is 185.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner " is 186.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across " is 191.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center " is 133.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across " is 195.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across " is 196.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center " is 133.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across " is 191.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center  " is 136.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center " is 133.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across " is 195.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across " is 196.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center " is 133.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference " is 218.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'  " is 165.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'  " is 166.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'  " is 165.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'  " is 164.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'  " is 165.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'  " is 164.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)  " is 162.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across " is 191.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner " is 186.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across " is 196.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner " is 181.
Long Statement,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The length of the statement  "			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro " is 142.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,InitStackWithWorld,The length of the statement  "                stackLocationX = 1400;  //base X starting point for the entire stack on the iPad (make further tweaks using the  stackAdjustmentX var in the buildLevel function per level " is 170.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,InitStackWithWorld,The length of the statement  "                stackLocationY = 100; //base Y starting point for the entire stack on the iPad (make further tweaks using the  stackAdjustmentY var in the buildLevel function per level " is 168.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,InitStackWithWorld,The length of the statement  "                stackLocationX = 900;  //base X starting point for the entire stack on the iPhone (make further tweaks using the  stackAdjustmentX var in the buildLevel function per level " is 171.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,InitStackWithWorld,The length of the statement  "                stackLocationY = 35; //base Y starting point for the entire stack on the iPhone (make further tweaks using the  stackAdjustmentY var in the buildLevel function per level " is 169.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "                stackAdjustmentX = -350; // if you want to further adjust the stack's starting X location then change this value  (ipad) " is 120.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "                stackAdjustmentX = 100; // if you want to further adjust the stack's starting X location then change this value  (iphone) " is 121.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "                stackAdjustmentX = -100; // if you want to further adjust the stack's starting X location then change this value  (iphone) " is 122.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "                StackObject object1 = new StackObject(world ' new CCPoint( 0 + stackLocationX ' 65 + stackLocationY) ' "woodShape1" ' false' true  ' true  ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.SmokePuffs); " is 236.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "    StackObject object2 = new StackObject(world ' new CCPoint(95 + stackLocationX ' 65 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.SmokePuffs); " is 235.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "    StackObject object3 = new StackObject(world ' new CCPoint(47 + stackLocationX' 145 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 0 ' false ' 100 ' BreakEffect.Explosion); " is 233.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "    StackObject object4 = new StackObject(world ' new CCPoint( 0 + stackLocationX' 225 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.Explosion); " is 234.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "    StackObject object5 = new StackObject(world ' new CCPoint(95 + stackLocationX' 225 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.Explosion); " is 234.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "    StackObject object6 = new StackObject(world ' new CCPoint(50 + stackLocationX' 305 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 0 ' false ' 100 ' BreakEffect.SmokePuffs); " is 234.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "    StackObject object7 = new StackObject(world ' new CCPoint(0 + stackLocationX ' 345 + stackLocationY) ' "triangleMedium" ' false' true  ' false ' true ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.SmokePuffs) ; " is 229.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "    StackObject object8 = new StackObject(world ' new CCPoint(95 + stackLocationX' 345 + stackLocationY) ' "triangleMedium" ' false' true ' false ' true ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.Explosion); " is 226.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "    StackObject object9 = new StackObject(world ' new CCPoint(50 + stackLocationX' 350 + stackLocationY) ' "triangleLarge" ' false' true ' false ' true ' 0.25f ' CreationMethod.Triangle ' 180 ' false ' 500 ' BreakEffect.SmokePuffs); " is 228.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "    StackObject object10 = new StackObject(world ' new CCPoint(25 + stackLocationX' 394 + stackLocationY) ' "triangleSmall" ' false' true ' false ' false ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.Explosion); " is 227.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The length of the statement  "    StackObject object11 = new StackObject(world ' new CCPoint(75 + stackLocationX' 394 + stackLocationY) ' "triangleSmall" ' false' true ' false ' false ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.SmokePuffs); " is 228.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "                stackAdjustmentX = 200; // if you want to further adjust the stack's starting X location then change this value  (iphone) " is 121.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "                stackAdjustmentX = -100; // if you want to further adjust the stack's starting X location then change this value  (iphone) " is 122.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "            StackObject object11 = new StackObject(world' new CCPoint(45 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion); " is 223.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "            StackObject object12 = new StackObject(world' new CCPoint(95 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion); " is 223.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "            StackObject object13 = new StackObject(world' new CCPoint(145 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion); " is 224.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "            StackObject object14 = new StackObject(world' new CCPoint(200 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion); " is 224.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "            StackObject object15 = new StackObject(world' new CCPoint(80 + stackLocationX' 250 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 90' false' 0' BreakEffect.None); " is 216.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "            StackObject object16 = new StackObject(world' new CCPoint(180 + stackLocationX' 250 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 90' false' 0' BreakEffect.None); " is 217.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "            StackObject object17 = new StackObject(world' new CCPoint(95 + stackLocationX' 285 + stackLocationY)' "triangleMedium"' false' true' false' true' 0.25f' CreationMethod.Triangle' 0' false' 100' BreakEffect.Explosion); " is 216.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "            StackObject object18 = new StackObject(world' new CCPoint(181 + stackLocationX' 285 + stackLocationY)' "triangleMedium"' false' true' false' true' 0.25f' CreationMethod.Triangle' 0' false' 100' BreakEffect.Explosion); " is 217.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "            StackObject object19 = new StackObject(world' new CCPoint(138 + stackLocationX' 280 + stackLocationY)' "triangleSmall"' false' true' false' true' 0.25f' CreationMethod.Triangle' 180' false' 500' BreakEffect.Explosion); " is 218.
Long Statement,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The length of the statement  "            StackObject object5 = new StackObject(world' new CCPoint(137 + stackLocationX' 340 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 0' false' 0' BreakEffect.None); " is 215.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			throwInProgress = false; //is a throw currently in progress' as in' is a ninja in midair (mostly used to prevent tossing two ninjas' one right after another) " is 157.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			areWeInTheStartingPosition = true;  //is the world back at 0 on the X axis (if yes' then we can put a ninja in the sling) " is 121.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			currentLevel = GameData.SharedData.Level;  // use currentLevel =  0 for testing new shapes' will call [self buildLevelWithAllShapes]; " is 133.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			continuePanningScreenOnFingerRelease = true; // if the screen panning is midway between either the sling or targets' when you release your finger the screen will continue panning the last direction it moved (jumpy on iPhone if set to NO) " is 237.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			backgroundLayerClouds = new CCSprite(GameData.SharedData.BackgroundCloudsFileName);  // will return the background clouds file for a particular level " is 149.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			backgroundLayerHills = new CCSprite(GameData.SharedData.BackgroundHillsFileName);  // will return the background hills file for a particular level " is 146.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image) " is 160.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good " is 144.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.  " is 153.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image) " is 160.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way " is 141.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number " is 151.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			int worldMaxWidth = screenWidth * 4; //If you ever want the BOX2D world width to be more than it is then increase this  (currently' this should be plenty of extra space) " is 169.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			int worldMaxHeight = screenHeight * 3; //If you ever want the BOX2D world height to be more  than it is then increase this (currently' this should be plenty of extra space) " is 172.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			groundBox.Set(new b2Vec2(-4' worldMaxHeight / Constants.PTM_RATIO)' new b2Vec2(worldMaxWidth / Constants.PTM_RATIO' worldMaxHeight / Constants.PTM_RATIO)); " is 155.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			groundBox.Set(new b2Vec2(worldMaxWidth / Constants.PTM_RATIO' worldMaxHeight / Constants.PTM_RATIO)' new b2Vec2(worldMaxWidth / Constants.PTM_RATIO' 0)); " is 153.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			ninjasToTossThisLevel = GameData.SharedData.NumberOfNinjasToTossThisLevel;  //total number of ninjas to toss for this level " is 123.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			//give the stack a moment to drop' then switches every pieces to static (locks it into position' until the first slingshot)... " is 126.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			highScoreLabel = new CCLabelTtf(String.Format("High Score: {0}"' GameData.SharedData.HighScoreForLevel)' "MarkerFelt"' fontSizeForScore); " is 137.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			highScoreLabel.Position = currentScoreLabel.Position - new CCPoint(0' highScoreLabel.ContentSize.Height);// highScoreLabelStartPosition; " is 136.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The length of the statement  "			CCLog.Log("Please create your own characters' backgrounds' etc and spend the time to make the game look totally unique"); " is 121.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,OnGamePadButtonUpdate,The length of the statement  "				// base.OnGamePadButtonUpdate(backButton' startButton' systemButton' aButton' bButton' xButton' yButton' leftShoulder' rightShoulder' player); " is 142.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowNinjaOnGround,The length of the statement  "				currentBodyNode.ScheduleOnce(currentBodyNode.FadeThenRemove' 2.0f);      //I like to fade out the sprite after a couple seconds " is 127.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,CockTheSlingshot,The length of the statement  "				float angle = CalculateAngle(pt.X' pt.Y' slingShotCenterPosition.X' slingShotCenterPosition.Y);  //angle from slingShot center to the location of the touch " is 155.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,CockTheSlingshot,The length of the statement  "					strapBack.ScaleX = strapFront.ScaleX;  //strap back is the same size as the strap front (until we rework it a tad below) " is 120.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,TouchesMoved,The length of the statement  "				// Move the ninja in the slingshot. IF the screen is in the starting position (this.PositionX == 0) and a throw isn't already in progress' AND our finger is touching around the sling shot " is 187.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,TouchesMoved,The length of the statement  "					int diff = (int)(location.X - previousTouchLocationX); //difference between the starting/previous touch location and current one " is 128.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,FireSlignshot,The length of the statement  "			speed = (float)(Math.Abs(slingShotCenterPosition.X - positionInSling.X)) + (float)(Math.Abs(slingShotCenterPosition.Y - positionInSling.Y)); " is 140.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ResetOrAdvanceLevel,The length of the statement  "				GameData.SharedData.HighScoreForLevel = pointTotalThisRound; //will check to see if there's a high score set even if you failed the round " is 137.
Long Statement,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ResetOrAdvanceLevel,The length of the statement  "			ScheduleOnce(TransitionOut' 3.0f);  //if you want to transition after a different amount of time' then change 3 to whatever " is 123.
Long Statement,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,The length of the statement  "                    TheLevel.SharedLevel.ShowPoints(theStackObject.PointValue' theStackObject.Position' theStackObject.SimpleScoreVisualFX);  //show points " is 135.
Long Statement,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,The length of the statement  "                    TheLevel.SharedLevel.ShowPoints(theStackObject.PointValue' theStackObject.Position' theStackObject.SimpleScoreVisualFX); //show points " is 134.
Long Statement,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,The length of the statement  "                    TheLevel.SharedLevel.ShowPoints(theStackObject.PointValue' theStackObject.Position' theStackObject.SimpleScoreVisualFX);  //show points " is 135.
Long Statement,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,The length of the statement  "                    TheLevel.SharedLevel.ShowPoints(theStackObject.PointValue' theStackObject.Position' theStackObject.SimpleScoreVisualFX);  //show points " is 135.
Complex Conditional,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,CockTheSlingshot,The conditional expression  "(this.CheckCircleCollision(pt' 2' slingShotCenterPosition' maxStretchOfSlingShot) || slingShotNinjaInHand)  				&& !throwInProgress && areWeInTheStartingPosition"  is complex.
Magic Number,AngryNinjas,CustomAnimation,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\CustomAnimation.cs,RunMyAnimation,The following statement contains a magic number: if (currentFrame <= framesToAnimate)              {                    //if you don't want leading zeros                    if (currentFrame < 10)                  {                        someSprite.Texture = new CCSprite(String.Format("{0}_000{1}"' fileNameToAnimate' currentFrame)).Texture;                    }                  else if (currentFrame < 100)                  {                        someSprite.Texture = new CCSprite(String.Format("{0}_00{1}"' fileNameToAnimate' currentFrame)).Texture;                  }                  else                  {                        someSprite.Texture = new CCSprite(String.Format("{0}_0{1}"' fileNameToAnimate' currentFrame)).Texture;                    }                  }              else              {                    if (doesTheAnimationLoop && !useRandomFrameToLoop)                  {                        currentFrame = frameToStartWith;                    }                  else if (doesTheAnimationLoop && useRandomFrameToLoop)                  {                        currentFrame = CCRandom.Next() % framesToAnimate; // you'd get a range of 0 to whatever framesToAnimate is                    }                  else                  {                      RemoveChild(someSprite' false);                      RemoveFromParent(true);                      Unschedule(RunMyAnimation);                  }                }
Magic Number,AngryNinjas,CustomAnimation,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\CustomAnimation.cs,RunMyAnimation,The following statement contains a magic number: if (currentFrame <= framesToAnimate)              {                    //if you don't want leading zeros                    if (currentFrame < 10)                  {                        someSprite.Texture = new CCSprite(String.Format("{0}_000{1}"' fileNameToAnimate' currentFrame)).Texture;                    }                  else if (currentFrame < 100)                  {                        someSprite.Texture = new CCSprite(String.Format("{0}_00{1}"' fileNameToAnimate' currentFrame)).Texture;                  }                  else                  {                        someSprite.Texture = new CCSprite(String.Format("{0}_0{1}"' fileNameToAnimate' currentFrame)).Texture;                    }                  }              else              {                    if (doesTheAnimationLoop && !useRandomFrameToLoop)                  {                        currentFrame = frameToStartWith;                    }                  else if (doesTheAnimationLoop && useRandomFrameToLoop)                  {                        currentFrame = CCRandom.Next() % framesToAnimate; // you'd get a range of 0 to whatever framesToAnimate is                    }                  else                  {                      RemoveChild(someSprite' false);                      RemoveFromParent(true);                      Unschedule(RunMyAnimation);                  }                }
Magic Number,AngryNinjas,GameData,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameData.cs,GameData,The following statement contains a magic number: maxLevels = 30;
Magic Number,AngryNinjas,GameData,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameData.cs,GameData,The following statement contains a magic number: highScoreLevel = new int[30];
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,PlayStackImpactSound,The following statement contains a magic number: if (!soundFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 4); //0 to 4                  switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact5"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,PlayStackImpactSound,The following statement contains a magic number: if (!soundFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 4); //0 to 4                  switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact5"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,PlayStackImpactSound,The following statement contains a magic number: if (!soundFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 4); //0 to 4                  switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact5"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,PlayStackImpactSound,The following statement contains a magic number: if (!soundFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 4); //0 to 4                  switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact5"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,PlayBreakSound,The following statement contains a magic number: if (!soundFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 2); //0 to 2                                    switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("break1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("break2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("break3"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,PlayBreakSound,The following statement contains a magic number: if (!soundFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 2); //0 to 2                                    switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("break1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("break2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("break3"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,ReleaseSlingSounds,The following statement contains a magic number: if (!voiceFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 7); //0 to 7                                    switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt5"));                          break;                      case 5:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt6"));                          break;                      case 6:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt7"));                          break;                      case 7:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt8"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,ReleaseSlingSounds,The following statement contains a magic number: if (!voiceFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 7); //0 to 7                                    switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt5"));                          break;                      case 5:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt6"));                          break;                      case 6:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt7"));                          break;                      case 7:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt8"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,ReleaseSlingSounds,The following statement contains a magic number: if (!voiceFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 7); //0 to 7                                    switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt5"));                          break;                      case 5:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt6"));                          break;                      case 6:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt7"));                          break;                      case 7:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt8"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,ReleaseSlingSounds,The following statement contains a magic number: if (!voiceFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 7); //0 to 7                                    switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt5"));                          break;                      case 5:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt6"));                          break;                      case 6:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt7"));                          break;                      case 7:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt8"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,ReleaseSlingSounds,The following statement contains a magic number: if (!voiceFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 7); //0 to 7                                    switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt5"));                          break;                      case 5:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt6"));                          break;                      case 6:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt7"));                          break;                      case 7:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt8"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,ReleaseSlingSounds,The following statement contains a magic number: if (!voiceFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 7); //0 to 7                                    switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt5"));                          break;                      case 5:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt6"));                          break;                      case 6:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt7"));                          break;                      case 7:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt8"));                          break;                  }              }
Magic Number,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,ReleaseSlingSounds,The following statement contains a magic number: if (!voiceFXTurnedOff)              {                  int randomNum = CCRandom.Next(0' 7); //0 to 7                                    switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt5"));                          break;                      case 5:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt6"));                          break;                      case 6:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt7"));                          break;                      case 7:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt8"));                          break;                  }              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle)              {                  var tempSprite = new CCSprite(spriteImageName);                  float radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;                  shapeCircle.Radius = radiusInMeters;              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImage)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.ShapeOfSourceImageButSlightlySmaller)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) *.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )*.8f / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 )*.8f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )*.8f / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Triangle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.TriangleRightAngle)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 3;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Trapezoid)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Hexagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 6;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Pentagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 5;                  b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};                  shape.Set(vertices' num);              }                else if (shapeCreationMethod == CreationMethod.Octagon)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 8;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.Parallelogram)              {                  var tempSprite = new CCSprite(spriteImageName);                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};                  shape.Set(vertices' num);              }              else if (shapeCreationMethod == CreationMethod.CustomCoordinates1)              {                    //use your own custom coordinates from a program like Vertex Helper Pro                  var num = 4;                  b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};                  shape.Set(vertices' num);              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: var blinkInterval = CCRandom.Next(3' 8);
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,CreateEnemy,The following statement contains a magic number: var blinkInterval = CCRandom.Next(3' 8);
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,StartBreakAnimation,The following statement contains a magic number: if (currentFrame <= framesToAnimateOnBreak)              {                    //if we included frames to show for breaking and the current frame is less than the max number of frames to play                  if (currentFrame < 10)                      sprite.Texture = new CCSprite(String.Format("{0}_break000{1}"' baseImageName' currentFrame)).Texture;                  else if (currentFrame < 100)                      sprite.Texture = new CCSprite(String.Format("{0}_break00{1}"' baseImageName' currentFrame)).Texture;              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,StartBreakAnimation,The following statement contains a magic number: if (currentFrame <= framesToAnimateOnBreak)              {                    //if we included frames to show for breaking and the current frame is less than the max number of frames to play                  if (currentFrame < 10)                      sprite.Texture = new CCSprite(String.Format("{0}_break000{1}"' baseImageName' currentFrame)).Texture;                  else if (currentFrame < 100)                      sprite.Texture = new CCSprite(String.Format("{0}_break00{1}"' baseImageName' currentFrame)).Texture;              }
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,OpenEyes,The following statement contains a magic number: var blinkInterval = CCRandom.Next(3' 8);
Magic Number,AngryNinjas,Enemy,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Enemy.cs,OpenEyes,The following statement contains a magic number: var blinkInterval = CCRandom.Next(3' 8);
Magic Number,AngryNinjas,Ninja,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Ninja.cs,CreateNinja,The following statement contains a magic number: var radiusInMeters = (40 / Constants.PTM_RATIO) * 0.5f;
Magic Number,AngryNinjas,Ninja,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Ninja.cs,SpriteInStandingState,The following statement contains a magic number: var blinkInterval = CCRandom.Next(3'8);
Magic Number,AngryNinjas,Ninja,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Ninja.cs,SpriteInStandingState,The following statement contains a magic number: var blinkInterval = CCRandom.Next(3'8);
Magic Number,AngryNinjas,Ninja,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Ninja.cs,RollAnimation,The following statement contains a magic number: if (counter <= 3) {  				  				sprite.Texture = new CCSprite(String.Format("{0}_roll000{1}"' baseImageName' counter)).Texture;    			} else {  				  				if ( !onGround ) {    					sprite.Texture = new CCSprite(String.Format("{0}_roll"' baseImageName)).Texture;    				} else {  					  					sprite.Texture = new CCSprite(String.Format("{0}_on_ground"' baseImageName)).Texture;    				}  				  				Unschedule(RollAnimation);  				  				counter = 0;  			}
Magic Number,AngryNinjas,Ninja,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Ninja.cs,OpenEyes,The following statement contains a magic number: int blinkInterval = CCRandom.Next(3'8);
Magic Number,AngryNinjas,Ninja,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\Ninja.cs,OpenEyes,The following statement contains a magic number: int blinkInterval = CCRandom.Next(3'8);
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,InitWithWorld,The following statement contains a magic number: this.framesToAnimate = 10;
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,CreateObject,The following statement contains a magic number: if (shapeCreationMethod == CreationMethod.DiameterOfImageForCircle) {  				  				var tempSprite = new CCSprite(spriteImageName);                  var radiusInMeters = (tempSprite.Texture.ContentSizeInPixels.Width / Constants.PTM_RATIO) * 0.5f;  				  				shapeCircle.Radius = radiusInMeters;  				  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.ShapeOfSourceImage) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Triangle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  					new b2Vec2( 0.0f / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 )/ Constants.PTM_RATIO) // top center of image  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.TriangleRightAngle) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 3;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top right corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 )/ Constants.PTM_RATIO) //bottom left corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Trapezoid) {  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)'  //top of image' 1/4's across  					new b2Vec2((tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom right corner  				};  				  				shape.Set(vertices' num);  			}  			  			  			else if ( shapeCreationMethod == CreationMethod.Hexagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 6;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top of image' 3/4's across  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Pentagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 5;  				b2Vec2[] vertices = {  					new b2Vec2( 0 / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' center   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // left' center  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' 0.0f / Constants.PTM_RATIO)' // right' center  					  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.Octagon) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 8;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //use the source image octogonShape.png for reference  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 )  / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width /  2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 6 ) / Constants.PTM_RATIO)'   					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 6 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)   				};  				  				shape.Set(vertices' num);  			}  			else if ( shapeCreationMethod == CreationMethod.Parallelogram) {  				  				var tempSprite = new CCSprite(spriteImageName);  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO)' //top of image' 1/4 across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / -2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom left corner  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 4 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / -2 ) / Constants.PTM_RATIO)' //bottom of image' 3/4's across  					new b2Vec2( (tempSprite.Texture.ContentSizeInPixels.Width / 2 ) / Constants.PTM_RATIO' (tempSprite.Texture.ContentSizeInPixels.Height / 2 ) / Constants.PTM_RATIO) //top right corner  				};  				  				shape.Set(vertices' num);  			}  			  			else if ( shapeCreationMethod == CreationMethod.CustomCoordinates1) {  //use your own custom coordinates from a program like Vertex Helper Pro  				  				var num = 4;  				b2Vec2[] vertices = {  					new b2Vec2(-64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)'  					new b2Vec2(-64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' -16.0f / Constants.PTM_RATIO)'  					new b2Vec2(64.0f / Constants.PTM_RATIO' 16.0f / Constants.PTM_RATIO)  				};  				shape.Set(vertices' num);  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,StartBreakAnimation,The following statement contains a magic number: if (currentFrame <= framesToAnimate && addedAnimatedBreakFrames )   			{  //if we included frames to show for breaking and the current frame is less than the max number of frames to play  				  				if (currentFrame < 10) {    					sprite.Texture = new CCSprite(String.Format("{0}_000{1}"' baseImageName' currentFrame)).Texture;    				} else if (currentFrame < 100) {   					  					sprite.Texture = new CCSprite(String.Format("{0}_00{1}"' baseImageName' currentFrame)).Texture;    				}  				  			}
Magic Number,AngryNinjas,StackObject,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StackObject.cs,StartBreakAnimation,The following statement contains a magic number: if (currentFrame <= framesToAnimate && addedAnimatedBreakFrames )   			{  //if we included frames to show for breaking and the current frame is less than the max number of frames to play  				  				if (currentFrame < 10) {    					sprite.Texture = new CCSprite(String.Format("{0}_000{1}"' baseImageName' currentFrame)).Texture;    				} else if (currentFrame < 100) {   					  					sprite.Texture = new CCSprite(String.Format("{0}_00{1}"' baseImageName' currentFrame)).Texture;    				}  				  			}
Magic Number,AngryNinjas,StartPlatform,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StartPlatform.cs,CreatePlatform,The following statement contains a magic number: var num = 4;
Magic Number,AngryNinjas,StartPlatform,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\StartPlatform.cs,CreatePlatform,The following statement contains a magic number: var num2 = 4;
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,InitStackWithWorld,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)              {                  stackLocationX = 1400;  //base X starting point for the entire stack on the iPad (make further tweaks using the  stackAdjustmentX var in the buildLevel function per level                  stackLocationY = 100; //base Y starting point for the entire stack on the iPad (make further tweaks using the  stackAdjustmentY var in the buildLevel function per level              }              else              {                    stackLocationX = 900;  //base X starting point for the entire stack on the iPhone (make further tweaks using the  stackAdjustmentX var in the buildLevel function per level                  stackLocationY = 35; //base Y starting point for the entire stack on the iPhone (make further tweaks using the  stackAdjustmentY var in the buildLevel function per level              }
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,InitStackWithWorld,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)              {                  stackLocationX = 1400;  //base X starting point for the entire stack on the iPad (make further tweaks using the  stackAdjustmentX var in the buildLevel function per level                  stackLocationY = 100; //base Y starting point for the entire stack on the iPad (make further tweaks using the  stackAdjustmentY var in the buildLevel function per level              }              else              {                    stackLocationX = 900;  //base X starting point for the entire stack on the iPhone (make further tweaks using the  stackAdjustmentX var in the buildLevel function per level                  stackLocationY = 35; //base Y starting point for the entire stack on the iPhone (make further tweaks using the  stackAdjustmentY var in the buildLevel function per level              }
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,InitStackWithWorld,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)              {                  stackLocationX = 1400;  //base X starting point for the entire stack on the iPad (make further tweaks using the  stackAdjustmentX var in the buildLevel function per level                  stackLocationY = 100; //base Y starting point for the entire stack on the iPad (make further tweaks using the  stackAdjustmentY var in the buildLevel function per level              }              else              {                    stackLocationX = 900;  //base X starting point for the entire stack on the iPhone (make further tweaks using the  stackAdjustmentX var in the buildLevel function per level                  stackLocationY = 35; //base Y starting point for the entire stack on the iPhone (make further tweaks using the  stackAdjustmentY var in the buildLevel function per level              }
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,InitStackWithWorld,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)              {                  stackLocationX = 1400;  //base X starting point for the entire stack on the iPad (make further tweaks using the  stackAdjustmentX var in the buildLevel function per level                  stackLocationY = 100; //base Y starting point for the entire stack on the iPad (make further tweaks using the  stackAdjustmentY var in the buildLevel function per level              }              else              {                    stackLocationX = 900;  //base X starting point for the entire stack on the iPhone (make further tweaks using the  stackAdjustmentX var in the buildLevel function per level                  stackLocationY = 35; //base Y starting point for the entire stack on the iPhone (make further tweaks using the  stackAdjustmentY var in the buildLevel function per level              }
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,InitStackWithWorld,The following statement contains a magic number: if (currentLevel % 2 == 0)              {                  BuildLevel2();              }              else              {                  BuildLevel1();              }
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: var object1 = new StackObject(world'                                            new CCPoint(0 + stackLocationX' 65 + stackLocationY)'                                            "woodShape1"'                                            false'                                            true'                                            true'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            false'                                            100'                                            BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: var object1 = new StackObject(world'                                            new CCPoint(0 + stackLocationX' 65 + stackLocationY)'                                            "woodShape1"'                                            false'                                            true'                                            true'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            false'                                            100'                                            BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: var object1 = new StackObject(world'                                            new CCPoint(0 + stackLocationX' 65 + stackLocationY)'                                            "woodShape1"'                                            false'                                            true'                                            true'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            false'                                            100'                                            BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(95 + stackLocationX' 65 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(95 + stackLocationX' 65 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(95 + stackLocationX' 65 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(95 + stackLocationX' 65 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(47 + stackLocationX' 145 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(47 + stackLocationX' 145 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(47 + stackLocationX' 145 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(0 + stackLocationX' 225 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(0 + stackLocationX' 225 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(0 + stackLocationX' 225 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(95 + stackLocationX' 225 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(95 + stackLocationX' 225 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(95 + stackLocationX' 225 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(95 + stackLocationX' 225 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(50 + stackLocationX' 305 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(50 + stackLocationX' 305 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(50 + stackLocationX' 305 + stackLocationY)'                                                        "woodShape1"'                                                        false'                                                        true'                                                        true'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: var object8 = new StackObject(world'                                            new CCPoint(0 + stackLocationX' 300 + stackLocationY)'                                            "triangleMedium"'                                            false'                                            true'                                            false'                                            false'                                            0.25f'                                            CreationMethod.Triangle'                                            0'                                            false'                                            100'                                            BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: var object8 = new StackObject(world'                                            new CCPoint(0 + stackLocationX' 300 + stackLocationY)'                                            "triangleMedium"'                                            false'                                            true'                                            false'                                            false'                                            0.25f'                                            CreationMethod.Triangle'                                            0'                                            false'                                            100'                                            BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object8 = new StackObject(world'                                            new CCPoint(95 + stackLocationX' 345 + stackLocationY)'                                            "triangleMedium"'                                            false'                                            true'                                            false'                                            false'                                            0.25f'                                            CreationMethod.Triangle'                                            0'                                            false'                                            100'                                            BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object8 = new StackObject(world'                                            new CCPoint(95 + stackLocationX' 345 + stackLocationY)'                                            "triangleMedium"'                                            false'                                            true'                                            false'                                            false'                                            0.25f'                                            CreationMethod.Triangle'                                            0'                                            false'                                            100'                                            BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildTestLevel,The following statement contains a magic number: object8 = new StackObject(world'                                            new CCPoint(95 + stackLocationX' 345 + stackLocationY)'                                            "triangleMedium"'                                            false'                                            true'                                            false'                                            false'                                            0.25f'                                            CreationMethod.Triangle'                                            0'                                            false'                                            100'                                            BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)              {                    stackAdjustmentX = -350; // if you want to further adjust the stack's starting X location then change this value  (ipad)                  stackLocationX = stackLocationX - stackAdjustmentX;                    stackAdjustmentY = 0; // if you want to further adjust the stack's starting X location then change this value  (iphone)                  stackLocationY = stackLocationY - stackAdjustmentY;                  }              else              {  #if ANDROID                  stackAdjustmentX = 100; // if you want to further adjust the stack's starting X location then change this value  (iphone)  #else                  stackAdjustmentX = -100; // if you want to further adjust the stack's starting X location then change this value  (iphone)  #endif                  stackLocationX = stackLocationX - stackAdjustmentX;                      stackAdjustmentY = 0; // if you want to further adjust the stack's starting X location then change this value  (iphone)                  stackLocationY = stackLocationY - stackAdjustmentY;                }
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)              {                    stackAdjustmentX = -350; // if you want to further adjust the stack's starting X location then change this value  (ipad)                  stackLocationX = stackLocationX - stackAdjustmentX;                    stackAdjustmentY = 0; // if you want to further adjust the stack's starting X location then change this value  (iphone)                  stackLocationY = stackLocationY - stackAdjustmentY;                  }              else              {  #if ANDROID                  stackAdjustmentX = 100; // if you want to further adjust the stack's starting X location then change this value  (iphone)  #else                  stackAdjustmentX = -100; // if you want to further adjust the stack's starting X location then change this value  (iphone)  #endif                  stackLocationX = stackLocationX - stackAdjustmentX;                      stackAdjustmentY = 0; // if you want to further adjust the stack's starting X location then change this value  (iphone)                  stackLocationY = stackLocationY - stackAdjustmentY;                }
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object1 = new StackObject(world ' new CCPoint( 0 + stackLocationX ' 65 + stackLocationY) ' "woodShape1" ' false' true  ' true  ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object1 = new StackObject(world ' new CCPoint( 0 + stackLocationX ' 65 + stackLocationY) ' "woodShape1" ' false' true  ' true  ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object1 = new StackObject(world ' new CCPoint( 0 + stackLocationX ' 65 + stackLocationY) ' "woodShape1" ' false' true  ' true  ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object2 = new StackObject(world ' new CCPoint(95 + stackLocationX ' 65 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object2 = new StackObject(world ' new CCPoint(95 + stackLocationX ' 65 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object2 = new StackObject(world ' new CCPoint(95 + stackLocationX ' 65 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object2 = new StackObject(world ' new CCPoint(95 + stackLocationX ' 65 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object3 = new StackObject(world ' new CCPoint(47 + stackLocationX' 145 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 0 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object3 = new StackObject(world ' new CCPoint(47 + stackLocationX' 145 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 0 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object3 = new StackObject(world ' new CCPoint(47 + stackLocationX' 145 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 0 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object4 = new StackObject(world ' new CCPoint( 0 + stackLocationX' 225 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object4 = new StackObject(world ' new CCPoint( 0 + stackLocationX' 225 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object4 = new StackObject(world ' new CCPoint( 0 + stackLocationX' 225 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object5 = new StackObject(world ' new CCPoint(95 + stackLocationX' 225 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object5 = new StackObject(world ' new CCPoint(95 + stackLocationX' 225 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object5 = new StackObject(world ' new CCPoint(95 + stackLocationX' 225 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object5 = new StackObject(world ' new CCPoint(95 + stackLocationX' 225 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 90 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object6 = new StackObject(world ' new CCPoint(50 + stackLocationX' 305 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 0 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object6 = new StackObject(world ' new CCPoint(50 + stackLocationX' 305 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 0 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object6 = new StackObject(world ' new CCPoint(50 + stackLocationX' 305 + stackLocationY) ' "woodShape1" ' false' true  ' true ' false ' 0.25f ' CreationMethod.ShapeOfSourceImage ' 0 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object7 = new StackObject(world ' new CCPoint(0 + stackLocationX ' 345 + stackLocationY) ' "triangleMedium" ' false' true  ' false ' true ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.SmokePuffs) ;
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object7 = new StackObject(world ' new CCPoint(0 + stackLocationX ' 345 + stackLocationY) ' "triangleMedium" ' false' true  ' false ' true ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.SmokePuffs) ;
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object8 = new StackObject(world ' new CCPoint(95 + stackLocationX' 345 + stackLocationY) ' "triangleMedium" ' false' true ' false ' true ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object8 = new StackObject(world ' new CCPoint(95 + stackLocationX' 345 + stackLocationY) ' "triangleMedium" ' false' true ' false ' true ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object8 = new StackObject(world ' new CCPoint(95 + stackLocationX' 345 + stackLocationY) ' "triangleMedium" ' false' true ' false ' true ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object9 = new StackObject(world ' new CCPoint(50 + stackLocationX' 350 + stackLocationY) ' "triangleLarge" ' false' true ' false ' true ' 0.25f ' CreationMethod.Triangle ' 180 ' false ' 500 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object9 = new StackObject(world ' new CCPoint(50 + stackLocationX' 350 + stackLocationY) ' "triangleLarge" ' false' true ' false ' true ' 0.25f ' CreationMethod.Triangle ' 180 ' false ' 500 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object9 = new StackObject(world ' new CCPoint(50 + stackLocationX' 350 + stackLocationY) ' "triangleLarge" ' false' true ' false ' true ' 0.25f ' CreationMethod.Triangle ' 180 ' false ' 500 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object9 = new StackObject(world ' new CCPoint(50 + stackLocationX' 350 + stackLocationY) ' "triangleLarge" ' false' true ' false ' true ' 0.25f ' CreationMethod.Triangle ' 180 ' false ' 500 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object10 = new StackObject(world ' new CCPoint(25 + stackLocationX' 394 + stackLocationY) ' "triangleSmall" ' false' true ' false ' false ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object10 = new StackObject(world ' new CCPoint(25 + stackLocationX' 394 + stackLocationY) ' "triangleSmall" ' false' true ' false ' false ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object10 = new StackObject(world ' new CCPoint(25 + stackLocationX' 394 + stackLocationY) ' "triangleSmall" ' false' true ' false ' false ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object11 = new StackObject(world ' new CCPoint(75 + stackLocationX' 394 + stackLocationY) ' "triangleSmall" ' false' true ' false ' false ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object11 = new StackObject(world ' new CCPoint(75 + stackLocationX' 394 + stackLocationY) ' "triangleSmall" ' false' true ' false ' false ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: StackObject object11 = new StackObject(world ' new CCPoint(75 + stackLocationX' 394 + stackLocationY) ' "triangleSmall" ' false' true ' false ' false ' 0.25f ' CreationMethod.Triangle ' 0 ' false ' 100 ' BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: Enemy enemy1 = new Enemy(world'                                        new CCPoint(45 + stackLocationX' 200 + stackLocationY)'                                        "mutantPepper"'                                        true'                                        true'                                        true'                                        1'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImageButSlightlySmaller'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: Enemy enemy1 = new Enemy(world'                                        new CCPoint(45 + stackLocationX' 200 + stackLocationY)'                                        "mutantPepper"'                                        true'                                        true'                                        true'                                        1'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImageButSlightlySmaller'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: Enemy enemy1 = new Enemy(world'                                        new CCPoint(45 + stackLocationX' 200 + stackLocationY)'                                        "mutantPepper"'                                        true'                                        true'                                        true'                                        1'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImageButSlightlySmaller'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel1,The following statement contains a magic number: Enemy enemy1 = new Enemy(world'                                        new CCPoint(45 + stackLocationX' 200 + stackLocationY)'                                        "mutantPepper"'                                        true'                                        true'                                        true'                                        1'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImageButSlightlySmaller'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)              {                    stackAdjustmentX = 0; // if you want to further adjust the stack's starting X location then change this value  (ipad)                  stackLocationX = stackLocationX - stackAdjustmentX;                    stackAdjustmentY = 0; // if you want to further adjust the stack's starting X location then change this value  (iphone)                  stackLocationY = stackLocationY - stackAdjustmentY;                  }              else              {    #if ANDROID                  stackAdjustmentX = 200; // if you want to further adjust the stack's starting X location then change this value  (iphone)  #else                  stackAdjustmentX = -100; // if you want to further adjust the stack's starting X location then change this value  (iphone)  #endif                  stackLocationX = stackLocationX - stackAdjustmentX;                      stackAdjustmentY = 0; // if you want to further adjust the stack's starting X location then change this value  (iphone)                  stackLocationY = stackLocationY - stackAdjustmentY;                }
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: var object1 = new StackObject(world'                                            new CCPoint(40 + stackLocationX' 40 + stackLocationY)'                                            "marbleSquare"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: var object1 = new StackObject(world'                                            new CCPoint(40 + stackLocationX' 40 + stackLocationY)'                                            "marbleSquare"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: var object1 = new StackObject(world'                                            new CCPoint(40 + stackLocationX' 40 + stackLocationY)'                                            "marbleSquare"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                            new CCPoint(190 + stackLocationX' 40 + stackLocationY)'                                            "marbleSquare"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                            new CCPoint(190 + stackLocationX' 40 + stackLocationY)'                                            "marbleSquare"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                            new CCPoint(190 + stackLocationX' 40 + stackLocationY)'                                            "marbleSquare"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                            new CCPoint(9 + stackLocationX' 125 + stackLocationY)'                                            "stonePillar"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                            new CCPoint(9 + stackLocationX' 125 + stackLocationY)'                                            "stonePillar"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                            new CCPoint(9 + stackLocationX' 125 + stackLocationY)'                                            "stonePillar"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                            new CCPoint(27 + stackLocationX' 220 + stackLocationY)'                                            "stonePillar"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                            new CCPoint(27 + stackLocationX' 220 + stackLocationY)'                                            "stonePillar"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                            new CCPoint(27 + stackLocationX' 220 + stackLocationY)'                                            "stonePillar"'                                            false'                                            false'                                            false'                                            false'                                            0.25f'                                            CreationMethod.ShapeOfSourceImage'                                            90'                                            true'                                            0'                                            BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(113 + stackLocationX' 88 + stackLocationY)'                                                        "woodShape2"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(113 + stackLocationX' 88 + stackLocationY)'                                                        "woodShape2"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(113 + stackLocationX' 88 + stackLocationY)'                                                        "woodShape2"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(57 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        true'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(57 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        true'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(57 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        true'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(57 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        true'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(114 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(114 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(114 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(114 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(168 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(168 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(168 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(168 + stackLocationX' 128 + stackLocationY)'                                                        "woodShape4"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        90'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(124 + stackLocationX' 166 + stackLocationY)'                                                        "woodShape3"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(124 + stackLocationX' 166 + stackLocationY)'                                                        "woodShape3"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: object1 = new StackObject(world'                                                        new CCPoint(124 + stackLocationX' 166 + stackLocationY)'                                                        "woodShape3"'                                                        false'                                                        true'                                                        false'                                                        false'                                                        0.25f'                                                        CreationMethod.ShapeOfSourceImage'                                                        0'                                                        false'                                                        100'                                                        BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object11 = new StackObject(world' new CCPoint(45 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object11 = new StackObject(world' new CCPoint(45 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object11 = new StackObject(world' new CCPoint(45 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object11 = new StackObject(world' new CCPoint(45 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object12 = new StackObject(world' new CCPoint(95 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object12 = new StackObject(world' new CCPoint(95 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object12 = new StackObject(world' new CCPoint(95 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object12 = new StackObject(world' new CCPoint(95 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object13 = new StackObject(world' new CCPoint(145 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object13 = new StackObject(world' new CCPoint(145 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object13 = new StackObject(world' new CCPoint(145 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object13 = new StackObject(world' new CCPoint(145 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object14 = new StackObject(world' new CCPoint(200 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object14 = new StackObject(world' new CCPoint(200 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object14 = new StackObject(world' new CCPoint(200 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object14 = new StackObject(world' new CCPoint(200 + stackLocationX' 210 + stackLocationY)' "woodShape4"' false' true' false' true' 0.25f' CreationMethod.ShapeOfSourceImage' 90' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object15 = new StackObject(world' new CCPoint(80 + stackLocationX' 250 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 90' false' 0' BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object15 = new StackObject(world' new CCPoint(80 + stackLocationX' 250 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 90' false' 0' BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object15 = new StackObject(world' new CCPoint(80 + stackLocationX' 250 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 90' false' 0' BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object16 = new StackObject(world' new CCPoint(180 + stackLocationX' 250 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 90' false' 0' BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object16 = new StackObject(world' new CCPoint(180 + stackLocationX' 250 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 90' false' 0' BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object16 = new StackObject(world' new CCPoint(180 + stackLocationX' 250 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 90' false' 0' BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object17 = new StackObject(world' new CCPoint(95 + stackLocationX' 285 + stackLocationY)' "triangleMedium"' false' true' false' true' 0.25f' CreationMethod.Triangle' 0' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object17 = new StackObject(world' new CCPoint(95 + stackLocationX' 285 + stackLocationY)' "triangleMedium"' false' true' false' true' 0.25f' CreationMethod.Triangle' 0' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object17 = new StackObject(world' new CCPoint(95 + stackLocationX' 285 + stackLocationY)' "triangleMedium"' false' true' false' true' 0.25f' CreationMethod.Triangle' 0' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object18 = new StackObject(world' new CCPoint(181 + stackLocationX' 285 + stackLocationY)' "triangleMedium"' false' true' false' true' 0.25f' CreationMethod.Triangle' 0' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object18 = new StackObject(world' new CCPoint(181 + stackLocationX' 285 + stackLocationY)' "triangleMedium"' false' true' false' true' 0.25f' CreationMethod.Triangle' 0' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object18 = new StackObject(world' new CCPoint(181 + stackLocationX' 285 + stackLocationY)' "triangleMedium"' false' true' false' true' 0.25f' CreationMethod.Triangle' 0' false' 100' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object19 = new StackObject(world' new CCPoint(138 + stackLocationX' 280 + stackLocationY)' "triangleSmall"' false' true' false' true' 0.25f' CreationMethod.Triangle' 180' false' 500' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object19 = new StackObject(world' new CCPoint(138 + stackLocationX' 280 + stackLocationY)' "triangleSmall"' false' true' false' true' 0.25f' CreationMethod.Triangle' 180' false' 500' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object19 = new StackObject(world' new CCPoint(138 + stackLocationX' 280 + stackLocationY)' "triangleSmall"' false' true' false' true' 0.25f' CreationMethod.Triangle' 180' false' 500' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object19 = new StackObject(world' new CCPoint(138 + stackLocationX' 280 + stackLocationY)' "triangleSmall"' false' true' false' true' 0.25f' CreationMethod.Triangle' 180' false' 500' BreakEffect.Explosion);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object5 = new StackObject(world' new CCPoint(137 + stackLocationX' 340 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 0' false' 0' BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: StackObject object5 = new StackObject(world' new CCPoint(137 + stackLocationX' 340 + stackLocationY)' "stonePillar"' false' false' false' true' .5f' CreationMethod.ShapeOfSourceImage' 0' false' 0' BreakEffect.None);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: Enemy enemy1 = new Enemy(world'                                        new CCPoint(117 + stackLocationX' 45 + stackLocationY)'                                        "mutantPepper"'                                        true'                                        false'                                        true'                                        3'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImage'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: Enemy enemy1 = new Enemy(world'                                        new CCPoint(117 + stackLocationX' 45 + stackLocationY)'                                        "mutantPepper"'                                        true'                                        false'                                        true'                                        3'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImage'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: Enemy enemy1 = new Enemy(world'                                        new CCPoint(117 + stackLocationX' 45 + stackLocationY)'                                        "mutantPepper"'                                        true'                                        false'                                        true'                                        3'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImage'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: Enemy enemy1 = new Enemy(world'                                        new CCPoint(117 + stackLocationX' 45 + stackLocationY)'                                        "mutantPepper"'                                        true'                                        false'                                        true'                                        3'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImage'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: Enemy enemy1 = new Enemy(world'                                        new CCPoint(117 + stackLocationX' 45 + stackLocationY)'                                        "mutantPepper"'                                        true'                                        false'                                        true'                                        3'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImage'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: enemy1 = new Enemy(world'                                        new CCPoint(206 + stackLocationX' 120 + stackLocationY)'                                        "mutantPepper"'                                        false'                                        true'                                        true'                                        3'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImageButSlightlySmaller'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: enemy1 = new Enemy(world'                                        new CCPoint(206 + stackLocationX' 120 + stackLocationY)'                                        "mutantPepper"'                                        false'                                        true'                                        true'                                        3'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImageButSlightlySmaller'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: enemy1 = new Enemy(world'                                        new CCPoint(206 + stackLocationX' 120 + stackLocationY)'                                        "mutantPepper"'                                        false'                                        true'                                        true'                                        3'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImageButSlightlySmaller'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: enemy1 = new Enemy(world'                                        new CCPoint(206 + stackLocationX' 120 + stackLocationY)'                                        "mutantPepper"'                                        false'                                        true'                                        true'                                        3'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImageButSlightlySmaller'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,TheStack,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\entities\TheStack.cs,BuildLevel2,The following statement contains a magic number: enemy1 = new Enemy(world'                                        new CCPoint(206 + stackLocationX' 120 + stackLocationY)'                                        "mutantPepper"'                                        false'                                        true'                                        true'                                        3'                                        true'                                        10'                                        1.0f'                                        CreationMethod.ShapeOfSourceImageButSlightlySmaller'                                        10000'                                        BreakEffect.SmokePuffs);
Magic Number,AngryNinjas,GroundPlane,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\GroundPlane.cs,CreateGround,The following statement contains a magic number: int num = 4;
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (TheLevel.SharedLevel.IS_IPAD)  			{                   //iPADs..  				menu1Position = new CCPoint(screenSize.Width / 2' 430);  				menu2Position = new CCPoint(screenSize.Width / 2' 290);    				SoundFXMenuLocation = new CCPoint(240' 170);  				VoiceFXMenuLocation = new CCPoint(480' 170);  				AmbientFXMenuLocation = new CCPoint(750' 170);  				//if( ! CCDirector.SharedDirector.enableRetinaDisplay ) {  				CCLog.Log("must be iPad 1 or 2");  				//change nothing   				//} else {  				CCLog.Log("retina display is on-must be iPAd 3");  				//change files names for iPad 3     				menuBackgroundName = "menu_background-ipad";  //will use @"menu_background-ipad-hd";     				lvlButtonName1 = "levelButton1-ipad";  				lvlLockedButtonName1 = "levelButton1_locked-ipad";    				lvlButtonName2 = "levelButton2-ipad";  				lvlLockedButtonName2 = "levelButton2_locked-ipad";    				lvlButtonName3 = "levelButton3-ipad";  				lvlLockedButtonName3 = "levelButton3_locked-ipad";    				lvlButtonName4 = "levelButton4-ipad";  				lvlLockedButtonName4 = "levelButton4_locked-ipad";    				lvlButtonName5 = "levelButton5-ipad";  				lvlLockedButtonName5 = "levelButton5_locked-ipad";    				lvlButtonName6 = "levelButton6-ipad";  				lvlLockedButtonName6 = "levelButton6_locked-ipad";    				lvlButtonName7 = "levelButton7-ipad";  				lvlLockedButtonName7 = "levelButton7_locked-ipad";    				lvlButtonName8 = "levelButton8-ipad";  				lvlLockedButtonName8 = "levelButton8_locked-ipad";    				lvlButtonName9 = "levelButton9-ipad";  				lvlLockedButtonName9 = "levelButton9_locked-ipad";    				lvlButtonName10 = "levelButton10-ipad";  				lvlLockedButtonName10 = "levelButton10_locked-ipad";    				voiceButtonName = "voiceFX-ipad";  				voiceButtonNameDim = "voiceFX_dim-ipad";    				soundButtonName = "soundFX-ipad";  				soundButtonNameDim = "soundFX_dim-ipad";    				ambientButtonName = "ambientFX-ipad";  				ambientButtonNameDim = "ambientFX_dim-ipad";  			}  			else  			{                    //IPHONES..  				menu1Position = new CCPoint(screenSize.Width / 2' 185);  				menu2Position = new CCPoint(screenSize.Width / 2' 115);    				SoundFXMenuLocation = new CCPoint(110' 55);  				VoiceFXMenuLocation = new CCPoint(230' 55);  				AmbientFXMenuLocation = new CCPoint(355' 55);  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: theBackground.Position = new CCPoint(screenSize.Width / 2' screenSize.Height / 2);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: theBackground.Position = new CCPoint(screenSize.Width / 2' screenSize.Height / 2);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(2) == false)  				button2 = new CCMenuItemImage(lvlLockedButtonName2' lvlLockedButtonName2' PlayNegativeSound);  			else  				button2 = new CCMenuItemImage(lvlButtonName2' lvlButtonName2' GoToFirstLevelSection2);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(3) == false)  				button3 = new CCMenuItemImage(lvlLockedButtonName3' lvlLockedButtonName3' PlayNegativeSound);  			else  				button3 = new CCMenuItemImage(lvlButtonName3' lvlButtonName3' GoToFirstLevelSection3);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(4) == false)  				button4 = new CCMenuItemImage(lvlLockedButtonName4' lvlLockedButtonName4' PlayNegativeSound);  			else  				button4 = new CCMenuItemImage(lvlButtonName4' lvlButtonName4' GoToFirstLevelSection4);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(5) == false)  				button5 = new CCMenuItemImage(lvlLockedButtonName5' lvlLockedButtonName5' PlayNegativeSound);  			else  				button5 = new CCMenuItemImage(lvlButtonName5' lvlButtonName5' GoToFirstLevelSection5);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(6) == false)  				button6 = new CCMenuItemImage(lvlLockedButtonName6' lvlLockedButtonName6' PlayNegativeSound);  			else  				button6 = new CCMenuItemImage(lvlButtonName6' lvlButtonName6' GoToFirstLevelSection6);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(7) == false)  				button7 = new CCMenuItemImage(lvlLockedButtonName7' lvlLockedButtonName7' PlayNegativeSound);  			else  				button7 = new CCMenuItemImage(lvlButtonName7' lvlButtonName7' GoToFirstLevelSection7);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(8) == false)  				button8 = new CCMenuItemImage(lvlLockedButtonName8' lvlLockedButtonName8' PlayNegativeSound);  			else  				button8 = new CCMenuItemImage(lvlButtonName8' lvlButtonName8' GoToFirstLevelSection8);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(9) == false)  				button9 = new CCMenuItemImage(lvlLockedButtonName9' lvlLockedButtonName9' PlayNegativeSound);  			else  				button9 = new CCMenuItemImage(lvlButtonName9' lvlButtonName9' GoToFirstLevelSection9);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(10) == false)  				button10 = new CCMenuItemImage(lvlLockedButtonName10' lvlLockedButtonName10' PlayNegativeSound);  			else  				button10 = new CCMenuItemImage(lvlButtonName10' lvlButtonName10' GoToFirstLevelSection10);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: Menu.AlignItemsHorizontally(10);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,AddedToScene,The following statement contains a magic number: Menu2.AlignItemsHorizontally(10);
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection2,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(2))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(2);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection2,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(2))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(2);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection3,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(3))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(3);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection3,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(3))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(3);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection4,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(4))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(4);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection4,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(4))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(4);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection5,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(5))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(5);  				PopAndTransition();    			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection5,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(5))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(5);  				PopAndTransition();    			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection6,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(6))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(6);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection6,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(6))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(6);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection7,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(7))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(7);  				PopAndTransition();    			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection7,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(7))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(7);  				PopAndTransition();    			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection8,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(8))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(8);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection8,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(8))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(8);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection9,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(9))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(9);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection9,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(9))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(9);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection10,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(10))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(10);  				PopAndTransition();  			}
Magic Number,AngryNinjas,TheMenu,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\layers\TheMenu.cs,GoToFirstLevelSection10,The following statement contains a magic number: if (GameData.SharedData.CanYouGoToTheFirstLevelOfThisSection(10))  			{  				GameData.SharedData.ChangeLevelToFirstInThisSection(10);  				PopAndTransition();  			}
Magic Number,AngryNinjas,IntroLayer,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\IntroLayer.cs,AddedToScene,The following statement contains a magic number: background.Position = new CCPoint(_screenSize.Width / 2' _screenSize.Height / 2);
Magic Number,AngryNinjas,IntroLayer,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\IntroLayer.cs,AddedToScene,The following statement contains a magic number: background.Position = new CCPoint(_screenSize.Width / 2' _screenSize.Height / 2);
Magic Number,AngryNinjas,IntroLayer,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\IntroLayer.cs,AddedToScene,The following statement contains a magic number: ScheduleOnce(MakeTransition' 2);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (IS_IPAD)  			{  				areWeOnTheIPad = true;  				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' currently for the iPad 1.0 is good  				worldMaxHorizontalShift = -(screenWidth);  // This determines how far the user can slide left or right to see the entire board. Always a negative number.   				maxScaleDownValue = 1.0f; //dont change  				scaleAmount = 0; // increment to change the scale of the entire world when panning    				initialPanAmount = 30; //how fast the screen pan starts  				extraAmountOnPanBack = 10; // I like a faster pan back. Adding a bit more  				adjustY = 0; // best to leave at 0 for iPad (moves the world down when panning)    				//background stuff  				backgroundLayerClouds.Position = new CCPoint(screenWidth' screenHeight / 2);  				backgroundLayerHills.Position = new CCPoint(screenWidth' screenHeight / 2);    				if (IS_RETINA)  				{  					//retina adjustment  					backgroundLayerClouds.Scale = 2.0f;  					backgroundLayerHills.Scale = 2.0f;  				}    				menuStartPosition = new CCPoint(130' screenSize.Height - 24);  				currentScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 60);  				highScoreLabelStartPosition = new CCPoint(200' screenSize.Height - 80);    				fontSizeForScore = 22;  				                  //ground plane and platform  				groundPlaneStartPosition = new CCPoint(screenWidth' 50);  				platformStartPosition = new CCPoint(340' 190);    				//sling shot  				slingShotCenterPosition = new CCPoint(370' 255);  				slingShotFront.Position = new CCPoint(374' 240);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(378' 235);    				//ninja  				ninjaStartPosition1 = new CCPoint(380' 250);  				ninjaStartPosition2 = new CCPoint(300' 155);  				ninjaStartPosition3 = new CCPoint(260' 155);  				ninjaStartPosition4 = new CCPoint(200' 120);  				ninjaStartPosition5 = new CCPoint(160' 120);  			}    			else if (IS_IPHONE)  			{  				//CCLOG (@"this is an iphone");  				areWeOnTheIPad = false;    				//vars   				maxStretchOfSlingShot = 75; //best to leave as is' since this value ties in closely to the image size of strap.png. (should be 1/4 the size of the source image)  				multipyThrowPower = 1.0f; // fine tune how powerful the sling shot is. Range is probably best between .5 to 1.5' and a little goes a long way    				worldMaxHorizontalShift = -(screenWidth); // This determines how far the user can slide left or right to see the entire board. Always a negative number  				maxScaleDownValue = 0.65f; //range should probably be between 0.75 and 1.0;  				scaleAmount = .01f; // increment to change the scale of the entire world when panning  				adjustY = -34;    				initialPanAmount = 20; //how fast the screen pan starts  				extraAmountOnPanBack = 0; // best to leave at 0 on iPhone    				//background stuff    				if (!IS_RETINA)  				{  					//non retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = .7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 245);  					backgroundLayerHills.Scale = .7f;    				}  				else  				{  					//retina adjustment  					backgroundLayerClouds.Position = new CCPoint(screenWidth' 192);  					backgroundLayerClouds.Scale = 1.7f;  					backgroundLayerHills.Position = new CCPoint(screenWidth' 265);  					backgroundLayerHills.Scale = 1.7f;  				}    				menuStartPosition = new CCPoint(70' screenSize.Height - 17);  				currentScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 50); //score label  				highScoreLabelStartPosition = new CCPoint(140' screenSize.Height - 70);  				fontSizeForScore = 18;    				//ground plane and platform    				groundPlaneStartPosition = new CCPoint(screenWidth' -25);  				platformStartPosition = new CCPoint(130' 120);    				//sling shot    				slingShotCenterPosition = new CCPoint(160' 185);  				slingShotFront.Position = new CCPoint(164' 170);  				strapFront.Position = new CCPoint(slingShotCenterPosition.X' slingShotCenterPosition.Y);  				strapBack.Position = new CCPoint(slingShotCenterPosition.X + 33' slingShotCenterPosition.Y - 10);  				strapEmpty.Position = new CCPoint(168' 163);    				//ninja    				ninjaStartPosition1 = new CCPoint(170' 175);  				ninjaStartPosition2 = new CCPoint(110' 82);  				ninjaStartPosition3 = new CCPoint(65' 82);  				ninjaStartPosition4 = new CCPoint(90' 65);  				ninjaStartPosition5 = new CCPoint(43' 65);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: int worldMaxWidth = screenWidth * 4;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: int worldMaxHeight = screenHeight * 3;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: groundBox.Set(new b2Vec2(-4' 0)' new b2Vec2(worldMaxWidth / Constants.PTM_RATIO' 0));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: groundBox.Set(new b2Vec2(-4' worldMaxHeight / Constants.PTM_RATIO)' new b2Vec2(worldMaxWidth / Constants.PTM_RATIO' worldMaxHeight / Constants.PTM_RATIO));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: groundBox.Set(new b2Vec2(-4' worldMaxHeight / Constants.PTM_RATIO)' new b2Vec2(-4' 0));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: groundBox.Set(new b2Vec2(-4' worldMaxHeight / Constants.PTM_RATIO)' new b2Vec2(-4' 0));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (ninjasToTossThisLevel >= 2)  			{  				ninja2 = new Ninja(world' ninjaStartPosition2' @"ninjaRed");  				AddChild(ninja2' Constants.DepthNinjas);  				ninja2.SpriteInStandingState();    			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (ninjasToTossThisLevel >= 3)  			{    				ninja3 = new Ninja(world' ninjaStartPosition3' @"ninjaBlue");  				AddChild(ninja3' Constants.DepthNinjas);  				ninja3.SpriteInStandingState();  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (ninjasToTossThisLevel >= 4)  			{    				ninja4 = new Ninja(world' ninjaStartPosition4' @"ninjaBrown");  				AddChild(ninja4' Constants.DepthNinjas);  				ninja4.SpriteInStandingState();  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: if (ninjasToTossThisLevel >= 5)  			{    				ninja5 = new Ninja(world' ninjaStartPosition5' @"ninjaGreen");  				AddChild(ninja5' Constants.DepthNinjas);  				ninja5.SpriteInStandingState();  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: currentScoreLabel.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: currentScoreLabel.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: currentScoreLabel.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: highScoreLabel.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: highScoreLabel.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AddedToScene,The following statement contains a magic number: highScoreLabel.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,OnGamePadStickUpdate,The following statement contains a magic number: if (player == PlayerIndex.One)  			{  				_StickPull = leftStick.Magnitude;  				_StickDir = leftStick.Direction;  				// Do the rubber band  				CCPoint pt = CCPoint.Zero;  				pt.X = slingShotCenterPosition.X + _StickDir.X * _StickPull * maxStretchOfSlingShot;  				pt.Y = slingShotCenterPosition.Y + _StickDir.Y * _StickPull * maxStretchOfSlingShot;  				if (CockTheSlingshot(pt))  				{  					_SlingshotIsCocked = true;  				}  				else  				{  					if (rightStick.Magnitude > 0f)  					{  						PanTheScreen((int)(rightStick.Magnitude * 25));  					}  				}  			}  			else  			{  				// base.OnGamePadStickUpdate(leftStick' rightStick' player);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,SetUpParticleSystemSun,The following statement contains a magic number: system = new CCParticleSun(new CCPoint(240' 400));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,SetUpParticleSystemSun,The following statement contains a magic number: system = new CCParticleSun(new CCPoint(240' 400));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,SetUpParticleSystemSun,The following statement contains a magic number: system.Scale = 3;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,Tick,The following statement contains a magic number: int velocityIterations = 8;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,MoveNextNinjaIntoSling,The following statement contains a magic number: if (!somethingJustScored)  			{ //dont move a ninja unless we are done scoring    				Unschedule(MoveNextNinjaIntoSling);    				ninjaBeingThrown++;    				if (ninjaBeingThrown <= ninjasToTossThisLevel && pointTotalThisRound < pointsToPassLevel)  				{    					switch (ninjaBeingThrown)  					{  						case 2:  							currentBodyNode = ninja2;  							break;  						case 3:  							currentBodyNode = ninja3;  							break;  						case 4:  							currentBodyNode = ninja4;  							break;  						case 5:  							currentBodyNode = ninja5;  							break;    					}    					b2Vec2 locationInMeters = b2Vec2.Zero;  					locationInMeters.Set(ninjaStartPosition1.X / Constants.PTM_RATIO' ninjaStartPosition1.Y / Constants.PTM_RATIO);  					currentBodyNode.Body.SetTransform(locationInMeters' CCMacros.CCDegreesToRadians(0));    					currentBodyNode.SpriteInSlingState();    					throwInProgress = false;    				}  				else if (ninjaBeingThrown > ninjasToTossThisLevel || pointTotalThisRound >= pointsToPassLevel)  				{      					ScheduleOnce(ResetOrAdvanceLevel' 2.0f);  				}    			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,MoveNextNinjaIntoSling,The following statement contains a magic number: if (!somethingJustScored)  			{ //dont move a ninja unless we are done scoring    				Unschedule(MoveNextNinjaIntoSling);    				ninjaBeingThrown++;    				if (ninjaBeingThrown <= ninjasToTossThisLevel && pointTotalThisRound < pointsToPassLevel)  				{    					switch (ninjaBeingThrown)  					{  						case 2:  							currentBodyNode = ninja2;  							break;  						case 3:  							currentBodyNode = ninja3;  							break;  						case 4:  							currentBodyNode = ninja4;  							break;  						case 5:  							currentBodyNode = ninja5;  							break;    					}    					b2Vec2 locationInMeters = b2Vec2.Zero;  					locationInMeters.Set(ninjaStartPosition1.X / Constants.PTM_RATIO' ninjaStartPosition1.Y / Constants.PTM_RATIO);  					currentBodyNode.Body.SetTransform(locationInMeters' CCMacros.CCDegreesToRadians(0));    					currentBodyNode.SpriteInSlingState();    					throwInProgress = false;    				}  				else if (ninjaBeingThrown > ninjasToTossThisLevel || pointTotalThisRound >= pointsToPassLevel)  				{      					ScheduleOnce(ResetOrAdvanceLevel' 2.0f);  				}    			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,MoveNextNinjaIntoSling,The following statement contains a magic number: if (!somethingJustScored)  			{ //dont move a ninja unless we are done scoring    				Unschedule(MoveNextNinjaIntoSling);    				ninjaBeingThrown++;    				if (ninjaBeingThrown <= ninjasToTossThisLevel && pointTotalThisRound < pointsToPassLevel)  				{    					switch (ninjaBeingThrown)  					{  						case 2:  							currentBodyNode = ninja2;  							break;  						case 3:  							currentBodyNode = ninja3;  							break;  						case 4:  							currentBodyNode = ninja4;  							break;  						case 5:  							currentBodyNode = ninja5;  							break;    					}    					b2Vec2 locationInMeters = b2Vec2.Zero;  					locationInMeters.Set(ninjaStartPosition1.X / Constants.PTM_RATIO' ninjaStartPosition1.Y / Constants.PTM_RATIO);  					currentBodyNode.Body.SetTransform(locationInMeters' CCMacros.CCDegreesToRadians(0));    					currentBodyNode.SpriteInSlingState();    					throwInProgress = false;    				}  				else if (ninjaBeingThrown > ninjasToTossThisLevel || pointTotalThisRound >= pointsToPassLevel)  				{      					ScheduleOnce(ResetOrAdvanceLevel' 2.0f);  				}    			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,MoveNextNinjaIntoSling,The following statement contains a magic number: if (!somethingJustScored)  			{ //dont move a ninja unless we are done scoring    				Unschedule(MoveNextNinjaIntoSling);    				ninjaBeingThrown++;    				if (ninjaBeingThrown <= ninjasToTossThisLevel && pointTotalThisRound < pointsToPassLevel)  				{    					switch (ninjaBeingThrown)  					{  						case 2:  							currentBodyNode = ninja2;  							break;  						case 3:  							currentBodyNode = ninja3;  							break;  						case 4:  							currentBodyNode = ninja4;  							break;  						case 5:  							currentBodyNode = ninja5;  							break;    					}    					b2Vec2 locationInMeters = b2Vec2.Zero;  					locationInMeters.Set(ninjaStartPosition1.X / Constants.PTM_RATIO' ninjaStartPosition1.Y / Constants.PTM_RATIO);  					currentBodyNode.Body.SetTransform(locationInMeters' CCMacros.CCDegreesToRadians(0));    					currentBodyNode.SpriteInSlingState();    					throwInProgress = false;    				}  				else if (ninjaBeingThrown > ninjasToTossThisLevel || pointTotalThisRound >= pointsToPassLevel)  				{      					ScheduleOnce(ResetOrAdvanceLevel' 2.0f);  				}    			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,CockTheSlingshot,The following statement contains a magic number: if ((this.CheckCircleCollision(pt' 2' slingShotCenterPosition' maxStretchOfSlingShot) || slingShotNinjaInHand)  				&& !throwInProgress && areWeInTheStartingPosition)  			{  				if (!slingShotNinjaInHand)  				{    					positionInSling = slingShotCenterPosition;  					slingShotNinjaInHand = true;    					strapBack.Visible = true;  					strapFront.Visible = true;  					strapEmpty.Visible = false;  				}    				float currentAngle = (int)currentBodyNode.Body.Angle;  				float radius = maxStretchOfSlingShot; //radius of slingShot  				float angle = CalculateAngle(pt.X' pt.Y' slingShotCenterPosition.X' slingShotCenterPosition.Y);  //angle from slingShot center to the location of the touch    				// if the user is moving the ninja within the max stretch of the slingShot  (the radius)  				if (this.CheckCircleCollision(pt' 2' slingShotCenterPosition' radius))  				{  					positionInSling.X = pt.X;  					positionInSling.Y = pt.Y;    					//tie the strap size into the location of the touch in relation to the distance from the slingshot center    					float scaleStrap = (Math.Abs(slingShotCenterPosition.X - pt.X)) / radius;  					scaleStrap = scaleStrap + 0.3f;  //add a little extra    					if (scaleStrap > 1)  					{  //make sure it doesn't go over 100% scale  						scaleStrap = 1;  					}    					strapFront.ScaleX = scaleStrap;  					strapBack.ScaleX = strapFront.ScaleX;  //strap back is the same size as the strap front (until we rework it a tad below)  				}  				else  				{  					// if the user is moving the ninja outside the max stretch of the slingShot    					float angleRadians = CCMacros.CCDegreesToRadians(angle - 90);  					positionInSling.X = slingShotCenterPosition.X - ((float)Math.Cos(angleRadians) * radius);  					positionInSling.Y = slingShotCenterPosition.Y + ((float)Math.Sin(angleRadians) * radius);    					strapFront.ScaleX = 1;  					strapBack.ScaleX = 1;  				}    				strapFront.Rotation = angle - 90;  				AdjustBackStrap(angle);    				//positions the box2D bodyNode of the ninja  				b2Vec2 locationInMeters = new b2Vec2(positionInSling.X / Constants.PTM_RATIO' positionInSling.Y / Constants.PTM_RATIO);  				currentBodyNode.Body.SetTransform(locationInMeters' CCMacros.CCDegreesToRadians(currentAngle));  				currentBodyNode.SpriteInPulledBackSlingState();  				return (true);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,CockTheSlingshot,The following statement contains a magic number: if ((this.CheckCircleCollision(pt' 2' slingShotCenterPosition' maxStretchOfSlingShot) || slingShotNinjaInHand)  				&& !throwInProgress && areWeInTheStartingPosition)  			{  				if (!slingShotNinjaInHand)  				{    					positionInSling = slingShotCenterPosition;  					slingShotNinjaInHand = true;    					strapBack.Visible = true;  					strapFront.Visible = true;  					strapEmpty.Visible = false;  				}    				float currentAngle = (int)currentBodyNode.Body.Angle;  				float radius = maxStretchOfSlingShot; //radius of slingShot  				float angle = CalculateAngle(pt.X' pt.Y' slingShotCenterPosition.X' slingShotCenterPosition.Y);  //angle from slingShot center to the location of the touch    				// if the user is moving the ninja within the max stretch of the slingShot  (the radius)  				if (this.CheckCircleCollision(pt' 2' slingShotCenterPosition' radius))  				{  					positionInSling.X = pt.X;  					positionInSling.Y = pt.Y;    					//tie the strap size into the location of the touch in relation to the distance from the slingshot center    					float scaleStrap = (Math.Abs(slingShotCenterPosition.X - pt.X)) / radius;  					scaleStrap = scaleStrap + 0.3f;  //add a little extra    					if (scaleStrap > 1)  					{  //make sure it doesn't go over 100% scale  						scaleStrap = 1;  					}    					strapFront.ScaleX = scaleStrap;  					strapBack.ScaleX = strapFront.ScaleX;  //strap back is the same size as the strap front (until we rework it a tad below)  				}  				else  				{  					// if the user is moving the ninja outside the max stretch of the slingShot    					float angleRadians = CCMacros.CCDegreesToRadians(angle - 90);  					positionInSling.X = slingShotCenterPosition.X - ((float)Math.Cos(angleRadians) * radius);  					positionInSling.Y = slingShotCenterPosition.Y + ((float)Math.Sin(angleRadians) * radius);    					strapFront.ScaleX = 1;  					strapBack.ScaleX = 1;  				}    				strapFront.Rotation = angle - 90;  				AdjustBackStrap(angle);    				//positions the box2D bodyNode of the ninja  				b2Vec2 locationInMeters = new b2Vec2(positionInSling.X / Constants.PTM_RATIO' positionInSling.Y / Constants.PTM_RATIO);  				currentBodyNode.Body.SetTransform(locationInMeters' CCMacros.CCDegreesToRadians(currentAngle));  				currentBodyNode.SpriteInPulledBackSlingState();  				return (true);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,CockTheSlingshot,The following statement contains a magic number: if ((this.CheckCircleCollision(pt' 2' slingShotCenterPosition' maxStretchOfSlingShot) || slingShotNinjaInHand)  				&& !throwInProgress && areWeInTheStartingPosition)  			{  				if (!slingShotNinjaInHand)  				{    					positionInSling = slingShotCenterPosition;  					slingShotNinjaInHand = true;    					strapBack.Visible = true;  					strapFront.Visible = true;  					strapEmpty.Visible = false;  				}    				float currentAngle = (int)currentBodyNode.Body.Angle;  				float radius = maxStretchOfSlingShot; //radius of slingShot  				float angle = CalculateAngle(pt.X' pt.Y' slingShotCenterPosition.X' slingShotCenterPosition.Y);  //angle from slingShot center to the location of the touch    				// if the user is moving the ninja within the max stretch of the slingShot  (the radius)  				if (this.CheckCircleCollision(pt' 2' slingShotCenterPosition' radius))  				{  					positionInSling.X = pt.X;  					positionInSling.Y = pt.Y;    					//tie the strap size into the location of the touch in relation to the distance from the slingshot center    					float scaleStrap = (Math.Abs(slingShotCenterPosition.X - pt.X)) / radius;  					scaleStrap = scaleStrap + 0.3f;  //add a little extra    					if (scaleStrap > 1)  					{  //make sure it doesn't go over 100% scale  						scaleStrap = 1;  					}    					strapFront.ScaleX = scaleStrap;  					strapBack.ScaleX = strapFront.ScaleX;  //strap back is the same size as the strap front (until we rework it a tad below)  				}  				else  				{  					// if the user is moving the ninja outside the max stretch of the slingShot    					float angleRadians = CCMacros.CCDegreesToRadians(angle - 90);  					positionInSling.X = slingShotCenterPosition.X - ((float)Math.Cos(angleRadians) * radius);  					positionInSling.Y = slingShotCenterPosition.Y + ((float)Math.Sin(angleRadians) * radius);    					strapFront.ScaleX = 1;  					strapBack.ScaleX = 1;  				}    				strapFront.Rotation = angle - 90;  				AdjustBackStrap(angle);    				//positions the box2D bodyNode of the ninja  				b2Vec2 locationInMeters = new b2Vec2(positionInSling.X / Constants.PTM_RATIO' positionInSling.Y / Constants.PTM_RATIO);  				currentBodyNode.Body.SetTransform(locationInMeters' CCMacros.CCDegreesToRadians(currentAngle));  				currentBodyNode.SpriteInPulledBackSlingState();  				return (true);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,CockTheSlingshot,The following statement contains a magic number: if ((this.CheckCircleCollision(pt' 2' slingShotCenterPosition' maxStretchOfSlingShot) || slingShotNinjaInHand)  				&& !throwInProgress && areWeInTheStartingPosition)  			{  				if (!slingShotNinjaInHand)  				{    					positionInSling = slingShotCenterPosition;  					slingShotNinjaInHand = true;    					strapBack.Visible = true;  					strapFront.Visible = true;  					strapEmpty.Visible = false;  				}    				float currentAngle = (int)currentBodyNode.Body.Angle;  				float radius = maxStretchOfSlingShot; //radius of slingShot  				float angle = CalculateAngle(pt.X' pt.Y' slingShotCenterPosition.X' slingShotCenterPosition.Y);  //angle from slingShot center to the location of the touch    				// if the user is moving the ninja within the max stretch of the slingShot  (the radius)  				if (this.CheckCircleCollision(pt' 2' slingShotCenterPosition' radius))  				{  					positionInSling.X = pt.X;  					positionInSling.Y = pt.Y;    					//tie the strap size into the location of the touch in relation to the distance from the slingshot center    					float scaleStrap = (Math.Abs(slingShotCenterPosition.X - pt.X)) / radius;  					scaleStrap = scaleStrap + 0.3f;  //add a little extra    					if (scaleStrap > 1)  					{  //make sure it doesn't go over 100% scale  						scaleStrap = 1;  					}    					strapFront.ScaleX = scaleStrap;  					strapBack.ScaleX = strapFront.ScaleX;  //strap back is the same size as the strap front (until we rework it a tad below)  				}  				else  				{  					// if the user is moving the ninja outside the max stretch of the slingShot    					float angleRadians = CCMacros.CCDegreesToRadians(angle - 90);  					positionInSling.X = slingShotCenterPosition.X - ((float)Math.Cos(angleRadians) * radius);  					positionInSling.Y = slingShotCenterPosition.Y + ((float)Math.Sin(angleRadians) * radius);    					strapFront.ScaleX = 1;  					strapBack.ScaleX = 1;  				}    				strapFront.Rotation = angle - 90;  				AdjustBackStrap(angle);    				//positions the box2D bodyNode of the ninja  				b2Vec2 locationInMeters = new b2Vec2(positionInSling.X / Constants.PTM_RATIO' positionInSling.Y / Constants.PTM_RATIO);  				currentBodyNode.Body.SetTransform(locationInMeters' CCMacros.CCDegreesToRadians(currentAngle));  				currentBodyNode.SpriteInPulledBackSlingState();  				return (true);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,CalculateAngle,The following statement contains a magic number: float angle = 180 + ((float)Math.Atan2(-x' -y) * (180 / (float)Math.PI));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,CalculateAngle,The following statement contains a magic number: float angle = 180 + ((float)Math.Atan2(-x' -y) * (180 / (float)Math.PI));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ReturnAmountToShiftScreen,The following statement contains a magic number: if (diff > 50)  				amountToShiftScreen = 50;  			else if (diff < -50)  				amountToShiftScreen = -50;  			else  				amountToShiftScreen = diff;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ReturnAmountToShiftScreen,The following statement contains a magic number: if (diff > 50)  				amountToShiftScreen = 50;  			else if (diff < -50)  				amountToShiftScreen = -50;  			else  				amountToShiftScreen = diff;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ReturnAmountToShiftScreen,The following statement contains a magic number: if (diff > 50)  				amountToShiftScreen = 50;  			else if (diff < -50)  				amountToShiftScreen = -50;  			else  				amountToShiftScreen = diff;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ReturnAmountToShiftScreen,The following statement contains a magic number: if (diff > 50)  				amountToShiftScreen = 50;  			else if (diff < -50)  				amountToShiftScreen = -50;  			else  				amountToShiftScreen = diff;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,FireSlignshot,The following statement contains a magic number: speed = speed / 5;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,RemovePreviousDots,The following statement contains a magic number: if (throwCount % 2 == 0)  				//if (throwCount % 2 != 0)  			{  //odd numbered turn..  				while (someNum <= dotTotalOnOddNumberedTurn)  				{  					RemoveChildByTag(Constants.TagForWhiteDotsOddNumberedTurn + someNum' false);  					someNum++;  				}  				dotTotalOnOddNumberedTurn = 0;  			}  			else  			{ //even numbered turn..  				while (someNum <= dotTotalOnEvenNumberedTurn)  				{  					RemoveChildByTag(Constants.TagForWhiteDotsEvenNumberedTurn + someNum' false);  					someNum++;  				}    				dotTotalOnEvenNumberedTurn = 0;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,PlaceWhiteDots,The following statement contains a magic number: if (dottingOn)  			{  				dotCount++;  				CCSprite whiteDot = new CCSprite(@"circle");    				if (throwCount % 2 != 0)  				{  //odd number..  					AddChild(whiteDot' Constants.DepthWhiteDots' Constants.TagForWhiteDotsOddNumberedTurn + dotCount);  					dotTotalOnOddNumberedTurn = dotCount;  				}  				else  				{  					AddChild(whiteDot' Constants.DepthWhiteDots' Constants.TagForWhiteDotsEvenNumberedTurn + dotCount);  					dotTotalOnEvenNumberedTurn = dotCount;  				}    				whiteDot.PositionX = currentBodyNode.PositionX;  				whiteDot.PositionY = currentBodyNode.PositionY;    				if (dotCount % 2 != 0)  					whiteDot.Scale = .5f;  			}  			else  			{  				Unschedule(PlaceWhiteDots);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,PlaceWhiteDots,The following statement contains a magic number: if (dottingOn)  			{  				dotCount++;  				CCSprite whiteDot = new CCSprite(@"circle");    				if (throwCount % 2 != 0)  				{  //odd number..  					AddChild(whiteDot' Constants.DepthWhiteDots' Constants.TagForWhiteDotsOddNumberedTurn + dotCount);  					dotTotalOnOddNumberedTurn = dotCount;  				}  				else  				{  					AddChild(whiteDot' Constants.DepthWhiteDots' Constants.TagForWhiteDotsEvenNumberedTurn + dotCount);  					dotTotalOnEvenNumberedTurn = dotCount;  				}    				whiteDot.PositionX = currentBodyNode.PositionX;  				whiteDot.PositionY = currentBodyNode.PositionY;    				if (dotCount % 2 != 0)  					whiteDot.Scale = .5f;  			}  			else  			{  				Unschedule(PlaceWhiteDots);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AutoScreenPanToTargets,The following statement contains a magic number: if (panAmount > 3)  				panAmount = panAmount - .5f;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AutoScreenPanToTargets,The following statement contains a magic number: if (this.PositionX > worldMaxHorizontalShift)  			{  				if (this.PositionX > worldMaxHorizontalShift && this.PositionX < worldMaxHorizontalShift + 50)  				{  //slows down panning when close to finishing    					MoveScreen(3);  				}  				else  				{  					MoveScreen((int)panAmount);  				}  			}  			else  			{  				Unschedule(AutoScreenPanToTargets);  				PutEverythingInViewOfTargets();    				if (autoReverseOn)  					Schedule(StartScreenPanToSlingIfScoringIsNotOccuring' 2.0f);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AutoScreenPanToTargets,The following statement contains a magic number: if (this.PositionX > worldMaxHorizontalShift)  			{  				if (this.PositionX > worldMaxHorizontalShift && this.PositionX < worldMaxHorizontalShift + 50)  				{  //slows down panning when close to finishing    					MoveScreen(3);  				}  				else  				{  					MoveScreen((int)panAmount);  				}  			}  			else  			{  				Unschedule(AutoScreenPanToTargets);  				PutEverythingInViewOfTargets();    				if (autoReverseOn)  					Schedule(StartScreenPanToSlingIfScoringIsNotOccuring' 2.0f);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AutoScreenPanToSling,The following statement contains a magic number: if (panAmount > 3)  				panAmount = panAmount - .5f;
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AutoScreenPanToSling,The following statement contains a magic number: if (this.PositionX < 0)  			{                  //slows down panning when close to finishing  				if (this.PositionX < 0 && this.PositionX > -50)  					MoveScreen(-3);  				else  					MoveScreen((int)panAmount * -1);  			}  			else  			{  				Unschedule(AutoScreenPanToSling);  				PutEverythingInStartingViewOfSlingShot();    				autoPanningInProgress = false;  				this.Scale = 1;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AutoScreenPanToSling,The following statement contains a magic number: if (this.PositionX < 0)  			{                  //slows down panning when close to finishing  				if (this.PositionX < 0 && this.PositionX > -50)  					MoveScreen(-3);  				else  					MoveScreen((int)panAmount * -1);  			}  			else  			{  				Unschedule(AutoScreenPanToSling);  				PutEverythingInStartingViewOfSlingShot();    				autoPanningInProgress = false;  				this.Scale = 1;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,MoveScreenUp,The following statement contains a magic number: if (this.PositionY < 0)  			{  				//this.PositionX = this.Position.x;  				this.PositionY += 2;  			}  			else  			{  				this.PositionX = this.PositionX;  				this.PositionY = 0;    				Unschedule(MoveScreenUp);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,MoveScreenDown,The following statement contains a magic number: if (this.PositionY > adjustY)  			{  				this.PositionX = this.PositionX;  				this.PositionY -= 2;  			}  			else  			{  				this.PositionX = this.PositionX;  				this.PositionY = adjustY;  				Unschedule(MoveScreenDown);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,showSimpleVisualFX,The following statement contains a magic number: if (theSimpleScoreVisualFX == BreakEffect.SmokePuffs)  			{  				GameSounds.SharedGameSounds.PlayBreakSound();  				CCLog.Log("Play Smoke Puffs on Score");  				CustomAnimation smokeFX = new CustomAnimation("puffs"'  					1'  					7'  					(int)positionToShowScore.X'  					(int)positionToShowScore.Y'  					false'  					false'  					false'  					false);  				AddChild(smokeFX' Constants.DepthVisualFx);  			}  			else if (theSimpleScoreVisualFX == BreakEffect.Explosion)  			{  				GameSounds.SharedGameSounds.PlayBreakSound();  				CCLog.Log("Play explosion on Score");  				CustomAnimation smokeFX = new CustomAnimation("explosion"'  					1'  					11'  					(int)positionToShowScore.X'  					(int)positionToShowScore.Y'  					false'  					false'  					false'  					false);  				AddChild(smokeFX' Constants.DepthVisualFx);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,showSimpleVisualFX,The following statement contains a magic number: if (theSimpleScoreVisualFX == BreakEffect.SmokePuffs)  			{  				GameSounds.SharedGameSounds.PlayBreakSound();  				CCLog.Log("Play Smoke Puffs on Score");  				CustomAnimation smokeFX = new CustomAnimation("puffs"'  					1'  					7'  					(int)positionToShowScore.X'  					(int)positionToShowScore.Y'  					false'  					false'  					false'  					false);  				AddChild(smokeFX' Constants.DepthVisualFx);  			}  			else if (theSimpleScoreVisualFX == BreakEffect.Explosion)  			{  				GameSounds.SharedGameSounds.PlayBreakSound();  				CCLog.Log("Play explosion on Score");  				CustomAnimation smokeFX = new CustomAnimation("explosion"'  					1'  					11'  					(int)positionToShowScore.X'  					(int)positionToShowScore.Y'  					false'  					false'  					false'  					false);  				AddChild(smokeFX' Constants.DepthVisualFx);  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithImagesForValue,The following statement contains a magic number: if (pointValue == 100)  				scoreLabel = new CCSprite("100points");  			else if (pointValue == 500)  				scoreLabel = new CCSprite("500points");  			else if (pointValue == 1000)  				scoreLabel = new CCSprite("1000points");  			else if (pointValue == 5000)  				scoreLabel = new CCSprite("5000points");  			else if (pointValue == 10000)  				scoreLabel = new CCSprite("10000points");  			else  				scoreLabel = new CCSprite("100points");
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithImagesForValue,The following statement contains a magic number: if (pointValue == 100)  				scoreLabel = new CCSprite("100points");  			else if (pointValue == 500)  				scoreLabel = new CCSprite("500points");  			else if (pointValue == 1000)  				scoreLabel = new CCSprite("1000points");  			else if (pointValue == 5000)  				scoreLabel = new CCSprite("5000points");  			else if (pointValue == 10000)  				scoreLabel = new CCSprite("10000points");  			else  				scoreLabel = new CCSprite("100points");
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithImagesForValue,The following statement contains a magic number: if (pointValue == 100)  				scoreLabel = new CCSprite("100points");  			else if (pointValue == 500)  				scoreLabel = new CCSprite("500points");  			else if (pointValue == 1000)  				scoreLabel = new CCSprite("1000points");  			else if (pointValue == 5000)  				scoreLabel = new CCSprite("5000points");  			else if (pointValue == 10000)  				scoreLabel = new CCSprite("10000points");  			else  				scoreLabel = new CCSprite("100points");
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithImagesForValue,The following statement contains a magic number: if (pointValue == 100)  				scoreLabel = new CCSprite("100points");  			else if (pointValue == 500)  				scoreLabel = new CCSprite("500points");  			else if (pointValue == 1000)  				scoreLabel = new CCSprite("1000points");  			else if (pointValue == 5000)  				scoreLabel = new CCSprite("5000points");  			else if (pointValue == 10000)  				scoreLabel = new CCSprite("10000points");  			else  				scoreLabel = new CCSprite("100points");
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithImagesForValue,The following statement contains a magic number: if (pointValue == 100)  				scoreLabel = new CCSprite("100points");  			else if (pointValue == 500)  				scoreLabel = new CCSprite("500points");  			else if (pointValue == 1000)  				scoreLabel = new CCSprite("1000points");  			else if (pointValue == 5000)  				scoreLabel = new CCSprite("5000points");  			else if (pointValue == 10000)  				scoreLabel = new CCSprite("10000points");  			else  				scoreLabel = new CCSprite("100points");
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithImagesForValue,The following statement contains a magic number: CCMoveTo moveAction = new CCMoveTo(1.0f' new CCPoint(scoreLabel.Position.X' scoreLabel.Position.Y + 25));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithImagesForValue,The following statement contains a magic number: CCSequence seq = new CCSequence(  				new CCFadeTo(1.5f' 20)'  				new CCCallFuncN(RemoveThisChild));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithFontLabelForValue,The following statement contains a magic number: CCLabelTtf scoreLabel = new CCLabelTtf(string.Format("{0}"' pointValue)' "MarkerFelt"' 22);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithFontLabelForValue,The following statement contains a magic number: scoreLabel.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithFontLabelForValue,The following statement contains a magic number: scoreLabel.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithFontLabelForValue,The following statement contains a magic number: scoreLabel.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithFontLabelForValue,The following statement contains a magic number: CCMoveTo moveAction = new CCMoveTo(1.0f' new CCPoint(scoreLabel.Position.X' scoreLabel.Position.Y + 25));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowPointsWithFontLabelForValue,The following statement contains a magic number: CCSequence seq = new CCSequence(  				new CCFadeTo(1.5f' 20)'  				new CCCallFuncN(RemoveThisLabel));
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,AdjustBackStrap,The following statement contains a magic number: if (angle < 30)  			{  				//CCLog.Log(" between 6 and 7 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.0f;  				strapBack.RotationX = strapFront.RotationX * .8f;  				strapBack.RotationY = strapFront.RotationY * .8f;  			}  			else if (angle < 60)  			{  				//CCLog.Log(" between 7 and 8 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.05f;  				strapBack.RotationX = strapFront.RotationX * .80f;  				strapBack.RotationY = strapFront.RotationY * .80f;  			}  			else if (angle < 90)  			{  				//CCLog.Log(" between 8 and 9 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.1f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 120)  			{  				//CCLog.Log(" between 9 and 10 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .95f;  				strapBack.RotationY = strapFront.RotationY * .95f;    			}  			else if (angle < 150)  			{  				//CCLog.Log(" between 10 and 11 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.2f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;  			}  			else if (angle < 180)  			{  				//CCLog.Log(" between 11 and 12 oclock");  				strapBack.ScaleX = strapBack.ScaleX * 1.10f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 210)  			{  				//CCLog.Log(" between 12 and 1 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .95f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;  			}  			else if (angle < 240)  			{  				//CCLog.Log(" between 1 and 2 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .7f;  				strapBack.RotationX = strapFront.RotationX * .85f;  				strapBack.RotationY = strapFront.RotationY * .85f;    			}  			else if (angle < 270)  			{  				//CCLog.Log(" between 2 and 3 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * .9f;  				strapBack.RotationY = strapFront.RotationY * .9f;    			}  			else if (angle < 300)  			{  				//CCLog.Log(" between 3 and 4 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .5f;  				strapBack.RotationX = strapFront.RotationX * 1.0f;  				strapBack.RotationY = strapFront.RotationY * 1.0f;    			}  			else if (angle < 330)  			{  				//CCLog.Log(" between 4 and 5 oclock");  				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;    			}    			else if (angle < 360)  			{  				//CCLog.Log(" between 5 and 6 oclock");    				strapBack.ScaleX = strapBack.ScaleX * .6f;  				strapBack.RotationX = strapFront.RotationX * 1.1f;  				strapBack.RotationY = strapFront.RotationY * 1.1f;  			}
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowBoardMessage,The following statement contains a magic number: CCLabelTtf boardMessage = new CCLabelTtf(theMessage' "MarkerFelt"' 22);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowBoardMessage,The following statement contains a magic number: boardMessage.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowBoardMessage,The following statement contains a magic number: boardMessage.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowBoardMessage,The following statement contains a magic number: boardMessage.Color = new CCColor3B(255' 255' 255);
Magic Number,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,ShowBoardMessage,The following statement contains a magic number: boardMessage.PositionX = screenWidth / 2;
Magic Number,CocosSharp,b2VecHelper,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,ToCCColor4B,The following statement contains a magic number: return new CCColor4B (color.r' color.g' color.b' 255);
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,CCBox2dDraw,The following statement contains a magic number: primitiveBatch = new CCPrimitiveBatch(5000);
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawSolidPolygon,The following statement contains a magic number: if (vertexCount == 2)              {                  DrawPolygon(vertices' vertexCount' color);                  return;              }
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawCircle,The following statement contains a magic number: const double increment = Math.PI * 2.0 / CircleSegments;
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawSolidCircle,The following statement contains a magic number: const double increment = Math.PI * 2.0 / CircleSegments;
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawPoint,The following statement contains a magic number: b2Vec2[] verts = new b2Vec2[4];
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawPoint,The following statement contains a magic number: verts[2] = p + new b2Vec2(hs' hs);
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawPoint,The following statement contains a magic number: verts[3] = p + new b2Vec2(-hs' hs);
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawPoint,The following statement contains a magic number: DrawSolidPolygon(verts' 4' color);
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawAABB,The following statement contains a magic number: b2Vec2[] verts = new b2Vec2[4];
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawAABB,The following statement contains a magic number: verts[2] = new b2Vec2(aabb.UpperBound.x' aabb.UpperBound.y);
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawAABB,The following statement contains a magic number: verts[3] = new b2Vec2(aabb.LowerBound.x' aabb.UpperBound.y);
Magic Number,CocosSharp,CCBox2dDraw,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\win32\Extensions\CCDraw.cs,DrawAABB,The following statement contains a magic number: DrawPolygon(verts' 4' p1);
Duplicate Code,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,The method contains a code clone-set at the following line numbers (starting from the method definition): ((100' 121)' (135' 156))
Duplicate Code,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,The method contains a code clone-set at the following line numbers (starting from the method definition): ((169' 198)' (204' 233))
Duplicate Code,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,The method contains a code clone-set at the following line numbers (starting from the method definition): ((171' 198)' (246' 273)' (281' 308)' (206' 233))
Duplicate Code,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,The method contains a code clone-set at the following line numbers (starting from the method definition): ((206' 234)' (281' 309))
Duplicate Code,AngryNinjas,ContactListener,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\listeners\ContactListener.cs,BeginContact,The method contains a code clone-set at the following line numbers (starting from the method definition): ((244' 264)' (279' 299))
Missing Default,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,PlayStackImpactSound,The following switch statement is missing a default case: switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("impact5"));                          break;                  }
Missing Default,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,PlayBreakSound,The following switch statement is missing a default case: switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("break1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("break2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("break3"));                          break;                  }
Missing Default,AngryNinjas,GameSounds,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\custom\GameSounds.cs,ReleaseSlingSounds,The following switch statement is missing a default case: switch (randomNum)                  {                      case 0:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt1"));                          break;                      case 1:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt2"));                          break;                      case 2:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt3"));                          break;                      case 3:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt4"));                          break;                      case 4:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt5"));                          break;                      case 5:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt6"));                          break;                      case 6:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt7"));                          break;                      case 7:                          CCSimpleAudioEngine.SharedEngine.PlayEffect(FormatSoundFilePath("grunt8"));                          break;                  }
Missing Default,AngryNinjas,TheLevel,C:\repos\mono_cocos-sharp-samples\AngryNinjas\src\common\levels\TheLevel.cs,MoveNextNinjaIntoSling,The following switch statement is missing a default case: switch (ninjaBeingThrown)  					{  						case 2:  							currentBodyNode = ninja2;  							break;  						case 3:  							currentBodyNode = ninja3;  							break;  						case 4:  							currentBodyNode = ninja4;  							break;  						case 5:  							currentBodyNode = ninja5;  							break;    					}
