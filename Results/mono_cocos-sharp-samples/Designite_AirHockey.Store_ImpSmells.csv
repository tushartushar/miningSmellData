Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,TouchesMoved,Cyclomatic complexity of the method is 11
Complex Method,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,Cyclomatic complexity of the method is 11
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,AddedToScene,The following statement contains a magic number: _player2.SetPosition(new CCPoint(_screenSize.Width * 0.5f' _screenSize.Height - _player1.RotationX * 2));
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,AddedToScene,The following statement contains a magic number: _player1ScoreLabel = new CCLabelTtf("0"' "MarkerFelt"' 22);
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,AddedToScene,The following statement contains a magic number: _player1ScoreLabel.Rotation = 90;
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,AddedToScene,The following statement contains a magic number: _player2ScoreLabel = new CCLabelTtf("0"' "MarkerFelt"' 22);
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,AddedToScene,The following statement contains a magic number: _player2ScoreLabel.Rotation = 90;
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,TouchesBegan,The following statement contains a magic number: foreach (CCTouch touch in touches)  			{    				if (touch != null)  				{  					//get location in OpenGL view  					tap = touch.Location; //??ΏΏ?Ώ?  					//tap.Y = Window.WindowSizeInPixels.Height - tap.Y;  					//CCPoint.Rotate()  					//tap = CCPoint.RotateByAngle(touch.Location' new CCPoint(0'0)  ' 90);// ;  (touch.Location' touch.Location' 90);  					//loop through players and check to see if touch is landing on one of them  					for (int p = 0; p < 2; p++)  					{  						player = (GameSprite)_players[p];  						// var eee = RotatePoint(tap'player.Position' player);      						if (player.BoundingBox.ContainsPoint(tap))  						{  							//store player's touch   							player.Touch = touch;  						}  					}  				}    			}
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: float squared_radii = (float)Math.Pow(_player1.radius + _ball.radius' 2);
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int p = 0; p < _players.Length; p++)  			{    				//if (p == 0)  				//    continue;    				player = _players[p];  				playerNextPosition = player.NextPosition;  				playerVector = player.Vector;    				float diffx = ballNextPosition.X - player.PositionX;  				float diffy = ballNextPosition.Y - player.PositionY;    				float distance1 = (float) ( Math.Pow(diffx' 2) + Math.Pow(diffy' 2));    				float distance2 = (float) (Math.Pow(_ball.PositionX - playerNextPosition.X' 2) +  					Math.Pow(_ball.PositionY - playerNextPosition.Y' 2));    				if (distance1 <= squared_radii || distance2 <= squared_radii)  				{    					float mag_ball = (float)(Math.Pow(ballVector.X' 2) + Math.Pow(ballVector.Y' 2));  					float mag_player = (float) (Math.Pow(playerVector.X' 2) + Math.Pow(playerVector.Y' 2));    					float force =(float) Math.Sqrt(mag_ball + mag_player);  					float angle = (float) Math.Atan2(diffy' diffx);    					ballVector.X = (float) (force * Math.Cos(angle));  					ballVector.Y = (float)(force * Math.Sin(angle));    					ballNextPosition.X = (float)( playerNextPosition.X + (player.radius + _ball.radius + force) *  Math.Cos(angle));  					ballNextPosition.Y = (float) ( playerNextPosition.Y + (player.radius + _ball.radius + force) *  Math.Sin(angle));    					PlayHit(); //CCSimpleAudioEngine.SharedEngine.PlayEffect("hit");  				}  			}
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int p = 0; p < _players.Length; p++)  			{    				//if (p == 0)  				//    continue;    				player = _players[p];  				playerNextPosition = player.NextPosition;  				playerVector = player.Vector;    				float diffx = ballNextPosition.X - player.PositionX;  				float diffy = ballNextPosition.Y - player.PositionY;    				float distance1 = (float) ( Math.Pow(diffx' 2) + Math.Pow(diffy' 2));    				float distance2 = (float) (Math.Pow(_ball.PositionX - playerNextPosition.X' 2) +  					Math.Pow(_ball.PositionY - playerNextPosition.Y' 2));    				if (distance1 <= squared_radii || distance2 <= squared_radii)  				{    					float mag_ball = (float)(Math.Pow(ballVector.X' 2) + Math.Pow(ballVector.Y' 2));  					float mag_player = (float) (Math.Pow(playerVector.X' 2) + Math.Pow(playerVector.Y' 2));    					float force =(float) Math.Sqrt(mag_ball + mag_player);  					float angle = (float) Math.Atan2(diffy' diffx);    					ballVector.X = (float) (force * Math.Cos(angle));  					ballVector.Y = (float)(force * Math.Sin(angle));    					ballNextPosition.X = (float)( playerNextPosition.X + (player.radius + _ball.radius + force) *  Math.Cos(angle));  					ballNextPosition.Y = (float) ( playerNextPosition.Y + (player.radius + _ball.radius + force) *  Math.Sin(angle));    					PlayHit(); //CCSimpleAudioEngine.SharedEngine.PlayEffect("hit");  				}  			}
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int p = 0; p < _players.Length; p++)  			{    				//if (p == 0)  				//    continue;    				player = _players[p];  				playerNextPosition = player.NextPosition;  				playerVector = player.Vector;    				float diffx = ballNextPosition.X - player.PositionX;  				float diffy = ballNextPosition.Y - player.PositionY;    				float distance1 = (float) ( Math.Pow(diffx' 2) + Math.Pow(diffy' 2));    				float distance2 = (float) (Math.Pow(_ball.PositionX - playerNextPosition.X' 2) +  					Math.Pow(_ball.PositionY - playerNextPosition.Y' 2));    				if (distance1 <= squared_radii || distance2 <= squared_radii)  				{    					float mag_ball = (float)(Math.Pow(ballVector.X' 2) + Math.Pow(ballVector.Y' 2));  					float mag_player = (float) (Math.Pow(playerVector.X' 2) + Math.Pow(playerVector.Y' 2));    					float force =(float) Math.Sqrt(mag_ball + mag_player);  					float angle = (float) Math.Atan2(diffy' diffx);    					ballVector.X = (float) (force * Math.Cos(angle));  					ballVector.Y = (float)(force * Math.Sin(angle));    					ballNextPosition.X = (float)( playerNextPosition.X + (player.radius + _ball.radius + force) *  Math.Cos(angle));  					ballNextPosition.Y = (float) ( playerNextPosition.Y + (player.radius + _ball.radius + force) *  Math.Sin(angle));    					PlayHit(); //CCSimpleAudioEngine.SharedEngine.PlayEffect("hit");  				}  			}
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int p = 0; p < _players.Length; p++)  			{    				//if (p == 0)  				//    continue;    				player = _players[p];  				playerNextPosition = player.NextPosition;  				playerVector = player.Vector;    				float diffx = ballNextPosition.X - player.PositionX;  				float diffy = ballNextPosition.Y - player.PositionY;    				float distance1 = (float) ( Math.Pow(diffx' 2) + Math.Pow(diffy' 2));    				float distance2 = (float) (Math.Pow(_ball.PositionX - playerNextPosition.X' 2) +  					Math.Pow(_ball.PositionY - playerNextPosition.Y' 2));    				if (distance1 <= squared_radii || distance2 <= squared_radii)  				{    					float mag_ball = (float)(Math.Pow(ballVector.X' 2) + Math.Pow(ballVector.Y' 2));  					float mag_player = (float) (Math.Pow(playerVector.X' 2) + Math.Pow(playerVector.Y' 2));    					float force =(float) Math.Sqrt(mag_ball + mag_player);  					float angle = (float) Math.Atan2(diffy' diffx);    					ballVector.X = (float) (force * Math.Cos(angle));  					ballVector.Y = (float)(force * Math.Sin(angle));    					ballNextPosition.X = (float)( playerNextPosition.X + (player.radius + _ball.radius + force) *  Math.Cos(angle));  					ballNextPosition.Y = (float) ( playerNextPosition.Y + (player.radius + _ball.radius + force) *  Math.Sin(angle));    					PlayHit(); //CCSimpleAudioEngine.SharedEngine.PlayEffect("hit");  				}  			}
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int p = 0; p < _players.Length; p++)  			{    				//if (p == 0)  				//    continue;    				player = _players[p];  				playerNextPosition = player.NextPosition;  				playerVector = player.Vector;    				float diffx = ballNextPosition.X - player.PositionX;  				float diffy = ballNextPosition.Y - player.PositionY;    				float distance1 = (float) ( Math.Pow(diffx' 2) + Math.Pow(diffy' 2));    				float distance2 = (float) (Math.Pow(_ball.PositionX - playerNextPosition.X' 2) +  					Math.Pow(_ball.PositionY - playerNextPosition.Y' 2));    				if (distance1 <= squared_radii || distance2 <= squared_radii)  				{    					float mag_ball = (float)(Math.Pow(ballVector.X' 2) + Math.Pow(ballVector.Y' 2));  					float mag_player = (float) (Math.Pow(playerVector.X' 2) + Math.Pow(playerVector.Y' 2));    					float force =(float) Math.Sqrt(mag_ball + mag_player);  					float angle = (float) Math.Atan2(diffy' diffx);    					ballVector.X = (float) (force * Math.Cos(angle));  					ballVector.Y = (float)(force * Math.Sin(angle));    					ballNextPosition.X = (float)( playerNextPosition.X + (player.radius + _ball.radius + force) *  Math.Cos(angle));  					ballNextPosition.Y = (float) ( playerNextPosition.Y + (player.radius + _ball.radius + force) *  Math.Sin(angle));    					PlayHit(); //CCSimpleAudioEngine.SharedEngine.PlayEffect("hit");  				}  			}
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int p = 0; p < _players.Length; p++)  			{    				//if (p == 0)  				//    continue;    				player = _players[p];  				playerNextPosition = player.NextPosition;  				playerVector = player.Vector;    				float diffx = ballNextPosition.X - player.PositionX;  				float diffy = ballNextPosition.Y - player.PositionY;    				float distance1 = (float) ( Math.Pow(diffx' 2) + Math.Pow(diffy' 2));    				float distance2 = (float) (Math.Pow(_ball.PositionX - playerNextPosition.X' 2) +  					Math.Pow(_ball.PositionY - playerNextPosition.Y' 2));    				if (distance1 <= squared_radii || distance2 <= squared_radii)  				{    					float mag_ball = (float)(Math.Pow(ballVector.X' 2) + Math.Pow(ballVector.Y' 2));  					float mag_player = (float) (Math.Pow(playerVector.X' 2) + Math.Pow(playerVector.Y' 2));    					float force =(float) Math.Sqrt(mag_ball + mag_player);  					float angle = (float) Math.Atan2(diffy' diffx);    					ballVector.X = (float) (force * Math.Cos(angle));  					ballVector.Y = (float)(force * Math.Sin(angle));    					ballNextPosition.X = (float)( playerNextPosition.X + (player.radius + _ball.radius + force) *  Math.Cos(angle));  					ballNextPosition.Y = (float) ( playerNextPosition.Y + (player.radius + _ball.radius + force) *  Math.Sin(angle));    					PlayHit(); //CCSimpleAudioEngine.SharedEngine.PlayEffect("hit");  				}  			}
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int p = 0; p < _players.Length; p++)  			{    				//if (p == 0)  				//    continue;    				player = _players[p];  				playerNextPosition = player.NextPosition;  				playerVector = player.Vector;    				float diffx = ballNextPosition.X - player.PositionX;  				float diffy = ballNextPosition.Y - player.PositionY;    				float distance1 = (float) ( Math.Pow(diffx' 2) + Math.Pow(diffy' 2));    				float distance2 = (float) (Math.Pow(_ball.PositionX - playerNextPosition.X' 2) +  					Math.Pow(_ball.PositionY - playerNextPosition.Y' 2));    				if (distance1 <= squared_radii || distance2 <= squared_radii)  				{    					float mag_ball = (float)(Math.Pow(ballVector.X' 2) + Math.Pow(ballVector.Y' 2));  					float mag_player = (float) (Math.Pow(playerVector.X' 2) + Math.Pow(playerVector.Y' 2));    					float force =(float) Math.Sqrt(mag_ball + mag_player);  					float angle = (float) Math.Atan2(diffy' diffx);    					ballVector.X = (float) (force * Math.Cos(angle));  					ballVector.Y = (float)(force * Math.Sin(angle));    					ballNextPosition.X = (float)( playerNextPosition.X + (player.radius + _ball.radius + force) *  Math.Cos(angle));  					ballNextPosition.Y = (float) ( playerNextPosition.Y + (player.radius + _ball.radius + force) *  Math.Sin(angle));    					PlayHit(); //CCSimpleAudioEngine.SharedEngine.PlayEffect("hit");  				}  			}
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int p = 0; p < _players.Length; p++)  			{    				//if (p == 0)  				//    continue;    				player = _players[p];  				playerNextPosition = player.NextPosition;  				playerVector = player.Vector;    				float diffx = ballNextPosition.X - player.PositionX;  				float diffy = ballNextPosition.Y - player.PositionY;    				float distance1 = (float) ( Math.Pow(diffx' 2) + Math.Pow(diffy' 2));    				float distance2 = (float) (Math.Pow(_ball.PositionX - playerNextPosition.X' 2) +  					Math.Pow(_ball.PositionY - playerNextPosition.Y' 2));    				if (distance1 <= squared_radii || distance2 <= squared_radii)  				{    					float mag_ball = (float)(Math.Pow(ballVector.X' 2) + Math.Pow(ballVector.Y' 2));  					float mag_player = (float) (Math.Pow(playerVector.X' 2) + Math.Pow(playerVector.Y' 2));    					float force =(float) Math.Sqrt(mag_ball + mag_player);  					float angle = (float) Math.Atan2(diffy' diffx);    					ballVector.X = (float) (force * Math.Cos(angle));  					ballVector.Y = (float)(force * Math.Sin(angle));    					ballNextPosition.X = (float)( playerNextPosition.X + (player.radius + _ball.radius + force) *  Math.Cos(angle));  					ballNextPosition.Y = (float) ( playerNextPosition.Y + (player.radius + _ball.radius + force) *  Math.Sin(angle));    					PlayHit(); //CCSimpleAudioEngine.SharedEngine.PlayEffect("hit");  				}  			}
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if (ballNextPosition.Y < -_ball.radius * 2)  				playerScore(2);
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if (ballNextPosition.Y < -_ball.radius * 2)  				playerScore(2);
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if (ballNextPosition.Y > _screenSize.Height + _ball.radius * 2)  			{  				playerScore(1);  			}
Magic Number,AirHockey.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\AirHockey\src\Common\IntroLayer.cs,playerScore,The following statement contains a magic number: _player1.Position = new CCPoint(_screenSize.Width * 0.5f' _player1.radius * 2);
