Implementation smell,Namespace,Class,File,Method,Description
Long Method,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The method has 105 lines of code.
Complex Method,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,Cyclomatic complexity of the method is 20
Long Statement,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createStarGrid,The length of the statement  "						if ((float)Math.Pow(planet.PositionX - cell.X' 2) + (float)Math.Pow(planet.PositionY - cell.Y' 2) <= (float)Math.Pow(planet._radius * 1.2f' 2)) " is 143.
Long Statement,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,TouchesEnded,The length of the statement  "					//	_pauseBtn.DisplayFrame = CCApplication.SharedApplication.SpriteFrameCache["btn_pause_on.png"]; // CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName ("btn_pause_on.png")); " is 187.
Long Statement,RocketThrought.Common,Rocket,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\Rocket.cs,select,The length of the statement  "				SpriteFrame = CCSpriteFrameCache.SharedSpriteFrameCache["rocket.png"];// CCSpriteFrameCache.SharedSpriteFrameCache.SpriteFrameByName("rocket.png"); " is 147.
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if (_comet.Visible)  			{    				//collision with comet  				if ((float)Math.Pow(_comet.PositionX - _rocket.PositionX' 2) +  					(float)Math.Pow(_comet.PositionY - _rocket.PositionY' 2) <= (float)Math.Pow(_rocket._radius' 2))  				{  					if (_rocket.Visible)  						killPlayer();  				}  				_comet.PositionX = _comet.PositionX + 50 * dt;  				if (_comet.PositionX > _screenSize.Width * 1.5f)  				{  					_comet.StopSystem();  					_comet.Visible = false;  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if (_comet.Visible)  			{    				//collision with comet  				if ((float)Math.Pow(_comet.PositionX - _rocket.PositionX' 2) +  					(float)Math.Pow(_comet.PositionY - _rocket.PositionY' 2) <= (float)Math.Pow(_rocket._radius' 2))  				{  					if (_rocket.Visible)  						killPlayer();  				}  				_comet.PositionX = _comet.PositionX + 50 * dt;  				if (_comet.PositionX > _screenSize.Width * 1.5f)  				{  					_comet.StopSystem();  					_comet.Visible = false;  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if (_comet.Visible)  			{    				//collision with comet  				if ((float)Math.Pow(_comet.PositionX - _rocket.PositionX' 2) +  					(float)Math.Pow(_comet.PositionY - _rocket.PositionY' 2) <= (float)Math.Pow(_rocket._radius' 2))  				{  					if (_rocket.Visible)  						killPlayer();  				}  				_comet.PositionX = _comet.PositionX + 50 * dt;  				if (_comet.PositionX > _screenSize.Width * 1.5f)  				{  					_comet.StopSystem();  					_comet.Visible = false;  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if (_comet.Visible)  			{    				//collision with comet  				if ((float)Math.Pow(_comet.PositionX - _rocket.PositionX' 2) +  					(float)Math.Pow(_comet.PositionY - _rocket.PositionY' 2) <= (float)Math.Pow(_rocket._radius' 2))  				{  					if (_rocket.Visible)  						killPlayer();  				}  				_comet.PositionX = _comet.PositionX + 50 * dt;  				if (_comet.PositionX > _screenSize.Width * 1.5f)  				{  					_comet.StopSystem();  					_comet.Visible = false;  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: _rocket.Opacity = (byte)(_lineContainer._energy * 255);
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				planet = _planets[i];    				if ((float)Math.Pow(planet.PositionX - _rocket.PositionX' 2)  					+ (float)Math.Pow(planet.PositionY - _rocket.PositionY' 2) <=  					(float)Math.Pow(_rocket._radius * 0.8f + planet._radius * 0.65f' 2))  				{    					if (_rocket.Visible)  						killPlayer();    					break;  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				planet = _planets[i];    				if ((float)Math.Pow(planet.PositionX - _rocket.PositionX' 2)  					+ (float)Math.Pow(planet.PositionY - _rocket.PositionY' 2) <=  					(float)Math.Pow(_rocket._radius * 0.8f + planet._radius * 0.65f' 2))  				{    					if (_rocket.Visible)  						killPlayer();    					break;  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				planet = _planets[i];    				if ((float)Math.Pow(planet.PositionX - _rocket.PositionX' 2)  					+ (float)Math.Pow(planet.PositionY - _rocket.PositionY' 2) <=  					(float)Math.Pow(_rocket._radius * 0.8f + planet._radius * 0.65f' 2))  				{    					if (_rocket.Visible)  						killPlayer();    					break;  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if ((float)Math.Pow(_star.PositionX - _rocket.PositionX' 2)  				+ (float)Math.Pow(_star.PositionY - _rocket.PositionY' 2) <=  				(float)Math.Pow(_rocket._radius * 1.2f' 2))  			{    				_pickup.Position = _star.Position;  				_pickup.ResetSystem();    				if (_lineContainer._energy + 0.25f < 1)  				{  					_lineContainer._energy = _lineContainer._energy + 0.25f;  				}  				else  				{  					_lineContainer._energy = 1.0f;  				}  				_rocket._speed = _rocket._speed + 2;  				_lineContainer.setEnergyDecrement(0.001f);    				CCSimpleAudioEngine.SharedEngine.PlayEffect("pickup");  				resetStar();    				int points = 100 - (int)_timeBetweenPickups;  				if (points < 0) points = 0;    				_score += points;    				_scoreDisplay.Text = String.Format("{0}"' _score);    				_timeBetweenPickups = 0;    			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if ((float)Math.Pow(_star.PositionX - _rocket.PositionX' 2)  				+ (float)Math.Pow(_star.PositionY - _rocket.PositionY' 2) <=  				(float)Math.Pow(_rocket._radius * 1.2f' 2))  			{    				_pickup.Position = _star.Position;  				_pickup.ResetSystem();    				if (_lineContainer._energy + 0.25f < 1)  				{  					_lineContainer._energy = _lineContainer._energy + 0.25f;  				}  				else  				{  					_lineContainer._energy = 1.0f;  				}  				_rocket._speed = _rocket._speed + 2;  				_lineContainer.setEnergyDecrement(0.001f);    				CCSimpleAudioEngine.SharedEngine.PlayEffect("pickup");  				resetStar();    				int points = 100 - (int)_timeBetweenPickups;  				if (points < 0) points = 0;    				_score += points;    				_scoreDisplay.Text = String.Format("{0}"' _score);    				_timeBetweenPickups = 0;    			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if ((float)Math.Pow(_star.PositionX - _rocket.PositionX' 2)  				+ (float)Math.Pow(_star.PositionY - _rocket.PositionY' 2) <=  				(float)Math.Pow(_rocket._radius * 1.2f' 2))  			{    				_pickup.Position = _star.Position;  				_pickup.ResetSystem();    				if (_lineContainer._energy + 0.25f < 1)  				{  					_lineContainer._energy = _lineContainer._energy + 0.25f;  				}  				else  				{  					_lineContainer._energy = 1.0f;  				}  				_rocket._speed = _rocket._speed + 2;  				_lineContainer.setEnergyDecrement(0.001f);    				CCSimpleAudioEngine.SharedEngine.PlayEffect("pickup");  				resetStar();    				int points = 100 - (int)_timeBetweenPickups;  				if (points < 0) points = 0;    				_score += points;    				_scoreDisplay.Text = String.Format("{0}"' _score);    				_timeBetweenPickups = 0;    			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if ((float)Math.Pow(_star.PositionX - _rocket.PositionX' 2)  				+ (float)Math.Pow(_star.PositionY - _rocket.PositionY' 2) <=  				(float)Math.Pow(_rocket._radius * 1.2f' 2))  			{    				_pickup.Position = _star.Position;  				_pickup.ResetSystem();    				if (_lineContainer._energy + 0.25f < 1)  				{  					_lineContainer._energy = _lineContainer._energy + 0.25f;  				}  				else  				{  					_lineContainer._energy = 1.0f;  				}  				_rocket._speed = _rocket._speed + 2;  				_lineContainer.setEnergyDecrement(0.001f);    				CCSimpleAudioEngine.SharedEngine.PlayEffect("pickup");  				resetStar();    				int points = 100 - (int)_timeBetweenPickups;  				if (points < 0) points = 0;    				_score += points;    				_scoreDisplay.Text = String.Format("{0}"' _score);    				_timeBetweenPickups = 0;    			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,Update,The following statement contains a magic number: if ((float)Math.Pow(_star.PositionX - _rocket.PositionX' 2)  				+ (float)Math.Pow(_star.PositionY - _rocket.PositionY' 2) <=  				(float)Math.Pow(_rocket._radius * 1.2f' 2))  			{    				_pickup.Position = _star.Position;  				_pickup.ResetSystem();    				if (_lineContainer._energy + 0.25f < 1)  				{  					_lineContainer._energy = _lineContainer._energy + 0.25f;  				}  				else  				{  					_lineContainer._energy = 1.0f;  				}  				_rocket._speed = _rocket._speed + 2;  				_lineContainer.setEnergyDecrement(0.001f);    				CCSimpleAudioEngine.SharedEngine.PlayEffect("pickup");  				resetStar();    				int points = 100 - (int)_timeBetweenPickups;  				if (points < 0) points = 0;    				_score += points;    				_scoreDisplay.Text = String.Format("{0}"' _score);    				_timeBetweenPickups = 0;    			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createGameScreen,The following statement contains a magic number: _gameBatchNode = new CCSpriteBatchNode("sprite_sheet.png"' 100);
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createGameScreen,The following statement contains a magic number: _scoreDisplay = new CCLabelTtf("0"' "MarkerFelt"' 22);
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createParticlesAsync,The following statement contains a magic number: var label = new CCLabelTtf("Loading..."' "MarkerFelt"' 22);
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createParticlesAsync,The following statement contains a magic number: AddChild(label' 10);
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createParticlesAsync,The following statement contains a magic number: var scale = new CCScaleBy(0.3f' 2);
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createParticlesAsync,The following statement contains a magic number: CCParticleSystemCache.SharedParticleSystemCache.AddParticleSystemAsync("jet.plist"'    				(jetConfig) =>  				{  					_jet = new CCParticleSystemQuad(jetConfig);  					_jet.SourcePosition = new CCPoint(-_rocket._radius * 0.8f' 0);  					_jet.Angle = 180;  					_jet.StopSystem();  					AddChild(_jet' kBackground);    					loadedParticleSystems++;  					updateLoading();  				});
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createParticles,The following statement contains a magic number: _jet.Angle = 180;
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createStarGrid,The following statement contains a magic number: int tile = 32;
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createStarGrid,The following statement contains a magic number: int rows = (int)((_screenSize.Height - 4 * gridFrame) / tile);
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createStarGrid,The following statement contains a magic number: int cols = (int)((_screenSize.Width - 2 * gridFrame) / tile);
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createStarGrid,The following statement contains a magic number: for (int r = 0; r < rows; r++)  			{  				for (int c = 0; c < cols; c++)  				{  					cell = new CCPoint(gridFrame + c * tile' 2 * gridFrame + r * tile);  					overlaps = false;  					for (int j = 0; j < count; j++)  					{  						planet = _planets[j];  						if ((float)Math.Pow(planet.PositionX - cell.X' 2) + (float)Math.Pow(planet.PositionY - cell.Y' 2) <= (float)Math.Pow(planet._radius * 1.2f' 2))  						{  							overlaps = true;  						}  					}    					if (!overlaps)  						_grid.Add(cell);  					//TODO: _grid.push_back(cell);  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createStarGrid,The following statement contains a magic number: for (int r = 0; r < rows; r++)  			{  				for (int c = 0; c < cols; c++)  				{  					cell = new CCPoint(gridFrame + c * tile' 2 * gridFrame + r * tile);  					overlaps = false;  					for (int j = 0; j < count; j++)  					{  						planet = _planets[j];  						if ((float)Math.Pow(planet.PositionX - cell.X' 2) + (float)Math.Pow(planet.PositionY - cell.Y' 2) <= (float)Math.Pow(planet._radius * 1.2f' 2))  						{  							overlaps = true;  						}  					}    					if (!overlaps)  						_grid.Add(cell);  					//TODO: _grid.push_back(cell);  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createStarGrid,The following statement contains a magic number: for (int r = 0; r < rows; r++)  			{  				for (int c = 0; c < cols; c++)  				{  					cell = new CCPoint(gridFrame + c * tile' 2 * gridFrame + r * tile);  					overlaps = false;  					for (int j = 0; j < count; j++)  					{  						planet = _planets[j];  						if ((float)Math.Pow(planet.PositionX - cell.X' 2) + (float)Math.Pow(planet.PositionY - cell.Y' 2) <= (float)Math.Pow(planet._radius * 1.2f' 2))  						{  							overlaps = true;  						}  					}    					if (!overlaps)  						_grid.Add(cell);  					//TODO: _grid.push_back(cell);  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,createStarGrid,The following statement contains a magic number: for (int r = 0; r < rows; r++)  			{  				for (int c = 0; c < cols; c++)  				{  					cell = new CCPoint(gridFrame + c * tile' 2 * gridFrame + r * tile);  					overlaps = false;  					for (int j = 0; j < count; j++)  					{  						planet = _planets[j];  						if ((float)Math.Pow(planet.PositionX - cell.X' 2) + (float)Math.Pow(planet.PositionY - cell.Y' 2) <= (float)Math.Pow(planet._radius * 1.2f' 2))  						{  							overlaps = true;  						}  					}    					if (!overlaps)  						_grid.Add(cell);  					//TODO: _grid.push_back(cell);  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,TouchesBegan,The following statement contains a magic number: if (touch != null)  			{    				var tap = touch.LocationOnScreen;  				tap.Y = Window.WindowSizeInPixels.Height - tap.Y;    				//track if tapping on ship  				float dx = _rocket.PositionX - tap.X;  				float dy = _rocket.PositionY - tap.Y;    				if (dx * dx + dy * dy <= (float)Math.Pow(_rocket._radius' 2))  				{  					_lineContainer._lineType = lineTypes.LINE_NONE;  					_rocket._rotationOrientation = Rocket.ROTATE_NONE; // ->setRotationOrientation(ROTATE_NONE);  					_drawing = true;  				}  			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,TouchesMoved,The following statement contains a magic number: if (_drawing)  			{    				CCTouch touch = (CCTouch)touches.FirstOrDefault();    				if (touch != null)  				{    					CCPoint tap = touch.LocationOnScreen;  					tap.Y = Window.WindowSizeInPixels.Height - tap.Y;    					float dx = _rocket.PositionX - tap.X;  					float dy = _rocket.PositionY - tap.Y;    					if (dx * dx + dy * dy > (float)Math.Pow(_minLineLength' 2))  					{  						_rocket.select(true);  						_lineContainer._pivot = tap;  						_lineContainer._lineType = lineTypes.LINE_TEMP;  					}  					else  					{  						_rocket.select(false);  						_lineContainer._lineType = lineTypes.LINE_NONE;  					}    				}    			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,TouchesEnded,The following statement contains a magic number: if (touch != null)  			{    				CCPoint tap = touch.LocationOnScreen; ; ; //??ΏΏ?Ώ?  				tap.Y = Window.WindowSizeInPixels.Height - tap.Y;    				if (_pauseBtn.BoundingBox.ContainsPoint(tap))  				{  					_paused.Visible = true;  					_state = gamestates.kGamePaused;  					//	_pauseBtn.DisplayFrame = CCApplication.SharedApplication.SpriteFrameCache["btn_pause_on.png"]; // CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName ("btn_pause_on.png"));  					_running = false;  					return;  				}    				//track if tapping on ship  				_drawing = false;  				_rocket.select(false);    				//if we are showing a temp line  				if (_lineContainer._lineType == lineTypes.LINE_TEMP)  				{  					//set up dashed line  					_lineContainer._pivot = tap;  					_lineContainer._lineLength = CCPoint.Distance(_rocket.Position' tap);    					//set up rocket  					_rocket._pivot = tap;  					float circle_length = _lineContainer._lineLength * 2 * CCMathHelper.Pi;    					int iterations = (int)Math.Floor(circle_length / _rocket._speed);  					_rocket._angularSpeed = 2 * CCMathHelper.Pi / iterations;    					CCPoint clockwise = CCPoint.PerpendicularCW(_rocket.Position - _rocket._pivot);    					float dot = CCPoint.Dot(clockwise' _rocket._vector);    					if (dot > 0)  					{  						_rocket._angularSpeed = (_rocket._angularSpeed * -1);  						_rocket._rotationOrientation = Rocket.ROTATE_CLOCKWISE;  						_rocket.setTargetRotation(MathHelper.ToDegrees((float)Math.Atan2(clockwise.Y' clockwise.X)));  					}  					else  					{    						_rocket._rotationOrientation = Rocket.ROTATE_COUNTER;  						_rocket._targetRotation = MathHelper.ToDegrees((float)Math.Atan2(-1 * clockwise.Y' -1 * clockwise.X));  					}    					_lineContainer._lineType = lineTypes.LINE_DASHED;  				}    			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,TouchesEnded,The following statement contains a magic number: if (touch != null)  			{    				CCPoint tap = touch.LocationOnScreen; ; ; //??ΏΏ?Ώ?  				tap.Y = Window.WindowSizeInPixels.Height - tap.Y;    				if (_pauseBtn.BoundingBox.ContainsPoint(tap))  				{  					_paused.Visible = true;  					_state = gamestates.kGamePaused;  					//	_pauseBtn.DisplayFrame = CCApplication.SharedApplication.SpriteFrameCache["btn_pause_on.png"]; // CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName ("btn_pause_on.png"));  					_running = false;  					return;  				}    				//track if tapping on ship  				_drawing = false;  				_rocket.select(false);    				//if we are showing a temp line  				if (_lineContainer._lineType == lineTypes.LINE_TEMP)  				{  					//set up dashed line  					_lineContainer._pivot = tap;  					_lineContainer._lineLength = CCPoint.Distance(_rocket.Position' tap);    					//set up rocket  					_rocket._pivot = tap;  					float circle_length = _lineContainer._lineLength * 2 * CCMathHelper.Pi;    					int iterations = (int)Math.Floor(circle_length / _rocket._speed);  					_rocket._angularSpeed = 2 * CCMathHelper.Pi / iterations;    					CCPoint clockwise = CCPoint.PerpendicularCW(_rocket.Position - _rocket._pivot);    					float dot = CCPoint.Dot(clockwise' _rocket._vector);    					if (dot > 0)  					{  						_rocket._angularSpeed = (_rocket._angularSpeed * -1);  						_rocket._rotationOrientation = Rocket.ROTATE_CLOCKWISE;  						_rocket.setTargetRotation(MathHelper.ToDegrees((float)Math.Atan2(clockwise.Y' clockwise.X)));  					}  					else  					{    						_rocket._rotationOrientation = Rocket.ROTATE_COUNTER;  						_rocket._targetRotation = MathHelper.ToDegrees((float)Math.Atan2(-1 * clockwise.Y' -1 * clockwise.X));  					}    					_lineContainer._lineType = lineTypes.LINE_DASHED;  				}    			}
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,resetGame,The following statement contains a magic number: _rocket.Opacity = 255;
Magic Number,RocketThrought.Common,IntroLayer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\IntroLayer.cs,resetGame,The following statement contains a magic number: _cometInterval = 4;
Magic Number,RocketThrought.Common,LineContainer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\LineContainer.cs,AddedToScene,The following statement contains a magic number: _dash = 10;
Magic Number,RocketThrought.Common,LineContainer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\LineContainer.cs,AddedToScene,The following statement contains a magic number: _dashSpace = 10;
Magic Number,RocketThrought.Common,LineContainer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\LineContainer.cs,Draw,The following statement contains a magic number: switch (_lineType)              {                  case lineTypes.LINE_NONE:                      break;                  case lineTypes.LINE_TEMP:                      drawNode.DrawLine(_tip' _pivot' color);                      drawNode.DrawCircle(_pivot' 10' 10' color);                      break;                    case lineTypes.LINE_DASHED:                      drawNode.DrawCircle(_pivot' 10' 10' color);                      int segments = (int)(_lineLength / (_dash + _dashSpace));                      float t = 0.0f;                      float x_;                      float y_;                        for (int i = 0; i < segments + 1; i++)                      {                          x_ = _pivot.X + t * (_tip.X - _pivot.X);                          y_ = _pivot.Y + t * (_tip.Y - _pivot.Y);                          drawNode.DrawCircle(new CCPoint(x_' y_)' 4' 6' color);                          t += (float)1 / segments;                      }                      break;              }
Magic Number,RocketThrought.Common,LineContainer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\LineContainer.cs,Draw,The following statement contains a magic number: switch (_lineType)              {                  case lineTypes.LINE_NONE:                      break;                  case lineTypes.LINE_TEMP:                      drawNode.DrawLine(_tip' _pivot' color);                      drawNode.DrawCircle(_pivot' 10' 10' color);                      break;                    case lineTypes.LINE_DASHED:                      drawNode.DrawCircle(_pivot' 10' 10' color);                      int segments = (int)(_lineLength / (_dash + _dashSpace));                      float t = 0.0f;                      float x_;                      float y_;                        for (int i = 0; i < segments + 1; i++)                      {                          x_ = _pivot.X + t * (_tip.X - _pivot.X);                          y_ = _pivot.Y + t * (_tip.Y - _pivot.Y);                          drawNode.DrawCircle(new CCPoint(x_' y_)' 4' 6' color);                          t += (float)1 / segments;                      }                      break;              }
Magic Number,RocketThrought.Common,LineContainer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\LineContainer.cs,Draw,The following statement contains a magic number: switch (_lineType)              {                  case lineTypes.LINE_NONE:                      break;                  case lineTypes.LINE_TEMP:                      drawNode.DrawLine(_tip' _pivot' color);                      drawNode.DrawCircle(_pivot' 10' 10' color);                      break;                    case lineTypes.LINE_DASHED:                      drawNode.DrawCircle(_pivot' 10' 10' color);                      int segments = (int)(_lineLength / (_dash + _dashSpace));                      float t = 0.0f;                      float x_;                      float y_;                        for (int i = 0; i < segments + 1; i++)                      {                          x_ = _pivot.X + t * (_tip.X - _pivot.X);                          y_ = _pivot.Y + t * (_tip.Y - _pivot.Y);                          drawNode.DrawCircle(new CCPoint(x_' y_)' 4' 6' color);                          t += (float)1 / segments;                      }                      break;              }
Magic Number,RocketThrought.Common,LineContainer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\LineContainer.cs,Draw,The following statement contains a magic number: switch (_lineType)              {                  case lineTypes.LINE_NONE:                      break;                  case lineTypes.LINE_TEMP:                      drawNode.DrawLine(_tip' _pivot' color);                      drawNode.DrawCircle(_pivot' 10' 10' color);                      break;                    case lineTypes.LINE_DASHED:                      drawNode.DrawCircle(_pivot' 10' 10' color);                      int segments = (int)(_lineLength / (_dash + _dashSpace));                      float t = 0.0f;                      float x_;                      float y_;                        for (int i = 0; i < segments + 1; i++)                      {                          x_ = _pivot.X + t * (_tip.X - _pivot.X);                          y_ = _pivot.Y + t * (_tip.Y - _pivot.Y);                          drawNode.DrawCircle(new CCPoint(x_' y_)' 4' 6' color);                          t += (float)1 / segments;                      }                      break;              }
Magic Number,RocketThrought.Common,LineContainer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\LineContainer.cs,Draw,The following statement contains a magic number: switch (_lineType)              {                  case lineTypes.LINE_NONE:                      break;                  case lineTypes.LINE_TEMP:                      drawNode.DrawLine(_tip' _pivot' color);                      drawNode.DrawCircle(_pivot' 10' 10' color);                      break;                    case lineTypes.LINE_DASHED:                      drawNode.DrawCircle(_pivot' 10' 10' color);                      int segments = (int)(_lineLength / (_dash + _dashSpace));                      float t = 0.0f;                      float x_;                      float y_;                        for (int i = 0; i < segments + 1; i++)                      {                          x_ = _pivot.X + t * (_tip.X - _pivot.X);                          y_ = _pivot.Y + t * (_tip.Y - _pivot.Y);                          drawNode.DrawCircle(new CCPoint(x_' y_)' 4' 6' color);                          t += (float)1 / segments;                      }                      break;              }
Magic Number,RocketThrought.Common,LineContainer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\LineContainer.cs,Draw,The following statement contains a magic number: switch (_lineType)              {                  case lineTypes.LINE_NONE:                      break;                  case lineTypes.LINE_TEMP:                      drawNode.DrawLine(_tip' _pivot' color);                      drawNode.DrawCircle(_pivot' 10' 10' color);                      break;                    case lineTypes.LINE_DASHED:                      drawNode.DrawCircle(_pivot' 10' 10' color);                      int segments = (int)(_lineLength / (_dash + _dashSpace));                      float t = 0.0f;                      float x_;                      float y_;                        for (int i = 0; i < segments + 1; i++)                      {                          x_ = _pivot.X + t * (_tip.X - _pivot.X);                          y_ = _pivot.Y + t * (_tip.Y - _pivot.Y);                          drawNode.DrawCircle(new CCPoint(x_' y_)' 4' 6' color);                          t += (float)1 / segments;                      }                      break;              }
Magic Number,RocketThrought.Common,Rocket,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\Rocket.cs,reset,The following statement contains a magic number: _speed = 50;
Magic Number,RocketThrought.Common,Rocket,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\Rocket.cs,reset,The following statement contains a magic number: Rotation = -90;
Magic Number,RocketThrought.Common,Rocket,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\Rocket.cs,reset,The following statement contains a magic number: _targetRotation = -90;
Magic Number,RocketThrought.Common,Rocket,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\Rocket.cs,Update,The following statement contains a magic number: if (_targetRotation > RotationX + 180)  			{  				_targetRotation -= 360;  			}
Magic Number,RocketThrought.Common,Rocket,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\Rocket.cs,Update,The following statement contains a magic number: if (_targetRotation > RotationX + 180)  			{  				_targetRotation -= 360;  			}
Magic Number,RocketThrought.Common,Rocket,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\Rocket.cs,Update,The following statement contains a magic number: if (_targetRotation < RotationX - 180)  			{  				_targetRotation += 360;  			}
Magic Number,RocketThrought.Common,Rocket,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\Rocket.cs,Update,The following statement contains a magic number: if (_targetRotation < RotationX - 180)  			{  				_targetRotation += 360;  			}
Missing Default,RocketThrought.Common,LineContainer,C:\repos\mono_cocos-sharp-samples\RocketThrough\src\Common\LineContainer.cs,Draw,The following switch statement is missing a default case: switch (_lineType)              {                  case lineTypes.LINE_NONE:                      break;                  case lineTypes.LINE_TEMP:                      drawNode.DrawLine(_tip' _pivot' color);                      drawNode.DrawCircle(_pivot' 10' 10' color);                      break;                    case lineTypes.LINE_DASHED:                      drawNode.DrawCircle(_pivot' 10' 10' color);                      int segments = (int)(_lineLength / (_dash + _dashSpace));                      float t = 0.0f;                      float x_;                      float y_;                        for (int i = 0; i < segments + 1; i++)                      {                          x_ = _pivot.X + t * (_tip.X - _pivot.X);                          y_ = _pivot.Y + t * (_tip.Y - _pivot.Y);                          drawNode.DrawCircle(new CCPoint(x_' y_)' 4' 6' color);                          t += (float)1 / segments;                      }                      break;              }
