Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawPolygon,Cyclomatic complexity of the method is 9
Complex Method,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,Cyclomatic complexity of the method is 8
Long Parameter List,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawSolidArc,The method has 5 parameters. Parameters: pos' radius' startAngle' sweepAngle' color
Long Parameter List,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawLine,The method has 5 parameters. Parameters: from' to' lineWidth' color' lineCap
Long Parameter List,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawEllipse,The method has 6 parameters. Parameters: x' y' width' height' lineWidth' color
Long Parameter List,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawEllipticalArc,The method has 6 parameters. Parameters: arcRect' lambda1' lambda2' isPieSlice' lineWidth' color
Long Parameter List,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawEllipticalArc,The method has 9 parameters. Parameters: x' y' width' height' lambda1' lambda2' isPieSlice' lineWidth' color
Long Parameter List,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawCubicBezier,The method has 7 parameters. Parameters: origin' control1' control2' destination' segments' lineWidth' color
Long Parameter List,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawQuadBezier,The method has 6 parameters. Parameters: origin' control' destination' segments' lineWidth' color
Long Parameter List,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawPolygon,The method has 6 parameters. Parameters: verts' count' fillColor' borderWidth' borderColor' closePolygon
Long Parameter List,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The method has 11 parameters. Parameters: start' x' y' width' height' startAngle' endAngle' antialiasing' isPieSlice' lineWidth' color
Long Parameter List,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The method has 11 parameters. Parameters: x' y' width' height' startAngle' sweepAngle' convert_units' antialiasing' isPieSlice' lineWidth' color
Long Parameter List,DrawNodeBuffer,SplineMath,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,CCCardinalSplineAt,The method has 6 parameters. Parameters: p0' p1' p2' p3' tension' t
Long Parameter List,DrawNodeBuffer,SplineMath,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,CubicBezier,The method has 5 parameters. Parameters: a' b' c' d' t
Long Statement,DrawNodeBuffer,SplineMath,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,CCCardinalSplineAt,The length of the statement  "             * Formula: s(-ttt + 2tt - t)P1 + s(-ttt + tt)P2 + (2ttt - 3tt + 1)P2 + s(ttt - 2tt + t)P3 + (-2ttt + 3tt)P3 + s(ttt - tt)P4 " is 123.
Long Statement,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The length of the statement  "            drawBuffer.DrawLine(new CCPoint(20' windowSize.Height)' new CCPoint(20' windowSize.Height / 2)' 10' new CCColor4F(0' 1' 0' 1)' DrawNodeBuffer.LineCap.Round); " is 157.
Long Statement,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The length of the statement  "            drawBuffer.DrawLine(new CCPoint(10' windowSize.Height / 2)' new CCPoint(windowSize.Width / 2' windowSize.Height / 2)' 40' " is 121.
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawNodeBuffer,The following statement contains a magic number: Opacity = 255;
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawCircle,The following statement contains a magic number: int segments = (int)(10 * (float)Math.Sqrt(radius));
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawSolidCircle,The following statement contains a magic number: int segments = (int)(10 * (float)Math.Sqrt(radius));
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawSolidArc,The following statement contains a magic number: int segments = (int)(10 * (float)Math.Sqrt(radius));
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawRect,The following statement contains a magic number: DrawPolygon(pt' 4' cf' borderWidth' bc);
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawEllipse,The following statement contains a magic number: DrawEllipticalArc(rect' 0' 360' false' lineWidth' color);
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawEllipse,The following statement contains a magic number: DrawEllipticalArc(x' y' width' height' 0' 360' false' lineWidth' color);
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawCardinalSpline,The following statement contains a magic number: for (int i = 0; i < segments + 1; i++)              {                  float dt = (float)i / segments;                    // border                  if (dt == 1)                  {                      p = count - 1;                      lt = 1;                  }                  else                  {                      p = (int)(dt / deltaT);                      lt = (dt - deltaT * p) / deltaT;                  }                    // Interpolate                      int c = config.Count - 1;                  CCPoint pp0 = config[Math.Min(c' Math.Max(p - 1' 0))];                  CCPoint pp1 = config[Math.Min(c' Math.Max(p + 0' 0))];                  CCPoint pp2 = config[Math.Min(c' Math.Max(p + 1' 0))];                  CCPoint pp3 = config[Math.Min(c' Math.Max(p + 2' 0))];                    vertices[i] = SplineMath.CCCardinalSplineAt(pp0' pp1' pp2' pp3' tension' lt);              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawPolygon,The following statement contains a magic number: var numberOfTriangles = outline ? (3 * polycount - 2) : (polycount - 2);
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawPolygon,The following statement contains a magic number: var numberOfTriangles = outline ? (3 * polycount - 2) : (polycount - 2);
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawPolygon,The following statement contains a magic number: var numberOfTriangles = outline ? (3 * polycount - 2) : (polycount - 2);
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawPolygon,The following statement contains a magic number: if (outline)              {                  var extrude = new ExtrudeVerts[polycount];                    for (int i = 0; i < polycount; i++)                  {                      var v0 = verts[(i - 1 + polycount) % polycount];                      var v1 = verts[i];                      var v2 = verts[(i + 1) % polycount];                        var n1 = CCPoint.Normalize(CCPoint.PerpendicularCCW(v1 - v0));                      var n2 = CCPoint.Normalize(CCPoint.PerpendicularCCW(v2 - v1));                        var offset = (n1 + n2) * (1.0f / (CCPoint.Dot(n1' n2) + 1.0f));                      extrude[i] = new ExtrudeVerts() { offset = offset' n = n2 };                  }                    float inset = (!outline ? 0.5f : 0.0f);                    for (int i = 0; i < polycount - 2; i++)                  {                      var v0 = verts[0] - (extrude[0].offset * inset);                      var v1 = verts[i + 1] - (extrude[i + 1].offset * inset);                      var v2 = verts[i + 2] - (extrude[i + 2].offset * inset);                        AddTriangleVertex(new CCV3F_C4B(v0' colorFill)); //__t(v2fzero)                      AddTriangleVertex(new CCV3F_C4B(v1' colorFill)); //__t(v2fzero)                      AddTriangleVertex(new CCV3F_C4B(v2' colorFill)); //__t(v2fzero)                  }                    for (int i = 0; i < polycount - 1; i++)                  {                      int j = (i + 1) % polycount;                      var v0 = verts[i];                      var v1 = verts[j];                        var offset0 = extrude[i].offset;                      var offset1 = extrude[j].offset;                        var inner0 = (v0 - (offset0 * borderWidth));                      var inner1 = (v1 - (offset1 * borderWidth));                      var outer0 = (v0 + (offset0 * borderWidth));                      var outer1 = (v1 + (offset1 * borderWidth));                        AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                      AddTriangleVertex(new CCV3F_C4B(inner1' borderFill));                      AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                        AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                      AddTriangleVertex(new CCV3F_C4B(outer0' borderFill));                      AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                  }                    if (closePolygon)                  {                      for (int i = polycount - 1; i < polycount; i++)                      {                          int j = (i + 1) % polycount;                          var v0 = verts[i];                          var v1 = verts[j];                            var offset0 = extrude[i].offset;                          var offset1 = extrude[j].offset;                            var inner0 = (v0 - (offset0 * borderWidth));                          var inner1 = (v1 - (offset1 * borderWidth));                          var outer0 = (v0 + (offset0 * borderWidth));                          var outer1 = (v1 + (offset1 * borderWidth));                            AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                          AddTriangleVertex(new CCV3F_C4B(inner1' borderFill));                          AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                            AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                          AddTriangleVertex(new CCV3F_C4B(outer0' borderFill));                          AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                      }                  }              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawPolygon,The following statement contains a magic number: if (outline)              {                  var extrude = new ExtrudeVerts[polycount];                    for (int i = 0; i < polycount; i++)                  {                      var v0 = verts[(i - 1 + polycount) % polycount];                      var v1 = verts[i];                      var v2 = verts[(i + 1) % polycount];                        var n1 = CCPoint.Normalize(CCPoint.PerpendicularCCW(v1 - v0));                      var n2 = CCPoint.Normalize(CCPoint.PerpendicularCCW(v2 - v1));                        var offset = (n1 + n2) * (1.0f / (CCPoint.Dot(n1' n2) + 1.0f));                      extrude[i] = new ExtrudeVerts() { offset = offset' n = n2 };                  }                    float inset = (!outline ? 0.5f : 0.0f);                    for (int i = 0; i < polycount - 2; i++)                  {                      var v0 = verts[0] - (extrude[0].offset * inset);                      var v1 = verts[i + 1] - (extrude[i + 1].offset * inset);                      var v2 = verts[i + 2] - (extrude[i + 2].offset * inset);                        AddTriangleVertex(new CCV3F_C4B(v0' colorFill)); //__t(v2fzero)                      AddTriangleVertex(new CCV3F_C4B(v1' colorFill)); //__t(v2fzero)                      AddTriangleVertex(new CCV3F_C4B(v2' colorFill)); //__t(v2fzero)                  }                    for (int i = 0; i < polycount - 1; i++)                  {                      int j = (i + 1) % polycount;                      var v0 = verts[i];                      var v1 = verts[j];                        var offset0 = extrude[i].offset;                      var offset1 = extrude[j].offset;                        var inner0 = (v0 - (offset0 * borderWidth));                      var inner1 = (v1 - (offset1 * borderWidth));                      var outer0 = (v0 + (offset0 * borderWidth));                      var outer1 = (v1 + (offset1 * borderWidth));                        AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                      AddTriangleVertex(new CCV3F_C4B(inner1' borderFill));                      AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                        AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                      AddTriangleVertex(new CCV3F_C4B(outer0' borderFill));                      AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                  }                    if (closePolygon)                  {                      for (int i = polycount - 1; i < polycount; i++)                      {                          int j = (i + 1) % polycount;                          var v0 = verts[i];                          var v1 = verts[j];                            var offset0 = extrude[i].offset;                          var offset1 = extrude[j].offset;                            var inner0 = (v0 - (offset0 * borderWidth));                          var inner1 = (v1 - (offset1 * borderWidth));                          var outer0 = (v0 + (offset0 * borderWidth));                          var outer1 = (v1 + (offset1 * borderWidth));                            AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                          AddTriangleVertex(new CCV3F_C4B(inner1' borderFill));                          AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                            AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                          AddTriangleVertex(new CCV3F_C4B(outer0' borderFill));                          AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                      }                  }              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawPolygon,The following statement contains a magic number: if (outline)              {                  var extrude = new ExtrudeVerts[polycount];                    for (int i = 0; i < polycount; i++)                  {                      var v0 = verts[(i - 1 + polycount) % polycount];                      var v1 = verts[i];                      var v2 = verts[(i + 1) % polycount];                        var n1 = CCPoint.Normalize(CCPoint.PerpendicularCCW(v1 - v0));                      var n2 = CCPoint.Normalize(CCPoint.PerpendicularCCW(v2 - v1));                        var offset = (n1 + n2) * (1.0f / (CCPoint.Dot(n1' n2) + 1.0f));                      extrude[i] = new ExtrudeVerts() { offset = offset' n = n2 };                  }                    float inset = (!outline ? 0.5f : 0.0f);                    for (int i = 0; i < polycount - 2; i++)                  {                      var v0 = verts[0] - (extrude[0].offset * inset);                      var v1 = verts[i + 1] - (extrude[i + 1].offset * inset);                      var v2 = verts[i + 2] - (extrude[i + 2].offset * inset);                        AddTriangleVertex(new CCV3F_C4B(v0' colorFill)); //__t(v2fzero)                      AddTriangleVertex(new CCV3F_C4B(v1' colorFill)); //__t(v2fzero)                      AddTriangleVertex(new CCV3F_C4B(v2' colorFill)); //__t(v2fzero)                  }                    for (int i = 0; i < polycount - 1; i++)                  {                      int j = (i + 1) % polycount;                      var v0 = verts[i];                      var v1 = verts[j];                        var offset0 = extrude[i].offset;                      var offset1 = extrude[j].offset;                        var inner0 = (v0 - (offset0 * borderWidth));                      var inner1 = (v1 - (offset1 * borderWidth));                      var outer0 = (v0 + (offset0 * borderWidth));                      var outer1 = (v1 + (offset1 * borderWidth));                        AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                      AddTriangleVertex(new CCV3F_C4B(inner1' borderFill));                      AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                        AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                      AddTriangleVertex(new CCV3F_C4B(outer0' borderFill));                      AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                  }                    if (closePolygon)                  {                      for (int i = polycount - 1; i < polycount; i++)                      {                          int j = (i + 1) % polycount;                          var v0 = verts[i];                          var v1 = verts[j];                            var offset0 = extrude[i].offset;                          var offset1 = extrude[j].offset;                            var inner0 = (v0 - (offset0 * borderWidth));                          var inner1 = (v1 - (offset1 * borderWidth));                          var outer0 = (v0 + (offset0 * borderWidth));                          var outer1 = (v1 + (offset1 * borderWidth));                            AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                          AddTriangleVertex(new CCV3F_C4B(inner1' borderFill));                          AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                            AddTriangleVertex(new CCV3F_C4B(inner0' borderFill));                          AddTriangleVertex(new CCV3F_C4B(outer0' borderFill));                          AddTriangleVertex(new CCV3F_C4B(outer1' borderFill));                      }                  }              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: float rx = width / 2;
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: float ry = height / 2;
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: float alpha = startAngle * PI / 180;
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: float beta = endAngle * PI / 180;
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: if (Math.Abs(beta - alpha) > PI)              {                  if (beta > alpha)                      beta -= 2 * PI;                  else                      alpha -= 2 * PI;              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: if (Math.Abs(beta - alpha) > PI)              {                  if (beta > alpha)                      beta -= 2 * PI;                  else                      alpha -= 2 * PI;              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: bcp = (float)(4.0 / 3.0 * (1 - Math.Cos(delta / 2)) / Math.Sin(delta / 2));
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: bcp = (float)(4.0 / 3.0 * (1 - Math.Cos(delta / 2)) / Math.Sin(delta / 2));
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: bcp = (float)(4.0 / 3.0 * (1 - Math.Cos(delta / 2)) / Math.Sin(delta / 2));
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: bcp = (float)(4.0 / 3.0 * (1 - Math.Cos(delta / 2)) / Math.Sin(delta / 2));
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arc,The following statement contains a magic number: if (start)              {                  /* starting point */                  double sx = cx + rx * cos_alpha;                  double sy = cy + ry * sin_alpha;                  if (isPieSlice)                  {                      destinationPoint.X = (float)sx;                      destinationPoint.Y = (float)sy;                        DrawPolygon(new CCPoint[] { startPoint' destinationPoint }' 2' CCColor4B.Transparent' lineWidth' color);                  }                    startPoint.X = (float)sx;                  startPoint.Y = (float)sy;              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The following statement contains a magic number: if (isPieSlice)              {                  startPoint.X = x + (width / 2);                  startPoint.Y = y + (height / 2);              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The following statement contains a magic number: if (isPieSlice)              {                  startPoint.X = x + (width / 2);                  startPoint.Y = y + (height / 2);              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The following statement contains a magic number: for (i = 0; i < 4; i++)              {                  float current = startAngle + drawn;                  float additional;                    if (enough)                  {                      if (isPieSlice)                      {                          startPoint.X = x + (width / 2);                          startPoint.Y = y + (height / 2);                          DrawPolygon(new CCPoint[] { destinationPoint' startPoint }' 2' CCColor4B.Transparent' lineWidth' color);                      }                      return;                  }                    additional = endAngle - current; /* otherwise' add the remainder */                  if (additional > 90)                  {                      additional = 90.0f;                  }                  else                  {                      /* a near zero value will introduce bad artefact in the drawing (#78999) */                      if ((additional >= -0.0001f) && (additional <= 0.0001f))                          return;                      enough = true;                  }                    make_arc((i == 0)'    /* only move to the starting pt in the 1st iteration */                      x' y' width' height'   /* bounding rectangle */                      current' current + additional' antialiasing' isPieSlice' lineWidth' color);                    drawn += additional;                }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The following statement contains a magic number: for (i = 0; i < 4; i++)              {                  float current = startAngle + drawn;                  float additional;                    if (enough)                  {                      if (isPieSlice)                      {                          startPoint.X = x + (width / 2);                          startPoint.Y = y + (height / 2);                          DrawPolygon(new CCPoint[] { destinationPoint' startPoint }' 2' CCColor4B.Transparent' lineWidth' color);                      }                      return;                  }                    additional = endAngle - current; /* otherwise' add the remainder */                  if (additional > 90)                  {                      additional = 90.0f;                  }                  else                  {                      /* a near zero value will introduce bad artefact in the drawing (#78999) */                      if ((additional >= -0.0001f) && (additional <= 0.0001f))                          return;                      enough = true;                  }                    make_arc((i == 0)'    /* only move to the starting pt in the 1st iteration */                      x' y' width' height'   /* bounding rectangle */                      current' current + additional' antialiasing' isPieSlice' lineWidth' color);                    drawn += additional;                }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The following statement contains a magic number: for (i = 0; i < 4; i++)              {                  float current = startAngle + drawn;                  float additional;                    if (enough)                  {                      if (isPieSlice)                      {                          startPoint.X = x + (width / 2);                          startPoint.Y = y + (height / 2);                          DrawPolygon(new CCPoint[] { destinationPoint' startPoint }' 2' CCColor4B.Transparent' lineWidth' color);                      }                      return;                  }                    additional = endAngle - current; /* otherwise' add the remainder */                  if (additional > 90)                  {                      additional = 90.0f;                  }                  else                  {                      /* a near zero value will introduce bad artefact in the drawing (#78999) */                      if ((additional >= -0.0001f) && (additional <= 0.0001f))                          return;                      enough = true;                  }                    make_arc((i == 0)'    /* only move to the starting pt in the 1st iteration */                      x' y' width' height'   /* bounding rectangle */                      current' current + additional' antialiasing' isPieSlice' lineWidth' color);                    drawn += additional;                }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The following statement contains a magic number: for (i = 0; i < 4; i++)              {                  float current = startAngle + drawn;                  float additional;                    if (enough)                  {                      if (isPieSlice)                      {                          startPoint.X = x + (width / 2);                          startPoint.Y = y + (height / 2);                          DrawPolygon(new CCPoint[] { destinationPoint' startPoint }' 2' CCColor4B.Transparent' lineWidth' color);                      }                      return;                  }                    additional = endAngle - current; /* otherwise' add the remainder */                  if (additional > 90)                  {                      additional = 90.0f;                  }                  else                  {                      /* a near zero value will introduce bad artefact in the drawing (#78999) */                      if ((additional >= -0.0001f) && (additional <= 0.0001f))                          return;                      enough = true;                  }                    make_arc((i == 0)'    /* only move to the starting pt in the 1st iteration */                      x' y' width' height'   /* bounding rectangle */                      current' current + additional' antialiasing' isPieSlice' lineWidth' color);                    drawn += additional;                }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The following statement contains a magic number: for (i = 0; i < 4; i++)              {                  float current = startAngle + drawn;                  float additional;                    if (enough)                  {                      if (isPieSlice)                      {                          startPoint.X = x + (width / 2);                          startPoint.Y = y + (height / 2);                          DrawPolygon(new CCPoint[] { destinationPoint' startPoint }' 2' CCColor4B.Transparent' lineWidth' color);                      }                      return;                  }                    additional = endAngle - current; /* otherwise' add the remainder */                  if (additional > 90)                  {                      additional = 90.0f;                  }                  else                  {                      /* a near zero value will introduce bad artefact in the drawing (#78999) */                      if ((additional >= -0.0001f) && (additional <= 0.0001f))                          return;                      enough = true;                  }                    make_arc((i == 0)'    /* only move to the starting pt in the 1st iteration */                      x' y' width' height'   /* bounding rectangle */                      current' current + additional' antialiasing' isPieSlice' lineWidth' color);                    drawn += additional;                }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The following statement contains a magic number: if (isPieSlice)              {                  startPoint.X = x + (width / 2);                  startPoint.Y = y + (height / 2);                  DrawPolygon(new CCPoint[] { destinationPoint' startPoint }' 2' CCColor4B.Transparent' lineWidth' color);              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The following statement contains a magic number: if (isPieSlice)              {                  startPoint.X = x + (width / 2);                  startPoint.Y = y + (height / 2);                  DrawPolygon(new CCPoint[] { destinationPoint' startPoint }' 2' CCColor4B.Transparent' lineWidth' color);              }
Magic Number,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,make_arcs,The following statement contains a magic number: if (isPieSlice)              {                  startPoint.X = x + (width / 2);                  startPoint.Y = y + (height / 2);                  DrawPolygon(new CCPoint[] { destinationPoint' startPoint }' 2' CCColor4B.Transparent' lineWidth' color);              }
Magic Number,DrawNodeBuffer,SplineMath,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,CCCardinalSplineAt,The following statement contains a magic number: float s = (1 - tension) / 2;
Magic Number,DrawNodeBuffer,SplineMath,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,CCCardinalSplineAt,The following statement contains a magic number: float b1 = s * ((-t3 + (2 * t2)) - t);
Magic Number,DrawNodeBuffer,SplineMath,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,CCCardinalSplineAt,The following statement contains a magic number: float b2 = s * (-t3 + t2) + (2 * t3 - 3 * t2 + 1);
Magic Number,DrawNodeBuffer,SplineMath,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,CCCardinalSplineAt,The following statement contains a magic number: float b2 = s * (-t3 + t2) + (2 * t3 - 3 * t2 + 1);
Magic Number,DrawNodeBuffer,SplineMath,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,CCCardinalSplineAt,The following statement contains a magic number: float b3 = s * (t3 - 2 * t2 + t) + (-2 * t3 + 3 * t2);
Magic Number,DrawNodeBuffer,SplineMath,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,CCCardinalSplineAt,The following statement contains a magic number: float b3 = s * (t3 - 2 * t2 + t) + (-2 * t3 + 3 * t2);
Magic Number,DrawNodeBuffer,SplineMath,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,CCCardinalSplineAt,The following statement contains a magic number: float b3 = s * (t3 - 2 * t2 + t) + (-2 * t3 + 3 * t2);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,OnEnter,The following statement contains a magic number: AddChild(draw' 10);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  drawBuffer.DrawSolidCircle(windowSize.Center' 10 * (10 - i)'                      new CCColor4F(CCRandom.Float_0_1()' CCRandom.Float_0_1()' CCRandom.Float_0_1()' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  drawBuffer.DrawSolidCircle(windowSize.Center' 10 * (10 - i)'                      new CCColor4F(CCRandom.Float_0_1()' CCRandom.Float_0_1()' CCRandom.Float_0_1()' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  drawBuffer.DrawSolidCircle(windowSize.Center' 10 * (10 - i)'                      new CCColor4F(CCRandom.Float_0_1()' CCRandom.Float_0_1()' CCRandom.Float_0_1()' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: CCPoint[] points = new CCPoint[]              {                  new CCPoint(windowSize.Height / 4' 0)'                  new CCPoint(windowSize.Width' windowSize.Height / 5)'                  new CCPoint(windowSize.Width / 3 * 2' windowSize.Height)              };
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: CCPoint[] points = new CCPoint[]              {                  new CCPoint(windowSize.Height / 4' 0)'                  new CCPoint(windowSize.Width' windowSize.Height / 5)'                  new CCPoint(windowSize.Width / 3 * 2' windowSize.Height)              };
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: CCPoint[] points = new CCPoint[]              {                  new CCPoint(windowSize.Height / 4' 0)'                  new CCPoint(windowSize.Width' windowSize.Height / 5)'                  new CCPoint(windowSize.Width / 3 * 2' windowSize.Height)              };
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: CCPoint[] points = new CCPoint[]              {                  new CCPoint(windowSize.Height / 4' 0)'                  new CCPoint(windowSize.Width' windowSize.Height / 5)'                  new CCPoint(windowSize.Width / 3 * 2' windowSize.Height)              };
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawPolygon(points' points.Length' new CCColor4F(1.0f' 0' 0' 0.5f)' 4' new CCColor4F(0' 0' 1' 1));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 80;                  const float w = 20;                  const float h = 50;                  CCPoint[] star = new CCPoint[]  	            {  	                new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'                           // lower spike  	                new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike  	            };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 80;                  const float w = 20;                  const float h = 50;                  CCPoint[] star = new CCPoint[]  	            {  	                new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'                           // lower spike  	                new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike  	            };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 80;                  const float w = 20;                  const float h = 50;                  CCPoint[] star = new CCPoint[]  	            {  	                new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'                           // lower spike  	                new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike  	            };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 80;                  const float w = 20;                  const float h = 50;                  CCPoint[] star = new CCPoint[]  	            {  	                new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'                           // lower spike  	                new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike  	            };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 80;                  const float w = 20;                  const float h = 50;                  CCPoint[] star = new CCPoint[]  	            {  	                new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'                           // lower spike  	                new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike  	            };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 80;                  const float w = 20;                  const float h = 50;                  CCPoint[] star = new CCPoint[]  	            {  	                new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'                           // lower spike  	                new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike  	            };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 80;                  const float w = 20;                  const float h = 50;                  CCPoint[] star = new CCPoint[]  	            {  	                new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'                           // lower spike  	                new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike  	            };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 180;                  const float w = 20;                  const float h = 50;                  var star = new CCPoint[]                  {                      new CCPoint(o' o)' new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'        // lower spike                      new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike                      new CCPoint(o + w' o + w * 2 + h)' new CCPoint(o' o + w * 2)'                   // top spike                      new CCPoint(o - h' o + w)' // left spike                  };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 180;                  const float w = 20;                  const float h = 50;                  var star = new CCPoint[]                  {                      new CCPoint(o' o)' new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'        // lower spike                      new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike                      new CCPoint(o + w' o + w * 2 + h)' new CCPoint(o' o + w * 2)'                   // top spike                      new CCPoint(o - h' o + w)' // left spike                  };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 180;                  const float w = 20;                  const float h = 50;                  var star = new CCPoint[]                  {                      new CCPoint(o' o)' new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'        // lower spike                      new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike                      new CCPoint(o + w' o + w * 2 + h)' new CCPoint(o' o + w * 2)'                   // top spike                      new CCPoint(o - h' o + w)' // left spike                  };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 180;                  const float w = 20;                  const float h = 50;                  var star = new CCPoint[]                  {                      new CCPoint(o' o)' new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'        // lower spike                      new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike                      new CCPoint(o + w' o + w * 2 + h)' new CCPoint(o' o + w * 2)'                   // top spike                      new CCPoint(o - h' o + w)' // left spike                  };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 180;                  const float w = 20;                  const float h = 50;                  var star = new CCPoint[]                  {                      new CCPoint(o' o)' new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'        // lower spike                      new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike                      new CCPoint(o + w' o + w * 2 + h)' new CCPoint(o' o + w * 2)'                   // top spike                      new CCPoint(o - h' o + w)' // left spike                  };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 180;                  const float w = 20;                  const float h = 50;                  var star = new CCPoint[]                  {                      new CCPoint(o' o)' new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'        // lower spike                      new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike                      new CCPoint(o + w' o + w * 2 + h)' new CCPoint(o' o + w * 2)'                   // top spike                      new CCPoint(o - h' o + w)' // left spike                  };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 180;                  const float w = 20;                  const float h = 50;                  var star = new CCPoint[]                  {                      new CCPoint(o' o)' new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'        // lower spike                      new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike                      new CCPoint(o + w' o + w * 2 + h)' new CCPoint(o' o + w * 2)'                   // top spike                      new CCPoint(o - h' o + w)' // left spike                  };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 180;                  const float w = 20;                  const float h = 50;                  var star = new CCPoint[]                  {                      new CCPoint(o' o)' new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'        // lower spike                      new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike                      new CCPoint(o + w' o + w * 2 + h)' new CCPoint(o' o + w * 2)'                   // top spike                      new CCPoint(o - h' o + w)' // left spike                  };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: {                  const float o = 180;                  const float w = 20;                  const float h = 50;                  var star = new CCPoint[]                  {                      new CCPoint(o' o)' new CCPoint(o + w' o - h)' new CCPoint(o + w * 2' o)'        // lower spike                      new CCPoint(o + w * 2 + h' o + w)' new CCPoint(o + w * 2' o + w * 2)'           // right spike                      new CCPoint(o + w' o + w * 2 + h)' new CCPoint(o' o + w * 2)'                   // top spike                      new CCPoint(o - h' o + w)' // left spike                  };                    drawBuffer.DrawPolygon(star' star.Length' new CCColor4F(1' 0' 0' 0.5f)' 1' new CCColor4F(0' 0' 1' 1));              }
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawLine(new CCPoint(20' windowSize.Height)' new CCPoint(20' windowSize.Height / 2)' 10' new CCColor4F(0' 1' 0' 1)' DrawNodeBuffer.LineCap.Round);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawLine(new CCPoint(20' windowSize.Height)' new CCPoint(20' windowSize.Height / 2)' 10' new CCColor4F(0' 1' 0' 1)' DrawNodeBuffer.LineCap.Round);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawLine(new CCPoint(20' windowSize.Height)' new CCPoint(20' windowSize.Height / 2)' 10' new CCColor4F(0' 1' 0' 1)' DrawNodeBuffer.LineCap.Round);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawLine(new CCPoint(20' windowSize.Height)' new CCPoint(20' windowSize.Height / 2)' 10' new CCColor4F(0' 1' 0' 1)' DrawNodeBuffer.LineCap.Round);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawLine(new CCPoint(10' windowSize.Height / 2)' new CCPoint(windowSize.Width / 2' windowSize.Height / 2)' 40'                  new CCColor4F(1' 0' 1' 0.5f)' DrawNodeBuffer.LineCap.Round);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawLine(new CCPoint(10' windowSize.Height / 2)' new CCPoint(windowSize.Width / 2' windowSize.Height / 2)' 40'                  new CCColor4F(1' 0' 1' 0.5f)' DrawNodeBuffer.LineCap.Round);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawLine(new CCPoint(10' windowSize.Height / 2)' new CCPoint(windowSize.Width / 2' windowSize.Height / 2)' 40'                  new CCColor4F(1' 0' 1' 0.5f)' DrawNodeBuffer.LineCap.Round);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawLine(new CCPoint(10' windowSize.Height / 2)' new CCPoint(windowSize.Width / 2' windowSize.Height / 2)' 40'                  new CCColor4F(1' 0' 1' 0.5f)' DrawNodeBuffer.LineCap.Round);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawLine(new CCPoint(10' windowSize.Height / 2)' new CCPoint(windowSize.Width / 2' windowSize.Height / 2)' 40'                  new CCColor4F(1' 0' 1' 0.5f)' DrawNodeBuffer.LineCap.Round);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawQuadBezier(new CCPoint(0' size.Height)'                  visibleRect.Center'                  (CCPoint)visibleRect.Size'                  50' 3'                  new CCColor4B(255' 0' 255' 255));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawQuadBezier(new CCPoint(0' size.Height)'                  visibleRect.Center'                  (CCPoint)visibleRect.Size'                  50' 3'                  new CCColor4B(255' 0' 255' 255));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawQuadBezier(new CCPoint(0' size.Height)'                  visibleRect.Center'                  (CCPoint)visibleRect.Size'                  50' 3'                  new CCColor4B(255' 0' 255' 255));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawQuadBezier(new CCPoint(0' size.Height)'                  visibleRect.Center'                  (CCPoint)visibleRect.Size'                  50' 3'                  new CCColor4B(255' 0' 255' 255));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawQuadBezier(new CCPoint(0' size.Height)'                  visibleRect.Center'                  (CCPoint)visibleRect.Size'                  50' 3'                  new CCColor4B(255' 0' 255' 255));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawCubicBezier(visibleRect.Center'                  new CCPoint(size.Width / 2 + 30' size.Height / 2 + 50)'                  new CCPoint(size.Width / 2 + 60' size.Height / 2 - 50)'                  new CCPoint(size.Width' size.Height / 2)' 100' 2' CCColor4B.Green);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawEllipse(new CCRect(100' 300' 100' 200)' 8' CCColor4B.AliceBlue);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawEllipse(new CCRect(100' 300' 100' 200)' 8' CCColor4B.AliceBlue);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawEllipse(new CCRect(100' 300' 100' 200)' 8' CCColor4B.AliceBlue);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawEllipse(new CCRect(100' 300' 100' 200)' 8' CCColor4B.AliceBlue);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawEllipse(new CCRect(100' 300' 100' 200)' 8' CCColor4B.AliceBlue);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: splinePoints.Add(new CCPoint(50' 70));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: splinePoints.Add(new CCPoint(50' 70));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: splinePoints.Add(new CCPoint(0' 140));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: splinePoints.Add(new CCPoint(100' 210));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: splinePoints.Add(new CCPoint(100' 210));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: splinePoints.Add(new CCPoint(0' 280));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: splinePoints.Add(new CCPoint(150' 350));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: splinePoints.Add(new CCPoint(150' 350));
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: int numberOfSegments = 64;
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawSolidArc(                  pos: new CCPoint(350' windowSize.Height * 0.75f)'                  radius: 100'                  startAngle: CCMathHelper.ToRadians(45)'                  sweepAngle: CCMathHelper.Pi / 2' // this is in radians' clockwise                  color: CCColor4B.Aquamarine);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawSolidArc(                  pos: new CCPoint(350' windowSize.Height * 0.75f)'                  radius: 100'                  startAngle: CCMathHelper.ToRadians(45)'                  sweepAngle: CCMathHelper.Pi / 2' // this is in radians' clockwise                  color: CCColor4B.Aquamarine);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawSolidArc(                  pos: new CCPoint(350' windowSize.Height * 0.75f)'                  radius: 100'                  startAngle: CCMathHelper.ToRadians(45)'                  sweepAngle: CCMathHelper.Pi / 2' // this is in radians' clockwise                  color: CCColor4B.Aquamarine);
Magic Number,DrawNodeBuffer,IntroLayer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\IntroLayer.cs,CreateGeometry,The following statement contains a magic number: drawBuffer.DrawSolidArc(                  pos: new CCPoint(350' windowSize.Height * 0.75f)'                  radius: 100'                  startAngle: CCMathHelper.ToRadians(45)'                  sweepAngle: CCMathHelper.Pi / 2' // this is in radians' clockwise                  color: CCColor4B.Aquamarine);
Duplicate Code,DrawNodeBuffer,DrawNodeBuffer,C:\repos\mono_cocos-sharp-samples\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer\DrawNodeBuffer.cs,DrawPolygon,The method contains a code clone-set at the following line numbers (starting from the method definition): ((62' 82)' (87' 107))
