Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,Cyclomatic complexity of the method is 11
Complex Method,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,Showb,Cyclomatic complexity of the method is 10
Long Parameter List,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,Show,The method has 5 parameters.
Long Parameter List,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,Show,The method has 6 parameters.
Long Parameter List,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,Show,The method has 7 parameters.
Long Statement,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The length of the statement  "			LogConsole.Show (LogType.DEBUG' "PacketControl: {0} PacketID: 0x{1:X2} Length: {2}"' packetControlCode' packetID' packetLength); " is 128.
Long Statement,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The length of the statement  "	Console.WriteLine (@"                                                                                                "); " is 120.
Long Statement,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The length of the statement  "	Console.WriteLine (@"             ______             _                   _                                           "); " is 120.
Long Statement,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The length of the statement  "	Console.WriteLine (@"            (____  \           | |                 | |                                          "); " is 120.
Long Statement,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The length of the statement  "	Console.WriteLine (@"             ____)  ) ____ ___ | |  _ ____ ____     \ \   ____  ____ _   _ ____  ____           "); " is 120.
Long Statement,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The length of the statement  "	Console.WriteLine (@"            |  __  ( / ___) _ \| | / ) _  )  _ \     \ \ / _  )/ ___) | | / _  )/ ___)          "); " is 120.
Long Statement,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The length of the statement  "	Console.WriteLine (@"            | |__)  ) |  | |_| | |< ( (/ /| | | |_____) | (/ /| |    \ V ( (/ /| |              "); " is 120.
Long Statement,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The length of the statement  "	Console.WriteLine (@"            |______/|_|   \___/|_| \_)____)_| |_(______/ \____)_|     \_/ \____)_|              "); " is 120.
Long Statement,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The length of the statement  "	Console.WriteLine (@"                                                                                                "); " is 120.
Long Statement,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The length of the statement  "	Console.WriteLine (@"                                                                                                "); " is 120.
Long Statement,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The length of the statement  "	Console.WriteLine (@"                                                                                                "); " is 120.
Long Statement,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The length of the statement  "			dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]); " is 161.
Long Statement,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The length of the statement  "			DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]); " is 169.
Empty Catch Block,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The method has an empty catch block.
Empty Catch Block,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,_OnClientDisconnect,The method has an empty catch block.
Magic Number,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The following statement contains a magic number: try {  	LogConsole.Show (LogType.DEBUG' "OpCode()");  	Systems sys = (Systems)state.Packet;  	sys.PacketInformation = state;  	ByteQueue queue = ed.queue;  	int length = queue.Length;  	LogConsole.Show (LogType.DEBUG' "OpCode() {0}"' length);  	while ((length > 0)) {  		byte[] buffer;  		int packetID = queue.GetPacketID ();  		int packetLength = queue.GetPacketLength ();  		int packetControlCode = queue.GetPacketControlCode ();  		LogConsole.Show (LogType.DEBUG' "PacketControl: {0} PacketID: 0x{1:X2} Length: {2}"' packetControlCode' packetID' packetLength);  		LogConsole.HexDump (state.buffer' ""' 16);  		PacketHandler handler = PacketHandlers.GetHandler (packetID);  		if (handler == null) {  			byte[] buffer2 = new byte[length];  			length = queue.Dequeue (buffer2' 0' length);  			LogConsole.Show (LogType.DEBUG' "Client: {0}: Unhandled packet 0x{1:X2}"' new object[] {  				state'  				packetID  			});  			break;  		}  		int size = handler.Length;  		if (length >= 4) {  			size = packetLength;  			if (packetLength >= 4) {  				if (length < size) {  					break;  				}  				if (0x400 >= size) {  					buffer = m_Buffers.AquireBuffer ();  				}  				else {  					buffer = new byte[size];  				}  				size = queue.Dequeue (buffer' 0' size);  				ushort packetid = ByteQueue.GetPacketID (buffer);  				bool flag = IsCrypted (packetid);  				if (flag) {  					LogConsole.Show (LogType.DEBUG' "Crypted Packet 0x{0:X4}"' new object[] {  						packetid  					});  				}  				try {  					PacketReader2 pr = new PacketReader2 (buffer' size);  					handler.OnReceive (ed' pr);  				}  				catch {  					break;  				}  				length = queue.Length;  				if ((0x400 >= size) && !flag) {  					m_Buffers.ReleaseBuffer (buffer);  					break;  				}  			}  		}  		length = 0;  	}  }  catch (Exception) {  }  
Magic Number,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The following statement contains a magic number: try {  	LogConsole.Show (LogType.DEBUG' "OpCode()");  	Systems sys = (Systems)state.Packet;  	sys.PacketInformation = state;  	ByteQueue queue = ed.queue;  	int length = queue.Length;  	LogConsole.Show (LogType.DEBUG' "OpCode() {0}"' length);  	while ((length > 0)) {  		byte[] buffer;  		int packetID = queue.GetPacketID ();  		int packetLength = queue.GetPacketLength ();  		int packetControlCode = queue.GetPacketControlCode ();  		LogConsole.Show (LogType.DEBUG' "PacketControl: {0} PacketID: 0x{1:X2} Length: {2}"' packetControlCode' packetID' packetLength);  		LogConsole.HexDump (state.buffer' ""' 16);  		PacketHandler handler = PacketHandlers.GetHandler (packetID);  		if (handler == null) {  			byte[] buffer2 = new byte[length];  			length = queue.Dequeue (buffer2' 0' length);  			LogConsole.Show (LogType.DEBUG' "Client: {0}: Unhandled packet 0x{1:X2}"' new object[] {  				state'  				packetID  			});  			break;  		}  		int size = handler.Length;  		if (length >= 4) {  			size = packetLength;  			if (packetLength >= 4) {  				if (length < size) {  					break;  				}  				if (0x400 >= size) {  					buffer = m_Buffers.AquireBuffer ();  				}  				else {  					buffer = new byte[size];  				}  				size = queue.Dequeue (buffer' 0' size);  				ushort packetid = ByteQueue.GetPacketID (buffer);  				bool flag = IsCrypted (packetid);  				if (flag) {  					LogConsole.Show (LogType.DEBUG' "Crypted Packet 0x{0:X4}"' new object[] {  						packetid  					});  				}  				try {  					PacketReader2 pr = new PacketReader2 (buffer' size);  					handler.OnReceive (ed' pr);  				}  				catch {  					break;  				}  				length = queue.Length;  				if ((0x400 >= size) && !flag) {  					m_Buffers.ReleaseBuffer (buffer);  					break;  				}  			}  		}  		length = 0;  	}  }  catch (Exception) {  }  
Magic Number,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The following statement contains a magic number: try {  	LogConsole.Show (LogType.DEBUG' "OpCode()");  	Systems sys = (Systems)state.Packet;  	sys.PacketInformation = state;  	ByteQueue queue = ed.queue;  	int length = queue.Length;  	LogConsole.Show (LogType.DEBUG' "OpCode() {0}"' length);  	while ((length > 0)) {  		byte[] buffer;  		int packetID = queue.GetPacketID ();  		int packetLength = queue.GetPacketLength ();  		int packetControlCode = queue.GetPacketControlCode ();  		LogConsole.Show (LogType.DEBUG' "PacketControl: {0} PacketID: 0x{1:X2} Length: {2}"' packetControlCode' packetID' packetLength);  		LogConsole.HexDump (state.buffer' ""' 16);  		PacketHandler handler = PacketHandlers.GetHandler (packetID);  		if (handler == null) {  			byte[] buffer2 = new byte[length];  			length = queue.Dequeue (buffer2' 0' length);  			LogConsole.Show (LogType.DEBUG' "Client: {0}: Unhandled packet 0x{1:X2}"' new object[] {  				state'  				packetID  			});  			break;  		}  		int size = handler.Length;  		if (length >= 4) {  			size = packetLength;  			if (packetLength >= 4) {  				if (length < size) {  					break;  				}  				if (0x400 >= size) {  					buffer = m_Buffers.AquireBuffer ();  				}  				else {  					buffer = new byte[size];  				}  				size = queue.Dequeue (buffer' 0' size);  				ushort packetid = ByteQueue.GetPacketID (buffer);  				bool flag = IsCrypted (packetid);  				if (flag) {  					LogConsole.Show (LogType.DEBUG' "Crypted Packet 0x{0:X4}"' new object[] {  						packetid  					});  				}  				try {  					PacketReader2 pr = new PacketReader2 (buffer' size);  					handler.OnReceive (ed' pr);  				}  				catch {  					break;  				}  				length = queue.Length;  				if ((0x400 >= size) && !flag) {  					m_Buffers.ReleaseBuffer (buffer);  					break;  				}  			}  		}  		length = 0;  	}  }  catch (Exception) {  }  
Magic Number,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The following statement contains a magic number: while ((length > 0)) {  	byte[] buffer;  	int packetID = queue.GetPacketID ();  	int packetLength = queue.GetPacketLength ();  	int packetControlCode = queue.GetPacketControlCode ();  	LogConsole.Show (LogType.DEBUG' "PacketControl: {0} PacketID: 0x{1:X2} Length: {2}"' packetControlCode' packetID' packetLength);  	LogConsole.HexDump (state.buffer' ""' 16);  	PacketHandler handler = PacketHandlers.GetHandler (packetID);  	if (handler == null) {  		byte[] buffer2 = new byte[length];  		length = queue.Dequeue (buffer2' 0' length);  		LogConsole.Show (LogType.DEBUG' "Client: {0}: Unhandled packet 0x{1:X2}"' new object[] {  			state'  			packetID  		});  		break;  	}  	int size = handler.Length;  	if (length >= 4) {  		size = packetLength;  		if (packetLength >= 4) {  			if (length < size) {  				break;  			}  			if (0x400 >= size) {  				buffer = m_Buffers.AquireBuffer ();  			}  			else {  				buffer = new byte[size];  			}  			size = queue.Dequeue (buffer' 0' size);  			ushort packetid = ByteQueue.GetPacketID (buffer);  			bool flag = IsCrypted (packetid);  			if (flag) {  				LogConsole.Show (LogType.DEBUG' "Crypted Packet 0x{0:X4}"' new object[] {  					packetid  				});  			}  			try {  				PacketReader2 pr = new PacketReader2 (buffer' size);  				handler.OnReceive (ed' pr);  			}  			catch {  				break;  			}  			length = queue.Length;  			if ((0x400 >= size) && !flag) {  				m_Buffers.ReleaseBuffer (buffer);  				break;  			}  		}  	}  	length = 0;  }  
Magic Number,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The following statement contains a magic number: while ((length > 0)) {  	byte[] buffer;  	int packetID = queue.GetPacketID ();  	int packetLength = queue.GetPacketLength ();  	int packetControlCode = queue.GetPacketControlCode ();  	LogConsole.Show (LogType.DEBUG' "PacketControl: {0} PacketID: 0x{1:X2} Length: {2}"' packetControlCode' packetID' packetLength);  	LogConsole.HexDump (state.buffer' ""' 16);  	PacketHandler handler = PacketHandlers.GetHandler (packetID);  	if (handler == null) {  		byte[] buffer2 = new byte[length];  		length = queue.Dequeue (buffer2' 0' length);  		LogConsole.Show (LogType.DEBUG' "Client: {0}: Unhandled packet 0x{1:X2}"' new object[] {  			state'  			packetID  		});  		break;  	}  	int size = handler.Length;  	if (length >= 4) {  		size = packetLength;  		if (packetLength >= 4) {  			if (length < size) {  				break;  			}  			if (0x400 >= size) {  				buffer = m_Buffers.AquireBuffer ();  			}  			else {  				buffer = new byte[size];  			}  			size = queue.Dequeue (buffer' 0' size);  			ushort packetid = ByteQueue.GetPacketID (buffer);  			bool flag = IsCrypted (packetid);  			if (flag) {  				LogConsole.Show (LogType.DEBUG' "Crypted Packet 0x{0:X4}"' new object[] {  					packetid  				});  			}  			try {  				PacketReader2 pr = new PacketReader2 (buffer' size);  				handler.OnReceive (ed' pr);  			}  			catch {  				break;  			}  			length = queue.Length;  			if ((0x400 >= size) && !flag) {  				m_Buffers.ReleaseBuffer (buffer);  				break;  			}  		}  	}  	length = 0;  }  
Magic Number,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The following statement contains a magic number: while ((length > 0)) {  	byte[] buffer;  	int packetID = queue.GetPacketID ();  	int packetLength = queue.GetPacketLength ();  	int packetControlCode = queue.GetPacketControlCode ();  	LogConsole.Show (LogType.DEBUG' "PacketControl: {0} PacketID: 0x{1:X2} Length: {2}"' packetControlCode' packetID' packetLength);  	LogConsole.HexDump (state.buffer' ""' 16);  	PacketHandler handler = PacketHandlers.GetHandler (packetID);  	if (handler == null) {  		byte[] buffer2 = new byte[length];  		length = queue.Dequeue (buffer2' 0' length);  		LogConsole.Show (LogType.DEBUG' "Client: {0}: Unhandled packet 0x{1:X2}"' new object[] {  			state'  			packetID  		});  		break;  	}  	int size = handler.Length;  	if (length >= 4) {  		size = packetLength;  		if (packetLength >= 4) {  			if (length < size) {  				break;  			}  			if (0x400 >= size) {  				buffer = m_Buffers.AquireBuffer ();  			}  			else {  				buffer = new byte[size];  			}  			size = queue.Dequeue (buffer' 0' size);  			ushort packetid = ByteQueue.GetPacketID (buffer);  			bool flag = IsCrypted (packetid);  			if (flag) {  				LogConsole.Show (LogType.DEBUG' "Crypted Packet 0x{0:X4}"' new object[] {  					packetid  				});  			}  			try {  				PacketReader2 pr = new PacketReader2 (buffer' size);  				handler.OnReceive (ed' pr);  			}  			catch {  				break;  			}  			length = queue.Length;  			if ((0x400 >= size) && !flag) {  				m_Buffers.ReleaseBuffer (buffer);  				break;  			}  		}  	}  	length = 0;  }  
Magic Number,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The following statement contains a magic number: LogConsole.HexDump (state.buffer' ""' 16);  
Magic Number,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The following statement contains a magic number: if (length >= 4) {  	size = packetLength;  	if (packetLength >= 4) {  		if (length < size) {  			break;  		}  		if (0x400 >= size) {  			buffer = m_Buffers.AquireBuffer ();  		}  		else {  			buffer = new byte[size];  		}  		size = queue.Dequeue (buffer' 0' size);  		ushort packetid = ByteQueue.GetPacketID (buffer);  		bool flag = IsCrypted (packetid);  		if (flag) {  			LogConsole.Show (LogType.DEBUG' "Crypted Packet 0x{0:X4}"' new object[] {  				packetid  			});  		}  		try {  			PacketReader2 pr = new PacketReader2 (buffer' size);  			handler.OnReceive (ed' pr);  		}  		catch {  			break;  		}  		length = queue.Length;  		if ((0x400 >= size) && !flag) {  			m_Buffers.ReleaseBuffer (buffer);  			break;  		}  	}  }  
Magic Number,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The following statement contains a magic number: if (length >= 4) {  	size = packetLength;  	if (packetLength >= 4) {  		if (length < size) {  			break;  		}  		if (0x400 >= size) {  			buffer = m_Buffers.AquireBuffer ();  		}  		else {  			buffer = new byte[size];  		}  		size = queue.Dequeue (buffer' 0' size);  		ushort packetid = ByteQueue.GetPacketID (buffer);  		bool flag = IsCrypted (packetid);  		if (flag) {  			LogConsole.Show (LogType.DEBUG' "Crypted Packet 0x{0:X4}"' new object[] {  				packetid  			});  		}  		try {  			PacketReader2 pr = new PacketReader2 (buffer' size);  			handler.OnReceive (ed' pr);  		}  		catch {  			break;  		}  		length = queue.Length;  		if ((0x400 >= size) && !flag) {  			m_Buffers.ReleaseBuffer (buffer);  			break;  		}  	}  }  
Magic Number,BrokenServer,Systems,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Clases\FunctionOpcode.cs,OpCode,The following statement contains a magic number: if (packetLength >= 4) {  	if (length < size) {  		break;  	}  	if (0x400 >= size) {  		buffer = m_Buffers.AquireBuffer ();  	}  	else {  		buffer = new byte[size];  	}  	size = queue.Dequeue (buffer' 0' size);  	ushort packetid = ByteQueue.GetPacketID (buffer);  	bool flag = IsCrypted (packetid);  	if (flag) {  		LogConsole.Show (LogType.DEBUG' "Crypted Packet 0x{0:X4}"' new object[] {  			packetid  		});  	}  	try {  		PacketReader2 pr = new PacketReader2 (buffer' size);  		handler.OnReceive (ed' pr);  	}  	catch {  		break;  	}  	length = queue.Length;  	if ((0x400 >= size) && !flag) {  		m_Buffers.ReleaseBuffer (buffer);  		break;  	}  }  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: try {  	if (File.Exists (Environment.CurrentDirectory + @"\Settings\Settings.ini")) {  		ini = new Systems.Ini (Environment.CurrentDirectory + @"\Settings\Settings.ini");  		LSPort = Convert.ToInt32 (ini.GetValue ("Server"' "port"' 8372));  		LSIP = ini.GetValue ("Server"' "ip"' "127.0.0.1").ToString ();  		VER = ini.GetValue ("Server"' "ver"' 1);  		IPCPort = Convert.ToInt32 (ini.GetValue ("IPC"' "port"' 8500));  		IPCIP = ini.GetValue ("IPC"' "ip"' "127.0.0.1").ToString ();  		DEBUG = Convert.ToBoolean (ini.GetValue ("CONSOLE"' "debug"' "false"));  		m_host = ini.GetValue ("MySQL"' "host"' "localhost").ToString ();  		m_user = ini.GetValue ("MySQL"' "user"' "root").ToString ();  		m_pass = ini.GetValue ("MySQL"' "pass"' "").ToString ();  		m_db = ini.GetValue ("MySQL"' "data"' "").ToString ();  		m_port = Convert.ToInt32 (ini.GetValue ("MySQL"' "port"' 3306));  		ini = null;  		LogConsole.Show (LogType.INFO' "Has loaded your ip settings successfully");  	}  	else {  		LogConsole.Show (LogType.ALERT' "Settings.ini could not be found' using default setting");  	}  }  catch (Exception excc) {  	LogConsole.Show (LogType.ERROR' " {0}"' excc.ToString ());  	return;  }  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: try {  	if (File.Exists (Environment.CurrentDirectory + @"\Settings\Settings.ini")) {  		ini = new Systems.Ini (Environment.CurrentDirectory + @"\Settings\Settings.ini");  		LSPort = Convert.ToInt32 (ini.GetValue ("Server"' "port"' 8372));  		LSIP = ini.GetValue ("Server"' "ip"' "127.0.0.1").ToString ();  		VER = ini.GetValue ("Server"' "ver"' 1);  		IPCPort = Convert.ToInt32 (ini.GetValue ("IPC"' "port"' 8500));  		IPCIP = ini.GetValue ("IPC"' "ip"' "127.0.0.1").ToString ();  		DEBUG = Convert.ToBoolean (ini.GetValue ("CONSOLE"' "debug"' "false"));  		m_host = ini.GetValue ("MySQL"' "host"' "localhost").ToString ();  		m_user = ini.GetValue ("MySQL"' "user"' "root").ToString ();  		m_pass = ini.GetValue ("MySQL"' "pass"' "").ToString ();  		m_db = ini.GetValue ("MySQL"' "data"' "").ToString ();  		m_port = Convert.ToInt32 (ini.GetValue ("MySQL"' "port"' 3306));  		ini = null;  		LogConsole.Show (LogType.INFO' "Has loaded your ip settings successfully");  	}  	else {  		LogConsole.Show (LogType.ALERT' "Settings.ini could not be found' using default setting");  	}  }  catch (Exception excc) {  	LogConsole.Show (LogType.ERROR' " {0}"' excc.ToString ());  	return;  }  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: try {  	if (File.Exists (Environment.CurrentDirectory + @"\Settings\Settings.ini")) {  		ini = new Systems.Ini (Environment.CurrentDirectory + @"\Settings\Settings.ini");  		LSPort = Convert.ToInt32 (ini.GetValue ("Server"' "port"' 8372));  		LSIP = ini.GetValue ("Server"' "ip"' "127.0.0.1").ToString ();  		VER = ini.GetValue ("Server"' "ver"' 1);  		IPCPort = Convert.ToInt32 (ini.GetValue ("IPC"' "port"' 8500));  		IPCIP = ini.GetValue ("IPC"' "ip"' "127.0.0.1").ToString ();  		DEBUG = Convert.ToBoolean (ini.GetValue ("CONSOLE"' "debug"' "false"));  		m_host = ini.GetValue ("MySQL"' "host"' "localhost").ToString ();  		m_user = ini.GetValue ("MySQL"' "user"' "root").ToString ();  		m_pass = ini.GetValue ("MySQL"' "pass"' "").ToString ();  		m_db = ini.GetValue ("MySQL"' "data"' "").ToString ();  		m_port = Convert.ToInt32 (ini.GetValue ("MySQL"' "port"' 3306));  		ini = null;  		LogConsole.Show (LogType.INFO' "Has loaded your ip settings successfully");  	}  	else {  		LogConsole.Show (LogType.ALERT' "Settings.ini could not be found' using default setting");  	}  }  catch (Exception excc) {  	LogConsole.Show (LogType.ERROR' " {0}"' excc.ToString ());  	return;  }  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: if (File.Exists (Environment.CurrentDirectory + @"\Settings\Settings.ini")) {  	ini = new Systems.Ini (Environment.CurrentDirectory + @"\Settings\Settings.ini");  	LSPort = Convert.ToInt32 (ini.GetValue ("Server"' "port"' 8372));  	LSIP = ini.GetValue ("Server"' "ip"' "127.0.0.1").ToString ();  	VER = ini.GetValue ("Server"' "ver"' 1);  	IPCPort = Convert.ToInt32 (ini.GetValue ("IPC"' "port"' 8500));  	IPCIP = ini.GetValue ("IPC"' "ip"' "127.0.0.1").ToString ();  	DEBUG = Convert.ToBoolean (ini.GetValue ("CONSOLE"' "debug"' "false"));  	m_host = ini.GetValue ("MySQL"' "host"' "localhost").ToString ();  	m_user = ini.GetValue ("MySQL"' "user"' "root").ToString ();  	m_pass = ini.GetValue ("MySQL"' "pass"' "").ToString ();  	m_db = ini.GetValue ("MySQL"' "data"' "").ToString ();  	m_port = Convert.ToInt32 (ini.GetValue ("MySQL"' "port"' 3306));  	ini = null;  	LogConsole.Show (LogType.INFO' "Has loaded your ip settings successfully");  }  else {  	LogConsole.Show (LogType.ALERT' "Settings.ini could not be found' using default setting");  }  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: if (File.Exists (Environment.CurrentDirectory + @"\Settings\Settings.ini")) {  	ini = new Systems.Ini (Environment.CurrentDirectory + @"\Settings\Settings.ini");  	LSPort = Convert.ToInt32 (ini.GetValue ("Server"' "port"' 8372));  	LSIP = ini.GetValue ("Server"' "ip"' "127.0.0.1").ToString ();  	VER = ini.GetValue ("Server"' "ver"' 1);  	IPCPort = Convert.ToInt32 (ini.GetValue ("IPC"' "port"' 8500));  	IPCIP = ini.GetValue ("IPC"' "ip"' "127.0.0.1").ToString ();  	DEBUG = Convert.ToBoolean (ini.GetValue ("CONSOLE"' "debug"' "false"));  	m_host = ini.GetValue ("MySQL"' "host"' "localhost").ToString ();  	m_user = ini.GetValue ("MySQL"' "user"' "root").ToString ();  	m_pass = ini.GetValue ("MySQL"' "pass"' "").ToString ();  	m_db = ini.GetValue ("MySQL"' "data"' "").ToString ();  	m_port = Convert.ToInt32 (ini.GetValue ("MySQL"' "port"' 3306));  	ini = null;  	LogConsole.Show (LogType.INFO' "Has loaded your ip settings successfully");  }  else {  	LogConsole.Show (LogType.ALERT' "Settings.ini could not be found' using default setting");  }  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: if (File.Exists (Environment.CurrentDirectory + @"\Settings\Settings.ini")) {  	ini = new Systems.Ini (Environment.CurrentDirectory + @"\Settings\Settings.ini");  	LSPort = Convert.ToInt32 (ini.GetValue ("Server"' "port"' 8372));  	LSIP = ini.GetValue ("Server"' "ip"' "127.0.0.1").ToString ();  	VER = ini.GetValue ("Server"' "ver"' 1);  	IPCPort = Convert.ToInt32 (ini.GetValue ("IPC"' "port"' 8500));  	IPCIP = ini.GetValue ("IPC"' "ip"' "127.0.0.1").ToString ();  	DEBUG = Convert.ToBoolean (ini.GetValue ("CONSOLE"' "debug"' "false"));  	m_host = ini.GetValue ("MySQL"' "host"' "localhost").ToString ();  	m_user = ini.GetValue ("MySQL"' "user"' "root").ToString ();  	m_pass = ini.GetValue ("MySQL"' "pass"' "").ToString ();  	m_db = ini.GetValue ("MySQL"' "data"' "").ToString ();  	m_port = Convert.ToInt32 (ini.GetValue ("MySQL"' "port"' 3306));  	ini = null;  	LogConsole.Show (LogType.INFO' "Has loaded your ip settings successfully");  }  else {  	LogConsole.Show (LogType.ALERT' "Settings.ini could not be found' using default setting");  }  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: LSPort = Convert.ToInt32 (ini.GetValue ("Server"' "port"' 8372));  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: IPCPort = Convert.ToInt32 (ini.GetValue ("IPC"' "port"' 8500));  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: m_port = Convert.ToInt32 (ini.GetValue ("MySQL"' "port"' 3306));  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: while (true) {  	Thread.Sleep (100);  }  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,LoopConsole,The following statement contains a magic number: while (true) {  	object[] totalMemory = new object[] {  		"BrokenServer | Ram Usage: "'  		GC.GetTotalMemory (false) / (long)1024'  		" KB | "  	};  	Console.Title = string.Concat (totalMemory);  	Thread.Sleep (1500);  }  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,LoopConsole,The following statement contains a magic number: while (true) {  	object[] totalMemory = new object[] {  		"BrokenServer | Ram Usage: "'  		GC.GetTotalMemory (false) / (long)1024'  		" KB | "  	};  	Console.Title = string.Concat (totalMemory);  	Thread.Sleep (1500);  }  
Magic Number,BrokenServer,Program,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Program.cs,LoopConsole,The following statement contains a magic number: Thread.Sleep (1500);  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The following statement contains a magic number: Console.WindowWidth = Console.LargestWindowWidth - 17;  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,_Load,The following statement contains a magic number: Console.WindowHeight = Console.LargestWindowHeight - 23;  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,Showb,The following statement contains a magic number: frame = trac.GetFrame (2);  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (bytes != null) {  	Show (LogType.DEBUG' typ);  	int bytesLength = bytes.Length;  	char[] HexChars = "0123456789ABCDEF".ToCharArray ();  	int firstHexColumn = 8 // 8 characters for the address  	+ 3;  	// 3 spaces  	int firstCharColumn = firstHexColumn + bytesPerLine * 3 // - 2 digit for the hexadecimal value and 1 space  	+ (bytesPerLine - 1) / 8 // - 1 extra space every 8 characters from the 9th  	+ 2;  	// 2 spaces   	int lineLength = firstCharColumn + bytesPerLine // - characters to show the ascii value  	+ Environment.NewLine.Length;  	// Carriage return and line feed (should normally be 2)  	char[] line = (new String (' '' lineLength - 2) + Environment.NewLine).ToCharArray ();  	int expectedLines = (bytesLength + bytesPerLine - 1) / bytesPerLine;  	StringBuilder result = new StringBuilder (expectedLines * lineLength);  	for (int i = 0; i < bytesLength; i += bytesPerLine) {  		line [0] = HexChars [(i >> 28) & 0xF];  		line [1] = HexChars [(i >> 24) & 0xF];  		line [2] = HexChars [(i >> 20) & 0xF];  		line [3] = HexChars [(i >> 16) & 0xF];  		line [4] = HexChars [(i >> 12) & 0xF];  		line [5] = HexChars [(i >> 8) & 0xF];  		line [6] = HexChars [(i >> 4) & 0xF];  		line [7] = HexChars [(i >> 0) & 0xF];  		int hexColumn = firstHexColumn;  		int charColumn = firstCharColumn;  		for (int j = 0; j < bytesPerLine; j++) {  			if (j > 0 && (j & 7) == 0)  				hexColumn++;  			if (i + j >= bytesLength) {  				line [hexColumn] = ' ';  				line [hexColumn + 1] = ' ';  				line [charColumn] = ' ';  			}  			else {  				byte b = bytes [i + j];  				line [hexColumn] = HexChars [(b >> 4) & 0xF];  				line [hexColumn + 1] = HexChars [b & 0xF];  				line [charColumn] = (b < 32 ? '·' : (char)b);  			}  			hexColumn += 3;  			charColumn++;  		}  		result.Append (line);  	}  	//return result.ToString();  	Console.WriteLine (result.ToString ());  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int i = 0; i < bytesLength; i += bytesPerLine) {  	line [0] = HexChars [(i >> 28) & 0xF];  	line [1] = HexChars [(i >> 24) & 0xF];  	line [2] = HexChars [(i >> 20) & 0xF];  	line [3] = HexChars [(i >> 16) & 0xF];  	line [4] = HexChars [(i >> 12) & 0xF];  	line [5] = HexChars [(i >> 8) & 0xF];  	line [6] = HexChars [(i >> 4) & 0xF];  	line [7] = HexChars [(i >> 0) & 0xF];  	int hexColumn = firstHexColumn;  	int charColumn = firstCharColumn;  	for (int j = 0; j < bytesPerLine; j++) {  		if (j > 0 && (j & 7) == 0)  			hexColumn++;  		if (i + j >= bytesLength) {  			line [hexColumn] = ' ';  			line [hexColumn + 1] = ' ';  			line [charColumn] = ' ';  		}  		else {  			byte b = bytes [i + j];  			line [hexColumn] = HexChars [(b >> 4) & 0xF];  			line [hexColumn + 1] = HexChars [b & 0xF];  			line [charColumn] = (b < 32 ? '·' : (char)b);  		}  		hexColumn += 3;  		charColumn++;  	}  	result.Append (line);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [0] = HexChars [(i >> 28) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [1] = HexChars [(i >> 24) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [2] = HexChars [(i >> 20) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [2] = HexChars [(i >> 20) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [3] = HexChars [(i >> 16) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [3] = HexChars [(i >> 16) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [4] = HexChars [(i >> 12) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [4] = HexChars [(i >> 12) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [5] = HexChars [(i >> 8) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [5] = HexChars [(i >> 8) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [6] = HexChars [(i >> 4) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [6] = HexChars [(i >> 4) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [7] = HexChars [(i >> 0) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int j = 0; j < bytesPerLine; j++) {  	if (j > 0 && (j & 7) == 0)  		hexColumn++;  	if (i + j >= bytesLength) {  		line [hexColumn] = ' ';  		line [hexColumn + 1] = ' ';  		line [charColumn] = ' ';  	}  	else {  		byte b = bytes [i + j];  		line [hexColumn] = HexChars [(b >> 4) & 0xF];  		line [hexColumn + 1] = HexChars [b & 0xF];  		line [charColumn] = (b < 32 ? '·' : (char)b);  	}  	hexColumn += 3;  	charColumn++;  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int j = 0; j < bytesPerLine; j++) {  	if (j > 0 && (j & 7) == 0)  		hexColumn++;  	if (i + j >= bytesLength) {  		line [hexColumn] = ' ';  		line [hexColumn + 1] = ' ';  		line [charColumn] = ' ';  	}  	else {  		byte b = bytes [i + j];  		line [hexColumn] = HexChars [(b >> 4) & 0xF];  		line [hexColumn + 1] = HexChars [b & 0xF];  		line [charColumn] = (b < 32 ? '·' : (char)b);  	}  	hexColumn += 3;  	charColumn++;  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int j = 0; j < bytesPerLine; j++) {  	if (j > 0 && (j & 7) == 0)  		hexColumn++;  	if (i + j >= bytesLength) {  		line [hexColumn] = ' ';  		line [hexColumn + 1] = ' ';  		line [charColumn] = ' ';  	}  	else {  		byte b = bytes [i + j];  		line [hexColumn] = HexChars [(b >> 4) & 0xF];  		line [hexColumn + 1] = HexChars [b & 0xF];  		line [charColumn] = (b < 32 ? '·' : (char)b);  	}  	hexColumn += 3;  	charColumn++;  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: for (int j = 0; j < bytesPerLine; j++) {  	if (j > 0 && (j & 7) == 0)  		hexColumn++;  	if (i + j >= bytesLength) {  		line [hexColumn] = ' ';  		line [hexColumn + 1] = ' ';  		line [charColumn] = ' ';  	}  	else {  		byte b = bytes [i + j];  		line [hexColumn] = HexChars [(b >> 4) & 0xF];  		line [hexColumn + 1] = HexChars [b & 0xF];  		line [charColumn] = (b < 32 ? '·' : (char)b);  	}  	hexColumn += 3;  	charColumn++;  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (j > 0 && (j & 7) == 0)  	hexColumn++;  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (i + j >= bytesLength) {  	line [hexColumn] = ' ';  	line [hexColumn + 1] = ' ';  	line [charColumn] = ' ';  }  else {  	byte b = bytes [i + j];  	line [hexColumn] = HexChars [(b >> 4) & 0xF];  	line [hexColumn + 1] = HexChars [b & 0xF];  	line [charColumn] = (b < 32 ? '·' : (char)b);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: if (i + j >= bytesLength) {  	line [hexColumn] = ' ';  	line [hexColumn + 1] = ' ';  	line [charColumn] = ' ';  }  else {  	byte b = bytes [i + j];  	line [hexColumn] = HexChars [(b >> 4) & 0xF];  	line [hexColumn + 1] = HexChars [b & 0xF];  	line [charColumn] = (b < 32 ? '·' : (char)b);  }  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [hexColumn] = HexChars [(b >> 4) & 0xF];  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: line [charColumn] = (b < 32 ? '·' : (char)b);  
Magic Number,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,HexDump,The following statement contains a magic number: hexColumn += 3;  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,CircShiftLeftW,The following statement contains a magic number: num = (uint)(num * Math.Pow (2.0' (double)n));  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,CircShiftLeftW,The following statement contains a magic number: num2 = (uint)(((double)num2) / Math.Pow (2.0' (double)(0x20 - n)));  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,DWORDToUINT,The following statement contains a magic number: return (uint)((((w.B0 << 0x18) | (w.B1 << 0x10)) | (w.B2 << 8)) | w.B3);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int i = 0; i < (num3 + 4); i++) {  	this.Append ((byte)0);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray [2] = this.ToDWORD (0x8f1bbcdc);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray [3] = this.ToDWORD (0xca62c1d6);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray2 [2] = this.ToDWORD (0x98badcfe);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray2 [3] = this.ToDWORD (0x10325476);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray2 [4] = this.ToDWORD (0xc3d2e1f0);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (int j = 0; j < num2; j++) {  	byte[] buffer2 = new byte[0x40];  	for (int k = j * 0x40; k < ((j + 1) * 0x40); k++) {  		buffer2 [k % 0x40] = buffer [k];  	}  	int index = 0;  	while (index <= 15) {  		dwordArray3 [index].B0 = buffer2 [index * 4];  		dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  		dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  		dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  		index++;  	}  	index = 0x10;  	while (index <= 0x4f) {  		dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  		index++;  	}  	DWORD w = dwordArray2 [0];  	DWORD b = dwordArray2 [1];  	DWORD c = dwordArray2 [2];  	DWORD d = dwordArray2 [3];  	DWORD dword5 = dwordArray2 [4];  	for (index = 0; index <= 0x4f; index++) {  		DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  		dword5 = d;  		d = c;  		c = this.CircShiftLeftW (b' 30);  		b = w;  		w = dword7;  	}  	dwordArray2 [0] = this.AddW (dwordArray2 [0]' w);  	dwordArray2 [1] = this.AddW (dwordArray2 [1]' b);  	dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  	dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  	dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: while (index <= 15) {  	dwordArray3 [index].B0 = buffer2 [index * 4];  	dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  	dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  	dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  	index++;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: while (index <= 15) {  	dwordArray3 [index].B0 = buffer2 [index * 4];  	dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  	dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  	dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  	index++;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: while (index <= 15) {  	dwordArray3 [index].B0 = buffer2 [index * 4];  	dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  	dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  	dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  	index++;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: while (index <= 15) {  	dwordArray3 [index].B0 = buffer2 [index * 4];  	dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  	dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  	dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  	index++;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: while (index <= 15) {  	dwordArray3 [index].B0 = buffer2 [index * 4];  	dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  	dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  	dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  	index++;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: while (index <= 15) {  	dwordArray3 [index].B0 = buffer2 [index * 4];  	dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  	dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  	dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  	index++;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: while (index <= 15) {  	dwordArray3 [index].B0 = buffer2 [index * 4];  	dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  	dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  	dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  	index++;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray3 [index].B0 = buffer2 [index * 4];  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray3 [index].B1 = buffer2 [(index * 4) + 1];  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray3 [index].B2 = buffer2 [(index * 4) + 2];  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray3 [index].B3 = buffer2 [(index * 4) + 3];  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: while (index <= 0x4f) {  	dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  	index++;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: while (index <= 0x4f) {  	dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  	index++;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: while (index <= 0x4f) {  	dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  	index++;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray3 [index] = this.XOrW (this.XOrW (this.XOrW (dwordArray3 [index - 3]' dwordArray3 [index - 8])' dwordArray3 [index - 14])' dwordArray3 [index - 0x10]);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (index = 0; index <= 0x4f; index++) {  	DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  	dword5 = d;  	d = c;  	c = this.CircShiftLeftW (b' 30);  	b = w;  	w = dword7;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (index = 0; index <= 0x4f; index++) {  	DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  	dword5 = d;  	d = c;  	c = this.CircShiftLeftW (b' 30);  	b = w;  	w = dword7;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: for (index = 0; index <= 0x4f; index++) {  	DWORD dword7 = this.AddW (this.AddW (this.AddW (this.AddW (this.CircShiftLeftW (w' 5)' this.F (index' b' c' d))' dword5)' dwordArray3 [index])' dwordArray [index / 20]);  	dword5 = d;  	d = c;  	c = this.CircShiftLeftW (b' 30);  	b = w;  	w = dword7;  }  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: c = this.CircShiftLeftW (b' 30);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray2 [2] = this.AddW (dwordArray2 [2]' c);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray2 [3] = this.AddW (dwordArray2 [3]' d);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: dwordArray2 [4] = this.AddW (dwordArray2 [4]' dword5);  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: return new byte[] {  	dwordArray2 [0].B3'  	dwordArray2 [0].B2'  	dwordArray2 [0].B1'  	dwordArray2 [0].B0'  	dwordArray2 [1].B3'  	dwordArray2 [1].B2'  	dwordArray2 [1].B1'  	dwordArray2 [1].B0'  	dwordArray2 [2].B3'  	dwordArray2 [2].B2'  	dwordArray2 [2].B1'  	dwordArray2 [2].B0'  	dwordArray2 [3].B3'  	dwordArray2 [3].B2'  	dwordArray2 [3].B1'  	dwordArray2 [3].B0  };  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: return new byte[] {  	dwordArray2 [0].B3'  	dwordArray2 [0].B2'  	dwordArray2 [0].B1'  	dwordArray2 [0].B0'  	dwordArray2 [1].B3'  	dwordArray2 [1].B2'  	dwordArray2 [1].B1'  	dwordArray2 [1].B0'  	dwordArray2 [2].B3'  	dwordArray2 [2].B2'  	dwordArray2 [2].B1'  	dwordArray2 [2].B0'  	dwordArray2 [3].B3'  	dwordArray2 [3].B2'  	dwordArray2 [3].B1'  	dwordArray2 [3].B0  };  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: return new byte[] {  	dwordArray2 [0].B3'  	dwordArray2 [0].B2'  	dwordArray2 [0].B1'  	dwordArray2 [0].B0'  	dwordArray2 [1].B3'  	dwordArray2 [1].B2'  	dwordArray2 [1].B1'  	dwordArray2 [1].B0'  	dwordArray2 [2].B3'  	dwordArray2 [2].B2'  	dwordArray2 [2].B1'  	dwordArray2 [2].B0'  	dwordArray2 [3].B3'  	dwordArray2 [3].B2'  	dwordArray2 [3].B1'  	dwordArray2 [3].B0  };  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: return new byte[] {  	dwordArray2 [0].B3'  	dwordArray2 [0].B2'  	dwordArray2 [0].B1'  	dwordArray2 [0].B0'  	dwordArray2 [1].B3'  	dwordArray2 [1].B2'  	dwordArray2 [1].B1'  	dwordArray2 [1].B0'  	dwordArray2 [2].B3'  	dwordArray2 [2].B2'  	dwordArray2 [2].B1'  	dwordArray2 [2].B0'  	dwordArray2 [3].B3'  	dwordArray2 [3].B2'  	dwordArray2 [3].B1'  	dwordArray2 [3].B0  };  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: return new byte[] {  	dwordArray2 [0].B3'  	dwordArray2 [0].B2'  	dwordArray2 [0].B1'  	dwordArray2 [0].B0'  	dwordArray2 [1].B3'  	dwordArray2 [1].B2'  	dwordArray2 [1].B1'  	dwordArray2 [1].B0'  	dwordArray2 [2].B3'  	dwordArray2 [2].B2'  	dwordArray2 [2].B1'  	dwordArray2 [2].B0'  	dwordArray2 [3].B3'  	dwordArray2 [3].B2'  	dwordArray2 [3].B1'  	dwordArray2 [3].B0  };  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: return new byte[] {  	dwordArray2 [0].B3'  	dwordArray2 [0].B2'  	dwordArray2 [0].B1'  	dwordArray2 [0].B0'  	dwordArray2 [1].B3'  	dwordArray2 [1].B2'  	dwordArray2 [1].B1'  	dwordArray2 [1].B0'  	dwordArray2 [2].B3'  	dwordArray2 [2].B2'  	dwordArray2 [2].B1'  	dwordArray2 [2].B0'  	dwordArray2 [3].B3'  	dwordArray2 [3].B2'  	dwordArray2 [3].B1'  	dwordArray2 [3].B0  };  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: return new byte[] {  	dwordArray2 [0].B3'  	dwordArray2 [0].B2'  	dwordArray2 [0].B1'  	dwordArray2 [0].B0'  	dwordArray2 [1].B3'  	dwordArray2 [1].B2'  	dwordArray2 [1].B1'  	dwordArray2 [1].B0'  	dwordArray2 [2].B3'  	dwordArray2 [2].B2'  	dwordArray2 [2].B1'  	dwordArray2 [2].B0'  	dwordArray2 [3].B3'  	dwordArray2 [3].B2'  	dwordArray2 [3].B1'  	dwordArray2 [3].B0  };  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,SHA1,The following statement contains a magic number: return new byte[] {  	dwordArray2 [0].B3'  	dwordArray2 [0].B2'  	dwordArray2 [0].B1'  	dwordArray2 [0].B0'  	dwordArray2 [1].B3'  	dwordArray2 [1].B2'  	dwordArray2 [1].B1'  	dwordArray2 [1].B0'  	dwordArray2 [2].B3'  	dwordArray2 [2].B2'  	dwordArray2 [2].B1'  	dwordArray2 [2].B0'  	dwordArray2 [3].B3'  	dwordArray2 [3].B2'  	dwordArray2 [3].B1'  	dwordArray2 [3].B0  };  
Magic Number,BrokenServer.Util,SpecialSHA,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\SpecialSHA.cs,ToDWORD,The following statement contains a magic number: dword.B2 = (byte)(n >> 8);  
Missing Default,BrokenServer,LogConsole,C:\repos\CarlosX_GunBoundWC\BrokenServer\BrokenServer\Util\LogConsole.cs,Showb,The following switch statement is missing a default case: switch (type) {  case LogType.NORMAL: {  	Console.ForegroundColor = ConsoleColor.Gray;  	Console.Write (string.Concat (shortDateString));  	Console.Write ("[");  	Console.Write (string.Concat (frame.GetMethod ().ReflectedType.Name' "."' frame.GetMethod ().Name));  	Console.Write ("] » ");  	Console.ForegroundColor = (ConsoleColor)LogColor.NORMAL;  	Console.Write (str' args);  	Console.Write ("\n");  	Console.ForegroundColor = ConsoleColor.Gray;  	break;  }  case LogType.INFO: {  	Console.ForegroundColor = ConsoleColor.Gray;  	Console.Write (string.Concat (shortDateString));  	Console.Write ("[");  	Console.ForegroundColor = ConsoleColor.Yellow;  	Console.Write (string.Concat (frame.GetMethod ().ReflectedType.Name' "."' frame.GetMethod ().Name));  	Console.ForegroundColor = ConsoleColor.Gray;  	Console.Write ("] » ");  	Console.ForegroundColor = (ConsoleColor)LogColor.INFO;  	Console.Write (str' args);  	Console.Write ("\n");  	Console.ForegroundColor = ConsoleColor.Gray;  	break;  }  case LogType.ALERT: {  	Console.ForegroundColor = ConsoleColor.Gray;  	Console.Write (string.Concat (shortDateString));  	Console.Write ("[");  	Console.ForegroundColor = ConsoleColor.Yellow;  	Console.Write (string.Concat (frame.GetMethod ().ReflectedType.Name' "."' frame.GetMethod ().Name));  	Console.ForegroundColor = ConsoleColor.Gray;  	Console.Write ("] » ");  	Console.ForegroundColor = (ConsoleColor)LogColor.ALERT;  	Console.Write (str' args);  	Console.Write ("\n");  	Console.ForegroundColor = ConsoleColor.Gray;  	Console.Beep ();  	break;  }  case LogType.ERROR: {  	Console.ForegroundColor = ConsoleColor.Gray;  	Console.Write (string.Concat (shortDateString));  	Console.Write ("[");  	Console.ForegroundColor = ConsoleColor.Yellow;  	Console.Write (string.Concat (frame.GetMethod ().ReflectedType.Name' "."' frame.GetMethod ().Name));  	Console.ForegroundColor = ConsoleColor.Gray;  	Console.Write ("] » ");  	Console.ForegroundColor = (ConsoleColor)LogColor.ERROR;  	Console.Write (str' args);  	Console.Write ("\n");  	Console.ForegroundColor = ConsoleColor.Gray;  	break;  }  case LogType.DEBUG: {  	Console.ForegroundColor = ConsoleColor.Gray;  	Console.Write (string.Concat (shortDateString));  	Console.Write ("[");  	Console.ForegroundColor = ConsoleColor.Red;  	Console.Write (string.Concat (frame.GetMethod ().ReflectedType.Name' "."' frame.GetMethod ().Name));  	Console.ForegroundColor = ConsoleColor.Gray;  	Console.Write ("] » ");  	Console.ForegroundColor = (ConsoleColor)LogColor.DEBUG;  	Console.Write (str' args);  	Console.Write ("\n");  	Console.ForegroundColor = ConsoleColor.Gray;  	break;  }  }  
