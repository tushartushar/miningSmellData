Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Avro,AvroTypeSerializer,C:\repos\mgravell_avro.net\Avro\AvroFieldTypeSerializer.cs,ReadJson,Cyclomatic complexity of the method is 12
Complex Method,Avro,AvroFieldTypeSerializer,C:\repos\mgravell_avro.net\Avro\AvroFieldTypeSerializer.cs,ReadFieldType,Cyclomatic complexity of the method is 9
Complex Method,Avro,AvroType,C:\repos\mgravell_avro.net\Avro\AvroSchema.cs,Create,Cyclomatic complexity of the method is 8
Complex Method,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteAvroString,Cyclomatic complexity of the method is 17
Magic Number,Avro,AvroReader,C:\repos\mgravell_avro.net\Avro\AvroReader.cs,ReadUInt32,The following statement contains a magic number: value |= ((uint)b & 0x7F) << 7;  
Magic Number,Avro,AvroReader,C:\repos\mgravell_avro.net\Avro\AvroReader.cs,ReadUInt32,The following statement contains a magic number: value |= ((uint)b & 0x7F) << 14;  
Magic Number,Avro,AvroReader,C:\repos\mgravell_avro.net\Avro\AvroReader.cs,ReadUInt32,The following statement contains a magic number: value |= ((uint)b & 0x7F) << 21;  
Magic Number,Avro,AvroReader,C:\repos\mgravell_avro.net\Avro\AvroReader.cs,ReadUInt32,The following statement contains a magic number: value |= (uint)b << 28;  
Magic Number,Avro,LittleEndianAvroReader,C:\repos\mgravell_avro.net\Avro\AvroReader.cs,ReadSingle,The following statement contains a magic number: Read (4);  
Magic Number,Avro,LittleEndianAvroReader,C:\repos\mgravell_avro.net\Avro\AvroReader.cs,ReadDouble,The following statement contains a magic number: Read (8);  
Magic Number,Avro,AvroUtil,C:\repos\mgravell_avro.net\Avro\AvroUtil.cs,ZigZag,The following statement contains a magic number: return (uint)((value << 1) ^ (value >> 31));  
Magic Number,Avro,AvroUtil,C:\repos\mgravell_avro.net\Avro\AvroUtil.cs,ZigZag,The following statement contains a magic number: return (ulong)((value << 1) ^ (value >> 63));  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteAvroString,The following statement contains a magic number: switch (segments.Count) {  case 0:  	WriteUInt32 (AvroUtil.ZigZag (0));  	break;  case 1:  	{  		var segment0 = segments [0];  		int byteCount0 = encoding.GetByteCount (segment0.Array' segment0.Offset' segment0.Count);  		WriteUInt32 (AvroUtil.ZigZag (byteCount0));  		int offset = Reserve (byteCount0);  		encoding.GetBytes (segment0.Array' segment0.Offset' segment0.Count' ioBuffer' offset);  	}  	break;  case 2:  	{  		var segment0 = segments [0];  		var segment1 = segments [1];  		int byteCount0 = encoding.GetByteCount (segment0.Array' segment0.Offset' segment0.Count);  		int byteCount1 = encoding.GetByteCount (segment1.Array' segment1.Offset' segment1.Count);  		WriteUInt32 (AvroUtil.ZigZag (byteCount0 + byteCount1));  		int offset = Reserve (byteCount0);  		encoding.GetBytes (segment0.Array' segment0.Offset' segment0.Count' ioBuffer' offset);  		offset = Reserve (byteCount1);  		encoding.GetBytes (segment1.Array' segment1.Offset' segment1.Count' ioBuffer' offset);  	}  	break;  case 3:  	{  		var segment0 = segments [0];  		var segment1 = segments [1];  		var segment2 = segments [2];  		int byteCount0 = encoding.GetByteCount (segment0.Array' segment0.Offset' segment0.Count);  		int byteCount1 = encoding.GetByteCount (segment1.Array' segment1.Offset' segment1.Count);  		int byteCount2 = encoding.GetByteCount (segment2.Array' segment2.Offset' segment2.Count);  		WriteUInt32 (AvroUtil.ZigZag (byteCount0 + byteCount1 + byteCount2));  		int offset = Reserve (byteCount0);  		encoding.GetBytes (segment0.Array' segment0.Offset' segment0.Count' ioBuffer' offset);  		offset = Reserve (byteCount1);  		encoding.GetBytes (segment1.Array' segment1.Offset' segment1.Count' ioBuffer' offset);  		offset = Reserve (byteCount2);  		encoding.GetBytes (segment2.Array' segment2.Offset' segment2.Count' ioBuffer' offset);  	}  	break;  default:  	{  		foreach (var segment in segments) {  			byteCount += encoding.GetByteCount (segment.Array' segment.Offset' segment.Count);  		}  		WriteUInt32 (AvroUtil.ZigZag (byteCount));  		int perChar = AvroContext.MaxBytesPerCharacter;  		foreach (var segment in foo.Segments) {  			int reserved = perChar * segment.Count;  			int offset = Reserve (reserved);  			// but we were almost certainly wrong (over-estimate)...  			int delta = reserved - encoding.GetBytes (segment.Array' segment.Offset' segment.Count' ioBuffer' offset);  			ioRemaining += delta;  			ioOffset -= delta;  		}  	}  	break;  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteAvroString,The following statement contains a magic number: switch (segments.Count) {  case 0:  	WriteUInt32 (AvroUtil.ZigZag (0));  	break;  case 1:  	{  		var segment0 = segments [0];  		int byteCount0 = encoding.GetByteCount (segment0.Array' segment0.Offset' segment0.Count);  		WriteUInt32 (AvroUtil.ZigZag (byteCount0));  		int offset = Reserve (byteCount0);  		encoding.GetBytes (segment0.Array' segment0.Offset' segment0.Count' ioBuffer' offset);  	}  	break;  case 2:  	{  		var segment0 = segments [0];  		var segment1 = segments [1];  		int byteCount0 = encoding.GetByteCount (segment0.Array' segment0.Offset' segment0.Count);  		int byteCount1 = encoding.GetByteCount (segment1.Array' segment1.Offset' segment1.Count);  		WriteUInt32 (AvroUtil.ZigZag (byteCount0 + byteCount1));  		int offset = Reserve (byteCount0);  		encoding.GetBytes (segment0.Array' segment0.Offset' segment0.Count' ioBuffer' offset);  		offset = Reserve (byteCount1);  		encoding.GetBytes (segment1.Array' segment1.Offset' segment1.Count' ioBuffer' offset);  	}  	break;  case 3:  	{  		var segment0 = segments [0];  		var segment1 = segments [1];  		var segment2 = segments [2];  		int byteCount0 = encoding.GetByteCount (segment0.Array' segment0.Offset' segment0.Count);  		int byteCount1 = encoding.GetByteCount (segment1.Array' segment1.Offset' segment1.Count);  		int byteCount2 = encoding.GetByteCount (segment2.Array' segment2.Offset' segment2.Count);  		WriteUInt32 (AvroUtil.ZigZag (byteCount0 + byteCount1 + byteCount2));  		int offset = Reserve (byteCount0);  		encoding.GetBytes (segment0.Array' segment0.Offset' segment0.Count' ioBuffer' offset);  		offset = Reserve (byteCount1);  		encoding.GetBytes (segment1.Array' segment1.Offset' segment1.Count' ioBuffer' offset);  		offset = Reserve (byteCount2);  		encoding.GetBytes (segment2.Array' segment2.Offset' segment2.Count' ioBuffer' offset);  	}  	break;  default:  	{  		foreach (var segment in segments) {  			byteCount += encoding.GetByteCount (segment.Array' segment.Offset' segment.Count);  		}  		WriteUInt32 (AvroUtil.ZigZag (byteCount));  		int perChar = AvroContext.MaxBytesPerCharacter;  		foreach (var segment in foo.Segments) {  			int reserved = perChar * segment.Count;  			int offset = Reserve (reserved);  			// but we were almost certainly wrong (over-estimate)...  			int delta = reserved - encoding.GetBytes (segment.Array' segment.Offset' segment.Count' ioBuffer' offset);  			ioRemaining += delta;  			ioOffset -= delta;  		}  	}  	break;  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteAvroString,The following statement contains a magic number: switch (segments.Count) {  case 0:  	WriteUInt32 (AvroUtil.ZigZag (0));  	break;  case 1:  	{  		var segment0 = segments [0];  		int byteCount0 = encoding.GetByteCount (segment0.Array' segment0.Offset' segment0.Count);  		WriteUInt32 (AvroUtil.ZigZag (byteCount0));  		int offset = Reserve (byteCount0);  		encoding.GetBytes (segment0.Array' segment0.Offset' segment0.Count' ioBuffer' offset);  	}  	break;  case 2:  	{  		var segment0 = segments [0];  		var segment1 = segments [1];  		int byteCount0 = encoding.GetByteCount (segment0.Array' segment0.Offset' segment0.Count);  		int byteCount1 = encoding.GetByteCount (segment1.Array' segment1.Offset' segment1.Count);  		WriteUInt32 (AvroUtil.ZigZag (byteCount0 + byteCount1));  		int offset = Reserve (byteCount0);  		encoding.GetBytes (segment0.Array' segment0.Offset' segment0.Count' ioBuffer' offset);  		offset = Reserve (byteCount1);  		encoding.GetBytes (segment1.Array' segment1.Offset' segment1.Count' ioBuffer' offset);  	}  	break;  case 3:  	{  		var segment0 = segments [0];  		var segment1 = segments [1];  		var segment2 = segments [2];  		int byteCount0 = encoding.GetByteCount (segment0.Array' segment0.Offset' segment0.Count);  		int byteCount1 = encoding.GetByteCount (segment1.Array' segment1.Offset' segment1.Count);  		int byteCount2 = encoding.GetByteCount (segment2.Array' segment2.Offset' segment2.Count);  		WriteUInt32 (AvroUtil.ZigZag (byteCount0 + byteCount1 + byteCount2));  		int offset = Reserve (byteCount0);  		encoding.GetBytes (segment0.Array' segment0.Offset' segment0.Count' ioBuffer' offset);  		offset = Reserve (byteCount1);  		encoding.GetBytes (segment1.Array' segment1.Offset' segment1.Count' ioBuffer' offset);  		offset = Reserve (byteCount2);  		encoding.GetBytes (segment2.Array' segment2.Offset' segment2.Count' ioBuffer' offset);  	}  	break;  default:  	{  		foreach (var segment in segments) {  			byteCount += encoding.GetByteCount (segment.Array' segment.Offset' segment.Count);  		}  		WriteUInt32 (AvroUtil.ZigZag (byteCount));  		int perChar = AvroContext.MaxBytesPerCharacter;  		foreach (var segment in foo.Segments) {  			int reserved = perChar * segment.Count;  			int offset = Reserve (reserved);  			// but we were almost certainly wrong (over-estimate)...  			int delta = reserved - encoding.GetBytes (segment.Array' segment.Offset' segment.Count' ioBuffer' offset);  			ioRemaining += delta;  			ioOffset -= delta;  		}  	}  	break;  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x7F) == 0)// 1 byte   {  	ioBuffer [Reserve (1)] = (byte)value;  }  else if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x3FFF) == 0)// 2 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 7);  }  else if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: ioBuffer [offset] = (byte)(value >> 7);  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0x1FFFFF) == 0)// 3 bytes   {  	int offset = Reserve (2);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 14);  }  else if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: ioBuffer [offset] = (byte)(value >> 14);  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: if ((value & 0xFFFFFFF) == 0)// 4 bytes   {  	int offset = Reserve (4);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 21);  }  else// 5 bytes   {  	int offset = Reserve (5);  	ioBuffer [offset++] = (byte)((value & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  	ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  	ioBuffer [offset] = (byte)(value >> 28);  }  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: ioBuffer [offset] = (byte)(value >> 21);  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: ioBuffer [offset++] = (byte)(((value >> 7) & 0x7F) | 0x80);  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: ioBuffer [offset++] = (byte)(((value >> 14) & 0x7F) | 0x80);  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: ioBuffer [offset++] = (byte)(((value >> 21) & 0x7F) | 0x80);  
Magic Number,Avro,AvroWriter,C:\repos\mgravell_avro.net\Avro\AvroWriter.cs,WriteUInt32,The following statement contains a magic number: ioBuffer [offset] = (byte)(value >> 28);  
