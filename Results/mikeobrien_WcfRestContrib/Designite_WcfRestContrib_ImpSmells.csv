Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WcfRestContrib.ServiceModel.Description,WebDispatchFormatterBehavior,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Description\WebDispatchFormatterBehavior.cs,ApplyDispatchBehavior,Cyclomatic complexity of the method is 12
Complex Method,WcfRestContrib.ServiceModel,ServiceHostBaseExtensions,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\ServiceHostBaseExtensions.cs,LoadBinding,Cyclomatic complexity of the method is 8
Complex Method,WcfRestContrib.ServiceModel.Web,WebServiceHost,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Web\WebServiceHost.cs,OnOpening,Cyclomatic complexity of the method is 8
Complex Method,WcfRestContrib.Xml,TypeExtensions,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\Xml\TypeExtensions.cs,GetXsdType,Cyclomatic complexity of the method is 17
Long Parameter List,WcfRestContrib.ServiceModel.Channels,NameValueReader,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Channels\NameValueReader.cs,DecodeNameValuePair,The method has 5 parameters. Parameters: document' elementMap' name' value' nameEntitiesSeperator
Long Parameter List,WcfRestContrib.ServiceModel.Dispatcher,IWebAuthenticationHandler,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\IWebAuthenticationHandler.cs,Authenticate,The method has 7 parameters. Parameters: request' response' parameters' validatorType' secure' requiresTransportLayerSecurity' source
Long Parameter List,WcfRestContrib.ServiceModel.Dispatcher,OperationAuthenticationInvoker,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\OperationAuthenticationInvoker.cs,OperationAuthenticationInvoker,The method has 5 parameters. Parameters: invoker' handler' validatorType' requiresTransportLayerSecurity' source
Long Parameter List,WcfRestContrib.ServiceModel.Dispatcher,WebBasicAuthenticationHandler,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\WebBasicAuthenticationHandler.cs,Authenticate,The method has 7 parameters. Parameters: request' response' parameters' validatorType' secure' requiresTransportLayerSecurity' source
Long Parameter List,WcfRestContrib.ServiceModel.Dispatcher,WebDispatchFormatter,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\WebDispatchFormatter.cs,Deserialize,The method has 5 parameters. Parameters: message' formatterFactory' parameters' requestParameters' contentType
Long Parameter List,WcfRestContrib.ServiceModel.Web,ServiceConfigurationAttribute,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Web\ServiceConfigurationAttribute.cs,ServiceConfigurationAttribute,The method has 6 parameters. Parameters: behaviorConfiguration' customErrorHandler' transferMode' instanceContextMode' concurencyMode' bindingConfiguration
Long Identifier,WcfRestContrib.IdentityModel.Policy,IdentityAuthorizationPolicy,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\IdentityModel\Policy\IdentityAuthorizationPolicy.cs,,The length of the parameter AuthContextIdentityPropertyName is 31.
Long Identifier,WcfRestContrib.ServiceModel.Configuration.WebAuthentication,BehaviorElement,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Configuration\WebAuthentication\BehaviorElement.cs,CreateBehavior,The length of the parameter operationAuthenticationHandler is 30.
Long Identifier,WcfRestContrib.ServiceModel.Configuration.WebAuthentication,BehaviorElement,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Configuration\WebAuthentication\BehaviorElement.cs,,The length of the parameter UsernamePasswordValidatorTypeElement is 36.
Long Identifier,WcfRestContrib.ServiceModel.Configuration.WebErrorHandler,BehaviorElement,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Configuration\WebErrorHandler\BehaviorElement.cs,,The length of the parameter ExceptionDataContractTypeElement is 32.
Long Identifier,WcfRestContrib.ServiceModel.Description,ErrorHandlerBehavior,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Description\ErrorHandlerBehavior.cs,,The length of the parameter HttpRequestInformationProperty is 30.
Long Identifier,WcfRestContrib.ServiceModel.Description,RedirectAttribute,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Description\RedirectAttribute.cs,RedirectAttribute,The length of the parameter redirectUrlQuerystringParameter is 31.
Long Identifier,WcfRestContrib.ServiceModel.Description,RedirectBehavior,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Description\RedirectBehavior.cs,RedirectBehavior,The length of the parameter redirectUrlQuerystringParameter is 31.
Long Identifier,WcfRestContrib.ServiceModel.Description,RedirectBehavior,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Description\RedirectBehavior.cs,,The length of the parameter _redirectUrlQuerystringParameter is 32.
Long Identifier,WcfRestContrib.ServiceModel.Dispatcher,IWebAuthenticationHandler,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\IWebAuthenticationHandler.cs,Authenticate,The length of the parameter requiresTransportLayerSecurity is 30.
Long Identifier,WcfRestContrib.ServiceModel.Dispatcher,OperationAuthenticationInvoker,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\OperationAuthenticationInvoker.cs,OperationAuthenticationInvoker,The length of the parameter requiresTransportLayerSecurity is 30.
Long Identifier,WcfRestContrib.ServiceModel.Dispatcher,OperationAuthenticationInvoker,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\OperationAuthenticationInvoker.cs,,The length of the parameter _requiresTransportLayerSecurity is 31.
Long Identifier,WcfRestContrib.ServiceModel.Dispatcher,RedirectInspector,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\RedirectInspector.cs,RedirectInspector,The length of the parameter redirectUrlQuerystringParameter is 31.
Long Identifier,WcfRestContrib.ServiceModel.Dispatcher,RedirectInspector,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\RedirectInspector.cs,GetRedirectUrl,The length of the parameter redirectUrlQuerystringParameter is 31.
Long Identifier,WcfRestContrib.ServiceModel.Dispatcher,RedirectInspector,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\RedirectInspector.cs,,The length of the parameter _redirectUrlQuerystringParameter is 32.
Long Identifier,WcfRestContrib.ServiceModel.Dispatcher,ServiceAuthenticationInspector,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\ServiceAuthenticationInspector.cs,ServiceAuthenticationInspector,The length of the parameter requiresTransportLayerSecurity is 30.
Long Identifier,WcfRestContrib.ServiceModel.Dispatcher,ServiceAuthenticationInspector,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\ServiceAuthenticationInspector.cs,,The length of the parameter _requiresTransportLayerSecurity is 31.
Long Identifier,WcfRestContrib.ServiceModel.Dispatcher,WebBasicAuthenticationHandler,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\WebBasicAuthenticationHandler.cs,Authenticate,The length of the parameter requiresTransportLayerSecurity is 30.
Long Identifier,WcfRestContrib.ServiceModel.Dispatcher,WebDispatchFormatter,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\WebDispatchFormatter.cs,,The length of the parameter WebDispatcherFormatterProperty is 30.
Long Identifier,WcfRestContrib.ServiceModel.Web,WebServiceHost,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Web\WebServiceHost.cs,,The length of the parameter _serviceConfigurationAttribute is 30.
Long Statement,WcfRestContrib.ServiceModel.Configuration,ConfigurationManager,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Configuration\ConfigurationManager.cs,GetServiceBehaviorElement,The length of the statement  "            return behaviorsSection.ServiceBehaviors.Cast<ServiceBehaviorElement>().FirstOrDefault(behavior => behavior.Name == behaviorConfiguration); " is 139.
Long Statement,WcfRestContrib.ServiceModel.Configuration.DependencyInjection,BehaviorElement,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Configuration\DependencyInjection\BehaviorElement.cs,CreateBehavior,The length of the statement  "                throw new Exception(string.Format("Invalid objectFactoryType specified in dependencyInjection behavior element. {0}"' e)); " is 122.
Long Statement,WcfRestContrib.ServiceModel.Configuration.WebAuthentication,BehaviorElement,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Configuration\WebAuthentication\BehaviorElement.cs,CreateBehavior,The length of the statement  "                    throw new Exception(string.Format("Invalid authenticationHandlerType specified in webAuthentication behavior element. {0}"' e)); " is 128.
Long Statement,WcfRestContrib.ServiceModel.Configuration.WebAuthentication,BehaviorElement,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Configuration\WebAuthentication\BehaviorElement.cs,CreateBehavior,The length of the statement  "                    throw new Exception(string.Format("Invalid usernamePasswordValidatorType specified in webAuthentication behavior element. {0}"' e)); " is 132.
Long Statement,WcfRestContrib.ServiceModel.Configuration.WebErrorHandler,BehaviorElement,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Configuration\WebErrorHandler\BehaviorElement.cs,CreateBehavior,The length of the statement  "                    throw new Exception(string.Format("Invalid exceptionDataContractType specified in webErrorHandler behavior element. {0}"' e)); " is 126.
Long Statement,WcfRestContrib.ServiceModel.Description,OperationAuthenticationBehavior,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Description\OperationAuthenticationBehavior.cs,ApplyDispatchBehavior,The length of the statement  "                    "OperationAuthenticationConfigurationBehavior not applied to contract or service. This behavior is required to configure operation authentication."); " is 149.
Long Statement,WcfRestContrib.ServiceModel.Description,OperationDescriptionExtensions,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Description\OperationDescriptionExtensions.cs,GetWebUriTemplateQuerystring,The length of the statement  "            return !string.IsNullOrEmpty(template) ? HttpUtility.ParseQueryString(new Uri(new Uri("dummy:")' template).Query).ToEnumerable() : null; " is 136.
Long Statement,WcfRestContrib.ServiceModel.Description,WebDispatchFormatterBehavior,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Description\WebDispatchFormatterBehavior.cs,ApplyDispatchBehavior,The length of the statement  "                    "WebDispatchFormatterConfigurationBehavior or WebDispatchFormatterMimeTypeAttribute's not applied to contract or service. This behavior or attributes are required to configure web dispatch formatting."); " is 203.
Long Statement,WcfRestContrib.ServiceModel.Dispatcher,DependencyInjectionInstanceProvider,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\DependencyInjectionInstanceProvider.cs,GetInstance,The length of the statement  "                if (OperationContainer.Exists()) DependencyResolver.Current.ReleaseOperationContainer(OperationContainer.GetCurrent()); }; " is 122.
Long Statement,WcfRestContrib.ServiceModel.Dispatcher,WebBasicAuthenticationHandler,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\WebBasicAuthenticationHandler.cs,Authenticate,The length of the statement  "                ? DependencyResolver.Current.GetOperationService<UserNamePasswordValidator>(OperationContainer.GetCurrent()' validatorType) " is 123.
Long Statement,WcfRestContrib.ServiceModel.Dispatcher,WebBasicAuthenticationHandler,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\WebBasicAuthenticationHandler.cs,Authenticate,The length of the statement  "                : DependencyResolver.Current.GetOperationService<UserNamePasswordValidator>(OperationContainer.GetCurrent()).ThrowIfNull(); " is 123.
Long Statement,WcfRestContrib.ServiceModel.Web,WebErrorHandler,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Web\WebErrorHandler.cs,ProvideFault,The length of the statement  "            if (OperationContext.Current.OutgoingMessageProperties.ContainsKey(WebDispatchFormatter.WebDispatcherFormatterProperty)) " is 120.
Long Statement,WcfRestContrib.ServiceModel.Web,WebErrorHandler,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Web\WebErrorHandler.cs,ProvideFault,The length of the statement  "                webDispatchFormatter = OperationContext.Current.OutgoingMessageProperties[WebDispatchFormatter.WebDispatcherFormatterProperty] as WebDispatchFormatter; " is 151.
Empty Catch Block,WcfRestContrib.Net.Http,BasicAuthentication,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\Net\Http\BasicAuthentication.cs,Authenticate,The method has an empty catch block.
Empty Catch Block,WcfRestContrib.Net.Http,BasicAuthentication,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\Net\Http\BasicAuthentication.cs,GetCredentials,The method has an empty catch block.
Magic Number,WcfRestContrib.IO,StreamExtensions,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\IO\StreamExtensions.cs,Save,The following statement contains a magic number: if (bufferSize < 1) bufferSize = 4096;
Magic Number,WcfRestContrib.Net.Http,BasicAuthentication,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\Net\Http\BasicAuthentication.cs,GetCredentials,The following statement contains a magic number: if (!string.IsNullOrEmpty(credentials))              {                  try                  {                      var credentialParts = credentials.Split(new [] { ' ' });                      if (credentialParts.Length == 2 &&                           credentialParts[0].Equals("basic"'                           StringComparison.OrdinalIgnoreCase))                      {                          credentials = Encoding.ASCII.GetString(                              Convert.FromBase64String(credentialParts[1]));                          credentialParts = credentials.Split(new [] { ':' }' 2);                          if (credentialParts.Length == 2)                          {                              _username = credentialParts[0];                              _password = credentialParts[1];                              _valid = true;                              return;                          }                      }                  }                  catch { }              }
Magic Number,WcfRestContrib.Net.Http,BasicAuthentication,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\Net\Http\BasicAuthentication.cs,GetCredentials,The following statement contains a magic number: if (!string.IsNullOrEmpty(credentials))              {                  try                  {                      var credentialParts = credentials.Split(new [] { ' ' });                      if (credentialParts.Length == 2 &&                           credentialParts[0].Equals("basic"'                           StringComparison.OrdinalIgnoreCase))                      {                          credentials = Encoding.ASCII.GetString(                              Convert.FromBase64String(credentialParts[1]));                          credentialParts = credentials.Split(new [] { ':' }' 2);                          if (credentialParts.Length == 2)                          {                              _username = credentialParts[0];                              _password = credentialParts[1];                              _valid = true;                              return;                          }                      }                  }                  catch { }              }
Magic Number,WcfRestContrib.Net.Http,BasicAuthentication,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\Net\Http\BasicAuthentication.cs,GetCredentials,The following statement contains a magic number: if (!string.IsNullOrEmpty(credentials))              {                  try                  {                      var credentialParts = credentials.Split(new [] { ' ' });                      if (credentialParts.Length == 2 &&                           credentialParts[0].Equals("basic"'                           StringComparison.OrdinalIgnoreCase))                      {                          credentials = Encoding.ASCII.GetString(                              Convert.FromBase64String(credentialParts[1]));                          credentialParts = credentials.Split(new [] { ':' }' 2);                          if (credentialParts.Length == 2)                          {                              _username = credentialParts[0];                              _password = credentialParts[1];                              _valid = true;                              return;                          }                      }                  }                  catch { }              }
Magic Number,WcfRestContrib.ServiceModel.Channels,NameValueReader,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Channels\NameValueReader.cs,DecodeNameValuePair,The following statement contains a magic number: if (nameEntities.Length < 2)                   throw new InvalidDataException(                      string.Format("Form value name must contain at least two entities seperated by a '{0}'."' nameEntitiesSeperator));
Missing Default,WcfRestContrib.ServiceModel.Dispatcher,WebDispatchFormatter,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\WebDispatchFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (requestParameters[i].PartType)                  {                      // If its a path segment it will always be a string so just set it                      case RequestMessagePartDescription.MessagePartType.PathSegment:                          if (uriParameters != null)                              parameters[i] = uriParameters[requestParameters[i].Name];                          break;                      // If its a querystring value it can be any primitive type so we need to                      // perform a conversion.                      case RequestMessagePartDescription.MessagePartType.Querystring:                          if (uriParameters != null)                          {                              try                              {                                  parameters[i] = QueryStringConverter.ConvertStringToValue(                                          uriParameters[requestParameters[i].Name]'                                          requestParameters[i].Type);                              }                              catch (Exception exception)                              {                                  throw new DeserializationException(exception'                                      "The querystring parameter '{0}' must be of type '{1}'."'                                      requestParameters[i].Alias'                                      requestParameters[i].Type.GetXsdType());                              }                         }                          break;                      // If it's the entity body then we need to deserialize it                      case RequestMessagePartDescription.MessagePartType.EntityBody:                          if (message.IsEmpty) continue;                          var formatter = formatterFactory.CreateFormatter(contentType);                          using (var reader = message.GetReaderAtBodyContents())                          {                              var deserializationContext = reader.Name == BinaryBodyReader.BinaryElementName ?                                              WebFormatterDeserializationContext.CreateBinary(new BinaryBodyReader(reader).Data) :                                              WebFormatterDeserializationContext.CreateXml(reader);                                try                              {                                  parameters[i] = formatter.Deserialize(deserializationContext' requestParameters[i].Type);                              }                              catch (Exception exception)                              {                                  throw new DeserializationException(exception);                              }                          }                          break;                  }
Missing Default,WcfRestContrib.ServiceModel.Dispatcher,WebDispatchFormatter,C:\repos\mikeobrien_WcfRestContrib\src\WcfRestContrib\ServiceModel\Dispatcher\WebDispatchFormatter.cs,Serialize,The following switch statement is missing a default case: switch (serializationContext.ContentFormat)              {                  case WebFormatterSerializationContext.SerializationFormat.Xml:                      message = Message.CreateMessage(MessageVersion.None' null' result' serializationContext.XmlSerializer);                      message.SetWebContentFormatProperty(WebContentFormat.Xml);                      break;                  case WebFormatterSerializationContext.SerializationFormat.Json:                      message = Message.CreateMessage(MessageVersion.None' null' result' serializationContext.XmlSerializer);                      message.SetWebContentFormatProperty(WebContentFormat.Json);                      break;                  case WebFormatterSerializationContext.SerializationFormat.Binary:                      message = Message.CreateMessage(MessageVersion.None' null' new BinaryBodyWriter(serializationContext.BinaryData));                      message.SetWebContentFormatProperty(WebContentFormat.Raw);                      break;              }
