Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MavLinkObjectGenerator,CSharpGenerator,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\CSharpGenerator.cs,GetBaseCSharpType,Cyclomatic complexity of the method is 12
Complex Method,MavLinkObjectGenerator,CSharpGenerator,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\CSharpGenerator.cs,GetBaseReadOperation,Cyclomatic complexity of the method is 12
Complex Method,MavLinkObjectGenerator,XmlParser,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\XmlParser.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,MavLinkObjectGenerator,XmlParser,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\XmlParser.cs,GetFieldTypeFromString,Cyclomatic complexity of the method is 12
Magic Number,MavLinkObjectGenerator,GenericGenerator,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\GenericGenerator.cs,GetMessageExtraCrc,The following statement contains a magic number: byte result = (byte)((crc & 0xFF) ^ (crc >> 8));
Magic Number,MavLinkObjectGenerator,X25Crc,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\X25Crc.cs,X25CrcAccumulate,The following statement contains a magic number: byte[] bytes = Encoding.GetEncoding(28591).GetBytes(s);
Magic Number,MavLinkObjectGenerator,X25Crc,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\X25Crc.cs,X25CrcAccumulate,The following statement contains a magic number: ch = (byte)(ch ^ (ch << 4));
Magic Number,MavLinkObjectGenerator,X25Crc,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\X25Crc.cs,X25CrcAccumulate,The following statement contains a magic number: return (UInt16)((crc >> 8) ^ (ch << 8) ^ (ch << 3) ^ (ch >> 4));
Magic Number,MavLinkObjectGenerator,X25Crc,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\X25Crc.cs,X25CrcAccumulate,The following statement contains a magic number: return (UInt16)((crc >> 8) ^ (ch << 8) ^ (ch << 3) ^ (ch >> 4));
Magic Number,MavLinkObjectGenerator,X25Crc,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\X25Crc.cs,X25CrcAccumulate,The following statement contains a magic number: return (UInt16)((crc >> 8) ^ (ch << 8) ^ (ch << 3) ^ (ch >> 4));
Magic Number,MavLinkObjectGenerator,X25Crc,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\X25Crc.cs,X25CrcAccumulate,The following statement contains a magic number: return (UInt16)((crc >> 8) ^ (ch << 8) ^ (ch << 3) ^ (ch >> 4));
Magic Number,MavLinkObjectGenerator,XmlParser,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\XmlParser.cs,Parse,The following statement contains a magic number: switch (reader.Name)                      {                          case "include":                              ProcessInclude(reader.ReadElementContentAsString()' result);                              break;                          case "version":                              result.Version = reader.ReadElementContentAsInt();                              break;                          case "message":                               // if (currentMsg != null) SortFields(currentMsg);   //<--- if condition deleted                               currentMsg = new MessageData();                              currentObject = currentMsg;                              currentMsg.Name = reader.GetAttribute("name");                              currentMsg.Id = GetIntFromString(reader.GetAttribute("id"));                              if (currentMsg.Id < 256)    // Msg id field is a byte' discard anything beyond 255                                  result.Messages.Add(currentMsg.Name' currentMsg);                              break;                          case "description":                               currentObject.Description = reader.ReadString();                              break;                          case "field":                              currentField = new FieldData();                              currentField.Name = reader.GetAttribute("name");                              currentField.TypeString = reader.GetAttribute("type");                              currentField.Type = GetFieldTypeFromString(currentField.TypeString);                              currentField.NumElements = GetFieldTypeNumElements(currentField.TypeString);                              currentField.Description = reader.ReadElementContentAsString();                              UpdateEnumFields(result' currentField);                              currentMsg.Fields.Add(currentField);                              break;                          case "enum":                              currentEnum = GetEnumDataForName(result' reader.GetAttribute("name"));                              currentObject = currentEnum;                              result.Enumerations[currentEnum.Name] = currentEnum;                              currentEnumValue = 0;                              break;                          case "entry":                              currentEntry = new EnumEntry();                              currentObject = currentEntry;                              currentEntry.Name = reader.GetAttribute("name");                              currentEntry.Value = GetIntFromString(reader.GetAttribute("value")' ++currentEnumValue);                              currentEnumValue = currentEntry.Value;                              currentEnum.Entries.Add(currentEntry);                              break;                          case "param":                              currentParam = new EnumEntryParameter();                              currentParam.Index = GetIntFromString(reader.GetAttribute("index"));                              currentParam.Description = reader.ReadElementContentAsString();                              currentEntry.Parameters.Add(currentParam);                              break;                      }
Missing Default,MavLinkObjectGenerator,XmlParser,D:\research\architectureSmells\repos\dsuarezv_mavlink.net\mavlinkobjectgenerator\XmlParser.cs,Parse,The following switch statement is missing a default case: switch (reader.Name)                      {                          case "include":                              ProcessInclude(reader.ReadElementContentAsString()' result);                              break;                          case "version":                              result.Version = reader.ReadElementContentAsInt();                              break;                          case "message":                               // if (currentMsg != null) SortFields(currentMsg);   //<--- if condition deleted                               currentMsg = new MessageData();                              currentObject = currentMsg;                              currentMsg.Name = reader.GetAttribute("name");                              currentMsg.Id = GetIntFromString(reader.GetAttribute("id"));                              if (currentMsg.Id < 256)    // Msg id field is a byte' discard anything beyond 255                                  result.Messages.Add(currentMsg.Name' currentMsg);                              break;                          case "description":                               currentObject.Description = reader.ReadString();                              break;                          case "field":                              currentField = new FieldData();                              currentField.Name = reader.GetAttribute("name");                              currentField.TypeString = reader.GetAttribute("type");                              currentField.Type = GetFieldTypeFromString(currentField.TypeString);                              currentField.NumElements = GetFieldTypeNumElements(currentField.TypeString);                              currentField.Description = reader.ReadElementContentAsString();                              UpdateEnumFields(result' currentField);                              currentMsg.Fields.Add(currentField);                              break;                          case "enum":                              currentEnum = GetEnumDataForName(result' reader.GetAttribute("name"));                              currentObject = currentEnum;                              result.Enumerations[currentEnum.Name] = currentEnum;                              currentEnumValue = 0;                              break;                          case "entry":                              currentEntry = new EnumEntry();                              currentObject = currentEntry;                              currentEntry.Name = reader.GetAttribute("name");                              currentEntry.Value = GetIntFromString(reader.GetAttribute("value")' ++currentEnumValue);                              currentEnumValue = currentEntry.Value;                              currentEnum.Entries.Add(currentEntry);                              break;                          case "param":                              currentParam = new EnumEntryParameter();                              currentParam.Index = GetIntFromString(reader.GetAttribute("index"));                              currentParam.Description = reader.ReadElementContentAsString();                              currentEntry.Parameters.Add(currentParam);                              break;                      }
