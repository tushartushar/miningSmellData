Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SuccincT.Functional,PartialFunctionApplications,D:\research\architectureSmells\repos\DavidArno_SuccincT\src\SuccincT\Functional\PartialFunctionApplications.cs,Apply,The method has 5 parameters. Parameters: functionToApply' p1' p2' p3' p4
Long Parameter List,SuccincT.Functional,PartialFunctionApplications,D:\research\architectureSmells\repos\DavidArno_SuccincT\src\SuccincT\Functional\PartialFunctionApplications.cs,Apply,The method has 5 parameters. Parameters: functionToApply' p1' p2' p3' p4
Long Parameter List,SuccincT.Functional,PartialFunctionApplications,D:\research\architectureSmells\repos\DavidArno_SuccincT\src\SuccincT\Functional\PartialFunctionApplications.cs,Apply,The method has 6 parameters. Parameters: functionToApply' p1' p2' p3' p4' p5
Missing Default,SuccincT.Options,OptionExtensionsForIEnumerable,D:\research\architectureSmells\repos\DavidArno_SuccincT\src\SuccincT\Options\OptionExtensionsForIEnumerable.cs,TryFirst,The following switch statement is missing a default case: switch (collection)              {                  case null: return Option<T>.None();                  case IList<T> list when list.Count > 0: return Option<T>.Some(list[0]);              }
Missing Default,SuccincT.Options,OptionExtensionsForIEnumerable,D:\research\architectureSmells\repos\DavidArno_SuccincT\src\SuccincT\Options\OptionExtensionsForIEnumerable.cs,TryLast,The following switch statement is missing a default case: switch (collection)              {                  case null: return Option<T>.None();                  case IList<T> list when list.Count > 0: return Option<T>.Some(list[list.Count - 1]);              }
Missing Default,SuccincT.Options,OptionExtensionsForIEnumerable,D:\research\architectureSmells\repos\DavidArno_SuccincT\src\SuccincT\Options\OptionExtensionsForIEnumerable.cs,TrySingle,The following switch statement is missing a default case: switch (collection)              {                  case null: return Option<T>.None();                  case IList<T> list: return list.Count == 1 ? Option<T>.Some(list[0]) : Option<T>.None();              }
Missing Default,SuccincT.Unions,Union<T1;T2;T3;T4>,D:\research\architectureSmells\repos\DavidArno_SuccincT\src\SuccincT\Unions\Union{T1,T2,T3,T4}.cs,HasValueOf,The following switch statement is missing a default case: switch (Case)              {                  case Variant.Case1:                      return _value1.GetType() == typeof(T);                  case Variant.Case2:                      return _value2.GetType() == typeof(T);                  case Variant.Case3:                      return _value3.GetType() == typeof(T);                  case Variant.Case4:                      return _value4.GetType() == typeof(T);              }
Missing Default,SuccincT.Unions,Union<T1;T2;T3>,D:\research\architectureSmells\repos\DavidArno_SuccincT\src\SuccincT\Unions\Union{T1,T2,T3}.cs,HasValueOf,The following switch statement is missing a default case: switch (Case)              {                  case Variant.Case1:                      return _value1.GetType() == typeof(T);                  case Variant.Case2:                      return _value2.GetType() == typeof(T);                  case Variant.Case3:                      return _value3.GetType() == typeof(T);              }
Missing Default,SuccincT.Unions,Union<T1;T2>,D:\research\architectureSmells\repos\DavidArno_SuccincT\src\SuccincT\Unions\Union{T1,T2}.cs,HasValueOf,The following switch statement is missing a default case: switch (Case)              {                  case Variant.Case1:                      return _value1.GetType() == typeof(T);                  case Variant.Case2:                      return _value2.GetType() == typeof(T);              }
