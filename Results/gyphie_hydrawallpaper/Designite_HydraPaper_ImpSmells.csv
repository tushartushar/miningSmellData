Implementation smell,Namespace,Class,File,Method,Description
Long Method,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,ConfigureForStatus,The method has 139 lines of code.
Long Method,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The method has 111 lines of code.
Long Method,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The method has 118 lines of code.
Complex Method,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,SystemEvents_SessionSwitch,Cyclomatic complexity of the method is 14
Complex Method,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,GetStatusMessage,Cyclomatic complexity of the method is 21
Complex Method,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,ConfigureForStatus,Cyclomatic complexity of the method is 19
Complex Method,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,Main,Cyclomatic complexity of the method is 9
Complex Method,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,Cyclomatic complexity of the method is 28
Complex Method,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,Cyclomatic complexity of the method is 29
Complex Method,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,OrientationToFlipType,Cyclomatic complexity of the method is 9
Long Parameter List,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,GetFile,The method has 5 parameters.
Long Statement,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,LoadSettings,The length of the statement  "	// Check validity of configuration and recover if necessary: http://www.codeproject.com/Articles/30216/Handling-Corrupt-user-config-Settings " is 140.
Long Statement,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,LoadSettings,The length of the statement  "	this.numRotateMinutes.Value = Math.Min (this.numRotateMinutes.Maximum' Math.Max (this.numRotateMinutes.Minimum' Settings.Default.ChangeInterval)); " is 146.
Long Statement,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,CleanEvents,The length of the statement  "	Microsoft.Win32.SystemEvents.SessionSwitch -= new Microsoft.Win32.SessionSwitchEventHandler (SystemEvents_SessionSwitch); " is 121.
Long Statement,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,SystemEvents_DisplaySettingsChanged,The length of the statement  "	// We do this on a timer so other events can have a chance to cancel the timer and prevent the display change from updating the wallpaper " is 137.
Long Statement,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,displayTimer_Elapsed,The length of the statement  "		// Detect if the change was to a low graphics mode which indicates a video game or remote session (VNC) and we should suspend the timer " is 135.
Long Statement,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,displayTimer_Elapsed,The length of the statement  "		// Aero didn't change (some other display property changed) or aero was enabled so go ahead and rotate the wallpaper so it is updated to match the new  " is 150.
Long Statement,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,ConfigureForStatus,The length of the statement  "		if (this.AppState == ApplicationStates.RotateWallpaper || this.AppState == ApplicationStates.Paused || this.AppState == ApplicationStates.Configuration) { " is 154.
Long Statement,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,ConfigureForStatus,The length of the statement  "			if (this.AppState == ApplicationStates.Remote || this.AppState == ApplicationStates.Blanked || this.AppState == ApplicationStates.Locked) { " is 139.
Long Statement,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,Main,The length of the statement  "	string appGuid = ((GuidAttribute)Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(GuidAttribute)' false).GetValue (0)).Value.ToString (); " is 149.
Long Statement,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,Main,The length of the statement  "		var allowEveryoneRule = new MutexAccessRule (new SecurityIdentifier (WellKnownSidType.WorldSid' null)' MutexRights.FullControl' AccessControlType.Allow); " is 153.
Long Statement,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,EventLogMessage,The length of the statement  "		System.Diagnostics.EventLog.WriteEntry (src' eventMessage' isError ? EventLogEntryType.Error : EventLogEntryType.Information); " is 126.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The length of the statement  "					Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior); " is 137.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The length of the statement  "				g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel); " is 155.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The length of the statement  "				g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel); " is 174.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The length of the statement  "					gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel); " is 177.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The length of the statement  "					string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper"); " is 156.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The length of the statement  "						Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior); " is 138.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The length of the statement  "				g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel); " is 155.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The length of the statement  "				g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel); " is 174.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The length of the statement  "					gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel); " is 177.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The length of the statement  "					string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper"); " is 156.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,AdjustImage,The length of the statement  "		newHeight = Convert.ToInt32 (Math.Floor ((decimal)targetSize.Width / ((decimal)imageFromDisk.Width / (decimal)imageFromDisk.Height))); " is 134.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,AdjustImage,The length of the statement  "			newWidth = Convert.ToInt32 (Math.Floor ((decimal)targetSize.Height / ((decimal)imageFromDisk.Height / (decimal)imageFromDisk.Width))); " is 134.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,AdjustImage,The length of the statement  "		newHeight = Convert.ToInt32 (Math.Floor ((decimal)targetSize.Width / ((decimal)imageFromDisk.Width / (decimal)imageFromDisk.Height))); " is 134.
Long Statement,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,AdjustImage,The length of the statement  "			newWidth = Convert.ToInt32 (Math.Floor ((decimal)targetSize.Height / ((decimal)imageFromDisk.Height / (decimal)imageFromDisk.Width))); " is 134.
Empty Catch Block,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,ConfigureForStatus,The method has an empty catch block.
Empty Catch Block,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,EventLogMessage,The method has an empty catch block.
Empty Catch Block,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,DebugMessage,The method has an empty catch block.
Magic Number,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,SetupControls,The following statement contains a magic number: this.timRotate = new HPTimer (60000);  
Magic Number,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,SetupControls,The following statement contains a magic number: this.timDisplaySettingsChanged = new System.Timers.Timer (3000);  
Magic Number,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,SetupControls,The following statement contains a magic number: this.timCMSStatus.Interval = 1000;  
Magic Number,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,SetupControls,The following statement contains a magic number: this.timTraySingleClick.Interval = SystemInformation.DoubleClickTime + 100;  
Magic Number,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,ConfigureForStatus,The following statement contains a magic number: if (command == StateCommands.StartRotation) {  	Program.DebugMessage ("Command: StartRotation");  	if (this.AppState == ApplicationStates.Remote || this.AppState == ApplicationStates.Locked) {  		return;  	}  	this.AppState = ApplicationStates.RotateWallpaper;  	this.SaveSettings ();  	this.nextToolStripMenuItem.Enabled = true;  	this.startStopStripMenuItem.Enabled = true;  	this.startStopStripMenuItem.Text = "Stop";  	this.timRotate.Stop ();  	this.timDisplaySettingsChanged.Stop ();  	this.timTraySingleClick.Stop ();  	this.niTray.Icon = Icons.HydraIcon;  	this.niTray.Text = "HydraPaper";  	this.UpdateWallPaper ();  	this.timRotate.Interval = Math.Max (Convert.ToInt32 (this.numRotateMinutes.Value * 60000)' 60000);  	this.timRotate.Start ();  }  
Magic Number,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,ConfigureForStatus,The following statement contains a magic number: if (command == StateCommands.StartRotation) {  	Program.DebugMessage ("Command: StartRotation");  	if (this.AppState == ApplicationStates.Remote || this.AppState == ApplicationStates.Locked) {  		return;  	}  	this.AppState = ApplicationStates.RotateWallpaper;  	this.SaveSettings ();  	this.nextToolStripMenuItem.Enabled = true;  	this.startStopStripMenuItem.Enabled = true;  	this.startStopStripMenuItem.Text = "Stop";  	this.timRotate.Stop ();  	this.timDisplaySettingsChanged.Stop ();  	this.timTraySingleClick.Stop ();  	this.niTray.Icon = Icons.HydraIcon;  	this.niTray.Text = "HydraPaper";  	this.UpdateWallPaper ();  	this.timRotate.Interval = Math.Max (Convert.ToInt32 (this.numRotateMinutes.Value * 60000)' 60000);  	this.timRotate.Start ();  }  
Magic Number,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,ConfigureForStatus,The following statement contains a magic number: this.timRotate.Interval = Math.Max (Convert.ToInt32 (this.numRotateMinutes.Value * 60000)' 60000);  
Magic Number,HydraPaper,frmMain,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Form1.cs,ConfigureForStatus,The following statement contains a magic number: this.timRotate.Interval = Math.Max (Convert.ToInt32 (this.numRotateMinutes.Value * 60000)' 60000);  
Magic Number,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,Main,The following statement contains a magic number: using (var mutex = new Mutex (false' mutexId)) {  	// edited by Jeremy Wiebe to add example of setting up security for multi-user usage  	// edited by 'Marc' to work also on localized systems (don't use just "Everyone")   	var allowEveryoneRule = new MutexAccessRule (new SecurityIdentifier (WellKnownSidType.WorldSid' null)' MutexRights.FullControl' AccessControlType.Allow);  	var securitySettings = new MutexSecurity ();  	securitySettings.AddAccessRule (allowEveryoneRule);  	mutex.SetAccessControl (securitySettings);  	// edited by acidzombie24  	var hasHandle = false;  	try {  		try {  			// note' you may want to time out here instead of waiting forever  			// edited by acidzombie24  			// mutex.WaitOne(Timeout.Infinite' false);  			hasHandle = mutex.WaitOne (5000' false);  			if (hasHandle == false) {  				throw new TimeoutException ("Timeout waiting for exclusive access to mutex");  			}  		}  		catch (AbandonedMutexException) {  			// Log the fact the mutex was abandoned in another process' it will still get acquired  			hasHandle = true;  		}  		#region Perform Your Work Here  		try {  			if (isDebug) {  				AllocConsole ();  			}  		}  		catch {  		}  		frmMain mainForm = null;  		try {  			Application.EnableVisualStyles ();  			Application.SetCompatibleTextRenderingDefault (false);  			mainForm = new frmMain ();  			Application.Run (mainForm);  		}  		catch (Exception ex) {  			try {  				EventLogMessage (true' "Exception Message: {0}\n\nStack Trace:\n\n{1}"' ex.Message' ex.StackTrace);  			}  			catch {  			}  			throw;  		}  		finally {  			if (mainForm != null) {  				mainForm.CleanEvents ();  			}  		}  		#endregion  	}  	finally {  		// edited by acidzombie24' added if statement  		if (hasHandle) {  			mutex.ReleaseMutex ();  		}  	}  }  
Magic Number,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,Main,The following statement contains a magic number: try {  	try {  		// note' you may want to time out here instead of waiting forever  		// edited by acidzombie24  		// mutex.WaitOne(Timeout.Infinite' false);  		hasHandle = mutex.WaitOne (5000' false);  		if (hasHandle == false) {  			throw new TimeoutException ("Timeout waiting for exclusive access to mutex");  		}  	}  	catch (AbandonedMutexException) {  		// Log the fact the mutex was abandoned in another process' it will still get acquired  		hasHandle = true;  	}  	#region Perform Your Work Here  	try {  		if (isDebug) {  			AllocConsole ();  		}  	}  	catch {  	}  	frmMain mainForm = null;  	try {  		Application.EnableVisualStyles ();  		Application.SetCompatibleTextRenderingDefault (false);  		mainForm = new frmMain ();  		Application.Run (mainForm);  	}  	catch (Exception ex) {  		try {  			EventLogMessage (true' "Exception Message: {0}\n\nStack Trace:\n\n{1}"' ex.Message' ex.StackTrace);  		}  		catch {  		}  		throw;  	}  	finally {  		if (mainForm != null) {  			mainForm.CleanEvents ();  		}  	}  	#endregion  }  finally {  	// edited by acidzombie24' added if statement  	if (hasHandle) {  		mutex.ReleaseMutex ();  	}  }  
Magic Number,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,Main,The following statement contains a magic number: try {  	// note' you may want to time out here instead of waiting forever  	// edited by acidzombie24  	// mutex.WaitOne(Timeout.Infinite' false);  	hasHandle = mutex.WaitOne (5000' false);  	if (hasHandle == false) {  		throw new TimeoutException ("Timeout waiting for exclusive access to mutex");  	}  }  catch (AbandonedMutexException) {  	// Log the fact the mutex was abandoned in another process' it will still get acquired  	hasHandle = true;  }  
Magic Number,HydraPaper,Program,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\Program.cs,Main,The following statement contains a magic number: hasHandle = mutex.WaitOne (5000' false);  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Bitmap img = new Bitmap (canvasWidth' canvasHeight)) {  	// Create a new graphic of the correct size  	using (Graphics g = Graphics.FromImage (img)) {  		g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  		g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  		g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  		// Paint the background color of each screens bounds  		g.Clear (Color.Black);  		Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  		using (Brush b = new SolidBrush (Color.Black)) {  			g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  		}  		try {  			using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  				RotateImage (imageFromDisk' file.Filename);  				Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  				if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  					Rectangle src = new Rectangle ();  					src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  					src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  					src.X = (imageFromDisk.Width - src.Width) / 2;  					src.Y = (imageFromDisk.Height - src.Height) / 2;  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.Width = src.Width;  					dst.Height = src.Height;  					dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  					}  				}  				else {  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  					dst.Width = adjustedSize.Width;  					dst.Height = adjustedSize.Height;  					// Paint the image to the graphic  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  						g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  						g.ResetClip ();  					}  				}  			}  		}  		catch (Exception ex) {  			Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  			Program.DebugMessage (ex.StackTrace);  		}  		//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  		if (drawOffsetX > 0) {  			g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  		}  		if (drawOffsetY > 0) {  			g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  		}  		//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Copy the wallpaper section of the completed canvas  		using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  			using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  				gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  				// Determine the output format  				string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  				if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  					wallpaperFileName += ".jpg";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  				}  				else {  					wallpaperFileName += ".bmp";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  				}  				return wallpaperFileName;  			}  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Bitmap img = new Bitmap (canvasWidth' canvasHeight)) {  	// Create a new graphic of the correct size  	using (Graphics g = Graphics.FromImage (img)) {  		g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  		g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  		g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  		// Paint the background color of each screens bounds  		g.Clear (Color.Black);  		Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  		using (Brush b = new SolidBrush (Color.Black)) {  			g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  		}  		try {  			using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  				RotateImage (imageFromDisk' file.Filename);  				Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  				if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  					Rectangle src = new Rectangle ();  					src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  					src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  					src.X = (imageFromDisk.Width - src.Width) / 2;  					src.Y = (imageFromDisk.Height - src.Height) / 2;  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.Width = src.Width;  					dst.Height = src.Height;  					dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  					}  				}  				else {  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  					dst.Width = adjustedSize.Width;  					dst.Height = adjustedSize.Height;  					// Paint the image to the graphic  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  						g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  						g.ResetClip ();  					}  				}  			}  		}  		catch (Exception ex) {  			Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  			Program.DebugMessage (ex.StackTrace);  		}  		//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  		if (drawOffsetX > 0) {  			g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  		}  		if (drawOffsetY > 0) {  			g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  		}  		//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Copy the wallpaper section of the completed canvas  		using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  			using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  				gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  				// Determine the output format  				string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  				if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  					wallpaperFileName += ".jpg";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  				}  				else {  					wallpaperFileName += ".bmp";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  				}  				return wallpaperFileName;  			}  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Bitmap img = new Bitmap (canvasWidth' canvasHeight)) {  	// Create a new graphic of the correct size  	using (Graphics g = Graphics.FromImage (img)) {  		g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  		g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  		g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  		// Paint the background color of each screens bounds  		g.Clear (Color.Black);  		Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  		using (Brush b = new SolidBrush (Color.Black)) {  			g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  		}  		try {  			using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  				RotateImage (imageFromDisk' file.Filename);  				Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  				if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  					Rectangle src = new Rectangle ();  					src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  					src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  					src.X = (imageFromDisk.Width - src.Width) / 2;  					src.Y = (imageFromDisk.Height - src.Height) / 2;  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.Width = src.Width;  					dst.Height = src.Height;  					dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  					}  				}  				else {  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  					dst.Width = adjustedSize.Width;  					dst.Height = adjustedSize.Height;  					// Paint the image to the graphic  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  						g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  						g.ResetClip ();  					}  				}  			}  		}  		catch (Exception ex) {  			Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  			Program.DebugMessage (ex.StackTrace);  		}  		//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  		if (drawOffsetX > 0) {  			g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  		}  		if (drawOffsetY > 0) {  			g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  		}  		//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Copy the wallpaper section of the completed canvas  		using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  			using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  				gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  				// Determine the output format  				string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  				if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  					wallpaperFileName += ".jpg";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  				}  				else {  					wallpaperFileName += ".bmp";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  				}  				return wallpaperFileName;  			}  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Bitmap img = new Bitmap (canvasWidth' canvasHeight)) {  	// Create a new graphic of the correct size  	using (Graphics g = Graphics.FromImage (img)) {  		g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  		g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  		g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  		// Paint the background color of each screens bounds  		g.Clear (Color.Black);  		Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  		using (Brush b = new SolidBrush (Color.Black)) {  			g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  		}  		try {  			using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  				RotateImage (imageFromDisk' file.Filename);  				Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  				if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  					Rectangle src = new Rectangle ();  					src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  					src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  					src.X = (imageFromDisk.Width - src.Width) / 2;  					src.Y = (imageFromDisk.Height - src.Height) / 2;  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.Width = src.Width;  					dst.Height = src.Height;  					dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  					}  				}  				else {  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  					dst.Width = adjustedSize.Width;  					dst.Height = adjustedSize.Height;  					// Paint the image to the graphic  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  						g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  						g.ResetClip ();  					}  				}  			}  		}  		catch (Exception ex) {  			Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  			Program.DebugMessage (ex.StackTrace);  		}  		//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  		if (drawOffsetX > 0) {  			g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  		}  		if (drawOffsetY > 0) {  			g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  		}  		//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Copy the wallpaper section of the completed canvas  		using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  			using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  				gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  				// Determine the output format  				string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  				if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  					wallpaperFileName += ".jpg";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  				}  				else {  					wallpaperFileName += ".bmp";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  				}  				return wallpaperFileName;  			}  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Bitmap img = new Bitmap (canvasWidth' canvasHeight)) {  	// Create a new graphic of the correct size  	using (Graphics g = Graphics.FromImage (img)) {  		g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  		g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  		g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  		// Paint the background color of each screens bounds  		g.Clear (Color.Black);  		Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  		using (Brush b = new SolidBrush (Color.Black)) {  			g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  		}  		try {  			using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  				RotateImage (imageFromDisk' file.Filename);  				Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  				if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  					Rectangle src = new Rectangle ();  					src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  					src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  					src.X = (imageFromDisk.Width - src.Width) / 2;  					src.Y = (imageFromDisk.Height - src.Height) / 2;  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.Width = src.Width;  					dst.Height = src.Height;  					dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  					}  				}  				else {  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  					dst.Width = adjustedSize.Width;  					dst.Height = adjustedSize.Height;  					// Paint the image to the graphic  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  						g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  						g.ResetClip ();  					}  				}  			}  		}  		catch (Exception ex) {  			Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  			Program.DebugMessage (ex.StackTrace);  		}  		//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  		if (drawOffsetX > 0) {  			g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  		}  		if (drawOffsetY > 0) {  			g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  		}  		//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Copy the wallpaper section of the completed canvas  		using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  			using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  				gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  				// Determine the output format  				string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  				if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  					wallpaperFileName += ".jpg";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  				}  				else {  					wallpaperFileName += ".bmp";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  				}  				return wallpaperFileName;  			}  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Bitmap img = new Bitmap (canvasWidth' canvasHeight)) {  	// Create a new graphic of the correct size  	using (Graphics g = Graphics.FromImage (img)) {  		g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  		g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  		g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  		// Paint the background color of each screens bounds  		g.Clear (Color.Black);  		Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  		using (Brush b = new SolidBrush (Color.Black)) {  			g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  		}  		try {  			using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  				RotateImage (imageFromDisk' file.Filename);  				Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  				if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  					Rectangle src = new Rectangle ();  					src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  					src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  					src.X = (imageFromDisk.Width - src.Width) / 2;  					src.Y = (imageFromDisk.Height - src.Height) / 2;  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.Width = src.Width;  					dst.Height = src.Height;  					dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  					}  				}  				else {  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  					dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  					dst.Width = adjustedSize.Width;  					dst.Height = adjustedSize.Height;  					// Paint the image to the graphic  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  						g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  						g.ResetClip ();  					}  				}  			}  		}  		catch (Exception ex) {  			Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  			Program.DebugMessage (ex.StackTrace);  		}  		//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  		if (drawOffsetX > 0) {  			g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  		}  		if (drawOffsetY > 0) {  			g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  		}  		//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Copy the wallpaper section of the completed canvas  		using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  			using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  				gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  				// Determine the output format  				string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  				if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  					wallpaperFileName += ".jpg";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  				}  				else {  					wallpaperFileName += ".bmp";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  				}  				return wallpaperFileName;  			}  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (img)) {  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  	g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  	g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  	// Paint the background color of each screens bounds  	g.Clear (Color.Black);  	Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  	using (Brush b = new SolidBrush (Color.Black)) {  		g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	}  	try {  		using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  			RotateImage (imageFromDisk' file.Filename);  			Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  			if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  				Rectangle src = new Rectangle ();  				src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  				src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  				src.X = (imageFromDisk.Width - src.Width) / 2;  				src.Y = (imageFromDisk.Height - src.Height) / 2;  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.Width = src.Width;  				dst.Height = src.Height;  				dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  				}  			}  			else {  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  				dst.Width = adjustedSize.Width;  				dst.Height = adjustedSize.Height;  				// Paint the image to the graphic  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  					g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  					g.ResetClip ();  				}  			}  		}  	}  	catch (Exception ex) {  		Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  		Program.DebugMessage (ex.StackTrace);  	}  	//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  	if (drawOffsetX > 0) {  		g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  	}  	if (drawOffsetY > 0) {  		g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  	}  	//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Copy the wallpaper section of the completed canvas  	using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  		using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  			gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  			// Determine the output format  			string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  			if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  				wallpaperFileName += ".jpg";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  			}  			else {  				wallpaperFileName += ".bmp";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  			}  			return wallpaperFileName;  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (img)) {  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  	g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  	g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  	// Paint the background color of each screens bounds  	g.Clear (Color.Black);  	Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  	using (Brush b = new SolidBrush (Color.Black)) {  		g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	}  	try {  		using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  			RotateImage (imageFromDisk' file.Filename);  			Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  			if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  				Rectangle src = new Rectangle ();  				src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  				src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  				src.X = (imageFromDisk.Width - src.Width) / 2;  				src.Y = (imageFromDisk.Height - src.Height) / 2;  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.Width = src.Width;  				dst.Height = src.Height;  				dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  				}  			}  			else {  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  				dst.Width = adjustedSize.Width;  				dst.Height = adjustedSize.Height;  				// Paint the image to the graphic  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  					g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  					g.ResetClip ();  				}  			}  		}  	}  	catch (Exception ex) {  		Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  		Program.DebugMessage (ex.StackTrace);  	}  	//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  	if (drawOffsetX > 0) {  		g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  	}  	if (drawOffsetY > 0) {  		g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  	}  	//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Copy the wallpaper section of the completed canvas  	using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  		using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  			gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  			// Determine the output format  			string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  			if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  				wallpaperFileName += ".jpg";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  			}  			else {  				wallpaperFileName += ".bmp";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  			}  			return wallpaperFileName;  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (img)) {  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  	g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  	g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  	// Paint the background color of each screens bounds  	g.Clear (Color.Black);  	Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  	using (Brush b = new SolidBrush (Color.Black)) {  		g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	}  	try {  		using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  			RotateImage (imageFromDisk' file.Filename);  			Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  			if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  				Rectangle src = new Rectangle ();  				src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  				src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  				src.X = (imageFromDisk.Width - src.Width) / 2;  				src.Y = (imageFromDisk.Height - src.Height) / 2;  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.Width = src.Width;  				dst.Height = src.Height;  				dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  				}  			}  			else {  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  				dst.Width = adjustedSize.Width;  				dst.Height = adjustedSize.Height;  				// Paint the image to the graphic  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  					g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  					g.ResetClip ();  				}  			}  		}  	}  	catch (Exception ex) {  		Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  		Program.DebugMessage (ex.StackTrace);  	}  	//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  	if (drawOffsetX > 0) {  		g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  	}  	if (drawOffsetY > 0) {  		g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  	}  	//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Copy the wallpaper section of the completed canvas  	using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  		using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  			gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  			// Determine the output format  			string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  			if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  				wallpaperFileName += ".jpg";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  			}  			else {  				wallpaperFileName += ".bmp";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  			}  			return wallpaperFileName;  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (img)) {  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  	g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  	g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  	// Paint the background color of each screens bounds  	g.Clear (Color.Black);  	Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  	using (Brush b = new SolidBrush (Color.Black)) {  		g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	}  	try {  		using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  			RotateImage (imageFromDisk' file.Filename);  			Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  			if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  				Rectangle src = new Rectangle ();  				src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  				src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  				src.X = (imageFromDisk.Width - src.Width) / 2;  				src.Y = (imageFromDisk.Height - src.Height) / 2;  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.Width = src.Width;  				dst.Height = src.Height;  				dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  				}  			}  			else {  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  				dst.Width = adjustedSize.Width;  				dst.Height = adjustedSize.Height;  				// Paint the image to the graphic  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  					g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  					g.ResetClip ();  				}  			}  		}  	}  	catch (Exception ex) {  		Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  		Program.DebugMessage (ex.StackTrace);  	}  	//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  	if (drawOffsetX > 0) {  		g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  	}  	if (drawOffsetY > 0) {  		g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  	}  	//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Copy the wallpaper section of the completed canvas  	using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  		using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  			gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  			// Determine the output format  			string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  			if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  				wallpaperFileName += ".jpg";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  			}  			else {  				wallpaperFileName += ".bmp";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  			}  			return wallpaperFileName;  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (img)) {  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  	g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  	g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  	// Paint the background color of each screens bounds  	g.Clear (Color.Black);  	Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  	using (Brush b = new SolidBrush (Color.Black)) {  		g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	}  	try {  		using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  			RotateImage (imageFromDisk' file.Filename);  			Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  			if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  				Rectangle src = new Rectangle ();  				src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  				src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  				src.X = (imageFromDisk.Width - src.Width) / 2;  				src.Y = (imageFromDisk.Height - src.Height) / 2;  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.Width = src.Width;  				dst.Height = src.Height;  				dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  				}  			}  			else {  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  				dst.Width = adjustedSize.Width;  				dst.Height = adjustedSize.Height;  				// Paint the image to the graphic  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  					g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  					g.ResetClip ();  				}  			}  		}  	}  	catch (Exception ex) {  		Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  		Program.DebugMessage (ex.StackTrace);  	}  	//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  	if (drawOffsetX > 0) {  		g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  	}  	if (drawOffsetY > 0) {  		g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  	}  	//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Copy the wallpaper section of the completed canvas  	using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  		using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  			gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  			// Determine the output format  			string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  			if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  				wallpaperFileName += ".jpg";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  			}  			else {  				wallpaperFileName += ".bmp";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  			}  			return wallpaperFileName;  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (img)) {  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  	g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  	g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  	// Paint the background color of each screens bounds  	g.Clear (Color.Black);  	Rectangle bounds = new Rectangle (0' 0' wallPaperWidth' wallPaperHeight);  	using (Brush b = new SolidBrush (Color.Black)) {  		g.FillRectangle (b' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	}  	try {  		using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  			RotateImage (imageFromDisk' file.Filename);  			Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  			if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  				Rectangle src = new Rectangle ();  				src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  				src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  				src.X = (imageFromDisk.Width - src.Width) / 2;  				src.Y = (imageFromDisk.Height - src.Height) / 2;  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.Width = src.Width;  				dst.Height = src.Height;  				dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  				}  			}  			else {  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  				dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  				dst.Width = adjustedSize.Width;  				dst.Height = adjustedSize.Height;  				// Paint the image to the graphic  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  					g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  					g.ResetClip ();  				}  			}  		}  	}  	catch (Exception ex) {  		Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  		Program.DebugMessage (ex.StackTrace);  	}  	//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  	if (drawOffsetX > 0) {  		g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  	}  	if (drawOffsetY > 0) {  		g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  	}  	//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Copy the wallpaper section of the completed canvas  	using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  		using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  			gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  			// Determine the output format  			string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  			if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  				wallpaperFileName += ".jpg";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  			}  			else {  				wallpaperFileName += ".bmp";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  			}  			return wallpaperFileName;  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: try {  	using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  		RotateImage (imageFromDisk' file.Filename);  		Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  		if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  			Rectangle src = new Rectangle ();  			src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  			src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  			src.X = (imageFromDisk.Width - src.Width) / 2;  			src.Y = (imageFromDisk.Height - src.Height) / 2;  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.Width = src.Width;  			dst.Height = src.Height;  			dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  			}  		}  		else {  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  			dst.Width = adjustedSize.Width;  			dst.Height = adjustedSize.Height;  			// Paint the image to the graphic  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  				g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  				g.ResetClip ();  			}  		}  	}  }  catch (Exception ex) {  	Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  	Program.DebugMessage (ex.StackTrace);  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: try {  	using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  		RotateImage (imageFromDisk' file.Filename);  		Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  		if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  			Rectangle src = new Rectangle ();  			src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  			src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  			src.X = (imageFromDisk.Width - src.Width) / 2;  			src.Y = (imageFromDisk.Height - src.Height) / 2;  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.Width = src.Width;  			dst.Height = src.Height;  			dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  			}  		}  		else {  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  			dst.Width = adjustedSize.Width;  			dst.Height = adjustedSize.Height;  			// Paint the image to the graphic  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  				g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  				g.ResetClip ();  			}  		}  	}  }  catch (Exception ex) {  	Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  	Program.DebugMessage (ex.StackTrace);  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: try {  	using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  		RotateImage (imageFromDisk' file.Filename);  		Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  		if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  			Rectangle src = new Rectangle ();  			src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  			src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  			src.X = (imageFromDisk.Width - src.Width) / 2;  			src.Y = (imageFromDisk.Height - src.Height) / 2;  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.Width = src.Width;  			dst.Height = src.Height;  			dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  			}  		}  		else {  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  			dst.Width = adjustedSize.Width;  			dst.Height = adjustedSize.Height;  			// Paint the image to the graphic  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  				g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  				g.ResetClip ();  			}  		}  	}  }  catch (Exception ex) {  	Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  	Program.DebugMessage (ex.StackTrace);  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: try {  	using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  		RotateImage (imageFromDisk' file.Filename);  		Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  		if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  			Rectangle src = new Rectangle ();  			src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  			src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  			src.X = (imageFromDisk.Width - src.Width) / 2;  			src.Y = (imageFromDisk.Height - src.Height) / 2;  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.Width = src.Width;  			dst.Height = src.Height;  			dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  			}  		}  		else {  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  			dst.Width = adjustedSize.Width;  			dst.Height = adjustedSize.Height;  			// Paint the image to the graphic  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  				g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  				g.ResetClip ();  			}  		}  	}  }  catch (Exception ex) {  	Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  	Program.DebugMessage (ex.StackTrace);  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: try {  	using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  		RotateImage (imageFromDisk' file.Filename);  		Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  		if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  			Rectangle src = new Rectangle ();  			src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  			src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  			src.X = (imageFromDisk.Width - src.Width) / 2;  			src.Y = (imageFromDisk.Height - src.Height) / 2;  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.Width = src.Width;  			dst.Height = src.Height;  			dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  			}  		}  		else {  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  			dst.Width = adjustedSize.Width;  			dst.Height = adjustedSize.Height;  			// Paint the image to the graphic  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  				g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  				g.ResetClip ();  			}  		}  	}  }  catch (Exception ex) {  	Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  	Program.DebugMessage (ex.StackTrace);  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: try {  	using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  		RotateImage (imageFromDisk' file.Filename);  		Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  		if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  			Rectangle src = new Rectangle ();  			src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  			src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  			src.X = (imageFromDisk.Width - src.Width) / 2;  			src.Y = (imageFromDisk.Height - src.Height) / 2;  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.Width = src.Width;  			dst.Height = src.Height;  			dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  			}  		}  		else {  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  			dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  			dst.Width = adjustedSize.Width;  			dst.Height = adjustedSize.Height;  			// Paint the image to the graphic  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  				g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  				g.ResetClip ();  			}  		}  	}  }  catch (Exception ex) {  	Program.DebugMessage ("Exception in BuildMultiScreenWallPaper: {0}"' ex.Message);  	Program.DebugMessage (ex.StackTrace);  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  	RotateImage (imageFromDisk' file.Filename);  	Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  	if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  		Rectangle src = new Rectangle ();  		src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  		src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  		src.X = (imageFromDisk.Width - src.Width) / 2;  		src.Y = (imageFromDisk.Height - src.Height) / 2;  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.Width = src.Width;  		dst.Height = src.Height;  		dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  		}  	}  	else {  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  		dst.Width = adjustedSize.Width;  		dst.Height = adjustedSize.Height;  		// Paint the image to the graphic  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  			g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  			g.ResetClip ();  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  	RotateImage (imageFromDisk' file.Filename);  	Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  	if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  		Rectangle src = new Rectangle ();  		src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  		src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  		src.X = (imageFromDisk.Width - src.Width) / 2;  		src.Y = (imageFromDisk.Height - src.Height) / 2;  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.Width = src.Width;  		dst.Height = src.Height;  		dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  		}  	}  	else {  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  		dst.Width = adjustedSize.Width;  		dst.Height = adjustedSize.Height;  		// Paint the image to the graphic  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  			g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  			g.ResetClip ();  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  	RotateImage (imageFromDisk' file.Filename);  	Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  	if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  		Rectangle src = new Rectangle ();  		src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  		src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  		src.X = (imageFromDisk.Width - src.Width) / 2;  		src.Y = (imageFromDisk.Height - src.Height) / 2;  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.Width = src.Width;  		dst.Height = src.Height;  		dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  		}  	}  	else {  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  		dst.Width = adjustedSize.Width;  		dst.Height = adjustedSize.Height;  		// Paint the image to the graphic  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  			g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  			g.ResetClip ();  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  	RotateImage (imageFromDisk' file.Filename);  	Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  	if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  		Rectangle src = new Rectangle ();  		src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  		src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  		src.X = (imageFromDisk.Width - src.Width) / 2;  		src.Y = (imageFromDisk.Height - src.Height) / 2;  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.Width = src.Width;  		dst.Height = src.Height;  		dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  		}  	}  	else {  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  		dst.Width = adjustedSize.Width;  		dst.Height = adjustedSize.Height;  		// Paint the image to the graphic  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  			g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  			g.ResetClip ();  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  	RotateImage (imageFromDisk' file.Filename);  	Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  	if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  		Rectangle src = new Rectangle ();  		src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  		src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  		src.X = (imageFromDisk.Width - src.Width) / 2;  		src.Y = (imageFromDisk.Height - src.Height) / 2;  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.Width = src.Width;  		dst.Height = src.Height;  		dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  		}  	}  	else {  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  		dst.Width = adjustedSize.Width;  		dst.Height = adjustedSize.Height;  		// Paint the image to the graphic  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  			g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  			g.ResetClip ();  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  	RotateImage (imageFromDisk' file.Filename);  	Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.MultiScreenImageBehavior);  	if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  		Rectangle src = new Rectangle ();  		src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  		src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  		src.X = (imageFromDisk.Width - src.Width) / 2;  		src.Y = (imageFromDisk.Height - src.Height) / 2;  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.Width = src.Width;  		dst.Height = src.Height;  		dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  		}  	}  	else {  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  		dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  		dst.Width = adjustedSize.Width;  		dst.Height = adjustedSize.Height;  		// Paint the image to the graphic  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  			g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  			g.ResetClip ();  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  	Rectangle src = new Rectangle ();  	src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  	src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  	src.X = (imageFromDisk.Width - src.Width) / 2;  	src.Y = (imageFromDisk.Height - src.Height) / 2;  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.Width = src.Width;  	dst.Height = src.Height;  	dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  	}  }  else {  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  	dst.Width = adjustedSize.Width;  	dst.Height = adjustedSize.Height;  	// Paint the image to the graphic  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  		g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  		g.ResetClip ();  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  	Rectangle src = new Rectangle ();  	src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  	src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  	src.X = (imageFromDisk.Width - src.Width) / 2;  	src.Y = (imageFromDisk.Height - src.Height) / 2;  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.Width = src.Width;  	dst.Height = src.Height;  	dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  	}  }  else {  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  	dst.Width = adjustedSize.Width;  	dst.Height = adjustedSize.Height;  	// Paint the image to the graphic  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  		g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  		g.ResetClip ();  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  	Rectangle src = new Rectangle ();  	src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  	src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  	src.X = (imageFromDisk.Width - src.Width) / 2;  	src.Y = (imageFromDisk.Height - src.Height) / 2;  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.Width = src.Width;  	dst.Height = src.Height;  	dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  	}  }  else {  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  	dst.Width = adjustedSize.Width;  	dst.Height = adjustedSize.Height;  	// Paint the image to the graphic  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  		g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  		g.ResetClip ();  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  	Rectangle src = new Rectangle ();  	src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  	src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  	src.X = (imageFromDisk.Width - src.Width) / 2;  	src.Y = (imageFromDisk.Height - src.Height) / 2;  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.Width = src.Width;  	dst.Height = src.Height;  	dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  	}  }  else {  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  	dst.Width = adjustedSize.Width;  	dst.Height = adjustedSize.Height;  	// Paint the image to the graphic  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  		g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  		g.ResetClip ();  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  	Rectangle src = new Rectangle ();  	src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  	src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  	src.X = (imageFromDisk.Width - src.Width) / 2;  	src.Y = (imageFromDisk.Height - src.Height) / 2;  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.Width = src.Width;  	dst.Height = src.Height;  	dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  	}  }  else {  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  	dst.Width = adjustedSize.Width;  	dst.Height = adjustedSize.Height;  	// Paint the image to the graphic  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  		g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  		g.ResetClip ();  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: if (settings.Settings.MultiScreenImageBehavior == Common.ImageBehavior.Center) {  	Rectangle src = new Rectangle ();  	src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  	src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  	src.X = (imageFromDisk.Width - src.Width) / 2;  	src.Y = (imageFromDisk.Height - src.Height) / 2;  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.Width = src.Width;  	dst.Height = src.Height;  	dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  	}  }  else {  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  	dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  	dst.Width = adjustedSize.Width;  	dst.Height = adjustedSize.Height;  	// Paint the image to the graphic  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.Clip = new Region (new Rectangle (bounds.X' bounds.Y' bounds.Width' bounds.Height));  		g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  		g.ResetClip ();  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: src.X = (imageFromDisk.Width - src.Width) / 2;  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: src.Y = (imageFromDisk.Height - src.Height) / 2;  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: dst.X = bounds.X + ((bounds.Width - dst.Width) / 2);  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: dst.Y = bounds.Y + ((bounds.Height - dst.Height) / 2);  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2);  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildMultiScreenWallPaper,The following statement contains a magic number: dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2);  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: using (Bitmap img = new Bitmap (canvasWidth' canvasHeight)) {  	// Create a new graphic of the correct size  	using (Graphics g = Graphics.FromImage (img)) {  		g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  		g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  		g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  		// Paint the background color of each screens bounds  		g.Clear (Color.Black);  		foreach (Screen screen in Screen.AllScreens) {  			Rectangle bounds = screen.Bounds;  			using (Brush b = new SolidBrush (Color.Black)) {  				g.FillRectangle (b' bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height);  			}  			// Select an image for each screen.  			FileProperties file = GetFile (settings.Files' true' settings.Randomizer);  			if (file == null) {  				// There are no files to make a background with so just return  				return string.Empty;  			}  			settings.FileNamesUsed.Add (file.Filename);  			try {  				using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  					RotateImage (imageFromDisk' file.Filename);  					Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior);  					if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  						Rectangle src = new Rectangle ();  						src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  						src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  						src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  						src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  						// Center the image in the screen region  						Rectangle dst = new Rectangle ();  						dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  						dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  						dst.Width = src.Width;  						dst.Height = src.Height;  						// Paint the image to the graphic  						using (ImageAttributes attr = new ImageAttributes ()) {  							attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  							g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  							g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  							g.ResetClip ();  						}  					}  					else {  						// Center the image in the screen region  						Rectangle dst = new Rectangle ();  						dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  						dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  						dst.Width = adjustedSize.Width;  						dst.Height = adjustedSize.Height;  						// Paint the image to the graphic  						// Paint the image to the graphic  						using (ImageAttributes attr = new ImageAttributes ()) {  							attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  							g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  							g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  							g.ResetClip ();  						}  					}  				}  			}  			catch (Exception ex) {  				Program.DebugMessage ("Exception in BuildSingleScreenWallPaper: {0}"' ex.Message);  				Program.DebugMessage (ex.StackTrace);  				continue;  			}  		}  		//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  		if (drawOffsetX > 0) {  			g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  		}  		if (drawOffsetY > 0) {  			g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  		}  		//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Copy the wallpaper section of the completed canvas  		using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  			using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  				gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  				// Determine the output format  				string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  				if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  					wallpaperFileName += ".jpg";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  				}  				else {  					wallpaperFileName += ".bmp";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  				}  				return wallpaperFileName;  			}  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: using (Bitmap img = new Bitmap (canvasWidth' canvasHeight)) {  	// Create a new graphic of the correct size  	using (Graphics g = Graphics.FromImage (img)) {  		g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  		g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  		g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  		// Paint the background color of each screens bounds  		g.Clear (Color.Black);  		foreach (Screen screen in Screen.AllScreens) {  			Rectangle bounds = screen.Bounds;  			using (Brush b = new SolidBrush (Color.Black)) {  				g.FillRectangle (b' bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height);  			}  			// Select an image for each screen.  			FileProperties file = GetFile (settings.Files' true' settings.Randomizer);  			if (file == null) {  				// There are no files to make a background with so just return  				return string.Empty;  			}  			settings.FileNamesUsed.Add (file.Filename);  			try {  				using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  					RotateImage (imageFromDisk' file.Filename);  					Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior);  					if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  						Rectangle src = new Rectangle ();  						src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  						src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  						src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  						src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  						// Center the image in the screen region  						Rectangle dst = new Rectangle ();  						dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  						dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  						dst.Width = src.Width;  						dst.Height = src.Height;  						// Paint the image to the graphic  						using (ImageAttributes attr = new ImageAttributes ()) {  							attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  							g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  							g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  							g.ResetClip ();  						}  					}  					else {  						// Center the image in the screen region  						Rectangle dst = new Rectangle ();  						dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  						dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  						dst.Width = adjustedSize.Width;  						dst.Height = adjustedSize.Height;  						// Paint the image to the graphic  						// Paint the image to the graphic  						using (ImageAttributes attr = new ImageAttributes ()) {  							attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  							g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  							g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  							g.ResetClip ();  						}  					}  				}  			}  			catch (Exception ex) {  				Program.DebugMessage ("Exception in BuildSingleScreenWallPaper: {0}"' ex.Message);  				Program.DebugMessage (ex.StackTrace);  				continue;  			}  		}  		//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  		if (drawOffsetX > 0) {  			g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  		}  		if (drawOffsetY > 0) {  			g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  		}  		//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  		// Copy the wallpaper section of the completed canvas  		using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  			using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  				gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  				// Determine the output format  				string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  				if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  					wallpaperFileName += ".jpg";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  				}  				else {  					wallpaperFileName += ".bmp";  					imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  				}  				return wallpaperFileName;  			}  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (img)) {  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  	g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  	g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  	// Paint the background color of each screens bounds  	g.Clear (Color.Black);  	foreach (Screen screen in Screen.AllScreens) {  		Rectangle bounds = screen.Bounds;  		using (Brush b = new SolidBrush (Color.Black)) {  			g.FillRectangle (b' bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height);  		}  		// Select an image for each screen.  		FileProperties file = GetFile (settings.Files' true' settings.Randomizer);  		if (file == null) {  			// There are no files to make a background with so just return  			return string.Empty;  		}  		settings.FileNamesUsed.Add (file.Filename);  		try {  			using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  				RotateImage (imageFromDisk' file.Filename);  				Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior);  				if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  					Rectangle src = new Rectangle ();  					src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  					src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  					src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  					src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  					dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  					dst.Width = src.Width;  					dst.Height = src.Height;  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  						g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  						g.ResetClip ();  					}  				}  				else {  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  					dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  					dst.Width = adjustedSize.Width;  					dst.Height = adjustedSize.Height;  					// Paint the image to the graphic  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  						g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  						g.ResetClip ();  					}  				}  			}  		}  		catch (Exception ex) {  			Program.DebugMessage ("Exception in BuildSingleScreenWallPaper: {0}"' ex.Message);  			Program.DebugMessage (ex.StackTrace);  			continue;  		}  	}  	//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  	if (drawOffsetX > 0) {  		g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  	}  	if (drawOffsetY > 0) {  		g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  	}  	//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Copy the wallpaper section of the completed canvas  	using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  		using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  			gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  			// Determine the output format  			string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  			if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  				wallpaperFileName += ".jpg";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  			}  			else {  				wallpaperFileName += ".bmp";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  			}  			return wallpaperFileName;  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (img)) {  	g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;  	g.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  	g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  	// Paint the background color of each screens bounds  	g.Clear (Color.Black);  	foreach (Screen screen in Screen.AllScreens) {  		Rectangle bounds = screen.Bounds;  		using (Brush b = new SolidBrush (Color.Black)) {  			g.FillRectangle (b' bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height);  		}  		// Select an image for each screen.  		FileProperties file = GetFile (settings.Files' true' settings.Randomizer);  		if (file == null) {  			// There are no files to make a background with so just return  			return string.Empty;  		}  		settings.FileNamesUsed.Add (file.Filename);  		try {  			using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  				RotateImage (imageFromDisk' file.Filename);  				Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior);  				if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  					Rectangle src = new Rectangle ();  					src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  					src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  					src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  					src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  					dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  					dst.Width = src.Width;  					dst.Height = src.Height;  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  						g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  						g.ResetClip ();  					}  				}  				else {  					// Center the image in the screen region  					Rectangle dst = new Rectangle ();  					dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  					dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  					dst.Width = adjustedSize.Width;  					dst.Height = adjustedSize.Height;  					// Paint the image to the graphic  					// Paint the image to the graphic  					using (ImageAttributes attr = new ImageAttributes ()) {  						attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  						g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  						g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  						g.ResetClip ();  					}  				}  			}  		}  		catch (Exception ex) {  			Program.DebugMessage ("Exception in BuildSingleScreenWallPaper: {0}"' ex.Message);  			Program.DebugMessage (ex.StackTrace);  			continue;  		}  	}  	//img.Save("c:\\stage1.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Move the blocks that are above and to the left of the primary to adjust for the wallpaper wrapping  	if (drawOffsetX > 0) {  		g.DrawImage (img' new Rectangle (wallPaperWidth' 0' drawOffsetX' wallPaperHeight)' new Rectangle (0' 0' drawOffsetX' wallPaperHeight)' GraphicsUnit.Pixel);  	}  	if (drawOffsetY > 0) {  		g.DrawImage (img' new Rectangle (drawOffsetX' wallPaperHeight' wallPaperWidth' drawOffsetY)' new Rectangle (drawOffsetX' 0' wallPaperWidth' drawOffsetY)' GraphicsUnit.Pixel);  	}  	//img.Save("c:\\stage2.jpg"' System.Drawing.Imaging.ImageFormat.Jpeg);  	// Copy the wallpaper section of the completed canvas  	using (Bitmap imgWallpaper = new Bitmap (wallPaperWidth' wallPaperHeight)) {  		using (Graphics gWallpaper = Graphics.FromImage (imgWallpaper)) {  			gWallpaper.DrawImage (img' new Rectangle (0' 0' wallPaperWidth' wallPaperHeight)' new Rectangle (drawOffsetX' drawOffsetY' wallPaperWidth' wallPaperHeight)' GraphicsUnit.Pixel);  			// Determine the output format  			string wallpaperFileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' Application.ProductName' "hydrapaper");  			if (CSSetDesktopWallpaper.Wallpaper.SupportJpgAsWallpaper) {  				wallpaperFileName += ".jpg";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Jpeg);  			}  			else {  				wallpaperFileName += ".bmp";  				imgWallpaper.Save (wallpaperFileName' System.Drawing.Imaging.ImageFormat.Bmp);  			}  			return wallpaperFileName;  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: foreach (Screen screen in Screen.AllScreens) {  	Rectangle bounds = screen.Bounds;  	using (Brush b = new SolidBrush (Color.Black)) {  		g.FillRectangle (b' bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height);  	}  	// Select an image for each screen.  	FileProperties file = GetFile (settings.Files' true' settings.Randomizer);  	if (file == null) {  		// There are no files to make a background with so just return  		return string.Empty;  	}  	settings.FileNamesUsed.Add (file.Filename);  	try {  		using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  			RotateImage (imageFromDisk' file.Filename);  			Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior);  			if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  				Rectangle src = new Rectangle ();  				src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  				src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  				src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  				src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  				dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  				dst.Width = src.Width;  				dst.Height = src.Height;  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  					g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  					g.ResetClip ();  				}  			}  			else {  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  				dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  				dst.Width = adjustedSize.Width;  				dst.Height = adjustedSize.Height;  				// Paint the image to the graphic  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  					g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  					g.ResetClip ();  				}  			}  		}  	}  	catch (Exception ex) {  		Program.DebugMessage ("Exception in BuildSingleScreenWallPaper: {0}"' ex.Message);  		Program.DebugMessage (ex.StackTrace);  		continue;  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: foreach (Screen screen in Screen.AllScreens) {  	Rectangle bounds = screen.Bounds;  	using (Brush b = new SolidBrush (Color.Black)) {  		g.FillRectangle (b' bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height);  	}  	// Select an image for each screen.  	FileProperties file = GetFile (settings.Files' true' settings.Randomizer);  	if (file == null) {  		// There are no files to make a background with so just return  		return string.Empty;  	}  	settings.FileNamesUsed.Add (file.Filename);  	try {  		using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  			RotateImage (imageFromDisk' file.Filename);  			Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior);  			if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  				Rectangle src = new Rectangle ();  				src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  				src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  				src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  				src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  				dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  				dst.Width = src.Width;  				dst.Height = src.Height;  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  					g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  					g.ResetClip ();  				}  			}  			else {  				// Center the image in the screen region  				Rectangle dst = new Rectangle ();  				dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  				dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  				dst.Width = adjustedSize.Width;  				dst.Height = adjustedSize.Height;  				// Paint the image to the graphic  				// Paint the image to the graphic  				using (ImageAttributes attr = new ImageAttributes ()) {  					attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  					g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  					g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  					g.ResetClip ();  				}  			}  		}  	}  	catch (Exception ex) {  		Program.DebugMessage ("Exception in BuildSingleScreenWallPaper: {0}"' ex.Message);  		Program.DebugMessage (ex.StackTrace);  		continue;  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: try {  	using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  		RotateImage (imageFromDisk' file.Filename);  		Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior);  		if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  			Rectangle src = new Rectangle ();  			src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  			src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  			src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  			src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  			dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  			dst.Width = src.Width;  			dst.Height = src.Height;  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  				g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  				g.ResetClip ();  			}  		}  		else {  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  			dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  			dst.Width = adjustedSize.Width;  			dst.Height = adjustedSize.Height;  			// Paint the image to the graphic  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  				g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  				g.ResetClip ();  			}  		}  	}  }  catch (Exception ex) {  	Program.DebugMessage ("Exception in BuildSingleScreenWallPaper: {0}"' ex.Message);  	Program.DebugMessage (ex.StackTrace);  	continue;  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: try {  	using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  		RotateImage (imageFromDisk' file.Filename);  		Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior);  		if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  			Rectangle src = new Rectangle ();  			src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  			src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  			src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  			src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  			dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  			dst.Width = src.Width;  			dst.Height = src.Height;  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  				g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  				g.ResetClip ();  			}  		}  		else {  			// Center the image in the screen region  			Rectangle dst = new Rectangle ();  			dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  			dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  			dst.Width = adjustedSize.Width;  			dst.Height = adjustedSize.Height;  			// Paint the image to the graphic  			// Paint the image to the graphic  			using (ImageAttributes attr = new ImageAttributes ()) {  				attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  				g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  				g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  				g.ResetClip ();  			}  		}  	}  }  catch (Exception ex) {  	Program.DebugMessage ("Exception in BuildSingleScreenWallPaper: {0}"' ex.Message);  	Program.DebugMessage (ex.StackTrace);  	continue;  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  	RotateImage (imageFromDisk' file.Filename);  	Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior);  	if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  		Rectangle src = new Rectangle ();  		src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  		src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  		src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  		src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  		dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  		dst.Width = src.Width;  		dst.Height = src.Height;  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  			g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  			g.ResetClip ();  		}  	}  	else {  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  		dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  		dst.Width = adjustedSize.Width;  		dst.Height = adjustedSize.Height;  		// Paint the image to the graphic  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  			g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  			g.ResetClip ();  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: using (Image imageFromDisk = Bitmap.FromFile (file.Filename)) {  	RotateImage (imageFromDisk' file.Filename);  	Size adjustedSize = AdjustImage (imageFromDisk.Size' new Size (bounds.Width' bounds.Height)' settings.Settings.SingleScreenImageBehavior);  	if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  		Rectangle src = new Rectangle ();  		src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  		src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  		src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  		src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  		dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  		dst.Width = src.Width;  		dst.Height = src.Height;  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  			g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  			g.ResetClip ();  		}  	}  	else {  		// Center the image in the screen region  		Rectangle dst = new Rectangle ();  		dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  		dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  		dst.Width = adjustedSize.Width;  		dst.Height = adjustedSize.Height;  		// Paint the image to the graphic  		// Paint the image to the graphic  		using (ImageAttributes attr = new ImageAttributes ()) {  			attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  			g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  			g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  			g.ResetClip ();  		}  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  	Rectangle src = new Rectangle ();  	src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  	src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  	src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  	src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  	dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  	dst.Width = src.Width;  	dst.Height = src.Height;  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  		g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  		g.ResetClip ();  	}  }  else {  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  	dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  	dst.Width = adjustedSize.Width;  	dst.Height = adjustedSize.Height;  	// Paint the image to the graphic  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  		g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  		g.ResetClip ();  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: if (settings.Settings.SingleScreenImageBehavior == Common.ImageBehavior.Center) {  	Rectangle src = new Rectangle ();  	src.Width = Math.Min (imageFromDisk.Width' bounds.Width);  	src.Height = Math.Min (imageFromDisk.Height' bounds.Height);  	src.X = Convert.ToInt32 (Math.Floor (imageFromDisk.Width / 2m - src.Width / 2m));  	src.Y = Convert.ToInt32 (Math.Floor (imageFromDisk.Height / 2m - src.Height / 2m));  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.X = Convert.ToInt32 (Math.Floor (bounds.X + (bounds.Width / 2m - src.Width / 2m))) + drawOffsetX;  	dst.Y = Convert.ToInt32 (Math.Floor (bounds.Y + (bounds.Height / 2m - src.Height / 2m))) + drawOffsetY;  	dst.Width = src.Width;  	dst.Height = src.Height;  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  		g.DrawImage (imageFromDisk' dst' src.X' src.Y' src.Width' src.Height' GraphicsUnit.Pixel' attr);  		g.ResetClip ();  	}  }  else {  	// Center the image in the screen region  	Rectangle dst = new Rectangle ();  	dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  	dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  	dst.Width = adjustedSize.Width;  	dst.Height = adjustedSize.Height;  	// Paint the image to the graphic  	// Paint the image to the graphic  	using (ImageAttributes attr = new ImageAttributes ()) {  		attr.SetWrapMode (System.Drawing.Drawing2D.WrapMode.TileFlipXY);  		g.Clip = new Region (new Rectangle (bounds.X + drawOffsetX' bounds.Y + drawOffsetY' bounds.Width' bounds.Height));  		g.DrawImage (imageFromDisk' dst' 0' 0' imageFromDisk.Width' imageFromDisk.Height' GraphicsUnit.Pixel' attr);  		g.ResetClip ();  	}  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: dst.X = bounds.X + ((bounds.Width - adjustedSize.Width) / 2) + drawOffsetX;  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,BuildSingleScreenWallPaper,The following statement contains a magic number: dst.Y = bounds.Y + ((bounds.Height - adjustedSize.Height) / 2) + drawOffsetY;  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation.ToString ())) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation.ToString ())) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation.ToString ())) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation.ToString ())) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation.ToString ())) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation.ToString ())) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,HydraPaper,WallPaperBuilder,C:\repos\gyphie_hydrawallpaper\HydraWallPaper\WallPaperBuilder.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation.ToString ())) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
