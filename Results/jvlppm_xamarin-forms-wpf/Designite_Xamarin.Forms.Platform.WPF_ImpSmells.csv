Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Xamarin.Forms.Platform.WPF.Rendereres,ButtonRenderer,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\ButtonRenderer.cs,Handle_FontProperty,The length of the statement  "            Content.FontFamily = Model.Font.FontFamily == null ? DefaultFontFamily : new System.Windows.Media.FontFamily(Model.Font.FontFamily); " is 132.
Long Statement,Xamarin.Forms.Platform.WPF.Rendereres,ButtonRenderer,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\ButtonRenderer.cs,Handle_FontProperty,The length of the statement  "            Content.FontWeight = Model.Font.FontAttributes == FontAttributes.Bold ? System.Windows.FontWeights.Bold : System.Windows.FontWeights.Normal; " is 140.
Long Statement,Xamarin.Forms.Platform.WPF.Rendereres,ImageRenderer,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\ImageRenderer.cs,LoadStreamAsync,The length of the statement  "                return await Device.PlatformServices.GetStreamAsync(new System.Uri(fileSource.File' UriKind.RelativeOrAbsolute)' cancellation); " is 127.
Long Statement,Xamarin.Forms.Platform.WPF.Rendereres,ImageRenderer,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\ImageRenderer.cs,LoadImageAsync,The length of the statement  "            EventHandler<System.Windows.ExceptionRoutedEventArgs> imageFailed = (s' e) => { loadImageCompletion.TrySetException(e.ErrorException); }; " is 137.
Long Statement,Xamarin.Forms.Platform.WPF.Rendereres,ImageRenderer,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\ImageRenderer.cs,LoadImageAsync,The length of the statement  "            EventHandler<System.Windows.Media.ExceptionEventArgs> bmiLoadError = (s' e) => { loadImageCompletion.TrySetException(e.ErrorException); }; " is 138.
Long Statement,Xamarin.Forms.Platform.WPF.Rendereres,LabelRenderer,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\LabelRenderer.cs,Handle_FontProperty,The length of the statement  "            Content.FontFamily = Model.Font.FontFamily == null ? DefaultFontFamily : new System.Windows.Media.FontFamily(Model.Font.FontFamily); " is 132.
Long Statement,Xamarin.Forms.Platform.WPF.Rendereres,LabelRenderer,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\LabelRenderer.cs,Handle_FontProperty,The length of the statement  "            Content.FontWeight = Model.Font.FontAttributes == FontAttributes.Bold ? System.Windows.FontWeights.Bold : System.Windows.FontWeights.Normal; " is 140.
Complex Conditional,Xamarin.Forms.Platform.WPF.Controls,FlipView,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Controls\FlipView.cs,OnRootManipulationDelta,The conditional expression  "(this.SelectedIndex == 0 && delta.Translation.X > 0 && this.elasticFactor > 0)                  || (this.SelectedIndex == this.Items.Count - 1 && delta.Translation.X < 0 && this.elasticFactor > 0)"  is complex.
Empty Catch Block,Xamarin.Forms.Platform.WPF,PlatformServices,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\PlatformServices.cs,GetStreamAsync,The method has an empty catch block.
Empty Catch Block,Xamarin.Forms.Platform.WPF,PlatformServices,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\PlatformServices.cs,GetStreamAsync,The method has an empty catch block.
Empty Catch Block,Xamarin.Forms.Platform.WPF,PlatformServices,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\PlatformServices.cs,GetStreamAsync,The method has an empty catch block.
Empty Catch Block,Xamarin.Forms.Platform.WPF.Rendereres,ImageRenderer,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\ImageRenderer.cs,LoadImageAsync,The method has an empty catch block.
Magic Number,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,ToWPFColor,The following statement contains a magic number: return WPFColor.FromArgb(                  (byte)(color.A * 255)'                  (byte)(color.R * 255)'                  (byte)(color.G * 255)'                  (byte)(color.B * 255));
Magic Number,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,ToWPFColor,The following statement contains a magic number: return WPFColor.FromArgb(                  (byte)(color.A * 255)'                  (byte)(color.R * 255)'                  (byte)(color.G * 255)'                  (byte)(color.B * 255));
Magic Number,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,ToWPFColor,The following statement contains a magic number: return WPFColor.FromArgb(                  (byte)(color.A * 255)'                  (byte)(color.R * 255)'                  (byte)(color.G * 255)'                  (byte)(color.B * 255));
Magic Number,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,ToWPFColor,The following statement contains a magic number: return WPFColor.FromArgb(                  (byte)(color.A * 255)'                  (byte)(color.R * 255)'                  (byte)(color.G * 255)'                  (byte)(color.B * 255));
Magic Number,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,GetWPFSize,The following statement contains a magic number: switch (font.NamedSize)              {                  case NamedSize.Micro:                      return 10;                  case NamedSize.Small:                      return 12;                  case NamedSize.Medium:                      return 14;                  case NamedSize.Large:                      return 18;                  default:                      return font.FontSize;              }
Magic Number,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,GetWPFSize,The following statement contains a magic number: switch (font.NamedSize)              {                  case NamedSize.Micro:                      return 10;                  case NamedSize.Small:                      return 12;                  case NamedSize.Medium:                      return 14;                  case NamedSize.Large:                      return 18;                  default:                      return font.FontSize;              }
Magic Number,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,GetWPFSize,The following statement contains a magic number: switch (font.NamedSize)              {                  case NamedSize.Micro:                      return 10;                  case NamedSize.Small:                      return 12;                  case NamedSize.Medium:                      return 14;                  case NamedSize.Large:                      return 18;                  default:                      return font.FontSize;              }
Magic Number,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,GetWPFSize,The following statement contains a magic number: switch (font.NamedSize)              {                  case NamedSize.Micro:                      return 10;                  case NamedSize.Small:                      return 12;                  case NamedSize.Medium:                      return 14;                  case NamedSize.Large:                      return 18;                  default:                      return font.FontSize;              }
Magic Number,Xamarin.Forms.Platform.WPF.Controls,FlipView,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Controls\FlipView.cs,OnRootManipulationDelta,The following statement contains a magic number: if ((this.SelectedIndex == 0 && delta.Translation.X > 0 && this.elasticFactor > 0)                  || (this.SelectedIndex == this.Items.Count - 1 && delta.Translation.X < 0 && this.elasticFactor > 0))              {                  this.elasticFactor -= 0.05;              }
Magic Number,Xamarin.Forms.Platform.WPF.Controls,FlipView,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Controls\FlipView.cs,GetAnimation,The following statement contains a magic number: toFrame.KeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(200));
Missing Default,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,ToWPFOrientation,The following switch statement is missing a default case: switch (orientation)              {                  case StackOrientation.Horizontal: return System.Windows.Controls.Orientation.Horizontal;                  case StackOrientation.Vertical: return System.Windows.Controls.Orientation.Vertical;              }
Missing Default,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,ToWPFTextAlignment,The following switch statement is missing a default case: switch (alignment)              {                  case TextAlignment.Start: return System.Windows.TextAlignment.Left;                  case TextAlignment.Center: return System.Windows.TextAlignment.Center;                  case TextAlignment.End: return System.Windows.TextAlignment.Right;              }
Missing Default,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,ToWPFHorizontalAlignment,The following switch statement is missing a default case: switch (alignment)              {                  case TextAlignment.Start: return System.Windows.HorizontalAlignment.Left;                  case TextAlignment.Center: return System.Windows.HorizontalAlignment.Center;                  case TextAlignment.End: return System.Windows.HorizontalAlignment.Right;              }
Missing Default,Xamarin.Forms.Platform.WPF,Extensions,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Extensions.cs,ToWPFVerticalAlignment,The following switch statement is missing a default case: switch (alignment)              {                  case TextAlignment.Start: return System.Windows.VerticalAlignment.Top;                  case TextAlignment.Center: return System.Windows.VerticalAlignment.Center;                  case TextAlignment.End: return System.Windows.VerticalAlignment.Bottom;              }
Missing Default,Xamarin.Forms.Platform.WPF.Rendereres,ViewRenderer<TModel;T>,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\ViewRenderer.cs,Handle_VerticalOptionsProperty,The following switch statement is missing a default case: switch (Model.VerticalOptions.Alignment)              {                  case LayoutAlignment.Start:                      Element.VerticalAlignment = System.Windows.VerticalAlignment.Top;                      break;                  case LayoutAlignment.Center:                      Element.VerticalAlignment = System.Windows.VerticalAlignment.Center;                      break;                  case LayoutAlignment.End:                      Element.VerticalAlignment = System.Windows.VerticalAlignment.Bottom;                      break;                  case LayoutAlignment.Fill:                      Element.VerticalAlignment = System.Windows.VerticalAlignment.Stretch;                      break;              }
Missing Default,Xamarin.Forms.Platform.WPF.Rendereres,ViewRenderer<TModel;T>,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\ViewRenderer.cs,Handle_HorizontalOptionsProperty,The following switch statement is missing a default case: switch (Model.HorizontalOptions.Alignment)              {                  case LayoutAlignment.Start:                      Element.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;                      break;                  case LayoutAlignment.Center:                      Element.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;                      break;                  case LayoutAlignment.End:                      Element.HorizontalAlignment = System.Windows.HorizontalAlignment.Right;                      break;                  case LayoutAlignment.Fill:                      Element.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;                      break;              }
Missing Default,Xamarin.Forms.Platform.WPF.Rendereres,LabelRenderer,C:\repos\jvlppm_xamarin-forms-wpf\src\Xamarin.Forms.Platforms\Xamarin.Forms.Platform.WPF\Platform.WPF\Rendereres\LabelRenderer.cs,Handle_LineBreakMode,The following switch statement is missing a default case: switch (Model.LineBreakMode)              {                  case LineBreakMode.NoWrap:                      Content.TextWrapping = System.Windows.TextWrapping.NoWrap;                      Content.TextTrimming = System.Windows.TextTrimming.None;                      break;                  case LineBreakMode.WordWrap:                      Content.TextWrapping = System.Windows.TextWrapping.WrapWithOverflow;                      Content.TextTrimming = System.Windows.TextTrimming.None;                      break;                  case LineBreakMode.CharacterWrap:                      Content.TextWrapping = System.Windows.TextWrapping.Wrap;                      Content.TextTrimming = System.Windows.TextTrimming.None;                      break;                  case LineBreakMode.HeadTruncation: // TODO: LineBreakMode.HeadTruncation                  case LineBreakMode.MiddleTruncation: // TODO: LineBreakMode.MiddleTruncation                  case LineBreakMode.TailTruncation:                      Content.TextWrapping = System.Windows.TextWrapping.NoWrap;                      Content.TextTrimming = System.Windows.TextTrimming.CharacterEllipsis;                      break;              }
