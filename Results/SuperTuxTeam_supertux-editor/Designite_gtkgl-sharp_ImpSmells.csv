Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gdk,W32GLContext,C:\repos\SuperTuxTeam_supertux-editor\gtkgl-sharp\W32GLContext.cs,MakeCurrent,Cyclomatic complexity of the method is 57
Magic Number,Gdk,W32GLContext,C:\repos\SuperTuxTeam_supertux-editor\gtkgl-sharp\W32GLContext.cs,MakeCurrent,The following statement contains a magic number: if (!initialized) {  	IntPtr hwnd = gdk_win32_drawable_get_handle (gdkDrawable);  	deviceContext = GetDC (hwnd);  	// pfd Tells Windows How We Want Things To Be  	PIXELFORMATDESCRIPTOR pfd = new PIXELFORMATDESCRIPTOR ();  	// Size Of This Pixel Format Descriptor  	pfd.nSize = (ushort)sizeof(PIXELFORMATDESCRIPTOR);  	pfd.nVersion = 1;  	pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL;  	pfd.iPixelType = PFD_TYPE_COLORINDEX;  	pfd.cColorBits = 32;  	for (int i = 0; i < attributes.Length; ++i) {  		switch (attributes [i]) {  		case GLContextAttributes.AccumAlphaSize:  			pfd.cAccumAlphaBits = (byte)attributes [++i];  			break;  		case GLContextAttributes.AccumBlueSize:  			pfd.cAccumBlueBits = (byte)attributes [++i];  			break;  		case GLContextAttributes.AccumGreenSize:  			pfd.cAccumGreenBits = (byte)attributes [++i];  			break;  		case GLContextAttributes.AccumRedSize:  			pfd.cAccumRedBits = (byte)attributes [++i];  			break;  		case GLContextAttributes.AlphaSize:  			pfd.cAlphaBits = (byte)attributes [++i];  			break;  		case GLContextAttributes.AuxBuffers:  			pfd.cAuxBuffers = (byte)attributes [++i];  			break;  		case GLContextAttributes.BlueSize:  			pfd.cBlueBits = (byte)attributes [++i];  			break;  		case GLContextAttributes.BufferSize:  			// ?!?  			++i;  			break;  		case GLContextAttributes.DepthSize:  			pfd.cDepthBits = (byte)attributes [++i];  			break;  		case GLContextAttributes.DoubleBuffer:  			pfd.dwFlags |= PFD_DOUBLEBUFFER;  			break;  		case GLContextAttributes.GreenSize:  			pfd.cGreenBits = (byte)attributes [++i];  			break;  		case GLContextAttributes.Level:  			// ?  			++i;  			break;  		case GLContextAttributes.None:  			// ?  			break;  		case GLContextAttributes.RedSize:  			pfd.cRedBits = (byte)attributes [++i];  			break;  		case GLContextAttributes.Rgba:  			pfd.iPixelType = PFD_TYPE_RGBA;  			break;  		case GLContextAttributes.StencilSize:  			pfd.cStencilBits = (byte)attributes [++i];  			break;  		case GLContextAttributes.Stereo:  			pfd.dwFlags |= PFD_STEREO;  			break;  		}  	}  	// Tell the graphics hardware how to display pixels.  	int pixelFormat = ChoosePixelFormat (deviceContext' new IntPtr (&pfd));  	if (pixelFormat == 0)  		return false;  	if (!SetPixelFormat (deviceContext' pixelFormat' new IntPtr (&pfd)))  		throw new Exception ("Couldn't set pixelformat");  	renderingContext = wglCreateContext (deviceContext);  	if (renderingContext == IntPtr.Zero)  		throw new Exception ("Couldn't create rendering context");  	if (share != null) {  		if (share.renderingContext != IntPtr.Zero) {  			Console.WriteLine ("DoSharing");  			if (!wglShareLists (share.renderingContext' renderingContext))  				throw new Exception ("Can't share opengl contexts");  		}  		else  			throw new Exception ("Trying to share with uninitialized context...");  	}  	else {  		Console.WriteLine ("Share zero");  	}  	initialized = true;  }  
Magic Number,Gdk,W32GLContext,C:\repos\SuperTuxTeam_supertux-editor\gtkgl-sharp\W32GLContext.cs,MakeCurrent,The following statement contains a magic number: pfd.cColorBits = 32;  
Missing Default,Gdk,W32GLContext,C:\repos\SuperTuxTeam_supertux-editor\gtkgl-sharp\W32GLContext.cs,MakeCurrent,The following switch statement is missing a default case: switch (attributes [i]) {  case GLContextAttributes.AccumAlphaSize:  	pfd.cAccumAlphaBits = (byte)attributes [++i];  	break;  case GLContextAttributes.AccumBlueSize:  	pfd.cAccumBlueBits = (byte)attributes [++i];  	break;  case GLContextAttributes.AccumGreenSize:  	pfd.cAccumGreenBits = (byte)attributes [++i];  	break;  case GLContextAttributes.AccumRedSize:  	pfd.cAccumRedBits = (byte)attributes [++i];  	break;  case GLContextAttributes.AlphaSize:  	pfd.cAlphaBits = (byte)attributes [++i];  	break;  case GLContextAttributes.AuxBuffers:  	pfd.cAuxBuffers = (byte)attributes [++i];  	break;  case GLContextAttributes.BlueSize:  	pfd.cBlueBits = (byte)attributes [++i];  	break;  case GLContextAttributes.BufferSize:  	// ?!?  	++i;  	break;  case GLContextAttributes.DepthSize:  	pfd.cDepthBits = (byte)attributes [++i];  	break;  case GLContextAttributes.DoubleBuffer:  	pfd.dwFlags |= PFD_DOUBLEBUFFER;  	break;  case GLContextAttributes.GreenSize:  	pfd.cGreenBits = (byte)attributes [++i];  	break;  case GLContextAttributes.Level:  	// ?  	++i;  	break;  case GLContextAttributes.None:  	// ?  	break;  case GLContextAttributes.RedSize:  	pfd.cRedBits = (byte)attributes [++i];  	break;  case GLContextAttributes.Rgba:  	pfd.iPixelType = PFD_TYPE_RGBA;  	break;  case GLContextAttributes.StencilSize:  	pfd.cStencilBits = (byte)attributes [++i];  	break;  case GLContextAttributes.Stereo:  	pfd.dwFlags |= PFD_STEREO;  	break;  }  
