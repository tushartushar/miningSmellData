Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.AspNetCore.Routing.Patterns,RoutePatternEqualityComparer,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternParserTest.cs,Equals,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.AspNetCore.Routing.Template.Tests,TemplateEqualityComparer,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Equals,Cyclomatic complexity of the method is 12
Long Parameter List,Microsoft.AspNetCore.Routing,PassConstraint,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\ConstraintMatcherTest.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing,FailConstraint,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\ConstraintMatcherTest.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing,TestRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultParameterPolicyFactoryTest.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing,EndpointFactory,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\EndpointFactory.cs,CreateRouteEndpoint,The method has 7 parameters. Parameters: template' defaults' policies' requiredValues' order' displayName' metadata
Long Parameter List,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_OptionalParameter_FollowedByPeriod_Valid,The method has 5 parameters. Parameters: template' path' expectedMatch' p1' p2
Long Parameter List,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_OptionalParameter_FollowedByPeriod_3Parameters_Valid,The method has 5 parameters. Parameters: template' path' p1' p2' p3
Long Parameter List,Microsoft.AspNetCore.Routing,RouteCollectionTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteCollectionTest.cs,GetVirtualPath_CanLowerCaseUrls_QueryStrings_BasedOnOptions,The method has 5 parameters. Parameters: returnUrl' expectedUrl' lowercaseUrls' lowercaseQueryStrings' appendTrailingSlash
Long Parameter List,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,CreateRoute,The method has 5 parameters. Parameters: template' defaults' handleRequest' constraints' dataTokens
Long Parameter List,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,CreateEndpoint,The method has 7 parameters. Parameters: template' defaults' metadataRequiredValues' routePatternRequiredValues' order' routeName' metadataCollection
Long Parameter List,Microsoft.AspNetCore.Routing.Tests,MultiConstructorRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Tests,CustomRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Tests,TestRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\InlineRouteParameterParserTests.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Tests,TestRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\InlineRouteParameterParserTests.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyIntegrationTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyIntegrationTest.cs,CreateEndpoint,The method has 6 parameters. Parameters: template' defaults' constraints' order' httpMethods' acceptCorsPreflight
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,MatcherAssert,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MatcherAssert.cs,AssertMatch,The method has 5 parameters. Parameters: context' httpContext' expected' keys' values
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,MatcherAssert,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MatcherAssert.cs,AssertMatch,The method has 5 parameters. Parameters: context' httpContext' expected' values' ignoreValues
Long Parameter List,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetVirtualPathWithMultiSegmentWithOptionalParam,The method has 5 parameters. Parameters: template' defaults' ambientValues' values' expected
Long Parameter List,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,RunTest,The method has 5 parameters. Parameters: template' defaults' ambientValues' values' expected
Long Parameter List,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,RunTest,The method has 5 parameters. Parameters: template' defaults' ambientValues' values' expected
Long Parameter List,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_OptionalParameter_FollowedByPeriod_Valid,The method has 5 parameters. Parameters: template' path' expectedMatch' p1' p2
Long Parameter List,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_OptionalParameter_FollowedByPeriod_3Parameters_Valid,The method has 5 parameters. Parameters: template' path' p1' p2' p3
Long Parameter List,Microsoft.AspNetCore.Routing.TestObjects,CapturingConstraint,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\TestObjects\CapturingConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_WithOptionalCompositeParameter_Valid,The method has 5 parameters. Parameters: template' request' p1' p2' p3
Long Parameter List,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,MapOutboundEntry,The method has 6 parameters. Parameters: builder' template' requiredValues' order' name' handler
Long Identifier,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_UsesFirstTemplateThatSucceeds,The length of the parameter endpointControllerActionParameter is 33.
Long Identifier,Microsoft.AspNetCore.Routing.Tests,CompositeRouteConstraintTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Constraints\CompositeRouteConstraintTests.cs,,The length of the parameter ConstraintMatchMethodExpression is 31.
Long Statement,Microsoft.AspNetCore.Builder,MapEndpointEndpointDataSourceBuilderExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Builder\MapEndpointEndpointDataSourceBuilderExtensionsTest.cs,GetRouteEndpointBuilder,The length of the statement  "            return Assert.IsType<RouteEndpointModel>(Assert.Single(GetBuilderEndpointDataSource(endpointRouteBuilder).EndpointModels)); " is 123.
Long Statement,Microsoft.AspNetCore.Builder,MapEndpointEndpointDataSourceBuilderExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Builder\MapEndpointEndpointDataSourceBuilderExtensionsTest.cs,MapEndpoint_TypedPatternAndMetadata_BuildsEndpoint,The length of the statement  "            var endpointBuilder = builder.Map(RoutePatternFactory.Parse("/")' "Display name!"' requestDelegate' new[] { metadata }); " is 120.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_ForList_StringWorkaround,The length of the statement  "                values: new RouteValueDictionary(new { page = 1' color = new List<string> { "red"' "green"' "blue" }' message = "textfortest" })' " is 129.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_ParameterPolicy_Includes_BufferedValues,The length of the statement  "            var endpoint = EndpointFactory.CreateRouteEndpoint("Foo/{bar=MyBar}/{id?}"' policies: new { bar = new SlugifyParameterTransformer()' }); " is 136.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithoutHttpContext_NoMatches_ReturnsNull,The length of the statement  "            var endpoint = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_NoMatches_ReturnsNull,The length of the statement  "            var endpoint = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithoutHttpContext_NoMatches_ReturnsNull,The length of the statement  "            var endpoint = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_NoMatches_ReturnsNull,The length of the statement  "            var endpoint = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithoutHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithoutHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithoutHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var path = linkGenerator.GetPathByAddress(1' values: new RouteValueDictionary(new { controller = "Home"' action = "Index"' })); " is 127.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var path = linkGenerator.GetPathByAddress(CreateHttpContext()' 1' values: new RouteValueDictionary(new { controller = "Home"' action = "Index"' })); " is 148.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithoutHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithoutHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_HasMatches_ReturnsFirstSuccessfulTemplateResult,The length of the statement  "            var uri = linkGenerator.GetUriByAddress(httpContext' 1' values: new RouteValueDictionary(new { controller = "Home"' action = "Index"' })); " is 138.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithoutHttpContext_WithLinkOptions,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithoutHttpContext_WithLinkOptions,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithParameterTransformer,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller:slugify}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 138.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithParameterTransformer,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller:slugify}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 139.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithParameterTransformer_WithLowercaseUrl,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller:slugify}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 138.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithParameterTransformer_WithLowercaseUrl,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller:slugify}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 139.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_WithLinkOptions,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_WithLinkOptions,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithoutHttpContext_WithLinkOptions,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithoutHttpContext_WithLinkOptions,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_WithLinkOptions,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_WithLinkOptions,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetLink_ParameterTransformer,The length of the statement  "            var endpoint = EndpointFactory.CreateRouteEndpoint("{controller:upper-case}/{name}"' requiredValues: new { controller = "Home"' name = "Test" }); " is 145.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetLink_ParameterTransformer_ForQueryString,The length of the statement  "            var link = linkGenerator.GetPathByRouteValues(routeName: null' new { controller = "Home"' name = "Test"' c = "hithere"' }); " is 123.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_IncludesAmbientValues,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_IncludesAmbientValues,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_IncludesAmbientValues,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_IncludesAmbientValues,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_CanOverrideUriParts,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByAddress_WithHttpContext_CanOverrideUriParts,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_CanOverrideUriParts,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetUriByAddress_WithHttpContext_CanOverrideUriParts,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id?}"' metadata: new object[] { new IntMetadata(1)' }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetTemplateBinder_CanCache,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetTemplateBinder_CanClearCache,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetTemplateBinder_CanClearCache,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("{controller}/{action}/{id}"' metadata: new object[] { new IntMetadata(1)' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_UsesFirstTemplateThatSucceeds,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_UsesFirstTemplateThatSucceeds,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_UsesFirstTemplateThatSucceeds,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_UsesFirstTemplateThatSucceeds,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_UsesFirstTemplateThatSucceeds,The length of the statement  "            var linkGenerator = CreateLinkGenerator(endpointControllerAction' endpointController' endpointEmpty' endpointControllerActionParameter); " is 136.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_ParameterMatchesRequireValues_HasAmbientValues,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_ParameterMatchesRequireValues_HasAmbientValues,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Login"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_ParameterMatchesRequireValues_NoAmbientValues,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_ParameterMatchesRequireValues_NoAmbientValues,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Login"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,DefaultParameterPolicyFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultParameterPolicyFactoryTest.cs,Create_ThrowsException_IfNoConstraintOrParameterPolicy_FoundInMap,The length of the statement  "                () => factory.Create(RoutePatternFactory.ParameterPart("id"' @default: null' RoutePatternParameterKind.Optional)' @"notpresent(\d+)")); " is 135.
Long Statement,Microsoft.AspNetCore.Routing,DefaultParameterPolicyFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultParameterPolicyFactoryTest.cs,Create_ThrowsException_OnInvalidType,The length of the statement  "                $"The constraint type '{typeof(string)}' which is mapped to constraint key 'bad' must implement the '{nameof(IParameterPolicy)}' interface."' " is 141.
Long Statement,Microsoft.AspNetCore.Routing,DefaultParameterPolicyFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultParameterPolicyFactoryTest.cs,Create_CreatesParameterPolicy_FromConstraintText_AndRouteConstraint_Optional,The length of the statement  "            var parameterPolicy = factory.Create(RoutePatternFactory.ParameterPart("id"' @default: null' RoutePatternParameterKind.Optional)' "int"); " is 137.
Long Statement,Microsoft.AspNetCore.Routing,DefaultParameterPolicyFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultParameterPolicyFactoryTest.cs,Create_CreatesParameterPolicy_FromConstraintText_AndParameterPolicy,The length of the statement  "            var parameterPolicy = factory.Create(RoutePatternFactory.ParameterPart("id"' @default: null' RoutePatternParameterKind.Optional)' "customParameterPolicy"); " is 155.
Long Statement,Microsoft.AspNetCore.Routing,DefaultParameterPolicyFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultParameterPolicyFactoryTest.cs,Create_CreatesParameterPolicy_FromConstraintText_AndParameterPolicyWithAmbigiousMatchingCtors,The length of the statement  "            Assert.Equal($"The constructor to use for activating the constraint type '{nameof(CustomParameterPolicyWithAmbigiousMultpleCtors)}' is ambiguous. " " is 147.
Long Statement,Microsoft.AspNetCore.Routing,DefaultParameterPolicyFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultParameterPolicyFactoryTest.cs,Create_CreatesParameterPolicy_FromConstraintText_AndParameterPolicy_Optional,The length of the statement  "            var parameterPolicy = factory.Create(RoutePatternFactory.ParameterPart("id"' @default: null' RoutePatternParameterKind.Optional)' "customParameterPolicy"); " is 155.
Long Statement,Microsoft.AspNetCore.Routing,EndpointNameAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\EndpointNameAddressSchemeTest.cs,AddressScheme_UnsuppressedEndpoint_IsUsed,The length of the statement  "                metadata: new object[] { new EndpointNameMetadata("name1")' new SuppressLinkGenerationMetadata()' new EncourageLinkGenerationMetadata()' }); " is 140.
Long Statement,Microsoft.AspNetCore.Routing,EndpointNameAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\EndpointNameAddressSchemeTest.cs,AddressScheme_ThrowsExceptionForDuplicateEndpoints,The length of the statement  "                EndpointFactory.CreateRouteEndpoint("/a"' displayName: "a"' metadata: new object[] { new EndpointNameMetadata("name1")' })' " is 123.
Long Statement,Microsoft.AspNetCore.Routing,EndpointNameAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\EndpointNameAddressSchemeTest.cs,AddressScheme_ThrowsExceptionForDuplicateEndpoints,The length of the statement  "                EndpointFactory.CreateRouteEndpoint("/b"' displayName: "b"' metadata: new object[] { new EndpointNameMetadata("name1")' })' " is 123.
Long Statement,Microsoft.AspNetCore.Routing,EndpointNameAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\EndpointNameAddressSchemeTest.cs,AddressScheme_ThrowsExceptionForDuplicateEndpoints,The length of the statement  "                EndpointFactory.CreateRouteEndpoint("/c"' displayName: "c"' metadata: new object[] { new EndpointNameMetadata("name1")' })' " is 123.
Long Statement,Microsoft.AspNetCore.Routing,EndpointNameAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\EndpointNameAddressSchemeTest.cs,AddressScheme_ThrowsExceptionForDuplicateEndpoints,The length of the statement  "                EndpointFactory.CreateRouteEndpoint("/d"' displayName: "d"' metadata: new object[] { new EndpointNameMetadata("NAME1")' })' " is 123.
Long Statement,Microsoft.AspNetCore.Routing,EndpointNameAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\EndpointNameAddressSchemeTest.cs,AddressScheme_ThrowsExceptionForDuplicateEndpoints,The length of the statement  "                EndpointFactory.CreateRouteEndpoint("/e"' displayName: "e"' metadata: new object[] { new EndpointNameMetadata("name2")' })' " is 123.
Long Statement,Microsoft.AspNetCore.Routing,EndpointNameAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\EndpointNameAddressSchemeTest.cs,AddressScheme_ThrowsExceptionForDuplicateEndpoints,The length of the statement  "                EndpointFactory.CreateRouteEndpoint("/f"' displayName: "f"' metadata: new object[] { new EndpointNameMetadata("name2")' })' " is 123.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetPathByName_WithHttpContext_DoesNotUseAmbientValues,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("some-endpoint/{p}"' metadata: new[] { new EndpointNameMetadata("name1")' }); " is 129.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetPathByName_WithHttpContext_DoesNotUseAmbientValues,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("some#-other-endpoint/{p}"' metadata: new[] { new EndpointNameMetadata("name2")' }); " is 136.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetPathByName_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("some-endpoint/{p}"'  metadata: new[] { new EndpointNameMetadata("name1")' }); " is 130.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetPathByName_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("some#-other-endpoint/{p}"' metadata: new[] { new EndpointNameMetadata("name2")' }); " is 136.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetPathByName_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("some-endpoint/{p}"' metadata: new[] { new EndpointNameMetadata("name1")' }); " is 129.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetPathByName_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("some#-other-endpoint/{p}"' metadata: new[] { new EndpointNameMetadata("name2")' }); " is 136.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetUriByRouteValues_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("some-endpoint/{p}"' metadata: new[] { new EndpointNameMetadata("name1")' }); " is 129.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetUriByRouteValues_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("some#-other-endpoint/{p}"' metadata: new[] { new EndpointNameMetadata("name2")' }); " is 136.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetUriByRouteValues_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "            Assert.Equal("http://example.com/Foo/Bar%3Fencodeme%3F/some%23-other-endpoint/In%3Fdex/?query=some%3Fquery#Fragment?"' path); " is 125.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetUriByName_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint1 = EndpointFactory.CreateRouteEndpoint("some-endpoint/{p}"' metadata: new[] { new EndpointNameMetadata("name1")' }); " is 129.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetUriByName_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "            var endpoint2 = EndpointFactory.CreateRouteEndpoint("some#-other-endpoint/{p}"' metadata: new[] { new EndpointNameMetadata("name2")' }); " is 136.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorEndpointNameExtensionsTest.cs,GetUriByName_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "            Assert.Equal("http://example.com/Foo/Bar%3Fencodeme%3F/some%23-other-endpoint/In%3Fdex/?query=some%3Fquery#Fragment?"' uri); " is 124.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetPathByRouteValues_WithHttpContext_UsesAmbientValues,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetPathByRouteValues_WithHttpContext_UsesAmbientValues,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetPathByRouteValues_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetPathByRouteValues_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetPathByRouteValues_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetPathByRouteValues_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetUriByRouteValues_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetUriByRouteValues_WithoutHttpContext_WithPathBaseAndFragment,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetUriByRouteValues_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetUriByRouteValues_WithHttpContext_WithPathBaseAndFragment,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetUriByRouteValues_WithHttpContext_CanUseAmbientValues,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorRouteValuesAddressExtensionsTest.cs,GetUriByRouteValues_WithHttpContext_CanUseAmbientValues,The length of the statement  "                metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) }); " is 126.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\LinkGeneratorTestBase.cs,CreateLinkGenerator,The length of the statement  "            return CreateLinkGenerator(configureServices' new[] { new DefaultEndpointDataSource(endpoints ?? Array.Empty<Endpoint>()) }); " is 125.
Long Statement,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_WithCatchAllCapturesDots,The length of the statement  "                new RouteValueDictionary(new { controller = "Home"' action = "ShowPilot"' missionId = "777"' name = "12345./foobar" })); " is 120.
Long Statement,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_WithWeimatchParameterNames,The length of the statement  "                new RouteValueDictionary() { { " "' "space" }' { ".!$%"' "weimatch" }' { "dynamic.data"' "omatcherid" }' { "op.tional"' "default value" }' { "ran!dom"' "va@lue" } }); " is 166.
Long Statement,Microsoft.AspNetCore.Routing,RouteValuesAddressMetadataTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressMetadataTests.cs,DebuggerToString_HasNameAndRequiredValues_ReturnsString,The length of the statement  "            Assert.Equal("Name: Name! - Required values: requiredValue1 = \"One\"' requiredValue2 = \"2\""' metadata.DebuggerToString()); " is 125.
Long Statement,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,EndpointDataSource_ChangeCallback_Refreshes_OutboundMatches,The length of the statement  "            var addressScheme = new CustomRouteValuesBasedAddressScheme(new CompositeEndpointDataSource(new[] { dynamicDataSource })); " is 122.
Long Statement,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,AddressScheme_UnsuppressedEndpoint_IsUsed,The length of the statement  "                metadata: new object[] { new SuppressLinkGenerationMetadata()' new EncourageLinkGenerationMetadata()' new RouteValuesAddressMetadata(string.Empty)' }); " is 151.
Long Statement,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_AmbiguousConstructors_Throws,The length of the statement  "            Assert.Equal("The constructor to use for activating the constraint type 'MultiConstructorRouteConstraint' is ambiguous." + " is 122.
Long Statement,Microsoft.AspNetCore.Routing.Internal,DfaGraphWriterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Internal\DfaGraphWriterTest.cs,Write_ExcludeNonRouteEndpoint,The length of the statement  "            var endpointsDataSource = new DefaultEndpointDataSource(new Endpoint((context) => null' EndpointMetadataCollection.Empty' string.Empty)); " is 137.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DefaultEndpointSelectorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DefaultEndpointSelectorTest.cs,SelectAsync_MultipleValidCandidatesInGroup_ReportsAmbiguity,The length of the statement  "            var ex = await Assert.ThrowsAsync<AmbiguousMatchException>(() => selector.SelectAsync(httpContext' context' candidateSet)); " is 123.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidates_CreatesScoresCorrectly,The length of the statement  "                CreateEndpoint("/a/b/c"' constraints: new { a = new IntRouteConstraint()' }' metadata: new object[] { new TestMetadata1()' new TestMetadata2()' })' " is 147.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidates_CreatesScoresCorrectly,The length of the statement  "                CreateEndpoint("/a/b/c"' constraints: new { a = new AlphaRouteConstraint()' }' metadata: new object[] { new TestMetadata1()' new TestMetadata2()' })' " is 149.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidates_CreatesScoresCorrectly,The length of the statement  "                CreateEndpoint("/a/b/c"' constraints: new { a = new IntRouteConstraint()' }' metadata: new object[] { new TestMetadata1()' })' " is 126.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidates_CreatesScoresCorrectly,The length of the statement  "                CreateEndpoint("/a/b/c"' constraints: new { a = new IntRouteConstraint()' }' metadata: new object[] { new TestMetadata2()' })' " is 126.
Long Statement,Microsoft.AspNetCore.Routing.Matching,TestNonRoutePatternMatcherPolicy,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,GetEdges,The length of the statement  "                var maxValueEndpoint = new Endpoint(TestConstants.EmptyRequestDelegate' EndpointMetadataCollection.Empty' "MaxValueEndpoint"); " is 126.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_ConstraintRejectsEndpoint_Logging,The length of the statement  "                    Assert.Equal("Endpoint '/{p:int}' with route pattern '/{p:int}' was rejected by constraint 'p':'Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint' with value 'One' for the request path '/One'"' log.Message); " is 217.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_ConstraintRejectsEndpoint_Logging,The length of the statement  "                    Assert.Equal("Endpoint '/{p:int}' with route pattern '/{p:int}' is not valid for the request path '/One'"' log.Message); " is 120.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_ComplexSegmentRejectsEndpoint_Logging,The length of the statement  "                    Assert.Equal("Endpoint '/x-{id}-y' with route pattern '/x-{id}-y' was rejected by complex segment 'x-{id}-y' for the request path '/One'"' log.Message); " is 152.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_ComplexSegmentRejectsEndpoint_Logging,The length of the statement  "                    Assert.Equal("Endpoint '/x-{id}-y' with route pattern '/x-{id}-y' is not valid for the request path '/One'"' log.Message); " is 122.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_MultipleCandidates_Logging,The length of the statement  "                    Assert.Equal("Endpoint '/{p:int}' with route pattern '/{p:int}' was rejected by constraint 'p':'Microsoft.AspNetCore.Routing.Constraints.IntRouteConstraint' with value 'One' for the request path '/One'"' log.Message); " is 217.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_MultipleCandidates_Logging,The length of the statement  "                    Assert.Equal("Endpoint '/{p:int}' with route pattern '/{p:int}' is not valid for the request path '/One'"' log.Message); " is 120.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_MultipleCandidates_Logging,The length of the statement  "                    Assert.Equal("Endpoint '/x-{id}-y' with route pattern '/x-{id}-y' was rejected by complex segment 'x-{id}-y' for the request path '/One'"' log.Message); " is 152.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_MultipleCandidates_Logging,The length of the statement  "                    Assert.Equal("Endpoint '/x-{id}-y' with route pattern '/x-{id}-y' is not valid for the request path '/One'"' log.Message); " is 122.
Long Statement,Microsoft.AspNetCore.Routing.Matching,EndpointMetadataComparerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\EndpointMetadataComparerTest.cs,Compare_EndpointWithMetadata_MoreSpecific,The length of the statement  "            var endpoint1 = new Endpoint(TestConstants.EmptyRequestDelegate' new EndpointMetadataCollection(new object[] { new TestMetadata()' })' "test1"); " is 144.
Long Statement,Microsoft.AspNetCore.Routing.Matching,EndpointMetadataComparerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\EndpointMetadataComparerTest.cs,Compare_EndpointWithMetadata_MoreSpecific,The length of the statement  "            var endpoint2 = new Endpoint(TestConstants.EmptyRequestDelegate' new EndpointMetadataCollection(new object[] {  })' "test2"); " is 125.
Long Statement,Microsoft.AspNetCore.Routing.Matching,EndpointMetadataComparerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\EndpointMetadataComparerTest.cs,Compare_EndpointWithMetadata_ReverseOrder_MoreSpecific,The length of the statement  "            var endpoint1 = new Endpoint(TestConstants.EmptyRequestDelegate' new EndpointMetadataCollection(new object[] { })' "test1"); " is 124.
Long Statement,Microsoft.AspNetCore.Routing.Matching,EndpointMetadataComparerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\EndpointMetadataComparerTest.cs,Compare_EndpointWithMetadata_ReverseOrder_MoreSpecific,The length of the statement  "            var endpoint2 = new Endpoint(TestConstants.EmptyRequestDelegate' new EndpointMetadataCollection(new object[] { new TestMetadata()' })' "test2"); " is 144.
Long Statement,Microsoft.AspNetCore.Routing.Matching,EndpointMetadataComparerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\EndpointMetadataComparerTest.cs,Compare_BothEndpointsWithMetadata_Equal,The length of the statement  "            var endpoint1 = new Endpoint(TestConstants.EmptyRequestDelegate' new EndpointMetadataCollection(new object[] { new TestMetadata()' })' "test1"); " is 144.
Long Statement,Microsoft.AspNetCore.Routing.Matching,EndpointMetadataComparerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\EndpointMetadataComparerTest.cs,Compare_BothEndpointsWithMetadata_Equal,The length of the statement  "            var endpoint2 = new Endpoint(TestConstants.EmptyRequestDelegate' new EndpointMetadataCollection(new object[] { new TestMetadata()' })' "test2"); " is 144.
Long Statement,Microsoft.AspNetCore.Routing.Matching,EndpointMetadataComparerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\EndpointMetadataComparerTest.cs,Compare_BothEndpointsWithoutMetadata_Equal,The length of the statement  "            var endpoint1 = new Endpoint(TestConstants.EmptyRequestDelegate' new EndpointMetadataCollection(new object[] { })' "test1"); " is 124.
Long Statement,Microsoft.AspNetCore.Routing.Matching,EndpointMetadataComparerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\EndpointMetadataComparerTest.cs,Compare_BothEndpointsWithoutMetadata_Equal,The length of the statement  "            var endpoint2 = new Endpoint(TestConstants.EmptyRequestDelegate' new EndpointMetadataCollection(new object[] { })' "test2"); " is 124.
Long Statement,Microsoft.AspNetCore.Routing.Matching,EndpointMetadataComparerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\EndpointMetadataComparerTest.cs,Sort_EndpointWithMetadata_FirstInList,The length of the statement  "            var endpoint1 = new Endpoint(TestConstants.EmptyRequestDelegate' new EndpointMetadataCollection(new object[] { new TestMetadata()' })' "test1"); " is 144.
Long Statement,Microsoft.AspNetCore.Routing.Matching,EndpointMetadataComparerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\EndpointMetadataComparerTest.cs,Sort_EndpointWithMetadata_FirstInList,The length of the statement  "            var endpoint2 = new Endpoint(TestConstants.EmptyRequestDelegate' new EndpointMetadataCollection(new object[] { })' "test2"); " is 124.
Long Statement,Microsoft.AspNetCore.Routing.Template,RoutePrecedenceTestsBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\RoutePrecedenceTestsBase.cs,ComputeGenerated_TooManySegments_ThrowHumaneError,The length of the statement  "                ComputeGenerated("{a}/{b}/{c}/{d}/{e}/{f}/{g}/{h}/{i}/{j}/{k}/{l}/{m}/{n}/{o}/{p}/{q}/{r}/{s}/{t}/{u}/{v}/{w}/{x}/{y}/{z}/{a2}/{b2}/{b3}"); " is 139.
Long Statement,Microsoft.AspNetCore.Routing.Template,RoutePrecedenceTestsBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\RoutePrecedenceTestsBase.cs,ComputeMatched_TooManySegments_ThrowHumaneError,The length of the statement  "                ComputeMatched("{a}/{b}/{c}/{d}/{e}/{f}/{g}/{h}/{i}/{j}/{k}/{l}/{m}/{n}/{o}/{p}/{q}/{r}/{s}/{t}/{u}/{v}/{w}/{x}/{y}/{z}/{a2}/{b2}/{b3}"); " is 137.
Long Statement,Microsoft.AspNetCore.Routing.Template,TemplateSegmentTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateSegmentTest.cs,ToRoutePatternPathSegment,The length of the statement  "            var templateSegment = new TemplateSegment(RoutePatternFactory.Segment(paramPartC' literalPartA' separatorPartE' paramPartB)); " is 125.
Long Statement,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetUrlWithNullForMiddleParameterIgnoresRemainingParameters,The length of the statement  "                new { controller = "UrlRouting"' action = "Play"' category = "Photos"' year = "2008"' occasion = "Easter"' SafeParam = "SafeParamValue" }' " is 138.
Long Statement,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetUrlGeneratesQueryStringForNewValuesAndEscapesQueryString,The length of the statement  "            var values = new RouteValueDictionary(new { controller = "products"' action = "showcategory"' id = 123' maxPrice = 100 }); " is 122.
Long Statement,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,BindValues_ParameterTransformer,The length of the statement  "            var explicitValues = new RouteValueDictionary(new { controller = "ConventionalTransformer"' action = "Param"' param = "MyValue" }); " is 131.
Long Statement,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,BindValues_ParameterTransformer,The length of the statement  "                parameterPolicies: new (string' IParameterPolicy)[] { ("param"' new LengthRouteConstraint(500))' ("param"' new SlugifyParameterTransformer())' }); " is 146.
Long Statement,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_WithCatchAllCapturesDots,The length of the statement  "                new RouteValueDictionary(new { controller = "Home"' action = "ShowPilot"' missionId = "777"' name = "12345./foobar" })); " is 120.
Long Statement,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_WithWeimatchParameterNames,The length of the statement  "                new RouteValueDictionary() { { " "' "space" }' { ".!$%"' "weimatch" }' { "dynamic.data"' "omatcherid" }' { "op.tional"' "default value" }' { "ran!dom"' "va@lue" } }); " is 166.
Long Statement,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_RouteAsync_MatchesConstrainedRoutesWithDefaults,The length of the statement  "            var expectedRouteGroup = CreateRouteGroup(0' "{parameter1:int=1}/{parameter2:int=2}/{parameter3:int=3}/{parameter4:int=4}"); " is 124.
Long Statement,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_Match_HasTwoOptionalParametersWithoutValues,The length of the statement  "            MapOutboundEntry(builder' "Customers/SeparatePageModels/{handler?}/{id?}"' new { page = "/Customers/SeparatePageModels/Index" }); " is 129.
Long Statement,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_Match_HasTwoOptionalParametersWithoutValues,The length of the statement  "            var context = CreateVirtualPathContext(new { page = "/Customers/SeparatePageModels/Index" }' new { page = "/Customers/SeparatePageModels/Edit"' id = "17" }); " is 157.
Complex Conditional,Microsoft.AspNetCore.Routing.Matching,InnerMatcher,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\BarebonesMatcher.cs,TryMatch,The conditional expression  "(comparand == null && end - start == 0) ||                          (comparand != null &&                              (comparand.Length != end - start ||                              string.Compare(                                  path'                                  start'                                  comparand'                                  0'                                  comparand.Length'                                  StringComparison.OrdinalIgnoreCase) != 0))"  is complex.
Complex Conditional,Microsoft.AspNetCore.Routing.Template.Tests,TemplateEqualityComparer,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Equals,The conditional expression  "x.IsLiteral != y.IsLiteral ||                      x.IsParameter != y.IsParameter ||                      x.IsCatchAll != y.IsCatchAll ||                      x.IsOptional != y.IsOptional ||                      !String.Equals(x.Name' y.Name' StringComparison.Ordinal) ||                      !String.Equals(x.Name' y.Name' StringComparison.Ordinal) ||                      (x.InlineConstraints == null && y.InlineConstraints != null) ||                      (x.InlineConstraints != null && y.InlineConstraints == null)"  is complex.
Magic Number,Microsoft.AspNetCore.Builder,EndpointRoutingApplicationBuilderExtensionsTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Builder\EndpointRoutingApplicationBuilderExtensionsTest.cs,UseEndpointRouting_CallWithBuilder_SetsEndpointDataSource,The following statement contains a magic number: Assert.Equal(2' matcherEndpointDataSources.Count);
Magic Number,Microsoft.AspNetCore.Routing,DataSourceDependentCacheTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DataSourceDependentCacheTest.cs,Cache_Reinitializes_WhenDataSourceChanges,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,Microsoft.AspNetCore.Routing,DefaultEndpointDataSourceTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultEndpointDataSourceTests.cs,Constructor_Params_ShouldMakeCopyOfEndpoints,The following statement contains a magic number: Assert.Equal(2' dataSource.Endpoints.Count);
Magic Number,Microsoft.AspNetCore.Routing,DefaultEndpointDataSourceTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultEndpointDataSourceTests.cs,Constructor_Enumerable_ShouldMakeCopyOfEndpoints,The following statement contains a magic number: Assert.Equal(2' dataSource.Endpoints.Count);
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_ForListOfInts,The following statement contains a magic number: var success = linkGenerator.TryProcessTemplate(                  httpContext: httpContext'                  endpoint: endpoint'                  values: new RouteValueDictionary(new { items = new List<int> { 10' 20' 30 } })'                  ambientValues: DefaultLinkGenerator.GetAmbientValues(httpContext)'                  options: null'                  result: out var result);
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_ForListOfInts,The following statement contains a magic number: var success = linkGenerator.TryProcessTemplate(                  httpContext: httpContext'                  endpoint: endpoint'                  values: new RouteValueDictionary(new { items = new List<int> { 10' 20' 30 } })'                  ambientValues: DefaultLinkGenerator.GetAmbientValues(httpContext)'                  options: null'                  result: out var result);
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_ForListOfInts,The following statement contains a magic number: var success = linkGenerator.TryProcessTemplate(                  httpContext: httpContext'                  endpoint: endpoint'                  values: new RouteValueDictionary(new { items = new List<int> { 10' 20' 30 } })'                  ambientValues: DefaultLinkGenerator.GetAmbientValues(httpContext)'                  options: null'                  result: out var result);
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_InlineConstraints_Success,The following statement contains a magic number: var success = linkGenerator.TryProcessTemplate(                  httpContext: httpContext'                  endpoint: endpoint'                  values: new RouteValueDictionary(new { action = "Index"' controller = "Home"' id = 4 })'                  ambientValues: DefaultLinkGenerator.GetAmbientValues(httpContext)'                  options: null'                  result: out var result);
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_InlineConstraints_OptionalParameter_ValuePresent,The following statement contains a magic number: var success = linkGenerator.TryProcessTemplate(                  httpContext: httpContext'                  endpoint: endpoint'                  values: new RouteValueDictionary(new { action = "Index"' controller = "Home"' id = 98 })'                  ambientValues: DefaultLinkGenerator.GetAmbientValues(httpContext)'                  options: null'                  result: out var result);
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_InlineConstraints_MultipleInlineConstraints,The following statement contains a magic number: var success = linkGenerator.TryProcessTemplate(                  httpContext: httpContext'                  endpoint: endpoint'                  values: new RouteValueDictionary(new { action = "Index"' controller = "Home"' id = 14 })'                  ambientValues: DefaultLinkGenerator.GetAmbientValues(httpContext)'                  options: null'                  result: out var result);
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_InlineConstraints_CompositeInlineConstraint_Fails,The following statement contains a magic number: var success = linkGenerator.TryProcessTemplate(                  httpContext: httpContext'                  endpoint: endpoint'                  values: new RouteValueDictionary(new { action = "Index"' controller = "Home"' id = 50 })'                  ambientValues: DefaultLinkGenerator.GetAmbientValues(httpContext)'                  options: null'                  result: out var result);
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_InlineConstraints_CompositeConstraint_FromConstructor,The following statement contains a magic number: var constraint = new MaxLengthRouteConstraint(20);
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_DoesNotDiscardAmbientValues_IfAllRequiredValuesMatch_ForGenericKeys,The following statement contains a magic number: var httpContext = CreateHttpContext(ambientValues: new { c = "Products"' a = "Edit"' id = 10 });
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorProcessTemplateTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorProcessTemplateTest.cs,TryProcessTemplate_DiscardsAmbientValues_ForGenericKeys,The following statement contains a magic number: var httpContext = CreateHttpContext(ambientValues: new { c = "Products"' a = "Edit"' id = 10 });
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_UsesFirstTemplateThatSucceeds,The following statement contains a magic number: var endpointControllerAction = EndpointFactory.CreateRouteEndpoint(                  "Home/Index"'                  order: 3'                  defaults: new { controller = "Home"' action = "Index"' }'                  metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) });
Magic Number,Microsoft.AspNetCore.Routing,DefaultLinkGeneratorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultLinkGeneratorTest.cs,GetPathByRouteValues_UsesFirstTemplateThatSucceeds,The following statement contains a magic number: var endpointController = EndpointFactory.CreateRouteEndpoint(                  "Home"'                  order: 2'                  defaults: new { controller = "Home"' action = "Index"' }'                  metadata: new[] { new RouteValuesAddressMetadata(new RouteValueDictionary(new { controller = "Home"' action = "Index"' })) });
Magic Number,Microsoft.AspNetCore.Routing,DefaultParameterPolicyFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultParameterPolicyFactoryTest.cs,Create_CreatesParameterPolicy_FromConstraintText_AndRouteConstraintWithArgument,The following statement contains a magic number: Assert.Equal(20' constraint.Max);
Magic Number,Microsoft.AspNetCore.Routing,DefaultParameterPolicyFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultParameterPolicyFactoryTest.cs,Create_CreatesParameterPolicy_FromConstraintText_AndParameterPolicyWithArgumentAndServices,The following statement contains a magic number: Assert.Equal(20' constraint.Count);
Magic Number,Microsoft.AspNetCore.Routing,DefaultParameterPolicyFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultParameterPolicyFactoryTest.cs,Create_CreatesParameterPolicy_FromConstraintText_AndParameterPolicyWithArgumentAndMultipleServices,The following statement contains a magic number: Assert.Equal(20' constraint.First);
Magic Number,Microsoft.AspNetCore.Routing,EndpointRoutingMiddlewareTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\EndpointRoutingMiddlewareTest.cs,Invoke_InitializationFailure_AllowsReinitialization,The following statement contains a magic number: matcherFactory                  .Verify(f => f.CreateMatcher(It.IsAny<EndpointDataSource>())' Times.Exactly(2));
Magic Number,Microsoft.AspNetCore.Routing,EndpointSelectorContextTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\EndpointSelectorContextTest.cs,RouteData_CanIntializeDataTokens_WithMetadata,The following statement contains a magic number: var expected = new RouteValueDictionary(new { foo = 17' bar = "hello"' });
Magic Number,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_RouteWithExtraDefaultValues_Success,The following statement contains a magic number: Assert.Equal<int>(3' values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_PrettyRouteWithExtraDefaultValues_Success,The following statement contains a magic number: Assert.Equal<int>(5' values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_RouteWithCatchAll_MatchesMultiplePathSegments,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_RouteWithCatchAll_MatchesTrailingSlash,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_RouteWithCatchAll_MatchesEmptyContent,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_RouteWithCatchAll_MatchesEmptyContent_DoesNotReplaceExistingRouteValue,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_RouteWithCatchAll_UsesDefaultValueForEmptyContent,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_RouteWithCatchAll_IgnoresDefaultValueForNonEmptyContent,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_SetsOptionalParameter,The following statement contains a magic number: Assert.Equal(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RoutePatternMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternMatcherTest.cs,TryMatch_MultipleOptionalParameters,The following statement contains a magic number: Assert.Equal(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RouteConstraintBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteConstraintBuilderTest.cs,AddConstraint_InvalidType_Throws,The following statement contains a magic number: ExceptionAssert.Throws<RouteCreationException>(                  () => builder.AddConstraint("controller"' 5)'                  "The constraint entry 'controller' - '5' on the route " +                  "'{controller}/{action}' must have a string value or be of a type which implements '" +                  typeof(IRouteConstraint) + "'.");
Magic Number,Microsoft.AspNetCore.Routing,RouteConstraintBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteConstraintBuilderTest.cs,AddResolvedConstraint_And_AddConstraint_ForOptionalParameter,The following statement contains a magic number: var minLenConstraint = new MinLengthRouteConstraint(10);
Magic Number,Microsoft.AspNetCore.Routing,RouteConstraintBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteConstraintBuilderTest.cs,AddResolvedConstraint_And_AddConstraint_ForOptionalParameter,The following statement contains a magic number: Assert.Equal(2' compositeConstraint.Constraints.Count());
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,RouteAsync_InlineConstraint_OptionalParameter_WithInConstructorConstraint,The following statement contains a magic number: constraints.Add("id"' new RangeRouteConstraint(1' 20));
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,RouteAsync_InlineConstraint_OptionalParameter_WithInConstructorConstraint,The following statement contains a magic number: Assert.Equal(2' compositeConstraint.Constraints.Count<IRouteConstraint>());
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,Match_Success_LeadingSlash,The following statement contains a magic number: Assert.Equal(2' context.RouteData.Values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,Match_Success_Defaults,The following statement contains a magic number: Assert.Equal(2' context.RouteData.Values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,Match_Success_OptionalParameter_ValueProvided,The following statement contains a magic number: Assert.Equal(3' context.RouteData.Values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,Match_Success_OptionalParameter_ValueNotProvided,The following statement contains a magic number: Assert.Equal(2' context.RouteData.Values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,Match_Success_OptionalParameter_DefaultValue,The following statement contains a magic number: Assert.Equal(3' context.RouteData.Values.Count);
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,GetVirtualPath_ForListOfInts,The following statement contains a magic number: var context = CreateVirtualPathContext(                  new { items = new List<int> { 10' 20' 30 } }'                  new { controller = "Home"' action = "Index" });
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,GetVirtualPath_ForListOfInts,The following statement contains a magic number: var context = CreateVirtualPathContext(                  new { items = new List<int> { 10' 20' 30 } }'                  new { controller = "Home"' action = "Index" });
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,GetVirtualPath_ForListOfInts,The following statement contains a magic number: var context = CreateVirtualPathContext(                  new { items = new List<int> { 10' 20' 30 } }'                  new { controller = "Home"' action = "Index" });
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,GetVirtualPath_InlineConstraints_Success,The following statement contains a magic number: var context = CreateVirtualPathContext(                  values: new { action = "Index"' controller = "Home"' id = 4 });
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,GetVirtualPath_InlineConstraints_OptionalParameter_ValuePresent,The following statement contains a magic number: var context = CreateVirtualPathContext(                  values: new { action = "Index"' controller = "Home"' id = 98 });
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,GetVirtualPath_InlineConstraints_CompositeInlineConstraint,The following statement contains a magic number: var context = CreateVirtualPathContext(                  values: new { action = "Index"' controller = "Home"' id = 14 });
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,GetVirtualPath_InlineConstraints_CompositeConstraint_FromConstructor,The following statement contains a magic number: var constraint = new MaxLengthRouteConstraint(20);
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,RegisteringRouteWithInvalidConstraints_Throws,The following statement contains a magic number: var exception = ExceptionAssert.Throws<RouteCreationException>(                  () => routeBuilder.MapRoute("mockName"'                      "{controller}/{action}"'                      defaults: null'                      constraints: new { controller = "a.*"' action = 17 })'                      expectedMessage);
Magic Number,Microsoft.AspNetCore.Routing,RouteTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteTest.cs,RegisteringRouteWithTwoConstraints,The following statement contains a magic number: Assert.Equal(2' constraints.Count);
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressMetadataTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressMetadataTests.cs,DebuggerToString_HasNameAndRequiredValues_ReturnsString,The following statement contains a magic number: var metadata = new RouteValuesAddressMetadata("Name!"' new Dictionary<string' object>              {                  ["requiredValue1"] = "One"'                  ["requiredValue2"] = 2'              });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,GetOutboundMatches_GetsNamedMatchesFor_EndpointsHaving_IRouteNameMetadata,The following statement contains a magic number: Assert.Equal(2' addressScheme.AllMatches.Count());
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,GetOutboundMatches_GroupsMultipleEndpoints_WithSameName,The following statement contains a magic number: Assert.Equal(3' addressScheme.AllMatches.Count());
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,GetOutboundMatches_GroupsMultipleEndpoints_WithSameName,The following statement contains a magic number: Assert.Equal(2' namedMatches.Count);
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,GetOutboundMatches_GroupsMultipleEndpoints_WithSameName_IgnoringCase,The following statement contains a magic number: Assert.Equal(3' addressScheme.AllMatches.Count());
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,GetOutboundMatches_GroupsMultipleEndpoints_WithSameName_IgnoringCase,The following statement contains a magic number: Assert.Equal(2' namedMatches.Count);
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_NoMatch,The following statement contains a magic number: var endpoint1 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { zipCode = 3510 }'                  metadataRequiredValues: new { id = 7 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_NoMatch,The following statement contains a magic number: var endpoint1 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { zipCode = 3510 }'                  metadataRequiredValues: new { id = 7 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_NoMatch,The following statement contains a magic number: var endpoint2 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { id = 12 }'                  metadataRequiredValues: new { zipCode = 3510 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_NoMatch,The following statement contains a magic number: var endpoint2 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { id = 12 }'                  metadataRequiredValues: new { zipCode = 3510 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_NoMatch,The following statement contains a magic number: var foundEndpoints = addressScheme.FindEndpoints(                  new RouteValuesAddress                  {                      ExplicitValues = new RouteValueDictionary(new { id = 8 })'                      AmbientValues = new RouteValueDictionary(new { urgent = false })'                  });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_OneMatch,The following statement contains a magic number: var endpoint1 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { zipCode = 3510 }'                  metadataRequiredValues: new { id = 7 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_OneMatch,The following statement contains a magic number: var endpoint1 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { zipCode = 3510 }'                  metadataRequiredValues: new { id = 7 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_OneMatch,The following statement contains a magic number: var endpoint2 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { id = 12 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_OneMatch,The following statement contains a magic number: var foundEndpoints = addressScheme.FindEndpoints(                  new RouteValuesAddress                  {                      ExplicitValues = new RouteValueDictionary(new { id = 7 })'                      AmbientValues = new RouteValueDictionary(new { zipCode = 3500 })'                  });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_OneMatch,The following statement contains a magic number: var foundEndpoints = addressScheme.FindEndpoints(                  new RouteValuesAddress                  {                      ExplicitValues = new RouteValueDictionary(new { id = 7 })'                      AmbientValues = new RouteValueDictionary(new { zipCode = 3500 })'                  });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_MultipleMatches,The following statement contains a magic number: var endpoint1 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { zipCode = 3510 }'                  metadataRequiredValues: new { id = 7 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_MultipleMatches,The following statement contains a magic number: var endpoint1 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { zipCode = 3510 }'                  metadataRequiredValues: new { id = 7 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_MultipleMatches,The following statement contains a magic number: var endpoint2 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent}/{zipCode}"'                  defaults: new { id = 12 }'                  metadataRequiredValues: new { id = 12 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_MultipleMatches,The following statement contains a magic number: var endpoint2 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent}/{zipCode}"'                  defaults: new { id = 12 }'                  metadataRequiredValues: new { id = 12 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_MultipleMatches,The following statement contains a magic number: var endpoint3 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { id = 12 }'                  metadataRequiredValues: new { id = 12 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_MultipleMatches,The following statement contains a magic number: var endpoint3 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { id = 12 }'                  metadataRequiredValues: new { id = 12 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_MultipleMatches,The following statement contains a magic number: var foundEndpoints = addressScheme.FindEndpoints(                  new RouteValuesAddress                  {                      ExplicitValues = new RouteValueDictionary(new { id = 12 })'                      AmbientValues = new RouteValueDictionary(new { zipCode = 3500 })'                  });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_MultipleMatches,The following statement contains a magic number: var foundEndpoints = addressScheme.FindEndpoints(                  new RouteValuesAddress                  {                      ExplicitValues = new RouteValueDictionary(new { id = 12 })'                      AmbientValues = new RouteValueDictionary(new { zipCode = 3500 })'                  });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_ExcludeEndpointWithoutRouteValuesAddressMetadata,The following statement contains a magic number: var endpoint1 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { zipCode = 3510 }'                  metadataRequiredValues: new { id = 7 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_ExcludeEndpointWithoutRouteValuesAddressMetadata,The following statement contains a magic number: var endpoint1 = CreateEndpoint(                  "api/orders/{id}/{name?}/{urgent=true}/{zipCode}"'                  defaults: new { zipCode = 3510 }'                  metadataRequiredValues: new { id = 7 });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_ExcludeEndpointWithoutRouteValuesAddressMetadata,The following statement contains a magic number: var foundEndpoints = addressScheme.FindEndpoints(                  new RouteValuesAddress                  {                      ExplicitValues = new RouteValueDictionary(new { id = 7 })'                      AmbientValues = new RouteValueDictionary(new { zipCode = 3500 })'                  }).ToList();
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_LookedUpByCriteria_ExcludeEndpointWithoutRouteValuesAddressMetadata,The following statement contains a magic number: var foundEndpoints = addressScheme.FindEndpoints(                  new RouteValuesAddress                  {                      ExplicitValues = new RouteValueDictionary(new { id = 7 })'                      AmbientValues = new RouteValueDictionary(new { zipCode = 3500 })'                  }).ToList();
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_ReturnsEndpoint_WhenLookedUpByRouteName,The following statement contains a magic number: var foundEndpoints = addressScheme.FindEndpoints(                  new RouteValuesAddress                  {                      ExplicitValues = new RouteValueDictionary(new { id = 10 })'                      AmbientValues = new RouteValueDictionary(new { controller = "Home"' action = "Index" })'                      RouteName = "OrdersApi"                  });
Magic Number,Microsoft.AspNetCore.Routing,RouteValuesAddressSchemeTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\RouteValuesAddressSchemeTest.cs,FindEndpoints_ReturnsEndpoint_UsingRoutePatternRequiredValues,The following statement contains a magic number: var foundEndpoints = addressScheme.FindEndpoints(                  new RouteValuesAddress                  {                      ExplicitValues = new RouteValueDictionary(new { id = 10 })'                      AmbientValues = new RouteValueDictionary(new { controller = "Orders"' action = "GetById" })'                  });
Magic Number,Microsoft.AspNetCore.Routing.Tests,LengthRouteConstraintTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Constraints\LengthRouteConstraintTests.cs,LengthRouteConstraint_SettingMinLengthLessThanZero_Throws,The following statement contains a magic number: ExceptionAssert.ThrowsArgumentOutOfRange(                  () => new LengthRouteConstraint(-1' 3)'                  "minLength"'                  expectedMessage'                  -1);
Magic Number,Microsoft.AspNetCore.Routing.Tests,LengthRouteConstraintTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Constraints\LengthRouteConstraintTests.cs,LengthRouteConstraint_MinGreaterThanMax_Throws,The following statement contains a magic number: ExceptionAssert.ThrowsArgumentOutOfRange(                  () => new LengthRouteConstraint(3' 2)'                  "minLength"'                  expectedMessage'                  3);
Magic Number,Microsoft.AspNetCore.Routing.Tests,LengthRouteConstraintTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Constraints\LengthRouteConstraintTests.cs,LengthRouteConstraint_MinGreaterThanMax_Throws,The following statement contains a magic number: ExceptionAssert.ThrowsArgumentOutOfRange(                  () => new LengthRouteConstraint(3' 2)'                  "minLength"'                  expectedMessage'                  3);
Magic Number,Microsoft.AspNetCore.Routing.Tests,LengthRouteConstraintTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Constraints\LengthRouteConstraintTests.cs,LengthRouteConstraint_MinGreaterThanMax_Throws,The following statement contains a magic number: ExceptionAssert.ThrowsArgumentOutOfRange(                  () => new LengthRouteConstraint(3' 2)'                  "minLength"'                  expectedMessage'                  3);
Magic Number,Microsoft.AspNetCore.Routing.Tests,RangeRouteConstraintTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Constraints\RangeRouteConstraintTests.cs,RangeRouteConstraint_MinGreaterThanMax_Throws,The following statement contains a magic number: ExceptionAssert.ThrowsArgumentOutOfRange(                  () => new RangeRouteConstraint(3' 2)'                  "min"'                  expectedMessage'                  3L);
Magic Number,Microsoft.AspNetCore.Routing.Tests,RangeRouteConstraintTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Constraints\RangeRouteConstraintTests.cs,RangeRouteConstraint_MinGreaterThanMax_Throws,The following statement contains a magic number: ExceptionAssert.ThrowsArgumentOutOfRange(                  () => new RangeRouteConstraint(3' 2)'                  "min"'                  expectedMessage'                  3L);
Magic Number,Microsoft.AspNetCore.Routing.Tests,RangeRouteConstraintTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Constraints\RangeRouteConstraintTests.cs,RangeRouteConstraint_MinGreaterThanMax_Throws,The following statement contains a magic number: ExceptionAssert.ThrowsArgumentOutOfRange(                  () => new RangeRouteConstraint(3' 2)'                  "min"'                  expectedMessage'                  3L);
Magic Number,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_LengthConstraint,The following statement contains a magic number: Assert.Equal(5' ((LengthRouteConstraint)constraint).MinLength);
Magic Number,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_LengthConstraint,The following statement contains a magic number: Assert.Equal(5' ((LengthRouteConstraint)constraint).MaxLength);
Magic Number,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_LengthRangeConstraint,The following statement contains a magic number: Assert.Equal(5' lengthConstraint.MinLength);
Magic Number,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_LengthRangeConstraint,The following statement contains a magic number: Assert.Equal(10' lengthConstraint.MaxLength);
Magic Number,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_MaxConstraint,The following statement contains a magic number: Assert.Equal(10' ((MaxRouteConstraint)constraint).Max);
Magic Number,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_MaxLengthConstraint,The following statement contains a magic number: Assert.Equal(10' ((MaxLengthRouteConstraint)constraint).MaxLength);
Magic Number,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_MinConstraint,The following statement contains a magic number: Assert.Equal(3' ((MinRouteConstraint)constraint).Min);
Magic Number,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_MinLengthConstraint,The following statement contains a magic number: Assert.Equal(3' ((MinLengthRouteConstraint)constraint).MinLength);
Magic Number,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_RangeConstraint,The following statement contains a magic number: Assert.Equal(5' rangeConstraint.Min);
Magic Number,Microsoft.AspNetCore.Routing.Tests,DefaultInlineConstraintResolverTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\DefaultInlineConstraintResolverTest.cs,ResolveConstraint_RangeConstraint,The following statement contains a magic number: Assert.Equal(10' rangeConstraint.Max);
Magic Number,Microsoft.AspNetCore.Routing.Tests,InlineRouteParameterParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\InlineRouteParameterParserTests.cs,ParseRouteTemplate_ConstraintsDefaultsAndOptionalsInMultipleSections_ParsedCorrectly,The following statement contains a magic number: var param3 = parameters[2];
Magic Number,Microsoft.AspNetCore.Routing.Tests,TemplateParserDefaultValuesTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\TemplateParserDefaultValuesTests.cs,ExplicitDefaultValueSpecified_WithInlineDefaultValue_Throws,The following statement contains a magic number: var ex = Assert.Throws<RouteCreationException>(                                  () => routeBuilder.MapRoute("mockName"'                                                              "{controller}/{action}/{id:int=12}"'                                                              defaults: new { id = 13 }'                                                              constraints: null));
Magic Number,Microsoft.AspNetCore.Routing.Tests,TemplateParserDefaultValuesTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\TemplateParserDefaultValuesTests.cs,EmptyDefaultValue_WithOptionalParameter_Throws,The following statement contains a magic number: var ex = Assert.Throws<RouteCreationException>(                                  () => routeBuilder.MapRoute("mockName"'                                                              "{controller}/{action}/{id:int=?}"'                                                              defaults: new { id = 13 }'                                                              constraints: null));
Magic Number,Microsoft.AspNetCore.Routing.Tests,TemplateParserDefaultValuesTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\TemplateParserDefaultValuesTests.cs,NonEmptyDefaultValue_WithOptionalParameter_Throws,The following statement contains a magic number: var ex = Assert.Throws<RouteCreationException>(() =>              {                  routeBuilder.MapRoute(                      "mockName"'                      "{controller}/{action}/{id:int=12?}"'                      defaults: new { id = 13 }'                      constraints: null);              });
Magic Number,Microsoft.AspNetCore.Routing.Matching,DataSourceDependentMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DataSourceDependentMatcherTest.cs,Cache_Reinitializes_WhenDataSourceChanges,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DefaultEndpointSelectorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DefaultEndpointSelectorTest.cs,SelectAsync_SingleValidCandidateInGroup_ChoosesCandidate,The following statement contains a magic number: candidateSet.SetValidity(2' true);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DefaultEndpointSelectorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DefaultEndpointSelectorTest.cs,SelectAsync_ManyGroupsLastCandidate_ChoosesCandidate,The following statement contains a magic number: var scores = new int[] { 0' 1' 2' 3' 4 };
Magic Number,Microsoft.AspNetCore.Routing.Matching,DefaultEndpointSelectorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DefaultEndpointSelectorTest.cs,SelectAsync_ManyGroupsLastCandidate_ChoosesCandidate,The following statement contains a magic number: var scores = new int[] { 0' 1' 2' 3' 4 };
Magic Number,Microsoft.AspNetCore.Routing.Matching,DefaultEndpointSelectorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DefaultEndpointSelectorTest.cs,SelectAsync_ManyGroupsLastCandidate_ChoosesCandidate,The following statement contains a magic number: var scores = new int[] { 0' 1' 2' 3' 4 };
Magic Number,Microsoft.AspNetCore.Routing.Matching,DefaultEndpointSelectorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DefaultEndpointSelectorTest.cs,SelectAsync_ManyGroupsLastCandidate_ChoosesCandidate,The following statement contains a magic number: candidateSet.SetValidity(2' false);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DefaultEndpointSelectorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DefaultEndpointSelectorTest.cs,SelectAsync_ManyGroupsLastCandidate_ChoosesCandidate,The following statement contains a magic number: candidateSet.SetValidity(3' false);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DefaultEndpointSelectorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DefaultEndpointSelectorTest.cs,SelectAsync_ManyGroupsLastCandidate_ChoosesCandidate,The following statement contains a magic number: candidateSet.SetValidity(4' true);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DefaultEndpointSelectorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DefaultEndpointSelectorTest.cs,SelectAsync_ManyGroupsLastCandidate_ChoosesCandidate,The following statement contains a magic number: Assert.Same(endpoints[4]' context.Endpoint);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DefaultEndpointSelectorTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DefaultEndpointSelectorTest.cs,SelectAsync_MultipleValidCandidatesInGroup_ReportsAmbiguity,The following statement contains a magic number: candidateSet.SetValidity(2' true);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,BuildDfaTree_MultipleEndpoint_LiteralAndLiteral,The following statement contains a magic number: Assert.Equal(2' a.Literals.Count);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,BuildDfaTree_MultipleEndpoint_LiteralDifferentCase,The following statement contains a magic number: Assert.Equal(2' a.Literals.Count);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidate_Parameters,The following statement contains a magic number: Assert.Equal(3' candidate.Slots.Length);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidate_Parameters,The following statement contains a magic number: Assert.Collection(                  candidate.Captures'                  c => Assert.Equal(("a"' 0' 0)' c)'                  c => Assert.Equal(("b"' 1' 1)' c)'                  c => Assert.Equal(("c"' 2' 2)' c));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidate_Parameters,The following statement contains a magic number: Assert.Collection(                  candidate.Captures'                  c => Assert.Equal(("a"' 0' 0)' c)'                  c => Assert.Equal(("b"' 1' 1)' c)'                  c => Assert.Equal(("c"' 2' 2)' c));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidate_Parameters_WithDefaults,The following statement contains a magic number: Assert.Collection(                  candidate.Captures'                  c => Assert.Equal(("a"' 0' 0)' c)'                  c => Assert.Equal(("b"' 1' 1)' c)'                  c => Assert.Equal(("c"' 2' 2)' c));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidate_Parameters_WithDefaults,The following statement contains a magic number: Assert.Collection(                  candidate.Captures'                  c => Assert.Equal(("a"' 0' 0)' c)'                  c => Assert.Equal(("b"' 1' 1)' c)'                  c => Assert.Equal(("c"' 2' 2)' c));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidate_Parameters_CatchAll,The following statement contains a magic number: Assert.Collection(                  candidate.Captures'                  c => Assert.Equal(("a"' 0' 1)' c)'                  c => Assert.Equal(("b"' 1' 2)' c));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidate_Parameters_CatchAll,The following statement contains a magic number: Assert.Equal(("c"' 2' 0)' candidate.CatchAll);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidate_Parameters_OutOfLineDefaults,The following statement contains a magic number: Assert.Collection(                  candidate.Captures'                  c => Assert.Equal(("a"' 0' 0)' c)'                  c => Assert.Equal(("b"' 1' 3)' c)'                  c => Assert.Equal(("c"' 2' 2)' c));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidate_Parameters_OutOfLineDefaults,The following statement contains a magic number: Assert.Collection(                  candidate.Captures'                  c => Assert.Equal(("a"' 0' 0)' c)'                  c => Assert.Equal(("b"' 1' 3)' c)'                  c => Assert.Equal(("c"' 2' 2)' c));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidate_Parameters_OutOfLineDefaults,The following statement contains a magic number: Assert.Collection(                  candidate.Captures'                  c => Assert.Equal(("a"' 0' 0)' c)'                  c => Assert.Equal(("b"' 1' 3)' c)'                  c => Assert.Equal(("c"' 2' 2)' c));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidates_CreatesScoresCorrectly,The following statement contains a magic number: Assert.Collection(                  candidates'                  c => Assert.Equal(0' c.Score)'                  c => Assert.Equal(0' c.Score)'                  c => Assert.Equal(1' c.Score)'                  c => Assert.Equal(2' c.Score)'                  c => Assert.Equal(3' c.Score)'                  c => Assert.Equal(3' c.Score));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidates_CreatesScoresCorrectly,The following statement contains a magic number: Assert.Collection(                  candidates'                  c => Assert.Equal(0' c.Score)'                  c => Assert.Equal(0' c.Score)'                  c => Assert.Equal(1' c.Score)'                  c => Assert.Equal(2' c.Score)'                  c => Assert.Equal(3' c.Score)'                  c => Assert.Equal(3' c.Score));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilderTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherBuilderTest.cs,CreateCandidates_CreatesScoresCorrectly,The following statement contains a magic number: Assert.Collection(                  candidates'                  c => Assert.Equal(0' c.Score)'                  c => Assert.Equal(0' c.Score)'                  c => Assert.Equal(1' c.Score)'                  c => Assert.Equal(2' c.Score)'                  c => Assert.Equal(3' c.Score)'                  c => Assert.Equal(3' c.Score));
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_MultipleMatches_EndpointSelectorCalled,The following statement contains a magic number: endpointSelector                  .Setup(s => s.SelectAsync(It.IsAny<HttpContext>()' It.IsAny<EndpointSelectorContext>()' It.IsAny<CandidateSet>()))                  .Callback<HttpContext' IEndpointFeature' CandidateSet>((c' f' cs) =>                  {                      Assert.Equal(2' cs.Count);                        Assert.Same(endpoint1' cs[0].Endpoint);                      Assert.True(cs.IsValidCandidate(0));                      Assert.Equal(0' cs[0].Score);                      Assert.Empty(cs[0].Values);                        Assert.Same(endpoint2' cs[1].Endpoint);                      Assert.True(cs.IsValidCandidate(1));                      Assert.Equal(1' cs[1].Score);                      Assert.Empty(cs[1].Values);                        f.Endpoint = endpoint2;                  })                  .Returns(Task.CompletedTask);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_RunsApplicableEndpointSelectorPolicies,The following statement contains a magic number: Assert.Same(dataSource.Endpoints[2]' context.Endpoint);
Magic Number,Microsoft.AspNetCore.Routing.Matching,DfaMatcherTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\DfaMatcherTest.cs,MatchAsync_RunsEndpointSelectorPolicies_CanShortCircuit,The following statement contains a magic number: policy2                  .SetupGet(p => p.Order)                  .Returns(1000);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_SingleSegment,The following statement contains a magic number: Assert.Equal(new PathSegment(1' 3)' segments[0]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_WithSomeSegments,The following statement contains a magic number: Span<PathSegment> segments = stackalloc PathSegment[3];
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_WithSomeSegments,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_WithSomeSegments,The following statement contains a magic number: Assert.Equal(new PathSegment(3' 1)' segments[1]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_WithSomeSegments,The following statement contains a magic number: Assert.Equal(new PathSegment(5' 1)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_WithSomeSegments,The following statement contains a magic number: Assert.Equal(new PathSegment(5' 1)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_WithSomeSegments_TrailingSlash,The following statement contains a magic number: Span<PathSegment> segments = stackalloc PathSegment[3];
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_WithSomeSegments_TrailingSlash,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_WithSomeSegments_TrailingSlash,The following statement contains a magic number: Assert.Equal(new PathSegment(3' 1)' segments[1]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_WithSomeSegments_TrailingSlash,The following statement contains a magic number: Assert.Equal(new PathSegment(5' 1)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_WithSomeSegments_TrailingSlash,The following statement contains a magic number: Assert.Equal(new PathSegment(5' 1)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_LongerSegments,The following statement contains a magic number: Span<PathSegment> segments = stackalloc PathSegment[3];
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_LongerSegments,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_LongerSegments,The following statement contains a magic number: Assert.Equal(new PathSegment(1' 3)' segments[0]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_LongerSegments,The following statement contains a magic number: Assert.Equal(new PathSegment(5' 2)' segments[1]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_LongerSegments,The following statement contains a magic number: Assert.Equal(new PathSegment(5' 2)' segments[1]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_LongerSegments,The following statement contains a magic number: Assert.Equal(new PathSegment(8' 5)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_LongerSegments,The following statement contains a magic number: Assert.Equal(new PathSegment(8' 5)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_LongerSegments,The following statement contains a magic number: Assert.Equal(new PathSegment(8' 5)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_EmptySegments,The following statement contains a magic number: Span<PathSegment> segments = stackalloc PathSegment[3];
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_EmptySegments,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_EmptySegments,The following statement contains a magic number: Assert.Equal(new PathSegment(2' 0)' segments[1]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_EmptySegments,The following statement contains a magic number: Assert.Equal(new PathSegment(3' 1)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_EmptySegments,The following statement contains a magic number: Assert.Equal(new PathSegment(3' 1)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_TooManySegments,The following statement contains a magic number: Span<PathSegment> segments = stackalloc PathSegment[3];
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_TooManySegments,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_TooManySegments,The following statement contains a magic number: Assert.Equal(new PathSegment(3' 1)' segments[1]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_TooManySegments,The following statement contains a magic number: Assert.Equal(new PathSegment(5' 1)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,FastPathTokenizerTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\FastPathTokenizerTest.cs,Tokenize_TooManySegments,The following statement contains a magic number: Assert.Equal(new PathSegment(5' 1)' segments[2]);
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyIntegrationTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyIntegrationTest.cs,NotMatch_HttpMethod_Returns405Endpoint,The following statement contains a magic number: Assert.Equal(405' httpContext.Response.StatusCode);
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_Cors,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' endpoints[3]' endpoints[4]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[2]' endpoints[4]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_CreatesHttp405Endpoint,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(Http405EndpointDisplayName' e.Endpoints.Single().DisplayName);                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_CreatesHttp405Endpoint,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(Http405EndpointDisplayName' e.Endpoints.Single().DisplayName);                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_CreatesHttp405Endpoint_CORS,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(Http405EndpointDisplayName' e.Endpoints.Single().DisplayName);                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[1]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[1]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[1]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicyTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\HttpMethodMatcherPolicyTest.cs,GetEdges_GroupsByHttpMethod_CreatesHttp405Endpoint_CORS,The following statement contains a magic number: Assert.Collection(                  edges.OrderBy(e => e.State)'                  e =>                  {                      Assert.Equal(new EdgeKey(AnyMethod' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(Http405EndpointDisplayName' e.Endpoints.Single().DisplayName);                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[0]' endpoints[1]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("GET"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[1]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("POST"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[1]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: false)' e.State);                      Assert.Equal(new[] { endpoints[1]' endpoints[2]' }' e.Endpoints.ToArray());                  }'                  e =>                  {                      Assert.Equal(new EdgeKey("PUT"' isCorsPreflightRequest: true)' e.State);                      Assert.Equal(new[] { endpoints[1]' }' e.Endpoints.ToArray());                  });
Magic Number,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\ILEmitTrieFactoryTest.cs,ShouldVectorize_ReturnsTrue_ForLargeEnoughStrings,The following statement contains a magic number: var is64Bit = IntPtr.Size == 8;
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_ZeroLengthSegment_JumpsToExit,The following statement contains a magic number: var table = CreateTable(0' 1' ("text"' 2));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_NonMatchingSegment_JumpsToDefault,The following statement contains a magic number: var table = CreateTable(0' 1' ("text"' 2));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_NonMatchingSegment_JumpsToDefault,The following statement contains a magic number: var result = table.GetDestination("text"' new PathSegment(1' 2));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingText_JumpsToDestination,The following statement contains a magic number: var table = CreateTable(0' 1' ("text"' 2));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingText_JumpsToDestination,The following statement contains a magic number: var result = table.GetDestination("some-text"' new PathSegment(5' 4));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingText_JumpsToDestination,The following statement contains a magic number: var result = table.GetDestination("some-text"' new PathSegment(5' 4));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingText_JumpsToDestination,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingTextIgnoreCase_JumpsToDestination,The following statement contains a magic number: var table = CreateTable(0' 1' ("text"' 2));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingTextIgnoreCase_JumpsToDestination,The following statement contains a magic number: var result = table.GetDestination("some-tExt"' new PathSegment(5' 4));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingTextIgnoreCase_JumpsToDestination,The following statement contains a magic number: var result = table.GetDestination("some-tExt"' new PathSegment(5' 4));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingTextIgnoreCase_JumpsToDestination,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingTextIgnoreCase_MultipleEntries,The following statement contains a magic number: var table = CreateTable(0' 1' ("tezt"' 2)' ("text"' 3));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingTextIgnoreCase_MultipleEntries,The following statement contains a magic number: var table = CreateTable(0' 1' ("tezt"' 2)' ("text"' 3));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingTextIgnoreCase_MultipleEntries,The following statement contains a magic number: var result = table.GetDestination("some-tExt"' new PathSegment(5' 4));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingTextIgnoreCase_MultipleEntries,The following statement contains a magic number: var result = table.GetDestination("some-tExt"' new PathSegment(5' 4));
Magic Number,Microsoft.AspNetCore.Routing.Matching,MultipleEntryJumpTableTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\MultipleEntryJumpTableTest.cs,GetDestination_SegmentMatchingTextIgnoreCase_MultipleEntries,The following statement contains a magic number: Assert.Equal(3' result);
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_ZeroLengthSegment_JumpsToExit,The following statement contains a magic number: var table = CreateJumpTable(0' 1' "text"' 2);
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_NonMatchingSegment_JumpsToDefault,The following statement contains a magic number: var table = CreateJumpTable(0' 1' "text"' 2);
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_NonMatchingSegment_JumpsToDefault,The following statement contains a magic number: var result = table.GetDestination("text"' new PathSegment(1' 2));
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_SegmentMatchingText_JumpsToDestination,The following statement contains a magic number: var table = CreateJumpTable(0' 1' "text"' 2);
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_SegmentMatchingText_JumpsToDestination,The following statement contains a magic number: var result = table.GetDestination("some-text"' new PathSegment(5' 4));
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_SegmentMatchingText_JumpsToDestination,The following statement contains a magic number: var result = table.GetDestination("some-text"' new PathSegment(5' 4));
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_SegmentMatchingText_JumpsToDestination,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_SegmentMatchingTextIgnoreCase_JumpsToDestination,The following statement contains a magic number: var table = CreateJumpTable(0' 1' "text"' 2);
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_SegmentMatchingTextIgnoreCase_JumpsToDestination,The following statement contains a magic number: var result = table.GetDestination("some-tExt"' new PathSegment(5' 4));
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_SegmentMatchingTextIgnoreCase_JumpsToDestination,The following statement contains a magic number: var result = table.GetDestination("some-tExt"' new PathSegment(5' 4));
Magic Number,Microsoft.AspNetCore.Routing.Matching,SingleEntryJumpTableTestBase,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Matching\SingleEntryJumpTableTestBase.cs,GetDestination_SegmentMatchingTextIgnoreCase_JumpsToDestination,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,InlineRouteParameterParserTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\InlineRouteParameterParserTest.cs,ParseRouteTemplate_ConstraintsDefaultsAndOptionalsInMultipleSections_ParsedCorrectly,The following statement contains a magic number: var param3 = parameters[2];
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_MergesDefaultValues,The following statement contains a magic number: var defaults = new { a = "15"' b = 17 };
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_MergesDefaultValues,The following statement contains a magic number: Assert.Equal(17' actual.GetParameter("b").Default);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_MergesDefaultValues,The following statement contains a magic number: Assert.Collection(                  actual.Defaults.OrderBy(kvp => kvp.Key)'                  kvp => { Assert.Equal("a"' kvp.Key); Assert.Equal("15"' kvp.Value); }'                  kvp => { Assert.Equal("b"' kvp.Key); Assert.Equal(17' kvp.Value); }'                  kvp => { Assert.Equal("c"' kvp.Key); Assert.Equal("19"' kvp.Value); });
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_ExtraDefaultValues,The following statement contains a magic number: var defaults = new { d = "15"' e = 17 };
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_ExtraDefaultValues,The following statement contains a magic number: Assert.Collection(                  actual.Defaults.OrderBy(kvp => kvp.Key)'                  kvp => { Assert.Equal("d"' kvp.Key); Assert.Equal("15"' kvp.Value); }'                  kvp => { Assert.Equal("e"' kvp.Key); Assert.Equal(17' kvp.Value); });
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_InvalidConstraintTypeThrows,The following statement contains a magic number: var constraints = new { d = 17' };
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_ArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Array.Resize(ref segments' 2);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_ArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Equal(3' actual.Parameters.Count);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_ArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Same(paramPartD' actual.Parameters[2]);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Array.Resize(ref segments' 2);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Equal(3' actual.Parameters.Count);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Same(paramPartD' actual.Parameters[2]);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_DefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: object defaults = new { B = 12' C = 4 };
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_DefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: object defaults = new { B = 12' C = 4 };
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_DefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Array.Resize(ref segments' 2);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_DefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Equal(3' actual.Parameters.Count);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_DefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Equal(12' actual.Parameters[0].Default);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_DefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Equal(4' actual.Parameters[1].Default);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_DefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Equal(paramPartD.Name' actual.Parameters[2].Name);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_DefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Null(actual.Parameters[2].Default);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_DefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Same(paramPartD' actual.Parameters[2]);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndDefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: object defaults = new { B = 12' C = 4 };
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndDefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: object defaults = new { B = 12' C = 4 };
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndDefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Array.Resize(ref segments' 2);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndDefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Equal(3' actual.Parameters.Count);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndDefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Equal(12' actual.Parameters[0].Default);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndDefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Equal(4' actual.Parameters[1].Default);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndDefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Equal(paramPartD.Name' actual.Parameters[2].Name);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndDefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Null(actual.Parameters[2].Default);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Pattern_RawTextAndDefaultsAndParameterPoliciesAndArrayOfSegments_ShouldMakeCopyOfArrayOfSegments,The following statement contains a magic number: Assert.Same(paramPartD' actual.Parameters[2]);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,ParameterPart_ParameterNameAndDefaultAndParameterKindAndArrayOfParameterPolicies_ShouldMakeCopyOfParameterPolicies,The following statement contains a magic number: Array.Resize(ref policies' 2);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,ParameterPart_ParameterNameAndDefaultAndParameterKindAndArrayOfParameterPolicies_ShouldMakeCopyOfParameterPolicies,The following statement contains a magic number: Assert.Equal(3' parameterPart.ParameterPolicies.Count);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,ParameterPart_ParameterNameAndDefaultAndParameterKindAndArrayOfParameterPolicies_ShouldMakeCopyOfParameterPolicies,The following statement contains a magic number: Assert.NotNull(parameterPart.ParameterPolicies[2]);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,ParameterPart_ParameterNameAndDefaultAndParameterKindAndEnumerableOfParameterPolicies_ShouldMakeCopyOfParameterPolicies,The following statement contains a magic number: Assert.Equal(3' parameterPart.ParameterPolicies.Count);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,ParameterPart_ParameterNameAndDefaultAndParameterKindAndEnumerableOfParameterPolicies_ShouldMakeCopyOfParameterPolicies,The following statement contains a magic number: Assert.NotNull(parameterPart.ParameterPolicies[2]);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Segment_EnumerableOfParts,The following statement contains a magic number: Array.Resize(ref parts' 2);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Segment_EnumerableOfParts,The following statement contains a magic number: Assert.Equal(3' actual.Parts.Count);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Segment_EnumerableOfParts,The following statement contains a magic number: Assert.Same(paramPartD' actual.Parts[2]);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Segment_ArrayOfParts,The following statement contains a magic number: Array.Resize(ref parts' 2);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Segment_ArrayOfParts,The following statement contains a magic number: Assert.Equal(3' actual.Parts.Count);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactoryTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Patterns\RoutePatternFactoryTest.cs,Segment_ArrayOfParts,The following statement contains a magic number: Assert.Same(paramPartD' actual.Parts[2]);
Magic Number,Microsoft.AspNetCore.Routing.Template,TemplateSegmentTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateSegmentTest.cs,ToRoutePatternPathSegment,The following statement contains a magic number: Assert.Equal(4' routePatternPathSegment.Parts.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template,TemplateSegmentTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateSegmentTest.cs,ToRoutePatternPathSegment,The following statement contains a magic number: Assert.IsType<RoutePatternSeparatorPart>(routePatternPathSegment.Parts[2]);
Magic Number,Microsoft.AspNetCore.Routing.Template,TemplateSegmentTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateSegmentTest.cs,ToRoutePatternPathSegment,The following statement contains a magic number: Assert.Equal(separatorPartE.Content' ((RoutePatternSeparatorPart) routePatternPathSegment.Parts[2]).Content);
Magic Number,Microsoft.AspNetCore.Routing.Template,TemplateSegmentTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateSegmentTest.cs,ToRoutePatternPathSegment,The following statement contains a magic number: Assert.IsType<RoutePatternParameterPart>(routePatternPathSegment.Parts[3]);
Magic Number,Microsoft.AspNetCore.Routing.Template,TemplateSegmentTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateSegmentTest.cs,ToRoutePatternPathSegment,The following statement contains a magic number: Assert.Equal(paramPartB.Name' ((RoutePatternParameterPart) routePatternPathSegment.Parts[3]).Name);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetUrlWithNullForMiddleParameterIgnoresRemainingParameters,The following statement contains a magic number: RunTest(                  "UrlGeneration1/{controller}.mvc/{action}/{category}/{year}/{occasion}/{SafeParam}"'                  new { year = 1995' occasion = "Christmas"' action = "Play"' SafeParam = "SafeParamValue" }'                  new { controller = "UrlRouting"' action = "Play"' category = "Photos"' year = "2008"' occasion = "Easter"' SafeParam = "SafeParamValue" }'                  new { year = (string)null' occasion = "Hola" }'                  "/UrlGeneration1/UrlRouting.mvc/Play/"                  + "Photos/1995/Hola");
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetUrlWithEmptyStringForMiddleParameterIgnoresRemainingParameters,The following statement contains a magic number: RunTest(                  "UrlGeneration1/{controller}.mvc/{action}/{category}/{year}/{occasion}/{SafeParam}"'                  new RouteValueDictionary(new { year = 1995' occasion = "Christmas"' action = "Play"' SafeParam = "SafeParamValue" })'                  ambientValues'                  values'                  "/UrlGeneration1/UrlRouting.mvc/"                  + "Play/Photos/1995/Hola");
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetUrlVerifyEncoding,The following statement contains a magic number: values.Add("id"' 123);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetUrlVerifyEncoding,The following statement contains a magic number: values.Add("maxPrice"' 100);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetUrlGeneratesQueryStringForNewValuesAndEscapesQueryString,The following statement contains a magic number: var values = new RouteValueDictionary(new { controller = "products"' action = "showcategory"' id = 123' maxPrice = 100 });
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetUrlGeneratesQueryStringForNewValuesAndEscapesQueryString,The following statement contains a magic number: var values = new RouteValueDictionary(new { controller = "products"' action = "showcategory"' id = 123' maxPrice = 100 });
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetUrlGeneratesQueryStringForNewValuesButIgnoresNewValuesThatMatchDefaults,The following statement contains a magic number: RunTest(                  "{controller}.mvc/{action}/{id}"'                  new RouteValueDictionary(new { controller = "Home"' Custom = "customValue" })'                  new RouteValueDictionary(new { controller = "Home"' action = "Index"' id = (string)null })'                  new RouteValueDictionary(                      new                      {                          controller = "products"'                          action = "showcategory"'                          id = 123'                          sort = "desc"'                          maxPrice = 100'                          custom = "customValue"                      })'                  "/products.mvc/showcategory/123" +                  "?sort=desc&maxPrice=100");
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,GetUrlGeneratesQueryStringForNewValuesButIgnoresNewValuesThatMatchDefaults,The following statement contains a magic number: RunTest(                  "{controller}.mvc/{action}/{id}"'                  new RouteValueDictionary(new { controller = "Home"' Custom = "customValue" })'                  new RouteValueDictionary(new { controller = "Home"' action = "Index"' id = (string)null })'                  new RouteValueDictionary(                      new                      {                          controller = "products"'                          action = "showcategory"'                          id = 123'                          sort = "desc"'                          maxPrice = 100'                          custom = "customValue"                      })'                  "/products.mvc/showcategory/123" +                  "?sort=desc&maxPrice=100");
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,TemplateBinder_KeepsExplicitlySuppliedRouteValues_OnFailedRouteMatch,The following statement contains a magic number: Assert.Equal(2' templateValuesResult.CombinedValues.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateBinderTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateBinderTests.cs,BindValues_ParameterTransformer,The following statement contains a magic number: var binder = new TemplateBinder(                  UrlEncoder.Default'                  new DefaultObjectPoolProvider().Create(new UriBuilderContextPooledObjectPolicy())'                  RoutePatternFactory.Parse(template)'                  defaults'                  requiredKeys: defaults.Keys'                  parameterPolicies: new (string' IParameterPolicy)[] { ("param"' new LengthRouteConstraint(500))' ("param"' new SlugifyParameterTransformer())' });
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_RouteWithExtraDefaultValues_Success,The following statement contains a magic number: Assert.Equal<int>(3' values.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_PrettyRouteWithExtraDefaultValues_Success,The following statement contains a magic number: Assert.Equal<int>(5' values.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_RouteWithCatchAll_MatchesMultiplePathSegments,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_RouteWithCatchAll_MatchesTrailingSlash,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_RouteWithCatchAll_MatchesEmptyContent,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_RouteWithCatchAll_MatchesEmptyContent_DoesNotReplaceExistingRouteValue,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_RouteWithCatchAll_UsesDefaultValueForEmptyContent,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_RouteWithCatchAll_IgnoresDefaultValueForNonEmptyContent,The following statement contains a magic number: Assert.Equal<int>(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_SetsOptionalParameter,The following statement contains a magic number: Assert.Equal(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateMatcherTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateMatcherTests.cs,TryMatch_MultipleOptionalParameters,The following statement contains a magic number: Assert.Equal(2' values.Count);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_MultipleLiterals,The following statement contains a magic number: expected.Segments[2].Parts.Add(TemplatePart.CreateLiteral("super"));
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_MultipleParameters,The following statement contains a magic number: expected.Segments[2].Parts.Add(TemplatePart.CreateParameter("p3"'                                                                          true'                                                                          false'                                                                          defaultValue: null'                                                                          inlineConstraints: null));
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_MultipleParameters,The following statement contains a magic number: expected.Parameters.Add(expected.Segments[2].Parts[0]);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_ComplexSegment_PLP,The following statement contains a magic number: expected.Parameters.Add(expected.Segments[0].Parts[2]);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_ComplexSegment_OptionalParameterFollowingPeriod,The following statement contains a magic number: expected.Parameters.Add(expected.Segments[0].Parts[2]);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_ComplexSegment_ParametersFollowingPeriod,The following statement contains a magic number: expected.Parameters.Add(expected.Segments[0].Parts[2]);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_ComplexSegment_OptionalParameterFollowingPeriod_ThreeParameters,The following statement contains a magic number: expected.Parameters.Add(expected.Segments[0].Parts[2]);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_ComplexSegment_OptionalParameterFollowingPeriod_ThreeParameters,The following statement contains a magic number: expected.Parameters.Add(expected.Segments[0].Parts[4]);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_ComplexSegment_ThreeParametersSeperatedByPeriod,The following statement contains a magic number: expected.Parameters.Add(expected.Segments[0].Parts[2]);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_ComplexSegment_ThreeParametersSeperatedByPeriod,The following statement contains a magic number: expected.Parameters.Add(expected.Segments[0].Parts[4]);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_ComplexSegment_OptionalParameterFollowingPeriod_MiddleSegment,The following statement contains a magic number: expected.Parameters.Add(expected.Segments[0].Parts[2]);
Magic Number,Microsoft.AspNetCore.Routing.Template.Tests,TemplateRouteParserTests,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Template\TemplateParserTests.cs,Parse_ComplexSegment_OptionalParameterFollowingPeriod_LastSegment,The following statement contains a magic number: expected.Parameters.Add(expected.Segments[1].Parts[2]);
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink,The following statement contains a magic number: var values = new Dictionary<string' object>              {                  {"url"' "dingo" }'                  {"id"' 5 }              };
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_OrderingAgnostic,The following statement contains a magic number: var parameter = 5;
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_OrderingAgnostic,The following statement contains a magic number: var id = 1234;
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_UseAvailableVariables,The following statement contains a magic number: var parameter = 5;
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_UseAvailableVariables,The following statement contains a magic number: var id = 1234;
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_RespectsPrecedence,The following statement contains a magic number: var context = CreateVirtualPathContext(values: null' ambientValues: new { parameter = 5 });
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_RespectsOrderOverPrecedence,The following statement contains a magic number: var context = CreateVirtualPathContext(null' ambientValues: new { parameter = 5 });
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_RespectsOrder,The following statement contains a magic number: var context = CreateVirtualPathContext(values: null' ambientValues: new { first = 5' second = 5 });
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_RespectsOrder,The following statement contains a magic number: var context = CreateVirtualPathContext(values: null' ambientValues: new { first = 5' second = 5 });
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_EnsuresStableOrder,The following statement contains a magic number: var context = CreateVirtualPathContext(values: null' ambientValues: new { first = 5' second = 5 });
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_EnsuresStableOrder,The following statement contains a magic number: var context = CreateVirtualPathContext(values: null' ambientValues: new { first = 5' second = 5 });
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GeneratesLink_ForMultipleNamedEntriesWithTheSameTemplate,The following statement contains a magic number: MapOutboundEntry(builder' "TEMPLATE"' name: "NamedEntry"' order: 2);
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_Match_WithConstraint,The following statement contains a magic number: var context = CreateVirtualPathContext(new { action = "Index"' controller = "Store"' id = 5 });
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_Match_WithQueryString,The following statement contains a magic number: var context = CreateVirtualPathContext(new { action = "Index"' id = 5 }' new { controller = "Store" });
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_ToArea,The following statement contains a magic number: entry1.Precedence = 2;
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_ToArea_PredecedenceReversed,The following statement contains a magic number: entry2.Precedence = 2;
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_ToArea_WithAmbientValues,The following statement contains a magic number: entry1.Precedence = 2;
Magic Number,Microsoft.AspNetCore.Routing.Tree,TreeRouterTest,D:\research\architectureSmells\repos\aspnet_Routing\test\Microsoft.AspNetCore.Routing.Tests\Tree\TreeRouterTest.cs,TreeRouter_GenerateLink_OutOfArea_IgnoresAmbientValue,The following statement contains a magic number: entry1.Precedence = 2;
