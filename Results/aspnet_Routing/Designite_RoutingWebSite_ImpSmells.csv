Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,RoutingWebSite,EndsWithStringRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\EndsWithStringRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Statement,RoutingWebSite,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseEndpointRoutingStartup.cs,Configure,The length of the statement  "                        foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase)) " is 141.
Long Statement,RoutingWebSite,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseEndpointRoutingStartup.cs,SetupBranch,The length of the statement  "                routes.MapGet("api/get/{id}"' (context) => context.Response.WriteAsync($"{name} - API Get {context.GetRouteData().Values["id"]}")); " is 131.
Long Statement,RoutingWebSite,UseRouterStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseRouterStartup.cs,Configure,The length of the statement  "                    return httpContext.Response.WriteAsync($"Verb =  {request.Method.ToUpperInvariant()} - Path = {request.Path} - Route values - {string.Join("' "' httpContext.GetRouteData().Values)}"); " is 183.
Long Statement,RoutingWebSite,UseRouterStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseRouterStartup.cs,Configure,The length of the statement  "                routes.MapGet("api/get/{id}"' (request' response' routeData) => response.WriteAsync($"API Get {routeData.Values["id"]}")) " is 121.
Long Statement,RoutingWebSite,UseRouterStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseRouterStartup.cs,Configure,The length of the statement  "                      .MapMiddlewareRoute("api/middleware"' (appBuilder) => appBuilder.Use((httpContext' next) => httpContext.Response.WriteAsync("Middleware!"))) " is 140.
Long Statement,RoutingWebSite,UseRouterStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseRouterStartup.cs,Configure,The length of the statement  "                        constraints: new { lastName = new RegexRouteConstraint(new Regex("[a-zA-Z]{3}"' RegexOptions.CultureInvariant' RegexMatchTimeout)) }); " is 134.
Long Statement,RoutingWebSite,UseRouterStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseRouterStartup.cs,SetupBranch,The length of the statement  "                routes.MapGet("api/get/{id}"' (request' response' routeData) => response.WriteAsync($"{name} - API Get {routeData.Values["id"]}")); " is 131.
Magic Number,RoutingWebSite,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseEndpointRoutingStartup.cs,Configure,The following statement contains a magic number: app.UseEndpointRouting(routes =>              {                  routes.MapHello("/helloworld"' "World");                    routes.MapGet(                      "/"'                      (httpContext) =>                      {                          var dataSource = httpContext.RequestServices.GetRequiredService<EndpointDataSource>();                            var sb = new StringBuilder();                          sb.AppendLine("Endpoints:");                          foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase))                          {                              sb.AppendLine($"- {endpoint.RoutePattern.RawText}");                          }                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(sb.ToString());                      });                  routes.MapGet(                      "/plaintext"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          var payloadLength = _plainTextPayload.Length;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          response.ContentLength = payloadLength;                          return response.Body.WriteAsync(_plainTextPayload' 0' payloadLength);                      });                  routes.MapGet(                      "/withconstraints/{id:endsWith(_001)}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("WithConstraints");                      });                  routes.MapGet(                      "/withoptionalconstraints/{id:endsWith(_001)?}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("withoptionalconstraints");                      });                  routes.MapGet(                      "/WithSingleAsteriskCatchAll/{*path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithSingleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithSingleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));                  routes.MapGet(                      "/WithDoubleAsteriskCatchAll/{**path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithDoubleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithDoubleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));              });
Magic Number,RoutingWebSite,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseEndpointRoutingStartup.cs,Configure,The following statement contains a magic number: app.UseEndpointRouting(routes =>              {                  routes.MapHello("/helloworld"' "World");                    routes.MapGet(                      "/"'                      (httpContext) =>                      {                          var dataSource = httpContext.RequestServices.GetRequiredService<EndpointDataSource>();                            var sb = new StringBuilder();                          sb.AppendLine("Endpoints:");                          foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase))                          {                              sb.AppendLine($"- {endpoint.RoutePattern.RawText}");                          }                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(sb.ToString());                      });                  routes.MapGet(                      "/plaintext"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          var payloadLength = _plainTextPayload.Length;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          response.ContentLength = payloadLength;                          return response.Body.WriteAsync(_plainTextPayload' 0' payloadLength);                      });                  routes.MapGet(                      "/withconstraints/{id:endsWith(_001)}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("WithConstraints");                      });                  routes.MapGet(                      "/withoptionalconstraints/{id:endsWith(_001)?}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("withoptionalconstraints");                      });                  routes.MapGet(                      "/WithSingleAsteriskCatchAll/{*path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithSingleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithSingleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));                  routes.MapGet(                      "/WithDoubleAsteriskCatchAll/{**path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithDoubleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithDoubleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));              });
Magic Number,RoutingWebSite,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseEndpointRoutingStartup.cs,Configure,The following statement contains a magic number: app.UseEndpointRouting(routes =>              {                  routes.MapHello("/helloworld"' "World");                    routes.MapGet(                      "/"'                      (httpContext) =>                      {                          var dataSource = httpContext.RequestServices.GetRequiredService<EndpointDataSource>();                            var sb = new StringBuilder();                          sb.AppendLine("Endpoints:");                          foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase))                          {                              sb.AppendLine($"- {endpoint.RoutePattern.RawText}");                          }                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(sb.ToString());                      });                  routes.MapGet(                      "/plaintext"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          var payloadLength = _plainTextPayload.Length;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          response.ContentLength = payloadLength;                          return response.Body.WriteAsync(_plainTextPayload' 0' payloadLength);                      });                  routes.MapGet(                      "/withconstraints/{id:endsWith(_001)}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("WithConstraints");                      });                  routes.MapGet(                      "/withoptionalconstraints/{id:endsWith(_001)?}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("withoptionalconstraints");                      });                  routes.MapGet(                      "/WithSingleAsteriskCatchAll/{*path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithSingleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithSingleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));                  routes.MapGet(                      "/WithDoubleAsteriskCatchAll/{**path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithDoubleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithDoubleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));              });
Magic Number,RoutingWebSite,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseEndpointRoutingStartup.cs,Configure,The following statement contains a magic number: app.UseEndpointRouting(routes =>              {                  routes.MapHello("/helloworld"' "World");                    routes.MapGet(                      "/"'                      (httpContext) =>                      {                          var dataSource = httpContext.RequestServices.GetRequiredService<EndpointDataSource>();                            var sb = new StringBuilder();                          sb.AppendLine("Endpoints:");                          foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase))                          {                              sb.AppendLine($"- {endpoint.RoutePattern.RawText}");                          }                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(sb.ToString());                      });                  routes.MapGet(                      "/plaintext"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          var payloadLength = _plainTextPayload.Length;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          response.ContentLength = payloadLength;                          return response.Body.WriteAsync(_plainTextPayload' 0' payloadLength);                      });                  routes.MapGet(                      "/withconstraints/{id:endsWith(_001)}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("WithConstraints");                      });                  routes.MapGet(                      "/withoptionalconstraints/{id:endsWith(_001)?}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("withoptionalconstraints");                      });                  routes.MapGet(                      "/WithSingleAsteriskCatchAll/{*path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithSingleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithSingleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));                  routes.MapGet(                      "/WithDoubleAsteriskCatchAll/{**path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithDoubleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithDoubleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));              });
Magic Number,RoutingWebSite,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseEndpointRoutingStartup.cs,Configure,The following statement contains a magic number: app.UseEndpointRouting(routes =>              {                  routes.MapHello("/helloworld"' "World");                    routes.MapGet(                      "/"'                      (httpContext) =>                      {                          var dataSource = httpContext.RequestServices.GetRequiredService<EndpointDataSource>();                            var sb = new StringBuilder();                          sb.AppendLine("Endpoints:");                          foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase))                          {                              sb.AppendLine($"- {endpoint.RoutePattern.RawText}");                          }                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(sb.ToString());                      });                  routes.MapGet(                      "/plaintext"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          var payloadLength = _plainTextPayload.Length;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          response.ContentLength = payloadLength;                          return response.Body.WriteAsync(_plainTextPayload' 0' payloadLength);                      });                  routes.MapGet(                      "/withconstraints/{id:endsWith(_001)}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("WithConstraints");                      });                  routes.MapGet(                      "/withoptionalconstraints/{id:endsWith(_001)?}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("withoptionalconstraints");                      });                  routes.MapGet(                      "/WithSingleAsteriskCatchAll/{*path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithSingleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithSingleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));                  routes.MapGet(                      "/WithDoubleAsteriskCatchAll/{**path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithDoubleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithDoubleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));              });
Magic Number,RoutingWebSite,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\UseEndpointRoutingStartup.cs,Configure,The following statement contains a magic number: app.UseEndpointRouting(routes =>              {                  routes.MapHello("/helloworld"' "World");                    routes.MapGet(                      "/"'                      (httpContext) =>                      {                          var dataSource = httpContext.RequestServices.GetRequiredService<EndpointDataSource>();                            var sb = new StringBuilder();                          sb.AppendLine("Endpoints:");                          foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase))                          {                              sb.AppendLine($"- {endpoint.RoutePattern.RawText}");                          }                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(sb.ToString());                      });                  routes.MapGet(                      "/plaintext"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          var payloadLength = _plainTextPayload.Length;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          response.ContentLength = payloadLength;                          return response.Body.WriteAsync(_plainTextPayload' 0' payloadLength);                      });                  routes.MapGet(                      "/withconstraints/{id:endsWith(_001)}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("WithConstraints");                      });                  routes.MapGet(                      "/withoptionalconstraints/{id:endsWith(_001)?}"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync("withoptionalconstraints");                      });                  routes.MapGet(                      "/WithSingleAsteriskCatchAll/{*path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithSingleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithSingleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));                  routes.MapGet(                      "/WithDoubleAsteriskCatchAll/{**path}"'                      (httpContext) =>                      {                          var linkGenerator = httpContext.RequestServices.GetRequiredService<LinkGenerator>();                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(                              "Link: " + linkGenerator.GetPathByRouteValues(httpContext' "WithDoubleAsteriskCatchAll"' new { }));                      }'                      new RouteValuesAddressMetadata(routeName: "WithDoubleAsteriskCatchAll"' requiredValues: new RouteValueDictionary()));              });
Magic Number,RoutingWebSite.HelloExtension,HelloMiddleware,D:\research\architectureSmells\repos\aspnet_Routing\test\WebSites\RoutingWebSite\HelloExtension\HelloMiddleware.cs,InvokeAsync,The following statement contains a magic number: response.StatusCode = 200;
