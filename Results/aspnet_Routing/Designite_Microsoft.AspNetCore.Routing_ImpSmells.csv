Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNetCore.Routing,InlineRouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\InlineRouteParameterParser.cs,ParseConstraints,The method has 125 lines of code.
Long Method,Microsoft.AspNetCore.Routing,RoutePatternMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternMatcher.cs,TryMatch,The method has 126 lines of code.
Long Method,Microsoft.AspNetCore.Routing,RoutePatternMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternMatcher.cs,MatchComplexSegmentCore,The method has 146 lines of code.
Long Method,Microsoft.AspNetCore.Routing.Matching,DfaMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcher.cs,MatchAsync,The method has 125 lines of code.
Long Method,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcherBuilder.cs,BuildDfaTree,The method has 173 lines of code.
Long Method,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicy,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\HttpMethodMatcherPolicy.cs,GetEdges,The method has 125 lines of code.
Long Method,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,EmitVectorizedTable,The method has 100 lines of code.
Long Method,Microsoft.AspNetCore.Routing.Patterns,DefaultRoutePatternTransformer,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\DefaultRoutePatternTransformer.cs,SubstituteRequiredValuesCore,The method has 130 lines of code.
Long Method,Microsoft.AspNetCore.Routing.Patterns,RouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RouteParameterParser.cs,ParseConstraints,The method has 130 lines of code.
Long Method,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,PatternCore,The method has 183 lines of code.
Long Method,Microsoft.AspNetCore.Routing.Template,TemplateBinder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\TemplateBinder.cs,GetValues,The method has 216 lines of code.
Long Method,Microsoft.AspNetCore.Routing.Template,TemplateBinder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\TemplateBinder.cs,TryBindValuesCore,The method has 105 lines of code.
Long Method,Microsoft.AspNetCore.Routing.Tree,UrlMatchingTree,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\UrlMatchingTree.cs,AddEntry,The method has 112 lines of code.
Complex Method,Microsoft.AspNetCore.Routing,InlineRouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\InlineRouteParameterParser.cs,ParseRouteParameter,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.AspNetCore.Routing,RoutePatternMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternMatcher.cs,TryMatch,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.AspNetCore.Routing,RoutePatternMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternMatcher.cs,MatchComplexSegmentCore,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.AspNetCore.Routing,RouteConstraintMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\RouteConstraintMatcher.cs,Match,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.AspNetCore.Routing.Internal,LinkGenerationDecisionTree,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\LinkGenerationDecisionTree.cs,Walk,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Routing.Internal,UriBuildingContext,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\UriBuildingContext.cs,Accept,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Routing.Matching,DfaMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcher.cs,MatchAsync,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcherBuilder.cs,BuildDfaTree,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcherBuilder.cs,AddNode,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcherBuilder.cs,CreateCandidate,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcherBuilder.cs,ApplyPolicies,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicy,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\HttpMethodMatcherPolicy.cs,GetEdges,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.AspNetCore.Routing.Matching,JumpTableBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\JumpTableBuilder.cs,Build,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Routing.Patterns,DefaultRoutePatternTransformer,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\DefaultRoutePatternTransformer.cs,SubstituteRequiredValuesCore,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.AspNetCore.Routing.Patterns,RouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RouteParameterParser.cs,ParseRouteParameter,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,PatternCore,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.AspNetCore.Routing.Patterns,RoutePatternParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternParser.cs,ParseSegment,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.AspNetCore.Routing.Patterns,RoutePatternParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternParser.cs,ParseParameter,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.AspNetCore.Routing.Patterns,RoutePatternParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternParser.cs,ParseLiteral,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.AspNetCore.Routing.Patterns,RoutePatternParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternParser.cs,IsSegmentValid,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.AspNetCore.Routing.Template,TemplateBinder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\TemplateBinder.cs,GetValues,Cyclomatic complexity of the method is 25
Complex Method,Microsoft.AspNetCore.Routing.Template,TemplateBinder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\TemplateBinder.cs,TryBindValuesCore,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.AspNetCore.Routing.Tree,TreeEnumerator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\TreeEnumerator.cs,MoveNext,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.AspNetCore.Routing.Tree,TreeRouteBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\TreeRouteBuilder.cs,MapInbound,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.AspNetCore.Routing.Tree,TreeRouteBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\TreeRouteBuilder.cs,MapOutbound,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.AspNetCore.Routing.Tree,TreeRouter,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\TreeRouter.cs,TreeRouter,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.AspNetCore.Routing.Tree,TreeRouter,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\TreeRouter.cs,GenerateVirtualPath,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Routing.Tree,UrlMatchingTree,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\UrlMatchingTree.cs,AddEntry,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.AspNetCore.Routing.DecisionTree,DecisionTreeBuilder<TItem>,D:\research\architectureSmells\repos\aspnet_Routing\shared\Microsoft.AspNetCore.Routing.DecisionTree.Sources\DecisionTreeBuilder.cs,GenerateNode,Cyclomatic complexity of the method is 13
Long Parameter List,Microsoft.AspNetCore.Builder,EndpointRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRouteBuilderExtensions.cs,MapGet,The method has 5 parameters. Parameters: builder' pattern' displayName' requestDelegate' metadata
Long Parameter List,Microsoft.AspNetCore.Builder,EndpointRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRouteBuilderExtensions.cs,MapPost,The method has 5 parameters. Parameters: builder' pattern' displayName' requestDelegate' metadata
Long Parameter List,Microsoft.AspNetCore.Builder,EndpointRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRouteBuilderExtensions.cs,MapPut,The method has 5 parameters. Parameters: builder' pattern' displayName' requestDelegate' metadata
Long Parameter List,Microsoft.AspNetCore.Builder,EndpointRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRouteBuilderExtensions.cs,MapDelete,The method has 5 parameters. Parameters: builder' pattern' displayName' requestDelegate' metadata
Long Parameter List,Microsoft.AspNetCore.Builder,EndpointRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRouteBuilderExtensions.cs,MapVerbs,The method has 5 parameters. Parameters: builder' pattern' requestDelegate' httpMethods' metadata
Long Parameter List,Microsoft.AspNetCore.Builder,EndpointRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRouteBuilderExtensions.cs,MapVerbs,The method has 6 parameters. Parameters: builder' pattern' displayName' requestDelegate' httpMethods' metadata
Long Parameter List,Microsoft.AspNetCore.Builder,EndpointRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRouteBuilderExtensions.cs,Map,The method has 5 parameters. Parameters: builder' pattern' displayName' requestDelegate' metadata
Long Parameter List,Microsoft.AspNetCore.Builder,EndpointRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRouteBuilderExtensions.cs,Map,The method has 5 parameters. Parameters: builder' pattern' displayName' requestDelegate' metadata
Long Parameter List,Microsoft.AspNetCore.Builder,MapRouteRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\MapRouteRouteBuilderExtensions.cs,MapRoute,The method has 5 parameters. Parameters: routeBuilder' name' template' defaults' constraints
Long Parameter List,Microsoft.AspNetCore.Builder,MapRouteRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\MapRouteRouteBuilderExtensions.cs,MapRoute,The method has 6 parameters. Parameters: routeBuilder' name' template' defaults' constraints' dataTokens
Long Parameter List,Microsoft.AspNetCore.Routing,DefaultLinkGenerator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,DefaultLinkGenerator,The method has 6 parameters. Parameters: parameterPolicyFactory' dataSource' uriBuildingContextPool' routeOptions' logger' serviceProvider
Long Parameter List,Microsoft.AspNetCore.Routing,DefaultLinkGenerator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,GetPathByAddress,The method has 7 parameters. Parameters: httpContext' address' values' ambientValues' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,DefaultLinkGenerator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,GetPathByAddress,The method has 5 parameters. Parameters: address' values' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,DefaultLinkGenerator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,GetUriByAddress,The method has 9 parameters. Parameters: httpContext' address' values' ambientValues' scheme' host' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,DefaultLinkGenerator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,GetUriByAddress,The method has 7 parameters. Parameters: address' values' scheme' host' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,DefaultLinkGenerator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,GetPathByEndpoints,The method has 6 parameters. Parameters: endpoints' values' ambientValues' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,DefaultLinkGenerator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,GetUriByEndpoints,The method has 8 parameters. Parameters: endpoints' values' ambientValues' scheme' host' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,DefaultLinkGenerator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,TryProcessTemplate,The method has 6 parameters. Parameters: httpContext' endpoint' values' ambientValues' options' result
Long Parameter List,Microsoft.AspNetCore.Routing,Log,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,TemplateFailedConstraint,The method has 5 parameters. Parameters: logger' endpoint' parameterName' constraint' values
Long Parameter List,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameAddressExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\LinkGeneratorEndpointNameAddressExtensions.cs,GetPathByName,The method has 7 parameters. Parameters: generator' httpContext' endpointName' values' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameAddressExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\LinkGeneratorEndpointNameAddressExtensions.cs,GetPathByName,The method has 6 parameters. Parameters: generator' endpointName' values' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameAddressExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\LinkGeneratorEndpointNameAddressExtensions.cs,GetUriByName,The method has 9 parameters. Parameters: generator' httpContext' endpointName' values' scheme' host' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameAddressExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\LinkGeneratorEndpointNameAddressExtensions.cs,GetUriByName,The method has 8 parameters. Parameters: generator' endpointName' values' scheme' host' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\LinkGeneratorRouteValuesAddressExtensions.cs,GetPathByRouteValues,The method has 7 parameters. Parameters: generator' httpContext' routeName' values' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\LinkGeneratorRouteValuesAddressExtensions.cs,GetPathByRouteValues,The method has 6 parameters. Parameters: generator' routeName' values' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\LinkGeneratorRouteValuesAddressExtensions.cs,GetUriByRouteValues,The method has 9 parameters. Parameters: generator' httpContext' routeName' values' scheme' host' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\LinkGeneratorRouteValuesAddressExtensions.cs,GetUriByRouteValues,The method has 8 parameters. Parameters: generator' routeName' values' scheme' host' pathBase' fragment' options
Long Parameter List,Microsoft.AspNetCore.Routing,Route,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Route.cs,Route,The method has 6 parameters. Parameters: target' routeTemplate' defaults' constraints' dataTokens' inlineConstraintResolver
Long Parameter List,Microsoft.AspNetCore.Routing,Route,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Route.cs,Route,The method has 7 parameters. Parameters: target' routeName' routeTemplate' defaults' constraints' dataTokens' inlineConstraintResolver
Long Parameter List,Microsoft.AspNetCore.Routing,RouteBase,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\RouteBase.cs,RouteBase,The method has 6 parameters. Parameters: template' name' constraintResolver' defaults' constraints' dataTokens
Long Parameter List,Microsoft.AspNetCore.Routing,RouteConstraintMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\RouteConstraintMatcher.cs,Match,The method has 6 parameters. Parameters: constraints' routeValues' httpContext' route' routeDirection' logger
Long Parameter List,Microsoft.AspNetCore.Routing,RouteEndpoint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\RouteEndpoint.cs,RouteEndpoint,The method has 5 parameters. Parameters: requestDelegate' routePattern' order' metadata' displayName
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,BoolRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\BoolRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,CompositeRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\CompositeRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,DateTimeRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\DateTimeRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,DecimalRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\DecimalRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,DoubleRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\DoubleRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,FloatRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\FloatRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,GuidRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\GuidRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,HttpMethodRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\HttpMethodRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,IntRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\IntRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,LengthRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\LengthRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,LongRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\LongRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,MaxLengthRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\MaxLengthRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,MaxRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\MaxRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,MinLengthRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\MinLengthRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,MinRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\MinRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,NullRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\NullRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,OptionalRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\OptionalRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,RangeRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\RangeRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,RegexRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\RegexRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,RequiredRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\RequiredRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Constraints,StringRouteConstraint,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Constraints\StringRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' routeKey' values' routeDirection
Long Parameter List,Microsoft.AspNetCore.Routing.Internal,LinkGenerationDecisionTree,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\LinkGenerationDecisionTree.cs,Walk,The method has 5 parameters. Parameters: results' values' ambientValues' node' isFallbackPath
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,Candidate,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\Candidate.cs,Candidate,The method has 7 parameters. Parameters: endpoint' score' slots' captures' catchAll' complexSegments' constraints
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,DfaMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcher.cs,ProcessComplexSegments,The method has 5 parameters. Parameters: endpoint' complexSegments' path' segments' values
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,Logger,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcher.cs,CandidateRejectedByConstraint,The method has 6 parameters. Parameters: logger' path' endpoint' constraintName' constraint' value
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,GenerateMethodBody,The method has 5 parameters. Parameters: il' defaultDestination' exitDestination' entries' vectorize
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,EmitTable,The method has 7 parameters. Parameters: il' entries' index' length' locals' labels' methods
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,EmitVectorizedTable,The method has 7 parameters. Parameters: il' entries' index' length' locals' labels' methods
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,EmitSingleCharacterTable,The method has 7 parameters. Parameters: il' entries' index' length' locals' labels' methods
Long Parameter List,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieJumpTable,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieJumpTable.cs,ILEmitTrieJumpTable,The method has 5 parameters. Parameters: defaultDestination' exitDestination' entries' vectorize' fallback
Long Parameter List,Microsoft.AspNetCore.Routing.Patterns,RoutePattern,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePattern.cs,RoutePattern,The method has 6 parameters. Parameters: rawText' defaults' parameterPolicies' requiredValues' parameters' pathSegments
Long Parameter List,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,PatternCore,The method has 5 parameters. Parameters: rawText' defaults' parameterPolicies' requiredValues' segments
Long Parameter List,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,ParameterPartCore,The method has 5 parameters. Parameters: parameterName' default' parameterKind' parameterPolicies' encodeSlashes
Long Parameter List,Microsoft.AspNetCore.Routing.Patterns,RoutePatternParameterPart,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternParameterPart.cs,RoutePatternParameterPart,The method has 5 parameters. Parameters: parameterName' default' parameterKind' parameterPolicies' encodeSlashes
Long Parameter List,Microsoft.AspNetCore.Routing.Template,TemplateBinder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\TemplateBinder.cs,TemplateBinder,The method has 6 parameters. Parameters: urlEncoder' pool' pattern' defaults' requiredKeys' parameterPolicies
Long Parameter List,Microsoft.AspNetCore.Routing.Template,TemplatePart,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\TemplatePart.cs,CreateParameter,The method has 5 parameters. Parameters: name' isCatchAll' isOptional' defaultValue' inlineConstraints
Long Parameter List,Microsoft.AspNetCore.Routing.Tree,TreeRouteBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\TreeRouteBuilder.cs,MapOutbound,The method has 5 parameters. Parameters: handler' routeTemplate' requiredLinkValues' routeName' order
Long Parameter List,Microsoft.AspNetCore.Routing.Tree,TreeRouter,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\TreeRouter.cs,TreeRouter,The method has 7 parameters. Parameters: trees' linkGenerationEntries' urlEncoder' objectPool' routeLogger' constraintLogger' version
Long Identifier,Microsoft.AspNetCore.Routing.Logging,RouteConstraintMatcherExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Logging\RouteConstraintMatcherExtensions.cs,,The length of the parameter _routeValueDoesNotMatchConstraint is 33.
Long Identifier,Microsoft.AspNetCore.Routing.Matching,EventIds,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcher.cs,,The length of the parameter CandidateRejectedByComplexSegment is 33.
Long Identifier,Microsoft.AspNetCore.Routing.Matching,Logger,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcher.cs,,The length of the parameter _candidateRejectedByComplexSegment is 34.
Long Identifier,Microsoft.AspNetCore.Routing.Matching,Logger,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcher.cs,,The length of the parameter _candidateRejectedByConstraint is 30.
Long Identifier,Microsoft.AspNetCore.Routing.Tree,UrlMatchingTree,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\UrlMatchingTree.cs,RemainingSegmentsAreOptional,The length of the parameter isOptionlCatchAllOrHasDefaultValue is 34.
Long Statement,Microsoft.AspNetCore.Builder,EndpointRouteBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRouteBuilderExtensions.cs,MapVerbs,The length of the statement  "            return Map(builder' pattern' displayName ?? $"{pattern} HTTP: {string.Join("' "' httpMethods)}"' requestDelegate' metadata: resolvedMetadata.ToArray()); " is 152.
Long Statement,Microsoft.AspNetCore.Builder,EndpointRoutingApplicationBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRoutingApplicationBuilderExtensions.cs,UseEndpoint,The length of the statement  "                var message = $"{nameof(EndpointRoutingMiddleware)} must be added to the request execution pipeline before {nameof(EndpointMiddleware)}. " + " is 140.
Long Statement,Microsoft.AspNetCore.Builder,EndpointRoutingApplicationBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Builder\EndpointRoutingApplicationBuilderExtensions.cs,UseEndpoint,The length of the statement  "                    $"Please add {nameof(EndpointRoutingMiddleware)} by calling '{nameof(IApplicationBuilder)}.{nameof(UseEndpointRouting)}' inside the call to 'Configure(...)' in the application startup code."; " is 191.
Long Statement,Microsoft.AspNetCore.Routing,DefaultLinkGenerator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,TryProcessTemplate,The length of the statement  "            if (!templateBinder.TryProcessConstraints(httpContext' templateValuesResult.CombinedValues' out var parameterName' out var constraint)) " is 135.
Long Statement,Microsoft.AspNetCore.Routing,Log,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,TemplateFailedRequiredValues,The length of the statement  "                    _templateFailedRequiredValues(logger' endpoint.RoutePattern.RawText' endpoint.DisplayName' FormatRouteValues(ambientValues)' FormatRouteValues(values)' FormatRouteValues(endpoint.RoutePattern.Defaults)' null); " is 209.
Long Statement,Microsoft.AspNetCore.Routing,Log,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,TemplateFailedConstraint,The length of the statement  "                    _templateFailedConstraint(logger' endpoint.RoutePattern.RawText' endpoint.DisplayName' constraint' parameterName' FormatRouteValues(values)' null); " is 147.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorEndpointNameAddressExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\LinkGeneratorEndpointNameAddressExtensions.cs,GetUriByName,The length of the statement  "            return generator.GetUriByAddress<string>(endpointName' new RouteValueDictionary(values)' scheme' host' pathBase' fragment' options); " is 132.
Long Statement,Microsoft.AspNetCore.Routing,LinkGeneratorRouteValuesAddressExtensions,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\LinkGeneratorRouteValuesAddressExtensions.cs,GetUriByRouteValues,The length of the statement  "            return generator.GetUriByAddress<RouteValuesAddress>(address' address.ExplicitValues' scheme' host' pathBase' fragment' options); " is 129.
Long Statement,Microsoft.AspNetCore.Routing,RoutePatternMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternMatcher.cs,MatchComplexSegmentCore,The length of the statement  "                        else if (part is RoutePatternSeparatorPart separator && ((indexOfLiteral + separator.Content.Length) != requestSegment.Length)) " is 127.
Long Statement,Microsoft.AspNetCore.Routing.Internal,DfaGraphWriter,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\DfaGraphWriter.cs,Write,The length of the statement  "                if (endpoints[i] is RouteEndpoint endpoint && (endpoint.Metadata.GetMetadata<ISuppressMatchingMetadata>()?.SuppressMatching ?? false) == false) " is 143.
Long Statement,Microsoft.AspNetCore.Routing.Internal,ParameterPolicyActivator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\ParameterPolicyActivator.cs,CreateParameterPolicy,The length of the statement  "            if (constructors.Length == 1 && GetNonConvertableParameterTypeCount(serviceProvider' constructors[0].GetParameters()) == 1) " is 123.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DataSourceDependentMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DataSourceDependentMatcher.cs,CreateMatcher,The length of the statement  "                if (endpoints[i] is RouteEndpoint endpoint && endpoint.Metadata.GetMetadata<ISuppressMatchingMetadata>()?.SuppressMatching != true) " is 131.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcher.cs,ProcessConstraints,The length of the statement  "                    Logger.CandidateRejectedByConstraint(_logger' httpContext.Request.Path' endpoint' constraint.Key' constraint.Value' values[constraint.Key]); " is 140.
Long Statement,Microsoft.AspNetCore.Routing.Matching,Logger,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcher.cs,CandidateRejectedByConstraint,The length of the statement  "                    _candidateRejectedByConstraint(logger' endpoint.DisplayName' routePattern' constraintName' constraint.ToString()' value' path' null); " is 133.
Long Statement,Microsoft.AspNetCore.Routing.Matching,DfaMatcherBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\DfaMatcherBuilder.cs,GetCurrentSegment,The length of the statement  "            if (lastSegment.IsSimple && lastSegment.Parts[0] is RoutePatternParameterPart parameterPart && parameterPart.IsCatchAll) " is 120.
Long Statement,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,EmitVectorizedTable,The length of the statement  "            // https://github.com/GrabYourPitchforks/coreclr/commit/a3c1df25c4225995ffd6b18fd0fc39d6b81fd6a5#diff-d89b6ca07ea349899e45eed5f688a7ebR81 " is 137.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,DefaultRoutePatternTransformer,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\DefaultRoutePatternTransformer.cs,SubstituteRequiredValuesCore,The length of the statement  "                    // Ex: Admin/{controller=Home}/{action=Index}/{id?} defaults: { area = "Admin" }- with required values: { area = "Admin"' ... } " is 127.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,DefaultRoutePatternTransformer,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\DefaultRoutePatternTransformer.cs,SubstituteRequiredValuesCore,The length of the statement  "                    // Ex: Admin/{controller=Home}/{action=Index}/{id?} defaults: { area = "Admin" }- with required values: { area = "Blog"' ... } " is 126.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,DefaultRoutePatternTransformer,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\DefaultRoutePatternTransformer.cs,RemoveParameterDefault,The length of the statement  "                        var updatedParameter = RoutePatternFactory.ParameterPart(parameter.Name' @default: null' parameter.ParameterKind' parameter.ParameterPolicies); " is 143.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RouteParameterParser.cs,ParseRouteParameter,The length of the statement  "                return new RoutePatternParameterPart(string.Empty' null' RoutePatternParameterKind.Standard' Array.Empty<RoutePatternParameterPolicyReference>()); " is 146.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,Parse,The length of the statement  "            return PatternCore(original.RawText' Wrap(defaults)' Wrap(parameterPolicies)' requiredValues: null' original.PathSegments); " is 123.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,Parse,The length of the statement  "            return PatternCore(original.RawText' Wrap(defaults)' Wrap(parameterPolicies)' Wrap(requiredValues)' original.PathSegments); " is 123.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,Pattern,The length of the statement  "            return PatternCore(null' new RouteValueDictionary(defaults)' new RouteValueDictionary(parameterPolicies)' requiredValues: null' segments); " is 138.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,Pattern,The length of the statement  "            return PatternCore(rawText' new RouteValueDictionary(defaults)' new RouteValueDictionary(parameterPolicies)' requiredValues: null' segments); " is 141.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,Pattern,The length of the statement  "            return PatternCore(null' new RouteValueDictionary(defaults)' new RouteValueDictionary(parameterPolicies)' requiredValues: null' segments); " is 138.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,Pattern,The length of the statement  "            return PatternCore(rawText' new RouteValueDictionary(defaults)' new RouteValueDictionary(parameterPolicies)' requiredValues: null' segments); " is 141.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,PatternCore,The length of the statement  "                updatedParameterPolicies = new Dictionary<string' List<RoutePatternParameterPolicyReference>>(parameterPolicies.Count' StringComparer.OrdinalIgnoreCase); " is 153.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,PatternCore,The length of the statement  "                    ? updatedParameterPolicies.ToDictionary(kvp => kvp.Key' kvp => (IReadOnlyList<RoutePatternParameterPolicyReference>)kvp.Value.ToArray()) " is 136.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,PatternCore,The length of the statement  "                if ((updatedParameterPolicies == null || !updatedParameterPolicies.TryGetValue(parameter.Name' out parameterConstraints)) && " is 124.
Long Statement,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,PatternCore,The length of the statement  "                        updatedParameterPolicies = new Dictionary<string' List<RoutePatternParameterPolicyReference>>(StringComparer.OrdinalIgnoreCase); " is 128.
Long Statement,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ValidateSegementLength,The length of the statement  "                throw new InvalidOperationException("Route exceeds the maximum number of allowed segments of 28 and is unable to be processed."); " is 129.
Long Statement,Microsoft.AspNetCore.Routing.Tree,UrlMatchingNode,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Tree\UrlMatchingNode.cs,DebuggerToString,The length of the statement  "            return $"Length: {Depth}' Matches: {string.Join(" | "' Matches?.Select(m => $"({m.TemplateMatcher.Template.TemplateText})"))}"; " is 127.
Complex Conditional,Microsoft.AspNetCore.Routing,RoutePatternMatcher,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternMatcher.cs,MatchComplexSegmentCore,The conditional expression  "(parameterNeedsValue != null) &&                      (((lastLiteral != null) && !part.IsParameter) || (indexOfLastSegmentUsed == 0))"  is complex.
Complex Conditional,Microsoft.AspNetCore.Routing.Matching,HttpMethodPolicyJumpTable,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\HttpMethodMatcherPolicy.cs,GetDestination,The conditional expression  "_supportsCorsPreflight &&                      string.Equals(httpMethod' PreflightHttpMethod' StringComparison.OrdinalIgnoreCase) &&                      httpContext.Request.Headers.ContainsKey(OriginHeader) &&                      httpContext.Request.Headers.TryGetValue(AccessControlRequestMethod' out var accessControlRequestMethod) &&                      !StringValues.IsNullOrEmpty(accessControlRequestMethod)"  is complex.
Complex Conditional,Microsoft.AspNetCore.Routing.Patterns,RoutePatternFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternFactory.cs,PatternCore,The conditional expression  "!found &&                          updatedDefaults != null &&                          updatedDefaults.TryGetValue(kvp.Key' out var defaultValue) &&                          RouteValueEqualityComparer.Default.Equals(kvp.Value' defaultValue)"  is complex.
Complex Conditional,Microsoft.AspNetCore.Routing.Patterns,RoutePatternParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternParser.cs,IsAllValid,The conditional expression  "part is RoutePatternParameterPart parameter                          && parameter.IsCatchAll &&                          (i != segments.Count - 1 || j != segment.Parts.Count - 1)"  is complex.
Complex Conditional,Microsoft.AspNetCore.Routing.Template,TemplateBinder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\TemplateBinder.cs,RoutePartsEqual,The conditional expression  "(sa == string.Empty && sb == null) || (sb == string.Empty && sa == null)"  is complex.
Magic Number,Microsoft.AspNetCore.Routing,Log,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,FormatRouteValues,The following statement contains a magic number: builder.Remove(builder.Length - 2' 2);
Magic Number,Microsoft.AspNetCore.Routing,Log,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\DefaultLinkGenerator.cs,FormatRouteValues,The following statement contains a magic number: builder.Remove(builder.Length - 2' 2);
Magic Number,Microsoft.AspNetCore.Routing.Internal,ArrayBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\ArrayBuilder.cs,EnsureCapacity,The following statement contains a magic number: int nextCapacity = capacity == 0 ? DefaultCapacity : 2 * capacity;
Magic Number,Microsoft.AspNetCore.Routing.Internal,ParameterPolicyActivator,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\ParameterPolicyActivator.cs,ResolveParameterPolicy,The following statement contains a magic number: argumentString = inlineParameterPolicy.Substring(                      indexOfFirstOpenParens + 1'                      inlineParameterPolicy.Length - indexOfFirstOpenParens - 2);
Magic Number,Microsoft.AspNetCore.Routing.Internal,UriBuildingContext,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\UriBuildingContext.cs,Clear,The following statement contains a magic number: _path.Capacity = 128;
Magic Number,Microsoft.AspNetCore.Routing.Internal,UriBuildingContext,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\UriBuildingContext.cs,Clear,The following statement contains a magic number: _path.Capacity > 128
Magic Number,Microsoft.AspNetCore.Routing.Internal,UriBuildingContext,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\UriBuildingContext.cs,Clear,The following statement contains a magic number: _query.Capacity = 128;
Magic Number,Microsoft.AspNetCore.Routing.Internal,UriBuildingContext,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\UriBuildingContext.cs,Clear,The following statement contains a magic number: _query.Capacity > 128
Magic Number,Microsoft.AspNetCore.Routing.Internal,UriBuildingContext,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\UriBuildingContext.cs,Clear,The following statement contains a magic number: _buffer.Capacity = 8;
Magic Number,Microsoft.AspNetCore.Routing.Internal,UriBuildingContext,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Internal\UriBuildingContext.cs,Clear,The following statement contains a magic number: _buffer.Capacity > 8
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (endpoints.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      break;                    case 2:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      break;                    case 3:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      break;                    case 4:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                      break;                    default:                      _state0 = new CandidateState(endpoints[0]' values[0]' scores[0]);                      _state1 = new CandidateState(endpoints[1]' values[1]' scores[1]);                      _state2 = new CandidateState(endpoints[2]' values[2]' scores[2]);                      _state3 = new CandidateState(endpoints[3]' values[3]' scores[3]);                        _additionalCandidates = new CandidateState[endpoints.Length - 4];                      for (var i = 4; i < endpoints.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(endpoints[i]' values[i]' scores[i]);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,CandidateSet,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\CandidateSet.cs,CandidateSet,The following statement contains a magic number: switch (candidates.Length)              {                  case 0:                      return;                    case 1:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      break;                    case 2:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      break;                    case 3:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      break;                    case 4:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                      break;                    default:                      _state0 = new CandidateState(candidates[0].Endpoint' candidates[0].Score);                      _state1 = new CandidateState(candidates[1].Endpoint' candidates[1].Score);                      _state2 = new CandidateState(candidates[2].Endpoint' candidates[2].Score);                      _state3 = new CandidateState(candidates[3].Endpoint' candidates[3].Score);                        _additionalCandidates = new CandidateState[candidates.Length - 4];                      for (var i = 4; i < candidates.Length; i++)                      {                          _additionalCandidates[i - 4] = new CandidateState(candidates[i].Endpoint' candidates[i].Score);                      }                      break;              }
Magic Number,Microsoft.AspNetCore.Routing.Matching,EndpointComparer,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\EndpointComparer.cs,EndpointComparer,The following statement contains a magic number: _comparers = new IComparer<Endpoint>[2 + policies.Length];
Magic Number,Microsoft.AspNetCore.Routing.Matching,EndpointComparer,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\EndpointComparer.cs,EndpointComparer,The following statement contains a magic number: _comparers[i + 2] = policies[i].Comparer;
Magic Number,Microsoft.AspNetCore.Routing.Matching,HttpMethodMatcherPolicy,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\HttpMethodMatcherPolicy.cs,CreateRejectionEndpoint,The following statement contains a magic number: return new Endpoint(                  (context) =>                  {                      context.Response.StatusCode = 405;                      context.Response.Headers.Add("Allow"' allow);                      return Task.CompletedTask;                  }'                  EndpointMetadataCollection.Empty'                  Http405EndpointDisplayName);
Magic Number,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,ShouldVectorize,The following statement contains a magic number: return (IntPtr.Size == 8) &&                 // Don't vectorize if all of the strings are small (prevents allocating unused locals)              entries.Any(e => e.text.Length >= 4);
Magic Number,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,ShouldVectorize,The following statement contains a magic number: return (IntPtr.Size == 8) &&                 // Don't vectorize if all of the strings are small (prevents allocating unused locals)              entries.Any(e => e.text.Length >= 4);
Magic Number,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,EmitTable,The following statement contains a magic number: length - index >= 4 && locals.UInt64Value != null
Magic Number,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,EmitVectorizedTable,The following statement contains a magic number: il.Emit(OpCodes.Ldc_I4' 8);
Magic Number,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,EmitVectorizedTable,The following statement contains a magic number: il.Emit(OpCodes.Ldc_I4' 2);
Magic Number,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,EmitVectorizedTable,The following statement contains a magic number: EmitTable(il' group.ToArray()' index + 4' length' locals' labels' methods);
Magic Number,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,EmitSingleCharacterTable,The following statement contains a magic number: il.Emit(OpCodes.Ldc_I4' 2);
Magic Number,Microsoft.AspNetCore.Routing.Matching,ILEmitTrieFactory,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,GetUInt64Key,The following statement contains a magic number: Debug.Assert(index + 4 <= text.Length);
Magic Number,Microsoft.AspNetCore.Routing.Matching,Methods,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,Methods,The following statement contains a magic number: Add = typeof(Unsafe)                      .GetMethods(BindingFlags.Public | BindingFlags.Static)                      .Where(m => m.Name == nameof(Unsafe.Add))                      .Where(m => m.GetGenericArguments().Length == 1)                      .Where(m => m.GetParameters().Length == 2)                      .FirstOrDefault()                      ?.MakeGenericMethod(typeof(byte));
Magic Number,Microsoft.AspNetCore.Routing.Matching,Methods,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\ILEmitTrieFactory.cs,Methods,The following statement contains a magic number: As = typeof(Unsafe)                      .GetMethods(BindingFlags.Public | BindingFlags.Static)                      .Where(m => m.Name == nameof(Unsafe.As))                      .Where(m => m.GetGenericArguments().Length == 2)                      .Where(m => m.GetParameters().Length == 1)                      .FirstOrDefault()                      ?.MakeGenericMethod(typeof(char)' typeof(byte));
Magic Number,Microsoft.AspNetCore.Routing.Matching,JumpTableBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\JumpTableBuilder.cs,Build,The following statement contains a magic number: var threshold = IntPtr.Size == 8 ? 100 : 50;
Magic Number,Microsoft.AspNetCore.Routing.Matching,JumpTableBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\JumpTableBuilder.cs,Build,The following statement contains a magic number: var threshold = IntPtr.Size == 8 ? 100 : 50;
Magic Number,Microsoft.AspNetCore.Routing.Matching,JumpTableBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\JumpTableBuilder.cs,Build,The following statement contains a magic number: var threshold = IntPtr.Size == 8 ? 100 : 50;
Magic Number,Microsoft.AspNetCore.Routing.Matching,JumpTableBuilder,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Matching\JumpTableBuilder.cs,Build,The following statement contains a magic number: pathEntries.Length <= 10
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RouteParameterParser.cs,ParseRouteParameter,The following statement contains a magic number: startIndex += 2;
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternParser.cs,ParseParameter,The following statement contains a magic number: var inside = text.Substring(1' text.Length - 2);
Magic Number,Microsoft.AspNetCore.Routing.Patterns,RoutePatternParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RoutePatternParser.cs,TrimPrefix,The following statement contains a magic number: return routePattern.Substring(2);
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeInbound,The following statement contains a magic number: Debug.Assert(digit >= 0 && digit < 10);
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeInbound,The following statement contains a magic number: precedence += decimal.Divide(digit' (decimal)Math.Pow(10' i));
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeInbound,The following statement contains a magic number: Debug.Assert(digit >= 0 && digit < 10);
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeInbound,The following statement contains a magic number: precedence += decimal.Divide(digit' (decimal)Math.Pow(10' i));
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeOutbound,The following statement contains a magic number: Debug.Assert(digit >= 0 && digit < 10);
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeOutbound,The following statement contains a magic number: precedence += decimal.Divide(digit' (decimal)Math.Pow(10' i));
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeOutbound,The following statement contains a magic number: Debug.Assert(digit >= 0 && digit < 10);
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeOutbound,The following statement contains a magic number: precedence += decimal.Divide(digit' (decimal)Math.Pow(10' i));
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ValidateSegementLength,The following statement contains a magic number: length > 28
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeOutboundPrecedenceDigit,The following statement contains a magic number: return 4;
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeOutboundPrecedenceDigit,The following statement contains a magic number: return 5;
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeOutboundPrecedenceDigit,The following statement contains a magic number: return 4;
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeOutboundPrecedenceDigit,The following statement contains a magic number: return 5;
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeInboundPrecedenceDigit,The following statement contains a magic number: return 2;
Magic Number,Microsoft.AspNetCore.Routing.Template,RoutePrecedence,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Template\RoutePrecedence.cs,ComputeInboundPrecedenceDigit,The following statement contains a magic number: return 2;
Missing Default,Microsoft.AspNetCore.Routing,InlineRouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\InlineRouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (state)                  {                      case ParseState.Start:                          switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  break;                              case ':':                                  state = ParseState.ParsingName;                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  currentIndex--;                                  break;                          }                          break;                      case ParseState.InsideParenthesis:                          switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex);                                  inlineConstraints.Add(new InlineConstraint(constraintText));                                  break;                              case ')':                                  // Only consume a ')' token if                                  // (a) it is the last token                                  // (b) the next character is the start of the new constraint ':'                                  // (c) the next character is the start of the default value.                                    var nextChar = currentIndex + 1 > endIndex ? null : (char?)routeParameter[currentIndex + 1];                                  switch (nextChar)                                  {                                      case null:                                          state = ParseState.End;                                          constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex + 1);                                          inlineConstraints.Add(new InlineConstraint(constraintText));                                          break;                                      case ':':                                          state = ParseState.Start;                                          constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex + 1);                                          inlineConstraints.Add(new InlineConstraint(constraintText));                                          startIndex = currentIndex + 1;                                          break;                                      case '=':                                          state = ParseState.End;                                          constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex + 1);                                          inlineConstraints.Add(new InlineConstraint(constraintText));                                          break;                                  }                                  break;                              case ':':                              case '=':                                  // In the original implementation' the Regex would've backtracked if it encountered an                                  // unbalanced opening bracket followed by (not necessarily immediatiely) a delimiter.                                  // Simply verifying that the parantheses will eventually be closed should suffice to                                  // determine if the terminator needs to be consumed as part of the current constraint                                  // specification.                                  var indexOfClosingParantheses = routeParameter.IndexOf(')'' currentIndex + 1);                                  if (indexOfClosingParantheses == -1)                                  {                                      constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex);                                      inlineConstraints.Add(new InlineConstraint(constraintText));                                        if (currentChar == ':')                                      {                                          state = ParseState.ParsingName;                                          startIndex = currentIndex + 1;                                      }                                      else                                      {                                          state = ParseState.End;                                          currentIndex--;                                      }                                  }                                  else                                  {                                      currentIndex = indexOfClosingParantheses;                                  }                                    break;                          }                          break;                      case ParseState.ParsingName:                          switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex);                                  inlineConstraints.Add(new InlineConstraint(constraintText));                                  break;                              case ':':                                  constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex);                                  inlineConstraints.Add(new InlineConstraint(constraintText));                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex);                                  inlineConstraints.Add(new InlineConstraint(constraintText));                                  currentIndex--;                                  break;                          }                          break;                  }
Missing Default,Microsoft.AspNetCore.Routing,InlineRouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\InlineRouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  break;                              case ':':                                  state = ParseState.ParsingName;                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  currentIndex--;                                  break;                          }
Missing Default,Microsoft.AspNetCore.Routing,InlineRouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\InlineRouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex);                                  inlineConstraints.Add(new InlineConstraint(constraintText));                                  break;                              case ')':                                  // Only consume a ')' token if                                  // (a) it is the last token                                  // (b) the next character is the start of the new constraint ':'                                  // (c) the next character is the start of the default value.                                    var nextChar = currentIndex + 1 > endIndex ? null : (char?)routeParameter[currentIndex + 1];                                  switch (nextChar)                                  {                                      case null:                                          state = ParseState.End;                                          constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex + 1);                                          inlineConstraints.Add(new InlineConstraint(constraintText));                                          break;                                      case ':':                                          state = ParseState.Start;                                          constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex + 1);                                          inlineConstraints.Add(new InlineConstraint(constraintText));                                          startIndex = currentIndex + 1;                                          break;                                      case '=':                                          state = ParseState.End;                                          constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex + 1);                                          inlineConstraints.Add(new InlineConstraint(constraintText));                                          break;                                  }                                  break;                              case ':':                              case '=':                                  // In the original implementation' the Regex would've backtracked if it encountered an                                  // unbalanced opening bracket followed by (not necessarily immediatiely) a delimiter.                                  // Simply verifying that the parantheses will eventually be closed should suffice to                                  // determine if the terminator needs to be consumed as part of the current constraint                                  // specification.                                  var indexOfClosingParantheses = routeParameter.IndexOf(')'' currentIndex + 1);                                  if (indexOfClosingParantheses == -1)                                  {                                      constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex);                                      inlineConstraints.Add(new InlineConstraint(constraintText));                                        if (currentChar == ':')                                      {                                          state = ParseState.ParsingName;                                          startIndex = currentIndex + 1;                                      }                                      else                                      {                                          state = ParseState.End;                                          currentIndex--;                                      }                                  }                                  else                                  {                                      currentIndex = indexOfClosingParantheses;                                  }                                    break;                          }
Missing Default,Microsoft.AspNetCore.Routing,InlineRouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\InlineRouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (nextChar)                                  {                                      case null:                                          state = ParseState.End;                                          constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex + 1);                                          inlineConstraints.Add(new InlineConstraint(constraintText));                                          break;                                      case ':':                                          state = ParseState.Start;                                          constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex + 1);                                          inlineConstraints.Add(new InlineConstraint(constraintText));                                          startIndex = currentIndex + 1;                                          break;                                      case '=':                                          state = ParseState.End;                                          constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex + 1);                                          inlineConstraints.Add(new InlineConstraint(constraintText));                                          break;                                  }
Missing Default,Microsoft.AspNetCore.Routing,InlineRouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\InlineRouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex);                                  inlineConstraints.Add(new InlineConstraint(constraintText));                                  break;                              case ':':                                  constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex);                                  inlineConstraints.Add(new InlineConstraint(constraintText));                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  constraintText = routeParameter.Substring(startIndex' currentIndex - startIndex);                                  inlineConstraints.Add(new InlineConstraint(constraintText));                                  currentIndex--;                                  break;                          }
Missing Default,Microsoft.AspNetCore.Routing.Patterns,RouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (state)                  {                      case ParseState.Start:                          switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  break;                              case ':':                                  state = ParseState.ParsingName;                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  currentIndex--;                                  break;                          }                          break;                      case ParseState.InsideParenthesis:                          switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = text.Substring(startIndex' currentIndex - startIndex);                                  constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                  break;                              case ')':                                  // Only consume a ')' token if                                  // (a) it is the last token                                  // (b) the next character is the start of the new constraint ':'                                  // (c) the next character is the start of the default value.                                    var nextChar = currentIndex + 1 > endIndex ? null : (char?)text[currentIndex + 1];                                  switch (nextChar)                                  {                                      case null:                                          state = ParseState.End;                                          constraintText = text.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                          break;                                      case ':':                                          state = ParseState.Start;                                          constraintText = text.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                          startIndex = currentIndex + 1;                                          break;                                      case '=':                                          state = ParseState.End;                                          constraintText = text.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                          break;                                  }                                  break;                              case ':':                              case '=':                                  // In the original implementation' the Regex would've backtracked if it encountered an                                  // unbalanced opening bracket followed by (not necessarily immediatiely) a delimiter.                                  // Simply verifying that the parantheses will eventually be closed should suffice to                                  // determine if the terminator needs to be consumed as part of the current constraint                                  // specification.                                  var indexOfClosingParantheses = text.IndexOf(')'' currentIndex + 1);                                  if (indexOfClosingParantheses == -1)                                  {                                      constraintText = text.Substring(startIndex' currentIndex - startIndex);                                      constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                        if (currentChar == ':')                                      {                                          state = ParseState.ParsingName;                                          startIndex = currentIndex + 1;                                      }                                      else                                      {                                          state = ParseState.End;                                          currentIndex--;                                      }                                  }                                  else                                  {                                      currentIndex = indexOfClosingParantheses;                                  }                                    break;                          }                          break;                      case ParseState.ParsingName:                          switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = text.Substring(startIndex' currentIndex - startIndex);                                  if (constraintText.Length > 0)                                  {                                      constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                  }                                  break;                              case ':':                                  constraintText = text.Substring(startIndex' currentIndex - startIndex);                                  if (constraintText.Length > 0)                                  {                                      constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                  }                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  constraintText = text.Substring(startIndex' currentIndex - startIndex);                                  if (constraintText.Length > 0)                                  {                                      constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                  }                                  currentIndex--;                                  break;                          }                          break;                  }
Missing Default,Microsoft.AspNetCore.Routing.Patterns,RouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  break;                              case ':':                                  state = ParseState.ParsingName;                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  currentIndex--;                                  break;                          }
Missing Default,Microsoft.AspNetCore.Routing.Patterns,RouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = text.Substring(startIndex' currentIndex - startIndex);                                  constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                  break;                              case ')':                                  // Only consume a ')' token if                                  // (a) it is the last token                                  // (b) the next character is the start of the new constraint ':'                                  // (c) the next character is the start of the default value.                                    var nextChar = currentIndex + 1 > endIndex ? null : (char?)text[currentIndex + 1];                                  switch (nextChar)                                  {                                      case null:                                          state = ParseState.End;                                          constraintText = text.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                          break;                                      case ':':                                          state = ParseState.Start;                                          constraintText = text.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                          startIndex = currentIndex + 1;                                          break;                                      case '=':                                          state = ParseState.End;                                          constraintText = text.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                          break;                                  }                                  break;                              case ':':                              case '=':                                  // In the original implementation' the Regex would've backtracked if it encountered an                                  // unbalanced opening bracket followed by (not necessarily immediatiely) a delimiter.                                  // Simply verifying that the parantheses will eventually be closed should suffice to                                  // determine if the terminator needs to be consumed as part of the current constraint                                  // specification.                                  var indexOfClosingParantheses = text.IndexOf(')'' currentIndex + 1);                                  if (indexOfClosingParantheses == -1)                                  {                                      constraintText = text.Substring(startIndex' currentIndex - startIndex);                                      constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                        if (currentChar == ':')                                      {                                          state = ParseState.ParsingName;                                          startIndex = currentIndex + 1;                                      }                                      else                                      {                                          state = ParseState.End;                                          currentIndex--;                                      }                                  }                                  else                                  {                                      currentIndex = indexOfClosingParantheses;                                  }                                    break;                          }
Missing Default,Microsoft.AspNetCore.Routing.Patterns,RouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (nextChar)                                  {                                      case null:                                          state = ParseState.End;                                          constraintText = text.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                          break;                                      case ':':                                          state = ParseState.Start;                                          constraintText = text.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                          startIndex = currentIndex + 1;                                          break;                                      case '=':                                          state = ParseState.End;                                          constraintText = text.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                          break;                                  }
Missing Default,Microsoft.AspNetCore.Routing.Patterns,RouteParameterParser,D:\research\architectureSmells\repos\aspnet_Routing\src\Microsoft.AspNetCore.Routing\Patterns\RouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = text.Substring(startIndex' currentIndex - startIndex);                                  if (constraintText.Length > 0)                                  {                                      constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                  }                                  break;                              case ':':                                  constraintText = text.Substring(startIndex' currentIndex - startIndex);                                  if (constraintText.Length > 0)                                  {                                      constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                  }                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  constraintText = text.Substring(startIndex' currentIndex - startIndex);                                  if (constraintText.Length > 0)                                  {                                      constraints.Add(RoutePatternFactory.ParameterPolicy(constraintText));                                  }                                  currentIndex--;                                  break;                          }
