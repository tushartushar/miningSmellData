Implementation smell,Namespace,Class,File,Method,Description
Long Statement,RoutingSandbox,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\samples\RoutingSandbox\UseEndpointRoutingStartup.cs,Configure,The length of the statement  "                        foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase)) " is 141.
Long Statement,RoutingSandbox,UseRouterStartup,D:\research\architectureSmells\repos\aspnet_Routing\samples\RoutingSandbox\UseRouterStartup.cs,Configure,The length of the statement  "                    return httpContext.Response.WriteAsync($"Verb =  {request.Method.ToUpperInvariant()} - Path = {request.Path} - Route values - {string.Join("' "' httpContext.GetRouteData().Values)}"); " is 183.
Long Statement,RoutingSandbox,UseRouterStartup,D:\research\architectureSmells\repos\aspnet_Routing\samples\RoutingSandbox\UseRouterStartup.cs,Configure,The length of the statement  "                routes.MapGet("api/get/{id}"' (request' response' routeData) => response.WriteAsync($"API Get {routeData.Values["id"]}")) " is 121.
Long Statement,RoutingSandbox,UseRouterStartup,D:\research\architectureSmells\repos\aspnet_Routing\samples\RoutingSandbox\UseRouterStartup.cs,Configure,The length of the statement  "                      .MapMiddlewareRoute("api/middleware"' (appBuilder) => appBuilder.Use((httpContext' next) => httpContext.Response.WriteAsync("Middleware!"))) " is 140.
Long Statement,RoutingSandbox,UseRouterStartup,D:\research\architectureSmells\repos\aspnet_Routing\samples\RoutingSandbox\UseRouterStartup.cs,Configure,The length of the statement  "                        constraints: new { lastName = new RegexRouteConstraint(new Regex("[a-zA-Z]{3}"' RegexOptions.CultureInvariant' RegexMatchTimeout)) }); " is 134.
Magic Number,RoutingSample.Web.AuthorizationMiddleware,AuthorizationMiddleware,D:\research\architectureSmells\repos\aspnet_Routing\samples\RoutingSandbox\AuthorizationMiddleware\AuthorizationMiddleware.cs,Invoke,The following statement contains a magic number: httpContext.Response.StatusCode = 401;
Magic Number,RoutingSample.Web.HelloExtension,HelloMiddleware,D:\research\architectureSmells\repos\aspnet_Routing\samples\RoutingSandbox\HelloExtension\HelloMiddleware.cs,InvokeAsync,The following statement contains a magic number: response.StatusCode = 200;
Magic Number,RoutingSandbox,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\samples\RoutingSandbox\UseEndpointRoutingStartup.cs,Configure,The following statement contains a magic number: app.UseEndpointRouting(builder =>              {                  builder.MapHello("/helloworld"' "World");                    builder.MapHello("/helloworld-secret"' "Secret World")                      .RequireAuthorization("swordfish");                    builder.MapGet(                      "/"'                      (httpContext) =>                      {                          var dataSource = httpContext.RequestServices.GetRequiredService<EndpointDataSource>();                            var sb = new StringBuilder();                          sb.AppendLine("Endpoints:");                          foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase))                          {                              sb.AppendLine($"- {endpoint.RoutePattern.RawText}");                          }                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(sb.ToString());                      });                  builder.MapGet(                      "/plaintext"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          var payloadLength = _plainTextPayload.Length;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          response.ContentLength = payloadLength;                          return response.Body.WriteAsync(_plainTextPayload' 0' payloadLength);                      });                  builder.MapGet(                      "/graph"'                      "DFA Graph"'                      (httpContext) =>                      {                          using (var writer = new StreamWriter(httpContext.Response.Body' Encoding.UTF8' 1024' leaveOpen: true))                          {                              var graphWriter = httpContext.RequestServices.GetRequiredService<DfaGraphWriter>();                              var dataSource = httpContext.RequestServices.GetRequiredService<CompositeEndpointDataSource>();                              graphWriter.Write(dataSource' writer);                          }                            return Task.CompletedTask;                      });              });
Magic Number,RoutingSandbox,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\samples\RoutingSandbox\UseEndpointRoutingStartup.cs,Configure,The following statement contains a magic number: app.UseEndpointRouting(builder =>              {                  builder.MapHello("/helloworld"' "World");                    builder.MapHello("/helloworld-secret"' "Secret World")                      .RequireAuthorization("swordfish");                    builder.MapGet(                      "/"'                      (httpContext) =>                      {                          var dataSource = httpContext.RequestServices.GetRequiredService<EndpointDataSource>();                            var sb = new StringBuilder();                          sb.AppendLine("Endpoints:");                          foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase))                          {                              sb.AppendLine($"- {endpoint.RoutePattern.RawText}");                          }                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(sb.ToString());                      });                  builder.MapGet(                      "/plaintext"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          var payloadLength = _plainTextPayload.Length;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          response.ContentLength = payloadLength;                          return response.Body.WriteAsync(_plainTextPayload' 0' payloadLength);                      });                  builder.MapGet(                      "/graph"'                      "DFA Graph"'                      (httpContext) =>                      {                          using (var writer = new StreamWriter(httpContext.Response.Body' Encoding.UTF8' 1024' leaveOpen: true))                          {                              var graphWriter = httpContext.RequestServices.GetRequiredService<DfaGraphWriter>();                              var dataSource = httpContext.RequestServices.GetRequiredService<CompositeEndpointDataSource>();                              graphWriter.Write(dataSource' writer);                          }                            return Task.CompletedTask;                      });              });
Magic Number,RoutingSandbox,UseEndpointRoutingStartup,D:\research\architectureSmells\repos\aspnet_Routing\samples\RoutingSandbox\UseEndpointRoutingStartup.cs,Configure,The following statement contains a magic number: app.UseEndpointRouting(builder =>              {                  builder.MapHello("/helloworld"' "World");                    builder.MapHello("/helloworld-secret"' "Secret World")                      .RequireAuthorization("swordfish");                    builder.MapGet(                      "/"'                      (httpContext) =>                      {                          var dataSource = httpContext.RequestServices.GetRequiredService<EndpointDataSource>();                            var sb = new StringBuilder();                          sb.AppendLine("Endpoints:");                          foreach (var endpoint in dataSource.Endpoints.OfType<RouteEndpoint>().OrderBy(e => e.RoutePattern.RawText' StringComparer.OrdinalIgnoreCase))                          {                              sb.AppendLine($"- {endpoint.RoutePattern.RawText}");                          }                            var response = httpContext.Response;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          return response.WriteAsync(sb.ToString());                      });                  builder.MapGet(                      "/plaintext"'                      (httpContext) =>                      {                          var response = httpContext.Response;                          var payloadLength = _plainTextPayload.Length;                          response.StatusCode = 200;                          response.ContentType = "text/plain";                          response.ContentLength = payloadLength;                          return response.Body.WriteAsync(_plainTextPayload' 0' payloadLength);                      });                  builder.MapGet(                      "/graph"'                      "DFA Graph"'                      (httpContext) =>                      {                          using (var writer = new StreamWriter(httpContext.Response.Body' Encoding.UTF8' 1024' leaveOpen: true))                          {                              var graphWriter = httpContext.RequestServices.GetRequiredService<DfaGraphWriter>();                              var dataSource = httpContext.RequestServices.GetRequiredService<CompositeEndpointDataSource>();                              graphWriter.Write(dataSource' writer);                          }                            return Task.CompletedTask;                      });              });
