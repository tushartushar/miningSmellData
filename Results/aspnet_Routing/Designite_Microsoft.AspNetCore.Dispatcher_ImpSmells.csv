Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNetCore.Dispatcher,RoutePatternMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternMatcher.cs,TryMatch,The method has 122 lines of code.
Long Method,Microsoft.AspNetCore.Dispatcher,RoutePatternMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternMatcher.cs,MatchComplexSegmentCore,The method has 146 lines of code.
Long Method,Microsoft.AspNetCore.Dispatcher,RoutePatternBinder,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternBinder.cs,GetValues,The method has 136 lines of code.
Long Method,Microsoft.AspNetCore.Dispatcher,RoutePatternBinder,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternBinder.cs,BindValues,The method has 101 lines of code.
Long Method,Microsoft.AspNetCore.Dispatcher,UrlMatchingTree,C:\repos\aspnet_Routing\shared\Microsoft.AspNetCore.Routing.UrlMatchingTree.Sources\UrlMatchingTree.cs,AddEntryToTree,The method has 138 lines of code.
Long Method,Microsoft.AspNetCore.Dispatcher.Patterns,InlineRouteParameterParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\InlineRouteParameterParser.cs,ParseConstraints,The method has 125 lines of code.
Complex Method,Microsoft.AspNetCore.Dispatcher,RoutePatternMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternMatcher.cs,TryMatch,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.AspNetCore.Dispatcher,RoutePatternMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternMatcher.cs,MatchComplexSegmentCore,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.AspNetCore.Dispatcher,RoutePatternBinder,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternBinder.cs,GetValues,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.AspNetCore.Dispatcher,RoutePatternBinder,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternBinder.cs,BindValues,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.AspNetCore.Dispatcher,TreeMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Tree\TreeMatcher.cs,MatchAsync,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.AspNetCore.Dispatcher,TreeMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Tree\TreeMatcher.cs,CreateCache,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Dispatcher,TreeMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Tree\TreeMatcher.cs,MapInbound,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Dispatcher,UriBuildingContext,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\UriBuildingContext.cs,Accept,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Dispatcher,TreeEnumerator,C:\repos\aspnet_Routing\shared\Microsoft.AspNetCore.Routing.UrlMatchingTree.Sources\TreeEnumerator.cs,MoveNext,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.AspNetCore.Dispatcher,UrlMatchingTree,C:\repos\aspnet_Routing\shared\Microsoft.AspNetCore.Routing.UrlMatchingTree.Sources\UrlMatchingTree.cs,AddEntryToTree,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.AspNetCore.Dispatcher.Patterns,InlineRouteParameterParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\InlineRouteParameterParser.cs,ParseRouteParameter,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternParser.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternParser.cs,ParseSegment,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternParser.cs,ParseParameter,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternParser.cs,IsSegmentValid,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.AspNetCore.Dispatcher,RoutePatternMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternMatcher.cs,MatchComplexSegmentCore,The method has 5 parameters. Parameters: routeSegment' requestSegment' defaults' values' indexOfLastSegmentUsed
Long Parameter List,Microsoft.AspNetCore.Dispatcher,RoutePatternEndpoint,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternEndpoint.cs,RoutePatternEndpoint,The method has 5 parameters. Parameters: pattern' values' requestDelegate' displayName' metadata
Long Parameter List,Microsoft.AspNetCore.Dispatcher,RoutePatternEndpoint,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternEndpoint.cs,RoutePatternEndpoint,The method has 5 parameters. Parameters: pattern' values' delegateFactory' displayName' metadata
Long Parameter List,Microsoft.AspNetCore.Dispatcher,RoutePatternEndpoint,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternEndpoint.cs,RoutePatternEndpoint,The method has 5 parameters. Parameters: pattern' values' httpMethod' requestDelegate' metadata
Long Parameter List,Microsoft.AspNetCore.Dispatcher,RoutePatternEndpoint,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternEndpoint.cs,RoutePatternEndpoint,The method has 5 parameters. Parameters: pattern' values' httpMethod' delegateFactory' metadata
Long Parameter List,Microsoft.AspNetCore.Dispatcher,RoutePatternEndpoint,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternEndpoint.cs,RoutePatternEndpoint,The method has 6 parameters. Parameters: pattern' values' httpMethod' requestDelegate' displayName' metadata
Long Parameter List,Microsoft.AspNetCore.Dispatcher,RoutePatternEndpoint,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternEndpoint.cs,RoutePatternEndpoint,The method has 6 parameters. Parameters: pattern' values' httpMethod' delegateFactory' displayName' metadata
Long Parameter List,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternParameter,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternParameter.cs,RoutePatternParameter,The method has 5 parameters. Parameters: rawText' name' defaultValue' parameterKind' constraints
Long Parameter List,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternPart,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternPart.cs,CreateParameterFromText,The method has 5 parameters. Parameters: rawText' name' defaultValue' parameterKind' constraints
Long Identifier,Microsoft.AspNetCore.Dispatcher,LoggerExtensions,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\LoggerExtensions.cs,,The length of the parameter _requestShortCircuitedMatcherBase is 33.
Long Identifier,Microsoft.AspNetCore.Dispatcher,LoggerExtensions,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\LoggerExtensions.cs,,The length of the parameter _requestShortCircuitedDispatcherMiddleware is 42.
Long Identifier,Microsoft.AspNetCore.Dispatcher,LoggerExtensions,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\LoggerExtensions.cs,,The length of the parameter _endpointMatchedDispatcherMiddleware is 36.
Long Identifier,Microsoft.AspNetCore.Dispatcher,LoggerExtensions,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\LoggerExtensions.cs,,The length of the parameter _requestMethodMatchedEndpointMethod is 35.
Long Identifier,Microsoft.AspNetCore.Dispatcher,LoggerExtensions,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\LoggerExtensions.cs,,The length of the parameter _requestMethodDidNotMatchEndpointMethod is 39.
Long Identifier,Microsoft.AspNetCore.Dispatcher,LoggerExtensions,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\LoggerExtensions.cs,,The length of the parameter _noEndpointMatchedRequestMethod is 31.
Long Identifier,Microsoft.AspNetCore.Dispatcher,LoggerExtensions,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\LoggerExtensions.cs,,The length of the parameter _routeValueDoesNotMatchConstraint is 33.
Long Identifier,Microsoft.AspNetCore.Dispatcher,UrlMatchingTree,C:\repos\aspnet_Routing\shared\Microsoft.AspNetCore.Routing.UrlMatchingTree.Sources\UrlMatchingTree.cs,RemainingSegmentsAreOptional,The length of the parameter isOptionalCatchAllOrHasDefaultValue is 35.
Long Statement,Microsoft.AspNetCore.Dispatcher,HttpMethodEndpointSelector,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\HttpMethodEndpointSelector.cs,SelectAsync,The length of the statement  "                    Logger.RequestMethodDidNotMatchEndpointMethod(context.HttpContext.Request.Method' endpoint.HttpMethod' context.Endpoints[i]); " is 125.
Long Statement,Microsoft.AspNetCore.Dispatcher,LoggerExtensions,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\LoggerExtensions.cs,RequestMethodDidNotMatchEndpointMethod,The length of the statement  "            _requestMethodDidNotMatchEndpointMethod(logger' requestMethod' endpointMethod' endpoint.DisplayName ?? "Unnamed endpoint"' null); " is 129.
Long Statement,Microsoft.AspNetCore.Dispatcher,MatcherBase,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\MatcherBase.cs,GetAddresses,The length of the statement  "            return ((IAddressCollectionProvider)DataSource)?.Addresses ?? _addresses ?? (IReadOnlyList<Address>)Array.Empty<Address>(); " is 123.
Long Statement,Microsoft.AspNetCore.Dispatcher,MatcherBase,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\MatcherBase.cs,GetEndpoints,The length of the statement  "            return ((IEndpointCollectionProvider)DataSource)?.Endpoints ?? _endpoints ?? (IReadOnlyList<Endpoint>)Array.Empty<Endpoint>(); " is 126.
Long Statement,Microsoft.AspNetCore.Dispatcher,MatcherBase,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\MatcherBase.cs,SelectEndpointAsync,The length of the statement  "            var selectorContext = new EndpointSelectorContext(context.HttpContext' context.Values' endpoints.ToList()' Selectors.ToList()); " is 127.
Long Statement,Microsoft.AspNetCore.Dispatcher,RoutePatternMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternMatcher.cs,MatchComplexSegmentCore,The length of the statement  "                        else if (part is RoutePatternSeparator separator && ((indexOfLiteral + separator.Content.Length) != requestSegment.Length)) " is 123.
Long Statement,Microsoft.AspNetCore.Dispatcher,RoutePatternAddressSelector,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePatternAddressSelector.cs,IsMatch,The length of the statement  "                if (!string.Equals(Convert.ToString(kvp.Value) ?? string.Empty' Convert.ToString(value) ?? string.Empty' StringComparison.OrdinalIgnoreCase)) " is 141.
Long Statement,Microsoft.AspNetCore.Dispatcher,UrlMatchingNode,C:\repos\aspnet_Routing\shared\Microsoft.AspNetCore.Routing.UrlMatchingTree.Sources\UrlMatchingNode.cs,DebuggerToString,The length of the statement  "            return $"Length: {Depth}' Matches: {string.Join(" | "' Matches?.Select(m => $"({m.RoutePatternMatcher.RoutePattern.RawText})"))}"; " is 130.
Long Statement,Microsoft.Extensions.DependencyInjection,DispatcherServiceCollectionExtensions,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\DependencyInjection\DispatcherServiceCollectionExtensions.cs,AddDispatcher,The length of the statement  "            services.TryAddEnumerable(ServiceDescriptor.Transient<IConfigureOptions<DispatcherOptions>' DefaultDispatcherConfigureOptions>()); " is 130.
Long Statement,Microsoft.AspNetCore.Dispatcher.Patterns,InlineRouteParameterParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\InlineRouteParameterParser.cs,ParseRouteParameter,The length of the statement  "                return new RoutePatternParameter(null' string.Empty' null' RoutePatternParameterKind.Standard' Array.Empty<ConstraintReference>()); " is 131.
Long Statement,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternParser.cs,IsSegmentValid,The length of the statement  "                        parts[i - 1] = RoutePatternPart.CreateSeparatorFromText(previousPart.RawText' ((RoutePatternLiteral)previousPart).Content); " is 123.
Long Statement,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternPart,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternPart.cs,CreateParameter,The length of the statement  "            return CreateParameterFromText(null' name' null' RoutePatternParameterKind.Standard' Array.Empty<ConstraintReference>()); " is 121.
Long Statement,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternPart,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternPart.cs,CreateParameterFromText,The length of the statement  "            return CreateParameterFromText(rawText' name' null' RoutePatternParameterKind.Standard' Array.Empty<ConstraintReference>()); " is 124.
Long Statement,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternPart,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternPart.cs,CreateParameter,The length of the statement  "            return CreateParameterFromText(null' name' defaultValue' RoutePatternParameterKind.Standard' Array.Empty<ConstraintReference>()); " is 129.
Long Statement,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternPart,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternPart.cs,CreateParameterFromText,The length of the statement  "            return CreateParameterFromText(rawText' name' defaultValue' RoutePatternParameterKind.Standard' Array.Empty<ConstraintReference>()); " is 132.
Complex Conditional,Microsoft.AspNetCore.Dispatcher,RoutePatternMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternMatcher.cs,MatchComplexSegmentCore,The conditional expression  "(parameterNeedsValue != null) &&                      (((lastLiteral != null) && !part.IsParameter) || (indexOfLastSegmentUsed == 0))"  is complex.
Complex Conditional,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternParser.cs,IsAllValid,The conditional expression  "part.IsParameter &&                          ((RoutePatternParameter)part).IsCatchAll &&                          (i != segments.Count - 1 || j != segment.Parts.Count - 1)"  is complex.
Magic Number,Microsoft.AspNetCore.Dispatcher,DefaultConstraintFactory,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Constraints\DefaultConstraintFactory.cs,ResolveConstraint,The following statement contains a magic number: if (indexOfFirstOpenParens >= 0 && constraint.EndsWith(")"' StringComparison.Ordinal))              {                  constraintKey = constraint.Substring(0' indexOfFirstOpenParens);                  argumentString = constraint.Substring(indexOfFirstOpenParens + 1'                                                              constraint.Length - indexOfFirstOpenParens - 2);              }              else              {                  constraintKey = constraint;                  argumentString = null;              }
Magic Number,Microsoft.AspNetCore.Dispatcher,RoutePatternMatcher,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternMatcher.cs,MatchComplexSegment,The following statement contains a magic number: if (routeSegment.Parts[indexOfLastSegment] is RoutePatternParameter parameter && parameter.IsOptional &&                  routeSegment.Parts[indexOfLastSegment - 1].IsSeparator)              {                  if (MatchComplexSegmentCore(routeSegment' requestSegment' Defaults' values' indexOfLastSegment))                  {                      return true;                  }                  else                  {                      var separator = (RoutePatternSeparator)routeSegment.Parts[indexOfLastSegment - 1];                      if (requestSegment.EndsWith(                      separator.Content'                      StringComparison.OrdinalIgnoreCase))                          return false;                        return MatchComplexSegmentCore(                          routeSegment'                          requestSegment'                          Defaults'                          values'                          indexOfLastSegment - 2);                  }              }              else              {                  return MatchComplexSegmentCore(routeSegment' requestSegment' Defaults' values' indexOfLastSegment);              }
Magic Number,Microsoft.AspNetCore.Dispatcher,RoutePrecedence,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePrecedence.cs,ComputeInbound,The following statement contains a magic number: for (var i = 0; i < routePattern.PathSegments.Count; i++)              {                  var segment = routePattern.PathSegments[i];                    var digit = ComputeInboundPrecedenceDigit(segment);                  Debug.Assert(digit >= 0 && digit < 10);                    precedence += decimal.Divide(digit' (decimal)Math.Pow(10' i));              }
Magic Number,Microsoft.AspNetCore.Dispatcher,RoutePrecedence,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePrecedence.cs,ComputeInbound,The following statement contains a magic number: for (var i = 0; i < routePattern.PathSegments.Count; i++)              {                  var segment = routePattern.PathSegments[i];                    var digit = ComputeInboundPrecedenceDigit(segment);                  Debug.Assert(digit >= 0 && digit < 10);                    precedence += decimal.Divide(digit' (decimal)Math.Pow(10' i));              }
Magic Number,Microsoft.AspNetCore.Dispatcher,RoutePrecedence,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePrecedence.cs,ComputeInboundPrecedenceDigit,The following statement contains a magic number: if (segment.Parts.Count > 1)              {                  // Multi-part segments should appear after literal segments and along with parameter segments                  return 2;              }
Magic Number,Microsoft.AspNetCore.Dispatcher,RoutePrecedence,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePrecedence.cs,ComputeInboundPrecedenceDigit,The following statement contains a magic number: if (part.IsLiteral)              {                  return 1;              }              else              {                  Debug.Assert(part.IsParameter);                  var parameter = (RoutePatternParameter)part;                  var digit = parameter.IsCatchAll ? 5 : 3;                    // If there is a dispatcher value constraint for the parameter' reduce order by 1                  // Constrained parameters end up with order 2' Constrained catch alls end up with order 4                  if (parameter.Constraints != null && parameter.Constraints.Any())                  {                      digit--;                  }                    return digit;              }
Magic Number,Microsoft.AspNetCore.Dispatcher,RoutePrecedence,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\RoutePrecedence.cs,ComputeInboundPrecedenceDigit,The following statement contains a magic number: if (part.IsLiteral)              {                  return 1;              }              else              {                  Debug.Assert(part.IsParameter);                  var parameter = (RoutePatternParameter)part;                  var digit = parameter.IsCatchAll ? 5 : 3;                    // If there is a dispatcher value constraint for the parameter' reduce order by 1                  // Constrained parameters end up with order 2' Constrained catch alls end up with order 4                  if (parameter.Constraints != null && parameter.Constraints.Any())                  {                      digit--;                  }                    return digit;              }
Magic Number,Microsoft.AspNetCore.Dispatcher,UriBuildingContext,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\UriBuildingContext.cs,Clear,The following statement contains a magic number: if (_uri.Capacity > 128)              {                  // We don't want to retain too much memory if this is getting pooled.                  _uri.Capacity = 128;              }
Magic Number,Microsoft.AspNetCore.Dispatcher,UriBuildingContext,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\UriBuildingContext.cs,Clear,The following statement contains a magic number: if (_uri.Capacity > 128)              {                  // We don't want to retain too much memory if this is getting pooled.                  _uri.Capacity = 128;              }
Magic Number,Microsoft.AspNetCore.Dispatcher,UriBuildingContext,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\UriBuildingContext.cs,Clear,The following statement contains a magic number: if (_buffer.Capacity > 8)              {                  _buffer.Capacity = 8;              }
Magic Number,Microsoft.AspNetCore.Dispatcher,UriBuildingContext,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\UriBuildingContext.cs,Clear,The following statement contains a magic number: if (_buffer.Capacity > 8)              {                  _buffer.Capacity = 8;              }
Magic Number,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternParser.cs,ParseParameter,The following statement contains a magic number: var inside = text.Substring(1' text.Length - 2);
Magic Number,Microsoft.AspNetCore.Dispatcher.Patterns,RoutePatternParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\RoutePatternParser.cs,TrimPrefix,The following statement contains a magic number: if (routePattern.StartsWith("~/"' StringComparison.Ordinal))              {                  return routePattern.Substring(2);              }              else if (routePattern.StartsWith("/"' StringComparison.Ordinal))              {                  return routePattern.Substring(1);              }              else if (routePattern.StartsWith("~"' StringComparison.Ordinal))              {                  throw new RoutePatternException(routePattern' Resources.TemplateRoute_InvalidRouteTemplate);              }
Missing Default,Microsoft.AspNetCore.Dispatcher.Patterns,InlineRouteParameterParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\InlineRouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (state)                  {                      case ParseState.Start:                          switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  break;                              case ':':                                  state = ParseState.ParsingName;                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  currentIndex--;                                  break;                          }                          break;                      case ParseState.InsideParenthesis:                          switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = parameter.Substring(startIndex' currentIndex - startIndex);                                  constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                  break;                              case ')':                                  // Only consume a ')' token if                                  // (a) it is the last token                                  // (b) the next character is the start of the new constraint ':'                                  // (c) the next character is the start of the default value.                                    var nextChar = currentIndex + 1 > endIndex ? null : (char?)parameter[currentIndex + 1];                                  switch (nextChar)                                  {                                      case null:                                          state = ParseState.End;                                          constraintText = parameter.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                          break;                                      case ':':                                          state = ParseState.Start;                                          constraintText = parameter.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                          startIndex = currentIndex + 1;                                          break;                                      case '=':                                          state = ParseState.End;                                          constraintText = parameter.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                          break;                                  }                                  break;                              case ':':                              case '=':                                  // In the original implementation' the Regex would've backtracked if it encountered an                                  // unbalanced opening bracket followed by (not necessarily immediatiely) a delimiter.                                  // Simply verifying that the parantheses will eventually be closed should suffice to                                  // determine if the terminator needs to be consumed as part of the current constraint                                  // specification.                                  var indexOfClosingParantheses = parameter.IndexOf(')'' currentIndex + 1);                                  if (indexOfClosingParantheses == -1)                                  {                                      constraintText = parameter.Substring(startIndex' currentIndex - startIndex);                                      constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                        if (currentChar == ':')                                      {                                          state = ParseState.ParsingName;                                          startIndex = currentIndex + 1;                                      }                                      else                                      {                                          state = ParseState.End;                                          currentIndex--;                                      }                                  }                                  else                                  {                                      currentIndex = indexOfClosingParantheses;                                  }                                    break;                          }                          break;                      case ParseState.ParsingName:                          switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = parameter.Substring(startIndex' currentIndex - startIndex);                                  constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                  break;                              case ':':                                  constraintText = parameter.Substring(startIndex' currentIndex - startIndex);                                  constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  constraintText = parameter.Substring(startIndex' currentIndex - startIndex);                                  constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                  currentIndex--;                                  break;                          }                          break;                  }
Missing Default,Microsoft.AspNetCore.Dispatcher.Patterns,InlineRouteParameterParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\InlineRouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  break;                              case ':':                                  state = ParseState.ParsingName;                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  currentIndex--;                                  break;                          }
Missing Default,Microsoft.AspNetCore.Dispatcher.Patterns,InlineRouteParameterParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\InlineRouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = parameter.Substring(startIndex' currentIndex - startIndex);                                  constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                  break;                              case ')':                                  // Only consume a ')' token if                                  // (a) it is the last token                                  // (b) the next character is the start of the new constraint ':'                                  // (c) the next character is the start of the default value.                                    var nextChar = currentIndex + 1 > endIndex ? null : (char?)parameter[currentIndex + 1];                                  switch (nextChar)                                  {                                      case null:                                          state = ParseState.End;                                          constraintText = parameter.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                          break;                                      case ':':                                          state = ParseState.Start;                                          constraintText = parameter.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                          startIndex = currentIndex + 1;                                          break;                                      case '=':                                          state = ParseState.End;                                          constraintText = parameter.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                          break;                                  }                                  break;                              case ':':                              case '=':                                  // In the original implementation' the Regex would've backtracked if it encountered an                                  // unbalanced opening bracket followed by (not necessarily immediatiely) a delimiter.                                  // Simply verifying that the parantheses will eventually be closed should suffice to                                  // determine if the terminator needs to be consumed as part of the current constraint                                  // specification.                                  var indexOfClosingParantheses = parameter.IndexOf(')'' currentIndex + 1);                                  if (indexOfClosingParantheses == -1)                                  {                                      constraintText = parameter.Substring(startIndex' currentIndex - startIndex);                                      constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                        if (currentChar == ':')                                      {                                          state = ParseState.ParsingName;                                          startIndex = currentIndex + 1;                                      }                                      else                                      {                                          state = ParseState.End;                                          currentIndex--;                                      }                                  }                                  else                                  {                                      currentIndex = indexOfClosingParantheses;                                  }                                    break;                          }
Missing Default,Microsoft.AspNetCore.Dispatcher.Patterns,InlineRouteParameterParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\InlineRouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (nextChar)                                  {                                      case null:                                          state = ParseState.End;                                          constraintText = parameter.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                          break;                                      case ':':                                          state = ParseState.Start;                                          constraintText = parameter.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                          startIndex = currentIndex + 1;                                          break;                                      case '=':                                          state = ParseState.End;                                          constraintText = parameter.Substring(startIndex' currentIndex - startIndex + 1);                                          constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                          break;                                  }
Missing Default,Microsoft.AspNetCore.Dispatcher.Patterns,InlineRouteParameterParser,C:\repos\aspnet_Routing\src\Microsoft.AspNetCore.Dispatcher\Patterns\InlineRouteParameterParser.cs,ParseConstraints,The following switch statement is missing a default case: switch (currentChar)                          {                              case null:                                  state = ParseState.End;                                  var constraintText = parameter.Substring(startIndex' currentIndex - startIndex);                                  constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                  break;                              case ':':                                  constraintText = parameter.Substring(startIndex' currentIndex - startIndex);                                  constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                  startIndex = currentIndex + 1;                                  break;                              case '(':                                  state = ParseState.InsideParenthesis;                                  break;                              case '=':                                  state = ParseState.End;                                  constraintText = parameter.Substring(startIndex' currentIndex - startIndex);                                  constraints.Add(ConstraintReference.CreateFromText(constraintText' constraintText));                                  currentIndex--;                                  break;                          }
