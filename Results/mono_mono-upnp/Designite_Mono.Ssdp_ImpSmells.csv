Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.Ssdp,BrowseService,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\BrowseService.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,Mono.Ssdp,BrowseService,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\BrowseService.cs,ParseExpiration,Cyclomatic complexity of the method is 9
Long Statement,Mono.Ssdp,Announcer,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,OnRespondTimeout,The length of the statement  "                    server.RespondSocket.BeginSendTo (Protocol.CreateAliveResponse (Location' Type' Name' MaxAge)' OnFinished' (IPEndPoint)state); " is 126.
Long Statement,Mono.Ssdp.Internal,NetworkInterfaceInfo,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp.Internal\NetworkInterfaceInfo.cs,GetNetworkInterfaceInfo,The length of the statement  "                "The specified network interface does not have a suitable address for the local hostname: {0}."' host_name)' "networkInterface");" is 129.
Empty Catch Block,Mono.Ssdp,Announcer,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,OnByeBye,The method has an empty catch block.
Empty Catch Block,Mono.Ssdp,MulticastReader,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\MulticastReader.cs,AsyncReadResult,The method has an empty catch block.
Empty Catch Block,Mono.Ssdp.Internal,NetworkInterfaceInfo,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp.Internal\NetworkInterfaceInfo.cs,GetNetworkInterfaceInfo,The method has an empty catch block.
Magic Number,Mono.Ssdp,Announcer,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,GetInterval,The following statement contains a magic number: return TimeSpan.FromMilliseconds (random.Next (MaxAge * 1000 / 2));
Magic Number,Mono.Ssdp,Announcer,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,GetInterval,The following statement contains a magic number: return TimeSpan.FromMilliseconds (random.Next (MaxAge * 1000 / 2));
Magic Number,Mono.Ssdp,Announcer,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,GetInterval,The following statement contains a magic number: return TimeSpan.FromMilliseconds (random.Next (System.Math.Min (Protocol.MaxMX * 1000' mx * 1000)));
Magic Number,Mono.Ssdp,Announcer,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,GetInterval,The following statement contains a magic number: return TimeSpan.FromMilliseconds (random.Next (System.Math.Min (Protocol.MaxMX * 1000' mx * 1000)));
Magic Number,Mono.Ssdp,Browser,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Browser.cs,Start,The following statement contains a magic number: timout_id = client.Dispatcher.Add (TimeSpan.FromSeconds (MX * 3)' OnTimeout);
Magic Number,Mono.Ssdp,BrowseService,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\BrowseService.cs,ParseExpiration,The following statement contains a magic number: match.Success && match.Groups.Count == 2
Missing Default,Mono.Ssdp.Internal,HttpDatagram,C:\research\architectureSmells\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp.Internal\HttpDatagram.cs,DetectDatagramType,The following switch statement is missing a default case: switch (ToUpper (rawDgram[0])) {                 case (byte)'H':                     if (Check (rawDgram' fingerprint_discover_response' out offset)) {                         return HttpDatagramType.DiscoverResponse;                     }                     break;                 case (byte)'M':                     if (Check (rawDgram' fingerprint_msearch' out offset)) {                         return HttpDatagramType.MSearch;                     }                     break;                 case (byte)'N':                     if (Check (rawDgram' fingerprint_notify' out offset)) {                         return HttpDatagramType.Notify;                     }                     break;             }
