Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.Ssdp,BrowseService,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\BrowseService.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,Mono.Ssdp,BrowseService,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\BrowseService.cs,ParseExpiration,Cyclomatic complexity of the method is 9
Long Statement,Mono.Ssdp,Announcer,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,OnRespondTimeout,The length of the statement  "                    server.RespondSocket.BeginSendTo (Protocol.CreateAliveResponse (Location' Type' Name' MaxAge)' OnFinished' (IPEndPoint)state); " is 126.
Long Statement,Mono.Ssdp.Internal,NetworkInterfaceInfo,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp.Internal\NetworkInterfaceInfo.cs,GetNetworkInterfaceInfo,The length of the statement  "                "The specified network interface does not have a suitable address for the local hostname: {0}."' host_name)' "networkInterface"); " is 129.
Empty Catch Block,Mono.Ssdp,Announcer,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,OnByeBye,The method has an empty catch block.
Empty Catch Block,Mono.Ssdp,MulticastReader,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\MulticastReader.cs,AsyncReadResult,The method has an empty catch block.
Empty Catch Block,Mono.Ssdp.Internal,NetworkInterfaceInfo,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp.Internal\NetworkInterfaceInfo.cs,GetNetworkInterfaceInfo,The method has an empty catch block.
Magic Number,Mono.Ssdp,Announcer,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,GetInterval,The following statement contains a magic number: return TimeSpan.FromMilliseconds (random.Next (MaxAge * 1000 / 2));
Magic Number,Mono.Ssdp,Announcer,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,GetInterval,The following statement contains a magic number: return TimeSpan.FromMilliseconds (random.Next (MaxAge * 1000 / 2));
Magic Number,Mono.Ssdp,Announcer,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,GetInterval,The following statement contains a magic number: return TimeSpan.FromMilliseconds (random.Next (System.Math.Min (Protocol.MaxMX * 1000' mx * 1000)));
Magic Number,Mono.Ssdp,Announcer,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Announcer.cs,GetInterval,The following statement contains a magic number: return TimeSpan.FromMilliseconds (random.Next (System.Math.Min (Protocol.MaxMX * 1000' mx * 1000)));
Magic Number,Mono.Ssdp,Browser,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\Browser.cs,Start,The following statement contains a magic number: lock (mutex) {                 CheckDisposed ();                  if (Started) {                     throw new InvalidOperationException ("A browse operation is already running. Cancel it first.");                 } else if (String.IsNullOrEmpty (service_type)) {                     throw new ArgumentNullException ("ServiceType");                 }                                  socket = new MulticastSsdpSocket (client.NetworkInterfaceInfo);                 socket.BeginSendTo (Protocol.CreateDiscoveryRequest (service_type' MX)' OnBrowseRequestFinished);                  // wait for 4 times MX                 if (AutoStop) {                     timout_id = client.Dispatcher.Add (TimeSpan.FromSeconds (MX * 3)' OnTimeout);                 }                                  if (!client.Started) {                     client.Start (false);                 }             }
Magic Number,Mono.Ssdp,BrowseService,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp\BrowseService.cs,ParseExpiration,The following statement contains a magic number: if (!String.IsNullOrEmpty (cc_max_age)) {                  if (cc_max_age_regex == null) {                      cc_max_age_regex = new Regex (@"max-age\s*=\s*([0-9]+)"' RegexOptions.IgnoreCase);                  }                                    Match match = cc_max_age_regex.Match (cc_max_age);                  if (match.Success && match.Groups.Count == 2) {                      ushort expire = 0;                      if (UInt16.TryParse (match.Groups[1].Value' out expire)) {                          Expiration = DateTime.Now + TimeSpan.FromSeconds (expire);                          return;                      }                  }              }
Magic Number,Mono.Ssdp.Internal,HttpDatagram,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp.Internal\HttpDatagram.cs,ParseHeaders,The following statement contains a magic number: for (int i = offset' line_start = offset' sep_start = -1' n = raw.Length - 1; i < n; i++) {                  if (sep_start < 0 && raw[i] == ':') {                      // Account for the first : to denote the kvp split                      sep_start = i;                  } else if (raw[i] == '\r' && raw[i + 1] == '\n') {                      // Process on the line boundary                      var line_length = i - line_start - 1;                      var sep_length = sep_start - line_start;                                            if (line_length > 0 && sep_length > 0) {                          // Encode the kvp                          var key = Encoding.ASCII.GetString (raw' line_start' sep_length);                          var value = Encoding.ASCII.GetString (raw' line_start + sep_length + 1' line_length - sep_length);                                                    // Save the header                          if (!string.IsNullOrEmpty (key)) {                              if (dgram.Headers == null) {                                  dgram.Headers = new WebHeaderCollection ();                              }                                                            dgram.Headers.Add (key.Trim ()' value.Trim ());                          }                      }                                            // Set state for next line                      line_start = i + 2;                      sep_start = -1;                  }              }
Missing Default,Mono.Ssdp.Internal,HttpDatagram,C:\repos\mono_mono-upnp\src\Mono.Ssdp\Mono.Ssdp\Mono.Ssdp.Internal\HttpDatagram.cs,DetectDatagramType,The following switch statement is missing a default case: switch (ToUpper (rawDgram[0])) {                  case (byte)'H':                      if (Check (rawDgram' fingerprint_discover_response' out offset)) {                          return HttpDatagramType.DiscoverResponse;                      }                      break;                  case (byte)'M':                      if (Check (rawDgram' fingerprint_msearch' out offset)) {                          return HttpDatagramType.MSearch;                      }                      break;                  case (byte)'N':                      if (Check (rawDgram' fingerprint_notify' out offset)) {                          return HttpDatagramType.Notify;                      }                      break;              }
