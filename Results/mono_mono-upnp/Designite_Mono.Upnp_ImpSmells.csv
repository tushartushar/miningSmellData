Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mono.Upnp.Xml.Compilation,DelegateDeserializationCompiler,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Xml.Compilation\DelegateDeserializationCompiler.cs,ProcessType,The method has 110 lines of code.
Complex Method,Mono.Upnp,Client,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Client.cs,GetDescription,Cyclomatic complexity of the method is 8
Complex Method,Mono.Upnp.Internal,ServiceControllerBuilder,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\ServiceControllerBuilder.cs,GetDataType,Cyclomatic complexity of the method is 17
Complex Method,Mono.Upnp.Xml.Compilation,DelegateSerializationCompiler<TContext>,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Xml.Compilation\DelegateSerializationCompiler.cs,ProcessProperty,Cyclomatic complexity of the method is 10
Complex Method,Mono.Upnp.Xml.Compilation,DelegateDeserializationCompiler,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Xml.Compilation\DelegateDeserializationCompiler.cs,ProcessType,Cyclomatic complexity of the method is 14
Long Parameter List,Mono.Upnp,Device,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Device.cs,Device,The method has 5 parameters. Parameters: type' udn' friendlyName' manufacturer' modelName
Long Parameter List,Mono.Upnp,Device,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Device.cs,Device,The method has 6 parameters. Parameters: type' udn' friendlyName' manufacturer' modelName' options
Long Parameter List,Mono.Upnp,Device,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Device.cs,Device,The method has 7 parameters. Parameters: type' udn' friendlyName' manufacturer' modelName' options' devices
Long Parameter List,Mono.Upnp,Icon,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Icon.cs,Icon,The method has 5 parameters. Parameters: width' height' depth' mimetype' data
Long Parameter List,Mono.Upnp,Icon,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Icon.cs,Icon,The method has 5 parameters. Parameters: width' height' depth' format' filename
Long Parameter List,Mono.Upnp,Root,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Root.cs,Root,The method has 5 parameters. Parameters: type' udn' friendlyName' manufacturer' modelName
Long Parameter List,Mono.Upnp,Root,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Root.cs,Root,The method has 6 parameters. Parameters: type' udn' friendlyName' manufacturer' modelName' options
Long Parameter List,Mono.Upnp.Xml.Compilation,DelegateSerializationCompiler<TContext>,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Xml.Compilation\DelegateSerializationCompiler.cs,CreateArraySerializer,The method has 6 parameters. Parameters: property' name' namespace' prefix' omitIfEmpty' arrayItemAttribute
Long Identifier,Mono.Upnp.Xml.Compilation,DelegateDeserializationCompiler,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Xml.Compilation\DelegateDeserializationCompiler.cs,,The length of the parameter has_processed_type_deserializers is 32.
Complex Conditional,Mono.Upnp.Internal,ServiceControllerBuilder,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\ServiceControllerBuilder.cs,BuildRelatedStateVariable,The conditional expression  "state_variable.DataType != data_type ||                      state_variable.DefaultValue != default_value ||                      state_variable.AllowedValueRange != allowed_value_range ||                      ((state_variable.AllowedValues != null || allowed_values != null) &&                      state_variable_info.Type != parameterInfo.ParameterType)"  is complex.
Virtual Method Call from Constructor,Mono.Upnp,Server,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Server.cs,Server,The constructor "Server" calls a virtual method "Initialize".
Empty Catch Block,Mono.Upnp.Internal,UpnpServer,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\UpnpServer.cs,OnGetContext,The method has an empty catch block.
Empty Catch Block,Mono.Upnp.Internal,EventClient,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventClient.cs,OnUnsubscribeResponse,The method has an empty catch block.
Empty Catch Block,Mono.Upnp.Xml.Compilation,DelegateDeserializationCompiler,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Xml.Compilation\DelegateDeserializationCompiler.cs,CreateDeserializer,The method has an empty catch block.
Empty Catch Block,Mono.Upnp.Xml.Compilation,DelegateDeserializationCompiler,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Xml.Compilation\DelegateDeserializationCompiler.cs,CreateAttributeDeserializer,The method has an empty catch block.
Magic Number,Mono.Upnp,Client,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Client.cs,ClientServiceEvent,The following statement contains a magic number: var colon = args.Usn.IndexOf (':'' 5);
Magic Number,Mono.Upnp,Client,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Client.cs,ClientServiceEvent,The following statement contains a magic number: var suffix = colon == -1 ? args.Usn : args.Usn.Substring (colon + 2);
Magic Number,Mono.Upnp,Icon,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\Icon.cs,GetData,The following statement contains a magic number: if (data == null) {                  try {                      var request = (HttpWebRequest)WebRequest.Create (Url);                      using (var response = Helper.GetResponse (request)) {                          var ms = new MemoryStream ();                          long bytes_read = 0;                          using (var stream = response.GetResponseStream ()) {                              byte [] buffer = new byte[8192];                              int chunk_bytes_read = 0;                                while ((chunk_bytes_read = stream.Read (buffer' 0' buffer.Length)) > 0) {                                  ms.Write (buffer' 0' chunk_bytes_read);                                  bytes_read += chunk_bytes_read;                              }                          }                          data = ms.ToArray ();                      }                  } catch (WebException e) {                      if (e.Status == WebExceptionStatus.Timeout) {                          Deserializer.CheckDisposed ();                      }                      throw e;                  }              }
Magic Number,Mono.Upnp,TypeInfo,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\TypeInfo.cs,Parse,The following statement contains a magic number: if (sections.Length < 5) {                  throw new UpnpDeserializationException (string.Format (                      @"The type description string contained too few components: ""{0}""."' typeDescription));              }
Magic Number,Mono.Upnp,TypeInfo,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\TypeInfo.cs,Parse,The following statement contains a magic number: var versions = sections[4].Split ('.');
Magic Number,Mono.Upnp,TypeInfo,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp\TypeInfo.cs,Parse,The following statement contains a magic number: type = sections[3];
Magic Number,Mono.Upnp.Control,ServiceController,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\ServiceController.cs,Invoke,The following statement contains a magic number: while (true) {                  try {                      return control_client.Invoke (action.Name' arguments);                  } catch (UpnpControlException) {                      if (retryAttempts > 0) {                          retryAttempts--;                          System.Threading.Thread.Sleep (5000);                      } else {                          throw;                      }                  }              }
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,InvalidAction,The following statement contains a magic number: return new UpnpError (401' Helper.MakeErrorDescription ("Invalid Action"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,InvalidArgs,The following statement contains a magic number: return new UpnpError (402' Helper.MakeErrorDescription ("Invalid Args"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,InvalidVar,The following statement contains a magic number: return new UpnpError (404' Helper.MakeErrorDescription ("Invalid Var"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,ActionFailed,The following statement contains a magic number: return new UpnpError (501' Helper.MakeErrorDescription ("Action Failed"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,ArgumentValueInvalid,The following statement contains a magic number: return new UpnpError (600' Helper.MakeErrorDescription ("Argument Value Invalid"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,ArgumentValueOutOfRange,The following statement contains a magic number: return new UpnpError (601' Helper.MakeErrorDescription ("Argument Value Out Of Range"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,OptionalActionNotImplemented,The following statement contains a magic number: return new UpnpError (602' Helper.MakeErrorDescription ("Optional Action Not Implemented"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,OutOfMemory,The following statement contains a magic number: return new UpnpError (603' Helper.MakeErrorDescription ("Out Of Memory"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,HumanInterventionRequired,The following statement contains a magic number: return new UpnpError (604' Helper.MakeErrorDescription ("Human Intervention Required"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,StringArgumentTooLong,The following statement contains a magic number: return new UpnpError (605' Helper.MakeErrorDescription ("String Argument Too Long"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,ActionNotAuthorized,The following statement contains a magic number: return new UpnpError (606' Helper.MakeErrorDescription ("Action Not Authorized"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,SignatureFailure,The following statement contains a magic number: return new UpnpError (607' Helper.MakeErrorDescription ("Signature Failure"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,SignatureMissing,The following statement contains a magic number: return new UpnpError (608' Helper.MakeErrorDescription ("Signature Missing"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,NotEncrypted,The following statement contains a magic number: return new UpnpError (609' Helper.MakeErrorDescription ("Not Encrypted"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,InvalidSequence,The following statement contains a magic number: return new UpnpError (610' Helper.MakeErrorDescription ("Invalid Sequence"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,InvalidControlUrl,The following statement contains a magic number: return new UpnpError (611' Helper.MakeErrorDescription ("Invalid Control URL"' message));
Magic Number,Mono.Upnp.Control,UpnpError,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Control\UpnpError.cs,NoSuchSession,The following statement contains a magic number: return new UpnpError (612' Helper.MakeErrorDescription ("No Such Session"' message));
Magic Number,Mono.Upnp.Internal,ControlServer,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\ControlServer.cs,HandleContext,The following statement contains a magic number: using (var reader = XmlReader.Create (context.Request.InputStream)) {                  // FIXME this is a workaround for mono bug 523151                  if (reader.MoveToContent () != XmlNodeType.Element) {                      Log.Error (string.Format (                          "A control request from {0} to {1} does not have a SOAP envelope."'                          context.Request.RemoteEndPoint' context.Request.Url));                      return;                  }                    SoapEnvelope<Arguments> requestEnvelope;                    try {                      requestEnvelope = deserializer.Deserialize<SoapEnvelope<Arguments>> (reader);                  } catch (Exception e) {                      Log.Exception (string.Format (                          "Failed to deserialize a control request from {0} to {1}."'                          context.Request.RemoteEndPoint' context.Request.Url)' e);                      return;                  }                                    if (requestEnvelope == null) {                      Log.Error (string.Format (                          "A control request from {0} to {1} does not have a valid SOAP envelope."'                          context.Request.RemoteEndPoint' context.Request.Url));                      return;                  }                                    var arguments = requestEnvelope.Body;                                    if (arguments == null) {                      Log.Error (string.Format (                          "A control request from {0} to {1} does not have a valid argument list."'                          context.Request.RemoteEndPoint' context.Request.Url));                      return;                  }                    if (arguments.ActionName == null) {                      Log.Error (string.Format (                          "A control request from {0} to {1} does not have an action name."'                          context.Request.RemoteEndPoint' context.Request.Url));                      return;                  }                                    ServiceAction action;                    try {                      if (actions.TryGetValue (arguments.ActionName' out action)) {                          Log.Information (string.Format ("{0} invoked {1} on {2}."'                              context.Request.RemoteEndPoint' arguments.ActionName' context.Request.Url));                            Arguments result;                            try {                              result = new Arguments (                                  service_type' action.Name' action.Execute (arguments.Values)' true);                          } catch (UpnpControlException) {                              throw;                          } catch (Exception e) {                              throw new UpnpControlException (UpnpError.Unknown ()' "Unexpected exception."' e);                          }                            // TODO If we're allowing consumer code to subclass Argument' then we need to expose that in a                          // Mono.Upnp.Serializer class. We would then need to put this in a try/catch because custom                          // serialization code could throw.                          serializer.Serialize (new SoapEnvelope<Arguments> (result)' context.Response.OutputStream);                      } else {                          throw new UpnpControlException (UpnpError.InvalidAction ()' string.Format (                              "{0} attempted to invoke the non-existant action {1} on {2}."'                              context.Request.RemoteEndPoint' arguments.ActionName' context.Request.Url));                      }                  } catch (UpnpControlException e) {                      Log.Exception (e);                        context.Response.StatusCode = 500;                      context.Response.StatusDescription = "Internal Server Error";                        // TODO This needs to be a try/catch in the future too.                      serializer.Serialize (new SoapEnvelope<SoapFault<UpnpError>> (                          new SoapFault<UpnpError> (e.UpnpError))' context.Response.OutputStream);                  }              }
Magic Number,Mono.Upnp.Internal,EventServer,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventServer.cs,PublishUpdates,The following statement contains a magic number: request.BeginGetResponse (async => {                  try {                      request.EndGetResponse (async).Close ();                      #pragma warning disable 0420                      Interlocked.Exchange (ref subscriber.ConnectFailures' 0);                      #pragma warning restore 0420                  } catch (Exception e) {                      Log.Exception (string.Format (                          "There was a problem publishing updates to subscription {0}."' subscriber.Sid)' e);                      #pragma warning disable 0420                      Interlocked.Increment (ref subscriber.ConnectFailures);                      #pragma warning restore 0420                      if (subscriber.ConnectFailures == 2) {                          lock (subscribers) {                              if (subscribers.ContainsKey (subscriber.Sid)) {                                  subscribers.Remove (subscriber.Sid);                                  Log.Information (string.Format (                                      "Subscription {0} failed multiple times and was removed."' subscriber.Sid));                              }                          }                      }                  }              }' null);
Magic Number,Mono.Upnp.Internal,EventServer,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventServer.cs,Subscribe,The following statement contains a magic number: var url_string = callback.Length < 3 ? null : callback.Substring (1' callback.Length - 2);
Magic Number,Mono.Upnp.Internal,EventServer,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventServer.cs,Subscribe,The following statement contains a magic number: var url_string = callback.Length < 3 ? null : callback.Substring (1' callback.Length - 2);
Magic Number,Mono.Upnp.Internal,EventServer,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventServer.cs,HandleSubscription,The following statement contains a magic number: if (timeout != "infinite") {                  int time;                  if (timeout.Length > 7 && int.TryParse (timeout.Substring (7)' out time)) {                      subscriber.TimeoutId = dispatcher.Add (TimeSpan.FromSeconds (time)' OnTimeout' subscriber.Sid);                  } else {                      Log.Error (string.Format (                          "Subscription request {0} from {1} to {2} has an illegal TIMEOUT value: {3}"'                          subscriber.Callback' context.Request.RemoteEndPoint' context.Request.Url' timeout));                      return false;                  }              }
Magic Number,Mono.Upnp.Internal,EventServer,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventServer.cs,HandleSubscription,The following statement contains a magic number: if (timeout != "infinite") {                  int time;                  if (timeout.Length > 7 && int.TryParse (timeout.Substring (7)' out time)) {                      subscriber.TimeoutId = dispatcher.Add (TimeSpan.FromSeconds (time)' OnTimeout' subscriber.Sid);                  } else {                      Log.Error (string.Format (                          "Subscription request {0} from {1} to {2} has an illegal TIMEOUT value: {3}"'                          subscriber.Callback' context.Request.RemoteEndPoint' context.Request.Url' timeout));                      return false;                  }              }
Magic Number,Mono.Upnp.Internal,EventServer,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventServer.cs,HandleSubscription,The following statement contains a magic number: context.Response.StatusCode = 200;
Magic Number,Mono.Upnp.Internal,EventClient,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventClient.cs,GeneratePrefix,The following statement contains a magic number: foreach (var address in Dns.GetHostAddresses (Dns.GetHostName ())) {                  if (address.AddressFamily == AddressFamily.InterNetwork) {                      return string.Format (                          "http://{0}:{1}/upnp/event-subscriber/{2}/"' address' random.Next (1024' 5000)' id++);                  }              }
Magic Number,Mono.Upnp.Internal,EventClient,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventClient.cs,GeneratePrefix,The following statement contains a magic number: foreach (var address in Dns.GetHostAddresses (Dns.GetHostName ())) {                  if (address.AddressFamily == AddressFamily.InterNetwork) {                      return string.Format (                          "http://{0}:{1}/upnp/event-subscriber/{2}/"' address' random.Next (1024' 5000)' id++);                  }              }
Magic Number,Mono.Upnp.Internal,EventClient,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventClient.cs,Subscribe,The following statement contains a magic number: lock (this) {                  request.BeginGetResponse (OnSubscribeResponse' request);                  expire_timeout_id = dispatcher.Add (TimeSpan.FromSeconds (30)' OnSubscribeTimeout' request);                  confidently_subscribed = false;              }
Magic Number,Mono.Upnp.Internal,EventClient,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventClient.cs,OnSubscribeResponse,The following statement contains a magic number: lock (this) {                  if (expire_timeout_id != 0) {                      dispatcher.Remove (expire_timeout_id);                  }                  var request = (WebRequest)asyncResult.AsyncState;                  try {                      using (var response = (HttpWebResponse)request.EndGetResponse (asyncResult)) {                          if (response.StatusCode == HttpStatusCode.GatewayTimeout) {                              throw new WebException (""' WebExceptionStatus.Timeout);                          } else if (response.StatusCode != HttpStatusCode.OK) {                              throw new WebException ();                          } else if (!started) {                              return;                          }                          confidently_subscribed = true;                          subscription_uuid = response.Headers["SID"];                          var timeout_header = response.Headers["TIMEOUT"];                          if (timeout_header == "infinate") {                              return;                          }                          var timeout = TimeSpan.FromSeconds (double.Parse (timeout_header.Substring (7)));                          if (timeout > TimeSpan.FromMinutes (2)) {                              timeout -= TimeSpan.FromMinutes (2);                          }                          renew_timeout_id = dispatcher.Add (timeout' OnRenewTimeout);                      }                  } catch (WebException e) {                      Stop ();                      // TODO more info                      Log.Exception (new UpnpException ("Failed to subscribe or renew."' e));                      if (e.Status == WebExceptionStatus.Timeout) {                          //controller.Description.CheckDisposed ();                      }                  }              }
Magic Number,Mono.Upnp.Internal,EventClient,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventClient.cs,OnSubscribeResponse,The following statement contains a magic number: lock (this) {                  if (expire_timeout_id != 0) {                      dispatcher.Remove (expire_timeout_id);                  }                  var request = (WebRequest)asyncResult.AsyncState;                  try {                      using (var response = (HttpWebResponse)request.EndGetResponse (asyncResult)) {                          if (response.StatusCode == HttpStatusCode.GatewayTimeout) {                              throw new WebException (""' WebExceptionStatus.Timeout);                          } else if (response.StatusCode != HttpStatusCode.OK) {                              throw new WebException ();                          } else if (!started) {                              return;                          }                          confidently_subscribed = true;                          subscription_uuid = response.Headers["SID"];                          var timeout_header = response.Headers["TIMEOUT"];                          if (timeout_header == "infinate") {                              return;                          }                          var timeout = TimeSpan.FromSeconds (double.Parse (timeout_header.Substring (7)));                          if (timeout > TimeSpan.FromMinutes (2)) {                              timeout -= TimeSpan.FromMinutes (2);                          }                          renew_timeout_id = dispatcher.Add (timeout' OnRenewTimeout);                      }                  } catch (WebException e) {                      Stop ();                      // TODO more info                      Log.Exception (new UpnpException ("Failed to subscribe or renew."' e));                      if (e.Status == WebExceptionStatus.Timeout) {                          //controller.Description.CheckDisposed ();                      }                  }              }
Magic Number,Mono.Upnp.Internal,EventClient,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventClient.cs,OnSubscribeResponse,The following statement contains a magic number: lock (this) {                  if (expire_timeout_id != 0) {                      dispatcher.Remove (expire_timeout_id);                  }                  var request = (WebRequest)asyncResult.AsyncState;                  try {                      using (var response = (HttpWebResponse)request.EndGetResponse (asyncResult)) {                          if (response.StatusCode == HttpStatusCode.GatewayTimeout) {                              throw new WebException (""' WebExceptionStatus.Timeout);                          } else if (response.StatusCode != HttpStatusCode.OK) {                              throw new WebException ();                          } else if (!started) {                              return;                          }                          confidently_subscribed = true;                          subscription_uuid = response.Headers["SID"];                          var timeout_header = response.Headers["TIMEOUT"];                          if (timeout_header == "infinate") {                              return;                          }                          var timeout = TimeSpan.FromSeconds (double.Parse (timeout_header.Substring (7)));                          if (timeout > TimeSpan.FromMinutes (2)) {                              timeout -= TimeSpan.FromMinutes (2);                          }                          renew_timeout_id = dispatcher.Add (timeout' OnRenewTimeout);                      }                  } catch (WebException e) {                      Stop ();                      // TODO more info                      Log.Exception (new UpnpException ("Failed to subscribe or renew."' e));                      if (e.Status == WebExceptionStatus.Timeout) {                          //controller.Description.CheckDisposed ();                      }                  }              }
Magic Number,Mono.Upnp.Internal,EventClient,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\EventClient.cs,Renew,The following statement contains a magic number: lock (this) {                  var request = WebRequest.Create (url);                  request.Method = "SUBSCRIBE";                  request.Headers.Add ("SID"' subscription_uuid);                  request.Headers.Add ("TIMEOUT"' "Second-1800");                  request.BeginGetResponse (OnSubscribeResponse' request);                  expire_timeout_id = dispatcher.Add (TimeSpan.FromSeconds (30)' OnSubscribeTimeout' request);                  confidently_subscribed = false;              }
Magic Number,Mono.Upnp.Internal,Helper,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Internal\Helper.cs,GetResponse,The following statement contains a magic number: request.Timeout = 30000;
Missing Default,Mono.Upnp.Xml,XmlSerializer<TContext>,C:\repos\mono_mono-upnp\src\Mono.Upnp\Mono.Upnp\Mono.Upnp.Xml\XmlSerializer.cs,WriteXmlDeclaration,The following switch statement is missing a default case: switch (options.XmlDeclarationType) {              case XmlDeclarationType.Version:                  writer.WriteProcessingInstruction ("xml"' @"version=""1.0""");                  break;              case XmlDeclarationType.VersionAndEncoding:                  writer.WriteProcessingInstruction ("xml"' string.Format(                      @"version=""1.0"" encoding=""{0}"""' options.Encoding.HeaderName));                  break;              }
