Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Rebus.Tests.Assumptions,TestAsyncWrapper,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestAsyncWrapper.cs,CompareInvocationSpeeds,Cyclomatic complexity of the method is 11
Long Identifier,Rebus.Tests.Assumptions,TestMinimumRequiredSetOfHeaders,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestMinimumRequiredSetOfHeaders.cs,VerifyMessageCanBeConsumed,The length of the parameter manuallyConstructedTransportMessage is 35.
Long Identifier,Rebus.Tests.Backoff,TestCustomizedBackoff,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestCustomizedBackoff.cs,RunIdleForSomeTime,The length of the parameter receiveCallsWithCustomizedBackoff is 33.
Long Identifier,Rebus.Tests.Compression,TestZipper,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Compression\TestZipper.cs,WorksWithThisBadBoy,The length of the parameter realisticSerializationOfTheObject is 33.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericMessage,The length of the parameter actualTypeStringInstanceRuntimeConstructed is 42.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericMessage,The length of the parameter actualTypeInstanceRuntimeConstructed is 36.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedMessage,The length of the parameter actualTypeStringInstanceRuntimeConstructed is 42.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedMessage,The length of the parameter actualTypeInstanceRuntimeConstructed is 36.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericMessage,The length of the parameter actualTypeStringInstanceRuntimeConstructed is 42.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericMessage,The length of the parameter actualTypeInstanceRuntimeConstructed is 36.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedMessage,The length of the parameter actualTypeStringInstanceRuntimeConstructed is 42.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedMessage,The length of the parameter actualTypeInstanceRuntimeConstructed is 36.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleNestedInGenericMessage,The length of the parameter actualTypeStringInstanceRuntimeConstructed is 42.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleNestedInGenericMessage,The length of the parameter actualTypeInstanceRuntimeConstructed is 36.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedInGenericMessage,The length of the parameter actualTypeStringInstanceRuntimeConstructed is 42.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedInGenericMessage,The length of the parameter actualTypeInstanceRuntimeConstructed is 36.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedInGenericMessage,The length of the parameter actualTypeStringInstanceRuntimeConstructed is 42.
Long Identifier,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedInGenericMessage,The length of the parameter actualTypeInstanceRuntimeConstructed is 36.
Long Identifier,Rebus.Tests.Integration,TestRetry,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetry.cs,CanConfigureNumberOfRetries,The length of the parameter expectedNumberOfAttemptedDeliveries is 35.
Long Identifier,Rebus.Tests.Pipeline,TestAbortMessagePipeline,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestAbortMessagePipeline.cs,,The length of the parameter _shouldAbortPipelineInTransportMessageRoutingFilter is 51.
Long Identifier,Rebus.Tests.Pipeline,TestCompiledPipelineInvoker_PlayAround,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestCompiledPipelineInvoker_PlayAround.cs,,The length of the parameter _asyncFunctionWithParameterWasInvoked is 37.
Long Identifier,Rebus.Tests.Routing,TestRoutingSlip,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestRoutingSlip.cs,CheckHeaders,The length of the parameter routingSlipWasReturnedToSender is 30.
Long Identifier,Rebus.Tests.Routing,TestRoutingSlip,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestRoutingSlip.cs,WorksGreatWithMutableMessagesToo,The length of the parameter routingSlipWasReturnedToSender is 30.
Long Identifier,Rebus.Tests.Routing,TestRoutingSlip,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestRoutingSlip.cs,CanRouteMessageAsExpected_ReturnToSender,The length of the parameter routingSlipWasReturnedToSender is 30.
Long Identifier,Rebus.Tests.Transactions,TransactionContextTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transactions\TransactionContextTests.cs,EnsureTransactionContextIsAvailableInItsOwnCallbacks,The length of the parameter foundTransactionContextInCommittedCallback is 42.
Long Identifier,Rebus.Tests.Transactions,TransactionContextTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transactions\TransactionContextTests.cs,EnsureTransactionContextIsAvailableInItsOwnCallbacks,The length of the parameter foundTransactionContextInAbortedCallback is 40.
Long Identifier,Rebus.Tests.Transactions,TransactionContextTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transactions\TransactionContextTests.cs,EnsureTransactionContextIsAvailableInItsOwnCallbacks,The length of the parameter foundTransactionContextInDisposedCallback is 41.
Long Statement,Rebus.Tests.Addresses,TestReturnAddressAndSenderQueue,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Addresses\TestReturnAddressAndSenderQueue.cs,CorrectlySetsReturnAddressAndSenderAddress_Overridden,The length of the statement  "            Assert.That(senderAddress' Is.EqualTo(QueueName)' "Expected the actual sender's address' because this particular header cannot be set :)");" is 139.
Long Statement,Rebus.Tests.Assumptions,CheckBehaviorWhenCreatingRebusTransactionScopeInsideRebusHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\CheckBehaviorWhenCreatingRebusTransactionScopeInsideRebusHandler.cs,CheckIt,The length of the statement  "                "Did not expect to receive the ThisMessageShouldNotBeSent' because its Rebus handler transaction was rolled back by an exception");" is 131.
Long Statement,Rebus.Tests.Assumptions,BuiltinHandlerActivatorExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestBuiltinHandlerActivatorExtensions.cs,Register,The length of the statement  "                                     ?? throw new ArgumentException($"The type {handlerType} cannot be registered as a Rebus handler this way' because it does not have a default constructor");" is 155.
Long Statement,Rebus.Tests.Assumptions,BuiltinHandlerActivatorExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestBuiltinHandlerActivatorExtensions.cs,Register,The length of the statement  "                                            ?? throw new ArgumentException($"Could not find {nameof(RegisterGeneric)} method on {typeof(BuiltinHandlerActivatorExtensions)}");" is 130.
Long Statement,Rebus.Tests.Backoff,TestBackoffBehaviorWhenBusy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestBackoffBehaviorWhenBusy.cs,DoesNotBackOffAtAllWhenBusy,The length of the statement  "                seconds.Select(time => $"{time}: {new string('.'' waitsPerSecond.GetOrDefault(time))}{new string('*'' waitNoMessagesPerSecond.GetOrDefault(time))}")));" is 151.
Long Statement,Rebus.Tests.Bugs,CustomHeadersAreCloned,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\CustomHeadersAreCloned.cs,ItHasBeenFixed,The length of the statement  "            Assert.That(receivedMessageIds.Distinct().Count()' Is.EqualTo(3)' "Expected three unique message IDs - got: {0}"' string.Join("' "' receivedMessageIds));" is 153.
Long Statement,Rebus.Tests.Compression,TestZipper,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Compression\TestZipper.cs,WorksWithThisBadBoy,The length of the statement  "            var roundtrippedRealisticObject = (ExecutePartialQueryRequest)JsonConvert.DeserializeObject(objectString' serializerSettings);" is 126.
Long Statement,Rebus.Tests.Config,VerifyProperInitializationAndDisposalOfInjectedServices,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Config\VerifyProperInitializationAndDisposalOfInjectedServices.cs,InitializedThingsAreAlwaysDisposed,The length of the statement  "            Assert.That(first.WasDisposed' Is.True' "Expected that the first decorator was disposed too' because it was initialized!!");" is 124.
Long Statement,Rebus.Tests.Config,VerifyProperInitializationAndDisposalOfInjectedServices,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Config\VerifyProperInitializationAndDisposalOfInjectedServices.cs,InitializedThingsAreAlwaysDisposed,The length of the statement  "            Assert.That(failing.WasDisposed' Is.True' "Expected the failing decorator to have been disposed because it too was tracked and implements IDisposable");" is 152.
Long Statement,Rebus.Tests.Config,VerifyProperInitializationAndDisposalOfInjectedServices,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Config\VerifyProperInitializationAndDisposalOfInjectedServices.cs,InitializedThingsAreAlwaysDisposed,The length of the statement  "            Assert.That(last.WasInitialized' Is.False' "Did NOT expect the last decorator to have been initialized' because the failing decorator was registered before this one");" is 167.
Long Statement,Rebus.Tests.DataBus,TestAutomaticClaimCheckWhenMessageIsBig,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestAutomaticClaimCheckWhenMessageIsBig.cs,SetUp,The length of the statement  "                optionsConfigurer.Decorate<ITransport>(c => new ThrowExceptionsOnBigMessagesTransportDecorator(c.Get<ITransport>()' messageSizeLimitBytes));" is 140.
Long Statement,Rebus.Tests.DataBus,TestAutomaticClaimCheckWhenMessageIsBig,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestAutomaticClaimCheckWhenMessageIsBig.cs,WorksWithNormalSend,The length of the statement  "            // serialized to JSON encoded as UTF-8' this will be 3 bytes too big (2 bytes for the two "' and one because we add 1 to the size :))" is 133.
Long Statement,Rebus.Tests.DataBus,TestAutomaticClaimCheckWhenMessageIsBig,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestAutomaticClaimCheckWhenMessageIsBig.cs,WorksWithPublishToo,The length of the statement  "            // serialized to JSON encoded as UTF-8' this will be 3 bytes too big (2 bytes for the two "' and one because we add 1 to the size :))" is 133.
Long Statement,Rebus.Tests.DataBus,ThrowExceptionsOnBigMessagesTransportDecorator,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestAutomaticClaimCheckWhenMessageIsBig.cs,Send,The length of the statement  "                    throw new MessageIsTooBigException($"Message contains {messageSizeBytes} bytes' which is more than the allowed {_messageSizeLimitBytes} bytes");" is 144.
Long Statement,Rebus.Tests.DataBus.FileSystem,FileSystemDataBusStorageFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\FileSystem\FileSystemDataBusStorageFactory.cs,Create,The length of the statement  "            var fileSystemDataBusStorage = new FileSystemDataBusStorage(DirectoryPath' new ConsoleLoggerFactory(false)' _fakeRebusTime);" is 124.
Long Statement,Rebus.Tests.DataBus.Zip,ZippingDataBusStorageDecoratorFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\Zip\ZippingDataBusStorageDecoratorFactory.cs,Create,The length of the statement  "            return new ZippingDataBusStorageDecorator(new InMemDataBusStorage(_inMemDataStore' _fakeRebusTime)' DataCompressionMode.Always);" is 128.
Long Statement,Rebus.Tests.Encryption,TestTimeoutManagerStorageAndEncryption,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestTimeoutManagerStorageAndEncryption.cs,EncryptedMessageIsEncryptedInTimeoutStorage,The length of the statement  "            Console.WriteLine($@"Here's the message contents as it looks to those who happen to be able to look into the timeout storage:" is 125.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericMessage,The length of the statement  "            var expectedTypeString = "Rebus.Tests.Extensions.SimpleGenericMessage`1[[Rebus.Tests.Extensions.SimpleMessage' Rebus.Tests]]' Rebus.Tests";" is 139.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericMessage,The length of the statement  "            var actualTypeStringInstanceRuntimeConstructed = typeof(SimpleGenericMessage<>).MakeGenericType(typeof(SimpleMessage)).GetSimpleAssemblyQualifiedName();" is 152.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedMessage,The length of the statement  "            var expectedTypeString = "Rebus.Tests.Extensions.DeclaringClass+SimpleNestedGenericMessage`1[[Rebus.Tests.Extensions.SimpleMessage' Rebus.Tests]]' Rebus.Tests";" is 160.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedMessage,The length of the statement  "            var actualTypeStringStatic = typeof(DeclaringClass.SimpleNestedGenericMessage<SimpleMessage>).GetSimpleAssemblyQualifiedName();" is 127.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedMessage,The length of the statement  "            var actualTypeStringInstance = new DeclaringClass.SimpleNestedGenericMessage<SimpleMessage>().GetType().GetSimpleAssemblyQualifiedName();" is 137.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedMessage,The length of the statement  "            var actualTypeStringInstanceRuntimeConstructed = typeof(DeclaringClass.SimpleNestedGenericMessage<>).MakeGenericType(typeof(SimpleMessage)).GetSimpleAssemblyQualifiedName();" is 173.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericMessage,The length of the statement  "            var expectedTypeString = "Rebus.Tests.Extensions.ComplexGenericMessage`2[[Rebus.Tests.Extensions.SimpleMessage' Rebus.Tests]' [System.Int32' mscorlib]]' Rebus.Tests";" is 166.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericMessage,The length of the statement  "            var actualTypeStringInstance = new ComplexGenericMessage<SimpleMessage' int>().GetType().GetSimpleAssemblyQualifiedName();" is 122.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericMessage,The length of the statement  "            var actualTypeStringInstanceRuntimeConstructed = typeof(ComplexGenericMessage<'>).MakeGenericType(typeof(SimpleMessage)' typeof(int)).GetSimpleAssemblyQualifiedName();" is 167.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedMessage,The length of the statement  "            var expectedTypeString = "Rebus.Tests.Extensions.DeclaringClass+ComplexNestedGenericMessage`2[[Rebus.Tests.Extensions.SimpleMessage' Rebus.Tests]' [System.Int32' mscorlib]]' Rebus.Tests";" is 187.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedMessage,The length of the statement  "            var actualTypeStringStatic = typeof(DeclaringClass.ComplexNestedGenericMessage<SimpleMessage' int>).GetSimpleAssemblyQualifiedName();" is 133.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedMessage,The length of the statement  "            var actualTypeStringInstance = new DeclaringClass.ComplexNestedGenericMessage<SimpleMessage' int>().GetType().GetSimpleAssemblyQualifiedName();" is 143.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedMessage,The length of the statement  "            var actualTypeStringInstanceRuntimeConstructed = typeof(DeclaringClass.ComplexNestedGenericMessage<'>).MakeGenericType(typeof(SimpleMessage)' typeof(int)).GetSimpleAssemblyQualifiedName();" is 188.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleNestedInGenericMessage,The length of the statement  "            var expectedTypeString = "Rebus.Tests.Extensions.DeclaringGenericClass`1+SimpleNestedMessage[[System.Int32' mscorlib]]' Rebus.Tests";" is 133.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleNestedInGenericMessage,The length of the statement  "            var actualTypeStringInstance = new DeclaringGenericClass<int>.SimpleNestedMessage().GetType().GetSimpleAssemblyQualifiedName();" is 127.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleNestedInGenericMessage,The length of the statement  "            var actualTypeStringInstanceRuntimeConstructed = typeof(DeclaringGenericClass<>.SimpleNestedMessage).MakeGenericType(typeof(int)).GetSimpleAssemblyQualifiedName();" is 163.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedInGenericMessage,The length of the statement  "            var expectedTypeString = "Rebus.Tests.Extensions.DeclaringGenericClass`1+SimpleNestedGenericMessage`1[[System.Int32' mscorlib]' [Rebus.Tests.Extensions.SimpleMessage' Rebus.Tests]]' Rebus.Tests";" is 195.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedInGenericMessage,The length of the statement  "            var actualTypeStringStatic = typeof(DeclaringGenericClass<int>.SimpleNestedGenericMessage<SimpleMessage>).GetSimpleAssemblyQualifiedName();" is 139.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedInGenericMessage,The length of the statement  "            var actualTypeStringInstance = new DeclaringGenericClass<int>.SimpleNestedGenericMessage<SimpleMessage>().GetType().GetSimpleAssemblyQualifiedName();" is 149.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForSimpleGenericNestedInGenericMessage,The length of the statement  "            var actualTypeStringInstanceRuntimeConstructed = typeof(DeclaringGenericClass<>.SimpleNestedGenericMessage<>).MakeGenericType(typeof(int)' typeof(SimpleMessage)).GetSimpleAssemblyQualifiedName();" is 195.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedInGenericMessage,The length of the statement  "            var expectedTypeString = "Rebus.Tests.Extensions.DeclaringGenericClass`1+ComplexNestedGenericMessage`2[[System.Int32' mscorlib]' [Rebus.Tests.Extensions.SimpleMessage' Rebus.Tests]' [System.Double' mscorlib]]' Rebus.Tests";" is 223.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedInGenericMessage,The length of the statement  "            var actualTypeStringStatic = typeof(DeclaringGenericClass<int>.ComplexNestedGenericMessage<SimpleMessage' double>).GetSimpleAssemblyQualifiedName();" is 148.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedInGenericMessage,The length of the statement  "            var actualTypeStringInstance = new DeclaringGenericClass<int>.ComplexNestedGenericMessage<SimpleMessage' double>().GetType().GetSimpleAssemblyQualifiedName();" is 158.
Long Statement,Rebus.Tests.Extensions,TestTypeExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\TestTypeExtensions.cs,SimplifiedNameForComplexGenericNestedInGenericMessage,The length of the statement  "            var actualTypeStringInstanceRuntimeConstructed = typeof(DeclaringGenericClass<>.ComplexNestedGenericMessage<'>).MakeGenericType(typeof(int)' typeof(SimpleMessage)' typeof(double)).GetSimpleAssemblyQualifiedName();" is 213.
Long Statement,Rebus.Tests.Integration,TestAsyncHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestAsyncHandler.cs,AppendEvent,The length of the statement  "            var text = $"event={eventNumber};thread={Thread.CurrentThread.ManagedThreadId};time={DateTime.UtcNow:mm:ss};context={AmbientTransactionContext.Current}";" is 153.
Long Statement,Rebus.Tests.Integration,TestFailFast,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFailFast.cs,ItUsesSimpleRetryStrategyWhenCustomException,The length of the statement  "            Assert.That(failedMessage.Headers.GetValue(Headers.ErrorDetails)' Contains.Substring($"{numberOfRetries} unhandled exceptions"));" is 129.
Long Statement,Rebus.Tests.Integration,TestFailFastWhenMessageCannotBeDispatchedToAnyHandlers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFailFastWhenMessageCannotBeDispatchedToAnyHandlers.cs,OnlyDeliversMessageOnceWhenThereIsNoHandlerForIt,The length of the statement  "            Assert.That(numberOfWarnings' Is.EqualTo(1)' "Expected onle one single WARNING' because the delivery should not be retried");" is 125.
Long Statement,Rebus.Tests.Integration,TestFailFastWhenMessageCannotBeDispatchedToAnyHandlers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFailFastWhenMessageCannotBeDispatchedToAnyHandlers.cs,OnlyDeliversMessageOnceWhenThereIsNoHandlerForIt,The length of the statement  "            Assert.That(numberOfErrors' Is.EqualTo(1)' "Expected an error message saying that the message is moved to the error queue");" is 124.
Long Statement,Rebus.Tests.Integration,TestFileSystemBasedTransportAndCompetingConsumers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFileSystemBasedTransportAndCompetingConsumers.cs,ItWorks,The length of the statement  "{string.Join(Environment.NewLine' messageCounts.Where(kvp => kvp.Value > 1).Select(kvp => $"    {kvp.Key}: {kvp.Value}"))}" is 122.
Long Statement,Rebus.Tests.Integration,TestIdempotentSagas,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestIdempotentSagas.cs,ItWorks,The length of the statement  "                "Not all counts were exactly one: {0} - this is a sign that the saga was not truly idempotent' as the redelivery should have been caught!"'" is 139.
Long Statement,Rebus.Tests.Integration,TestImprovedInjectionistExceptions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestImprovedInjectionistExceptions.cs,UsedToLookPrettyBad,The length of the statement  "                Assert.That(exception.InnerException.Message' Is.EqualTo("oh no!! THIS is the actual exception - everything else is noise"));" is 125.
Long Statement,Rebus.Tests.Integration,TestInMemDataBusCleanup,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestInMemDataBusCleanup.cs,ItWorks_KeepLastFiveAttachments,The length of the statement  "            Assert.That(attachments.Count' Is.EqualTo(1)' $@"Expected 1 single attachment (because the handling of each attachment would delete all previous attachments)' but found the following IDs:" is 187.
Long Statement,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,OnlyLogsOneSingleLineWhenForwarding,The length of the statement  "            Assert.That(significantStuff.Count' Is.EqualTo(1)' @"Only expected one single ERROR level log line with all the action - got this: " is 130.
Long Statement,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,MakesOnlyOneSingleDeliveryAttempt,The length of the statement  "            Assert.That(deliveryAttempts' Is.EqualTo(1)' "Only expected one single delivery attempt because we have disabled retries for ApplicationException");" is 148.
Long Statement,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,MakesOnlyOneSingleDeliveryAttemptWhenForwardingOnExceptionThatSatisfiesPredicate,The length of the statement  "            Assert.That(deliveryAttempts' Is.EqualTo(1)' "Only expected one single delivery attempt because we threw a CustomException with ErrorCode = SecretErrorCode");" is 158.
Long Statement,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,PerformsTheUsualRetriesOnExceptionsThatDoNotSatisfyThePredicate,The length of the statement  "            Assert.That(deliveryAttempts' Is.EqualTo(5)' @"Expected the usual retries because we threw a CustomException that did not satisfy the predicate - here's what happened:" is 167.
Long Statement,Rebus.Tests.Integration,TestSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSecondLevelRetries.cs,FailedMessageAllowsForAccessingHeaders,The length of the statement  "                Console.WriteLine("-------------------------------------------------------------------------------------------------------------------------------------------------------------");" is 179.
Long Statement,Rebus.Tests.Integration,TestSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSecondLevelRetries.cs,FailedMessageAllowsForAccessingHeaders,The length of the statement  "                Console.WriteLine("-------------------------------------------------------------------------------------------------------------------------------------------------------------");" is 179.
Long Statement,Rebus.Tests.Integration,TestSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSecondLevelRetries.cs,FailedMessageAllowsForAccessingHeaders,The length of the statement  "                Console.WriteLine("-------------------------------------------------------------------------------------------------------------------------------------------------------------");" is 179.
Long Statement,Rebus.Tests.Integration,TestSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSecondLevelRetries.cs,FailedMessageAllowsForAccessingHeaders,The length of the statement  "                Console.WriteLine("-------------------------------------------------------------------------------------------------------------------------------------------------------------");" is 179.
Long Statement,Rebus.Tests.Integration,TestSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSecondLevelRetries.cs,FailedMessageAllowsForAccessingHeaders,The length of the statement  "                Console.WriteLine("-------------------------------------------------------------------------------------------------------------------------------------------------------------");" is 179.
Long Statement,Rebus.Tests.Integration,TestSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSecondLevelRetries.cs,FailedMessageAllowsForAccessingHeaders,The length of the statement  "                Console.WriteLine("-------------------------------------------------------------------------------------------------------------------------------------------------------------");" is 179.
Long Statement,Rebus.Tests.Integration,TestSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSecondLevelRetries.cs,FailedMessageAllowsForAccessingHeaders,The length of the statement  "                Console.WriteLine("-------------------------------------------------------------------------------------------------------------------------------------------------------------");" is 179.
Long Statement,Rebus.Tests.Integration,TestSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSecondLevelRetries.cs,FailedMessageAllowsForAccessingHeaders,The length of the statement  "                Console.WriteLine("-------------------------------------------------------------------------------------------------------------------------------------------------------------");" is 179.
Long Statement,Rebus.Tests.Integration,TestSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSecondLevelRetries.cs,FailedMessageAllowsForAccessingHeaders,The length of the statement  "                Console.WriteLine("-------------------------------------------------------------------------------------------------------------------------------------------------------------");" is 179.
Long Statement,Rebus.Tests.Logging,TestAbstractRebusLoggerFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Logging\TestAbstractRebusLoggerFactory.cs,CompareRenderingTimes,The length of the statement  "            const string messageTemplate = "Hello {0}' my name is {1} and I am {2} years old. I like to drink {3} in my {4} - you can say that it is my {5}";" is 145.
Long Statement,Rebus.Tests.Logging,TestAbstractRebusLoggerFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Logging\TestAbstractRebusLoggerFactory.cs,CompareRenderingTimes,The length of the statement  "            Console.WriteLine($"Performing {iterations} renderings took {elapsed.TotalMilliseconds:0.0} ms - that's {iterations / elapsed.TotalMilliseconds:0.0} /ms");" is 155.
Long Statement,Rebus.Tests.Logging,TestAbstractRebusLoggerFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Logging\TestAbstractRebusLoggerFactory.cs,CheckOneParticularExample,The length of the statement  "            var message = OpenAbstractRebusLoggerFactory.Render("Initializing HTTP forwarder with URI {uri}"' new Uri("http://localhustler/whambamboozle"));" is 144.
Long Statement,Rebus.Tests.Logging,TestAbstractRebusLoggerFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Logging\TestAbstractRebusLoggerFactory.cs,GetScenarios,The length of the statement  "                new InterpolationScenario("What happens when you forget the placeholder?"' "What happens when you forget the placeholder?"' DateTime.Today' TimeSpan.FromMinutes(1))'" is 165.
Long Statement,Rebus.Tests.Logging,TestAbstractRebusLoggerFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Logging\TestAbstractRebusLoggerFactory.cs,GetScenarios,The length of the statement  "                new InterpolationScenario("What 23 00:01:00 ??? ??? too many placeholders?"' "What {happens} {when} {there} {is} too many placeholders?"' 23' TimeSpan.FromMinutes(1))'" is 167.
Long Statement,Rebus.Tests.Logging,TestAbstractRebusLoggerFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Logging\TestAbstractRebusLoggerFactory.cs,GetScenarios,The length of the statement  "                new InterpolationScenario(@"Sending ""msg-A"" to [""queue-a""' ""queue-b""]"' "Sending {messageLabel} to {queueNames}"' "msg-A"' new[]{ "queue-a"' "queue-b" })'" is 160.
Long Statement,Rebus.Tests.Pipeline,TestAbortMessagePipeline,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestAbortMessagePipeline.cs,CanAlsoNotAbortMessageProcessing,The length of the statement  "            Assert.That(_events.ToArray()' Is.EqualTo(new[] { "FirstHandler"' "SecondHandler" })' "got {0}"' string.Join("' "' _events));" is 125.
Long Statement,Rebus.Tests.Pipeline,TestCompiledPipelineInvoker,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestCompiledPipelineInvoker.cs,CheckTiming,The length of the statement  "                var stepContext = new IncomingStepContext(new TransportMessage(new Dictionary<string' string>()' new byte[0])' GetFakeTransactionContext());" is 140.
Long Statement,Rebus.Tests.Pipeline,TestDefaultPipelineInvoker,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestDefaultPipelineInvoker.cs,CheckTiming,The length of the statement  "                var stepContext = new IncomingStepContext(new TransportMessage(new Dictionary<string' string>()' new byte[0])' GetFakeTransactionContext());" is 140.
Long Statement,Rebus.Tests.Pipeline,TestPipelineInvocation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestPipelineInvocation.cs,ComparePerf,The length of the statement  "            Console.WriteLine($"{iterations} iterations took {elapsed.TotalSeconds:0.0} s - that's {iterations / elapsed.TotalSeconds:0.0} iterations/s");" is 142.
Long Statement,Rebus.Tests.Retry.PoisonQueues,TestPoisonQueueErrorHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Retry\PoisonQueues\TestPoisonQueueErrorHandler.cs,TruncatesErrorDetailsIfTheyAreTooLong,The length of the statement  "            Assert.That(truncatedErrorDetails.Length' Is.LessThanOrEqualTo(_simpleRetryStrategySettings.ErrorDetailsHeaderMaxLength));" is 122.
Long Statement,Rebus.Tests.Routing,TestDefaultReturnAddress,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestDefaultReturnAddress.cs,AssignsDefaultReturnAddressOnSentMessage,The length of the statement  "            Assert.That(returnAddress' Is.EqualTo("a totally different queue name")' "Expected a totally different queue name here");" is 121.
Long Statement,Rebus.Tests.Routing,TestRoutingSlip,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestRoutingSlip.cs,CanRouteMessageAsExpected_NeverReturn,The length of the statement  "            Assert.That(warningLinesOrWorse.Any' Is.False' $@"Did NOT expect any warnings or errors in the log - got these lines with WARN level or above:" is 142.
Long Statement,Rebus.Tests.Routing,TestTransportMessageOperations,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestTransportMessageOperations.cs,CanForwardMessageToErrorQueue,The length of the statement  "                await bus.Advanced.TransportMessage.Forward(ForwardedMessagesQueue' new Dictionary<string' string> {{"testheader"' "OK"}});" is 123.
Long Statement,Rebus.Tests.Sagas,TestConflictResolution,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestConflictResolution.cs,ItWorks,The length of the statement  "            resetEvent.WaitOrDie(TimeSpan.FromSeconds(4)' "Did not receive the AllDone message!! One or more messages must have been moved to the error queue!");" is 149.
Long Statement,Rebus.Tests.Sagas,TestSagaInstanceLocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestSagaInstanceLocking.cs,NotASingleConcurrencyExceptionPlease,The length of the statement  "            Assert.That(errors.Count' Is.EqualTo(0)' $@"Did not expect any errors in the log' but the following errors were present:" is 120.
Long Statement,Rebus.Tests.Snapshots,FileSystemSagaSnapshotStorageFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Snapshots\FileSystemSnapshotStorageContractTests.cs,Parse,The length of the statement  "                    ?? throw new KeyNotFoundException($"Could not find saga data metadata with key '{SagaAuditingMetadataKeys.SagaDataType}'");" is 123.
Long Statement,Rebus.Tests.Synchronous,TestSyncBusApiParity,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusApiParity.cs,CompareApis,The length of the statement  "            throw new AssertionException($@"The original async {originalApi} API compared to the sync {synchronousVersion} API is missing the following operations:" is 151.
Long Statement,Rebus.Tests.Synchronous,TestSyncBusApiParity,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusApiParity.cs,CompareApis,The length of the statement  "{string.Join(Environment.NewLine' missingOnSynchronousApi.Select(m => $"    {FormatMethodSignature(m.Method)} - {m.ErrorReason}"))}" is 131.
Long Statement,Rebus.Tests.Synchronous,TestSyncBusApiParity,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusApiParity.cs,FormatMethodSignature,The length of the statement  "            return $"{FormatType(methodInfo.ReturnType)} {methodInfo.Name}({string.Join("' "' methodInfo.GetParameters().Select(p => $"{FormatType(p.ParameterType)} {p.Name}"))})";" is 168.
Long Statement,Rebus.Tests.Synchronous,TestSyncBusApiParity,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusApiParity.cs,IsReplicated,The length of the statement  "            var synchronousMethod = synchronousVersion.GetMethod(name' originalMethod.GetParameters().Select(p => p.ParameterType).ToArray());" is 130.
Long Statement,Rebus.Tests.Synchronous,TestSyncBusApiParity,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusApiParity.cs,IsReplicated,The length of the statement  "            foreach (var parameterPair in originalMethodParameters.Zip(replicatedMethodParameters' (p1' p2) => new { Original = p1' Replicated = p2 }))" is 139.
Long Statement,Rebus.Tests.Synchronous,TestSyncBusApiParity,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusApiParity.cs,IsReplicated,The length of the statement  "                if (parameterPair.Original.ParameterType != parameterPair.Replicated.ParameterType) return "Parameter types do not match";" is 122.
Long Statement,Rebus.Tests.Timeouts,TestExternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestExternalTimeoutManager.cs,ItWorksEvenThoughDeferredMessageIsAccidentallyReceived,The length of the statement  "            _gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(8.5)' "Message was not received within 8'5 seconds (which it should have been since it was only deferred 5 seconds)");" is 164.
Long Statement,Rebus.Tests.Timeouts,TestExternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestExternalTimeoutManager.cs,ItWorksEvenThoughDeferredMessageIsAccidentallyReceived,The length of the statement  "            Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromSeconds(4.5))' "It must take more than 5 second to get the message back (although we allow for a little bit of tolerance in this test....)");" is 200.
Long Statement,Rebus.Tests.Timeouts,TestExternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestExternalTimeoutManager.cs,ItWorks,The length of the statement  "            _gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(8.5)' "Message was not received within 8'5 seconds (which it should have been since it was only deferred 5 seconds)");" is 164.
Long Statement,Rebus.Tests.Timeouts,TestExternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestExternalTimeoutManager.cs,ItWorks,The length of the statement  "            Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromSeconds(5))' "It must take more than 5 second to get the message back");" is 131.
Long Statement,Rebus.Tests.Timers,CompareAsyncTasks<TTaskFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\CompareAsyncTasks.cs,CheckTimerDrift,The length of the statement  "            Console.WriteLine($"Timer {task.GetType().Name} drifted {drift.TotalSeconds:0.000} s over duration {testDurationSeconds} s");" is 125.
Long Statement,Rebus.Tests.Timers,TestAsyncTask<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\TestAsyncTask.cs,WorksWithSomeKindOfAccuracy,The length of the statement  "            Assert.That(events.Count' Is.GreaterThanOrEqualTo(3)' "TPL-based tasks are wildly inaccurate and can sometimes add 2-300 ms per Task.Delay");" is 141.
Long Statement,Rebus.Tests.Transactions,TestUnitOfWork,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transactions\TestUnitOfWork.cs,HandlesExceptionOnCommitAsOrdinaryException,The length of the statement  "            Assert.That(errors' Is.EqualTo(1)' "Expected exactly 1 error: One that says that the message is moved to the error queue");" is 123.
Long Statement,Rebus.Tests.Transactions,TransactionContextTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transactions\TransactionContextTests.cs,EnsureTransactionContextIsAvailableInItsOwnCallbacks,The length of the statement  "                context.TransactionContext.OnDisposed(transactionContext => foundTransactionContextInDisposedCallback = transactionContext != null);" is 132.
Long Statement,Rebus.Tests.Transport.FileSystem,FileSystemTransportFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transport\FileSystem\FileSystemTransportFactory.cs,Create,The length of the statement  "            var fileSystemTransport = new FileSystemTransport(_baseDirectory' inputQueueAddress' new FileSystemTransportOptions()' new FakeRebusTime());" is 140.
Long Statement,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,WaitDoesPerformDoesPause,The length of the statement  "            Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromMilliseconds(450)).And.LessThan(TimeSpan.FromMilliseconds(550)));" is 124.
Long Statement,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,WaitAsyncDoesPause,The length of the statement  "	        Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromMilliseconds(450)).And.LessThan(TimeSpan.FromMilliseconds(550)));" is 124.
Long Statement,Rebus.Tests.Workers,ThreadWorkerIntegrationTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\ThreadWorkerIntegrationTests.cs,Dispose_WaitsForTaskToComplete_WhenItTakesLessThanDefinedTimeout,The length of the statement  "            Assert.That(timer.Elapsed' Is.GreaterThan(taskTakingTime.Subtract(tolerance)).And.LessThan(taskTakingTime.Add(tolerance)));" is 123.
Magic Number,Rebus.Tests.Addresses,TestReturnAddressAndSenderQueue,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Addresses\TestReturnAddressAndSenderQueue.cs,CorrectlySetsReturnAddressAndSenderAddress_Defaults,The following statement contains a magic number: messageHandled.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Addresses,TestReturnAddressAndSenderQueue,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Addresses\TestReturnAddressAndSenderQueue.cs,CorrectlySetsReturnAddressAndSenderAddress_Overridden,The following statement contains a magic number: messageHandled.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Assumptions,CheckBehaviorWhenCreatingRebusTransactionScopeInsideRebusHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\CheckBehaviorWhenCreatingRebusTransactionScopeInsideRebusHandler.cs,CheckIt,The following statement contains a magic number: Assert.That(rolledBackMessageReceived.WaitOne(TimeSpan.FromSeconds(3))' Is.False'                 "Did not expect to receive the ThisMessageShouldNotBeSent' because its Rebus handler transaction was rolled back by an exception");
Magic Number,Rebus.Tests.Assumptions,TestAsyncWrapper,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestAsyncWrapper.cs,CompareInvocationSpeeds,The following statement contains a magic number: const int iterations = 100;
Magic Number,Rebus.Tests.Assumptions,TestConcurrentDictionary,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestConcurrentDictionary.cs,NizzleName,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(__ =>             {                 dictionary.GetOrAdd("bimse"' _ =>                 {                     Console.WriteLine("waiting");                     Thread.Sleep(1000);                     Console.WriteLine("done");                     return "hej";                 });             });
Magic Number,Rebus.Tests.Assumptions,TestConcurrentDictionary,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestConcurrentDictionary.cs,NizzleName,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(__ =>             {                 dictionary.GetOrAdd("bimse"' _ =>                 {                     Console.WriteLine("waiting");                     Thread.Sleep(1000);                     Console.WriteLine("done");                     return "hej";                 });             });
Magic Number,Rebus.Tests.Assumptions,TestConcurrentDictionary,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestConcurrentDictionary.cs,NizzleName,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,Rebus.Tests.Assumptions,TestLockContention,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestLockContention.cs,TakeTime,The following statement contains a magic number: const int count = 1000000;
Magic Number,Rebus.Tests.Assumptions,TestLockContention,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestLockContention.cs,GetIncomingStepContext,The following statement contains a magic number: var headers = new Dictionary<string' string>             {                 {Headers.MessageId' messageId }'                 {"number"' (number%20).ToString()}             };
Magic Number,Rebus.Tests.Assumptions,TestLockContention,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestLockContention.cs,GetSteps,The following statement contains a magic number: yield return new NewEnforceExclusiveSagaAccessIncomingStep(10' CancellationToken.None);
Magic Number,Rebus.Tests.Assumptions,TestLockContention,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestLockContention.cs,GetSteps,The following statement contains a magic number: yield return new NewEnforceExclusiveSagaAccessIncomingStep(20' CancellationToken.None);
Magic Number,Rebus.Tests.Assumptions,TestLockContention,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestLockContention.cs,GetSteps,The following statement contains a magic number: yield return new NewEnforceExclusiveSagaAccessIncomingStep(50' CancellationToken.None);
Magic Number,Rebus.Tests.Assumptions,TestLockContention,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestLockContention.cs,GetSteps,The following statement contains a magic number: yield return new NewEnforceExclusiveSagaAccessIncomingStep(100' CancellationToken.None);
Magic Number,Rebus.Tests.Assumptions,TestMinimumRequiredSetOfHeaders,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestMinimumRequiredSetOfHeaders.cs,VerifyMessageCanBeConsumed,The following statement contains a magic number: var randomTime = new DateTimeOffset(1979' 3' 19' 14' 00' 00' TimeSpan.FromHours(1));
Magic Number,Rebus.Tests.Assumptions,TestMinimumRequiredSetOfHeaders,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestMinimumRequiredSetOfHeaders.cs,VerifyMessageCanBeConsumed,The following statement contains a magic number: var randomTime = new DateTimeOffset(1979' 3' 19' 14' 00' 00' TimeSpan.FromHours(1));
Magic Number,Rebus.Tests.Assumptions,TestMinimumRequiredSetOfHeaders,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestMinimumRequiredSetOfHeaders.cs,VerifyMessageCanBeConsumed,The following statement contains a magic number: var randomTime = new DateTimeOffset(1979' 3' 19' 14' 00' 00' TimeSpan.FromHours(1));
Magic Number,Rebus.Tests.Assumptions,TestMinimumRequiredSetOfHeaders,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestMinimumRequiredSetOfHeaders.cs,VerifyMessageCanBeConsumed,The following statement contains a magic number: var randomTime = new DateTimeOffset(1979' 3' 19' 14' 00' 00' TimeSpan.FromHours(1));
Magic Number,Rebus.Tests.Assumptions,TestMinimumRequiredSetOfHeaders,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestMinimumRequiredSetOfHeaders.cs,VerifyMessageCanBeConsumed,The following statement contains a magic number: messageLooksGood.WaitOrDie(TimeSpan.FromSeconds(200));
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,ItWorks,The following statement contains a magic number: var command = new DerivedTaskCommand             {                 Delays =                 {                     TimeSpan.FromSeconds(1)'                     TimeSpan.FromSeconds(2)'                     TimeSpan.FromSeconds(3)'                     TimeSpan.FromSeconds(4)'                     TimeSpan.FromSeconds(5)'                 }             };
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,ItWorks,The following statement contains a magic number: var command = new DerivedTaskCommand             {                 Delays =                 {                     TimeSpan.FromSeconds(1)'                     TimeSpan.FromSeconds(2)'                     TimeSpan.FromSeconds(3)'                     TimeSpan.FromSeconds(4)'                     TimeSpan.FromSeconds(5)'                 }             };
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,ItWorks,The following statement contains a magic number: var command = new DerivedTaskCommand             {                 Delays =                 {                     TimeSpan.FromSeconds(1)'                     TimeSpan.FromSeconds(2)'                     TimeSpan.FromSeconds(3)'                     TimeSpan.FromSeconds(4)'                     TimeSpan.FromSeconds(5)'                 }             };
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,ItWorks,The following statement contains a magic number: var command = new DerivedTaskCommand             {                 Delays =                 {                     TimeSpan.FromSeconds(1)'                     TimeSpan.FromSeconds(2)'                     TimeSpan.FromSeconds(3)'                     TimeSpan.FromSeconds(4)'                     TimeSpan.FromSeconds(5)'                 }             };
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,MessageLooksRightWhenReceived,The following statement contains a magic number: await activator.Bus.SendLocal(new DerivedTaskCommand                 {                     Delays =                     {                         TimeSpan.FromSeconds(1)'                         TimeSpan.FromSeconds(2)'                         TimeSpan.FromSeconds(3)'                         TimeSpan.FromSeconds(4)'                         TimeSpan.FromSeconds(5)'                     }                 });
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,MessageLooksRightWhenReceived,The following statement contains a magic number: await activator.Bus.SendLocal(new DerivedTaskCommand                 {                     Delays =                     {                         TimeSpan.FromSeconds(1)'                         TimeSpan.FromSeconds(2)'                         TimeSpan.FromSeconds(3)'                         TimeSpan.FromSeconds(4)'                         TimeSpan.FromSeconds(5)'                     }                 });
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,MessageLooksRightWhenReceived,The following statement contains a magic number: await activator.Bus.SendLocal(new DerivedTaskCommand                 {                     Delays =                     {                         TimeSpan.FromSeconds(1)'                         TimeSpan.FromSeconds(2)'                         TimeSpan.FromSeconds(3)'                         TimeSpan.FromSeconds(4)'                         TimeSpan.FromSeconds(5)'                     }                 });
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,MessageLooksRightWhenReceived,The following statement contains a magic number: await activator.Bus.SendLocal(new DerivedTaskCommand                 {                     Delays =                     {                         TimeSpan.FromSeconds(1)'                         TimeSpan.FromSeconds(2)'                         TimeSpan.FromSeconds(3)'                         TimeSpan.FromSeconds(4)'                         TimeSpan.FromSeconds(5)'                     }                 });
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,MessageLooksRightWhenReceived,The following statement contains a magic number: messageWasReceived.WaitOrDie(TimeSpan.FromSeconds(3));
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,MessageLooksRightWhenReceived,The following statement contains a magic number: Assert.That(receivedMessage.Delays' Is.EqualTo(new[]                 {                     TimeSpan.FromSeconds(1)'                     TimeSpan.FromSeconds(2)'                     TimeSpan.FromSeconds(3)'                     TimeSpan.FromSeconds(4)'                     TimeSpan.FromSeconds(5)'                 }));
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,MessageLooksRightWhenReceived,The following statement contains a magic number: Assert.That(receivedMessage.Delays' Is.EqualTo(new[]                 {                     TimeSpan.FromSeconds(1)'                     TimeSpan.FromSeconds(2)'                     TimeSpan.FromSeconds(3)'                     TimeSpan.FromSeconds(4)'                     TimeSpan.FromSeconds(5)'                 }));
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,MessageLooksRightWhenReceived,The following statement contains a magic number: Assert.That(receivedMessage.Delays' Is.EqualTo(new[]                 {                     TimeSpan.FromSeconds(1)'                     TimeSpan.FromSeconds(2)'                     TimeSpan.FromSeconds(3)'                     TimeSpan.FromSeconds(4)'                     TimeSpan.FromSeconds(5)'                 }));
Magic Number,Rebus.Tests.Assumptions,TestSpecificSerializationExample,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestSpecificSerializationExample.cs,MessageLooksRightWhenReceived,The following statement contains a magic number: Assert.That(receivedMessage.Delays' Is.EqualTo(new[]                 {                     TimeSpan.FromSeconds(1)'                     TimeSpan.FromSeconds(2)'                     TimeSpan.FromSeconds(3)'                     TimeSpan.FromSeconds(4)'                     TimeSpan.FromSeconds(5)'                 }));
Magic Number,Rebus.Tests.Assumptions,TestString,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestString.cs,SplittingCanYieldEmptyTokens,The following statement contains a magic number: Assert.That(tokens.Length' Is.EqualTo(2));
Magic Number,Rebus.Tests.Assumptions,TestTask,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestTask.cs,CanCancelTask,The following statement contains a magic number: var task = Task.Run(async () =>             {                 try                 {                     events.Add("task started");                      while (true)                     {                         cancellationToken.ThrowIfCancellationRequested();                          events.Add("waiting...");                         await Task.Delay(1000' cancellationToken);                     }                  }                 catch (Exception exception)                 {                     events.Add(exception.ToString());                 }             }' cancellationToken);
Magic Number,Rebus.Tests.Assumptions,TestTask,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Assumptions\TestTask.cs,CanCancelTask,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Rebus.Tests.Auditing,TestMessageAuditing,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Auditing\TestMessageAuditing.cs,DoesNotCopyFailedMessage,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,Rebus.Tests.Auditing,TestMessageAuditing,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Auditing\TestMessageAuditing.cs,CopiesProperlyHandledMessageToAuditQueue,The following statement contains a magic number: gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(5));
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Configure.With(activator)                 .Transport(t =>                 {                     t.UseInMemoryTransport(new InMemNetwork()' "backoff-check");                     t.Decorate(c =>                     {                         var transport = c.Get<ITransport>();                         transportDecorator.Transport = transport;                         return transportDecorator;                     });                 })                 .Options(o =>                 {                     o.SetBackoffTimes(                         // first ten seconds                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                         TimeSpan.FromSeconds(0.01)'                          // next ten seconds                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                         TimeSpan.FromSeconds(0.1)'                          // the rest of the time                         TimeSpan.FromSeconds(0.5)                         );                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(30));
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: var firstPeriodMedian = results.Skip(0).Take(10).GetMedianBy(g => g.Time);
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: var secondPeriodMedian = results.Skip(10).Take(10).GetMedianBy(g => g.Time);
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: var secondPeriodMedian = results.Skip(10).Take(10).GetMedianBy(g => g.Time);
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: var thirdPeriodMedian = results.Skip(20).Take(10).GetMedianBy(g => g.Time);
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: var thirdPeriodMedian = results.Skip(20).Take(10).GetMedianBy(g => g.Time);
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Assert.That(firstPeriodMedian.Count' Is.GreaterThanOrEqualTo(4*secondPeriodMedian.Count)'                  "Expected receive calls during the first period to be more than four times as frequent as during the second period");
Magic Number,Rebus.Tests.Backoff,BackoffBehaviorIntegrationTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\BackoffBehaviorIntegrationTest.cs,CheckIdleBehavior,The following statement contains a magic number: Assert.That(secondPeriodMedian.Count' Is.GreaterThanOrEqualTo(4*thirdPeriodMedian.Count)'                 "Expected receive calls during the second period to be more than four times as frequent as during the third period");
Magic Number,Rebus.Tests.Backoff,TestBackoffBehaviorWhenBusy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestBackoffBehaviorWhenBusy.cs,SetUp,The following statement contains a magic number: Configure.With(_activator)                 .Logging(l => l.Console(LogLevel.Info))                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "busy-test"))                 .Options(o =>                 {                     o.SetNumberOfWorkers(1);                     o.SetMaxParallelism(500);                      o.SetBackoffTimes(TimeSpan.FromSeconds(0.2));                      // install the snitch                     o.Decorate<IBackoffStrategy>(c =>                     {                         var backoffStrategy = c.Get<IBackoffStrategy>();                         _snitch.BackoffStrategy = backoffStrategy;                         return _snitch;                     });                      o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                          return new IntroducerOfLatency(transport' receiveLatencyMs: 10);                     });                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,TestBackoffBehaviorWhenBusy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestBackoffBehaviorWhenBusy.cs,SetUp,The following statement contains a magic number: Configure.With(_activator)                 .Logging(l => l.Console(LogLevel.Info))                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "busy-test"))                 .Options(o =>                 {                     o.SetNumberOfWorkers(1);                     o.SetMaxParallelism(500);                      o.SetBackoffTimes(TimeSpan.FromSeconds(0.2));                      // install the snitch                     o.Decorate<IBackoffStrategy>(c =>                     {                         var backoffStrategy = c.Get<IBackoffStrategy>();                         _snitch.BackoffStrategy = backoffStrategy;                         return _snitch;                     });                      o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                          return new IntroducerOfLatency(transport' receiveLatencyMs: 10);                     });                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,TestBackoffBehaviorWhenBusy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestBackoffBehaviorWhenBusy.cs,SetUp,The following statement contains a magic number: Configure.With(_activator)                 .Logging(l => l.Console(LogLevel.Info))                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "busy-test"))                 .Options(o =>                 {                     o.SetNumberOfWorkers(1);                     o.SetMaxParallelism(500);                      o.SetBackoffTimes(TimeSpan.FromSeconds(0.2));                      // install the snitch                     o.Decorate<IBackoffStrategy>(c =>                     {                         var backoffStrategy = c.Get<IBackoffStrategy>();                         _snitch.BackoffStrategy = backoffStrategy;                         return _snitch;                     });                      o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                          return new IntroducerOfLatency(transport' receiveLatencyMs: 10);                     });                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,TestBackoffBehaviorWhenBusy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestBackoffBehaviorWhenBusy.cs,DoesNotBackOffAtAllWhenBusy,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Rebus.Tests.Backoff,TestBackoffBehaviorWhenBusy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestBackoffBehaviorWhenBusy.cs,DoesNotBackOffAtAllWhenBusy,The following statement contains a magic number: counter.WaitForResetEvent(120);
Magic Number,Rebus.Tests.Backoff,TestBackoffBehaviorWhenBusy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestBackoffBehaviorWhenBusy.cs,DoesNotBackOffAtAllWhenBusy,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Rebus.Tests.Backoff,TestBackoffRespectsCancellation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestBackoffRespectsCancellation.cs,BackoffRespectsCancellation,The following statement contains a magic number: _snitch.WaitNoMessageEntered.WaitOrDie(TimeSpan.FromSeconds(10)'                 "Backoff strategy did not enter an wait cycle within the expected timeframe!");
Magic Number,Rebus.Tests.Backoff,TestCustomizedBackoff,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestCustomizedBackoff.cs,RunTest,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,Rebus.Tests.Backoff,TestCustomizedBackoff,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestCustomizedBackoff.cs,StartBus,The following statement contains a magic number: Configure.With(activator)                 .Logging(l => l.Console(minLevel: LogLevel.Warn))                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "customized-backoff"))                 .Options(o =>                 {                     o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                         countingTransport = new CountingTransport(transport);                         return countingTransport;                     });                      o.SetNumberOfWorkers(20);                     o.SetMaxParallelism(20);                      if (customizeBackoffTimes)                     {                         o.SetBackoffTimes(                             TimeSpan.FromMilliseconds(100)'                             TimeSpan.FromMilliseconds(500)'                             TimeSpan.FromSeconds(5));                     }                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,TestCustomizedBackoff,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestCustomizedBackoff.cs,StartBus,The following statement contains a magic number: Configure.With(activator)                 .Logging(l => l.Console(minLevel: LogLevel.Warn))                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "customized-backoff"))                 .Options(o =>                 {                     o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                         countingTransport = new CountingTransport(transport);                         return countingTransport;                     });                      o.SetNumberOfWorkers(20);                     o.SetMaxParallelism(20);                      if (customizeBackoffTimes)                     {                         o.SetBackoffTimes(                             TimeSpan.FromMilliseconds(100)'                             TimeSpan.FromMilliseconds(500)'                             TimeSpan.FromSeconds(5));                     }                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,TestCustomizedBackoff,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestCustomizedBackoff.cs,StartBus,The following statement contains a magic number: Configure.With(activator)                 .Logging(l => l.Console(minLevel: LogLevel.Warn))                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "customized-backoff"))                 .Options(o =>                 {                     o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                         countingTransport = new CountingTransport(transport);                         return countingTransport;                     });                      o.SetNumberOfWorkers(20);                     o.SetMaxParallelism(20);                      if (customizeBackoffTimes)                     {                         o.SetBackoffTimes(                             TimeSpan.FromMilliseconds(100)'                             TimeSpan.FromMilliseconds(500)'                             TimeSpan.FromSeconds(5));                     }                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,TestCustomizedBackoff,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestCustomizedBackoff.cs,StartBus,The following statement contains a magic number: Configure.With(activator)                 .Logging(l => l.Console(minLevel: LogLevel.Warn))                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "customized-backoff"))                 .Options(o =>                 {                     o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                         countingTransport = new CountingTransport(transport);                         return countingTransport;                     });                      o.SetNumberOfWorkers(20);                     o.SetMaxParallelism(20);                      if (customizeBackoffTimes)                     {                         o.SetBackoffTimes(                             TimeSpan.FromMilliseconds(100)'                             TimeSpan.FromMilliseconds(500)'                             TimeSpan.FromSeconds(5));                     }                 })                 .Start();
Magic Number,Rebus.Tests.Backoff,TestCustomizedBackoff,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Backoff\TestCustomizedBackoff.cs,StartBus,The following statement contains a magic number: Configure.With(activator)                 .Logging(l => l.Console(minLevel: LogLevel.Warn))                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "customized-backoff"))                 .Options(o =>                 {                     o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                         countingTransport = new CountingTransport(transport);                         return countingTransport;                     });                      o.SetNumberOfWorkers(20);                     o.SetMaxParallelism(20);                      if (customizeBackoffTimes)                     {                         o.SetBackoffTimes(                             TimeSpan.FromMilliseconds(100)'                             TimeSpan.FromMilliseconds(500)'                             TimeSpan.FromSeconds(5));                     }                 })                 .Start();
Magic Number,Rebus.Tests.Bugs,BuiltinHandlerActivatorDisposalRaceCondition,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\BuiltinHandlerActivatorDisposalRaceCondition.cs,DoesNotDispatchMessageWithNullBus,The following statement contains a magic number: Task.WaitAll(Enumerable.Range(0' 1000)                     .Select(i => activator.Bus.SendLocal($"message-{i}"))                     .ToArray());
Magic Number,Rebus.Tests.Bugs,BuiltinHandlerActivatorDisposalRaceCondition,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\BuiltinHandlerActivatorDisposalRaceCondition.cs,DoesNotDispatchMessageWithNullBus,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Rebus.Tests.Bugs,CustomHeadersAreCloned,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\CustomHeadersAreCloned.cs,ItHasBeenFixed,The following statement contains a magic number: Assert.That(receivedMessageIds.Distinct().Count()' Is.EqualTo(3)' "Expected three unique message IDs - got: {0}"' string.Join("' "' receivedMessageIds));
Magic Number,Rebus.Tests.Bugs,DeferralOfMessageMappedToAnotherEndpoint,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\DeferralOfMessageMappedToAnotherEndpoint.cs,EndpointMappingsAreUsedWhenDeferringMessages,The following statement contains a magic number: await a.Bus.Defer(TimeSpan.FromSeconds(0.1)' "HEJ MED DIG MIN VEEEEEEEEEEEEEEEEN");
Magic Number,Rebus.Tests.Bugs,DeferralOfMessageMappedToAnotherEndpoint,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\DeferralOfMessageMappedToAnotherEndpoint.cs,EndpointMappingsAreUsedWhenDeferringMessages,The following statement contains a magic number: gotTheString.WaitOrDie(TimeSpan.FromSeconds(2)' "Did not get the expected string within 2 s timeout");
Magic Number,Rebus.Tests.Bugs,DoesNotDispatchWrongSagaDataType,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\DoesNotDispatchWrongSagaDataType.cs,DoesNotBreak,The following statement contains a magic number: var counter = new SharedCounter(6);
Magic Number,Rebus.Tests.Bugs,DoesNotDispatchWrongSagaDataType,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\DoesNotDispatchWrongSagaDataType.cs,DoesNotBreak,The following statement contains a magic number: 3.Times(() => _activator.Bus.SendLocal(new Message(sagaId)).Wait());
Magic Number,Rebus.Tests.Bugs,DoesNotDispatchWrongSagaDataType,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\DoesNotDispatchWrongSagaDataType.cs,DoesNotBreak,The following statement contains a magic number: counter.WaitForResetEvent(3);
Magic Number,Rebus.Tests.Bugs,DoesNotEnlistInOtherBusTransactionContext,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\DoesNotEnlistInOtherBusTransactionContext.cs,CheckThatItDoesNotEnlistInOtherBusTransactionCotnext,The following statement contains a magic number: gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(3)' @"Looks like we never got the message.  If everything was working properly' the forwarded message would have been sent in its own transaction context' thus sent&committed immediately when calling bus.....Forward");
Magic Number,Rebus.Tests.Bugs,DoesNotImmediatelyDispatchAsFailedAfterDeferringInSecondLevelRetryHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\DoesNotImmediatelyDispatchAsFailedAfterDeferringInSecondLevelRetryHandler.cs,DoesNotReceiveSameFailedMessageOverAndOver,The following statement contains a magic number: messageHandledGood.WaitOrDie(TimeSpan.FromSeconds(6));
Magic Number,Rebus.Tests.Bugs,EnforceExclusiveAccessDoesNotDieBecauseSameLockWasAcquiredMoreThanOnce,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\EnforceExclusiveAccessDoesNotDieBecauseSameLockWasAcquiredMoreThanOnce.cs,ItWorks,The following statement contains a magic number: var counter = new SharedCounter(20);
Magic Number,Rebus.Tests.Bugs,EnforceExclusiveAccessDoesNotDieBecauseSameLockWasAcquiredMoreThanOnce,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\EnforceExclusiveAccessDoesNotDieBecauseSameLockWasAcquiredMoreThanOnce.cs,ItWorks,The following statement contains a magic number: var bus = Configure.With(activator)                 .Transport(t => t.UseInMemoryTransport(network' "enforce exclusive access buggg repro"))                 .Options(o => { o.SetNumberOfWorkers(2); })                 .Sagas(s =>                 {                     s.StoreInMemory();                     s.EnforceExclusiveAccess();                 })                 .Routing(r => r.TypeBased().Map<StartSaga>("enforce exclusive access buggg repro"))                 .Timeouts(t => t.StoreInMemory())                 .Start();
Magic Number,Rebus.Tests.Bugs,EnforceExclusiveAccessDoesNotDieBecauseSameLockWasAcquiredMoreThanOnce,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\EnforceExclusiveAccessDoesNotDieBecauseSameLockWasAcquiredMoreThanOnce.cs,ItWorks,The following statement contains a magic number: i < 10
Magic Number,Rebus.Tests.Bugs,ForwardingDoesNotPreserveOriginalBody,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\ForwardingDoesNotPreserveOriginalBody.cs,ReceivedMessageIsTheOriginal,The following statement contains a magic number: gotTheExpectedStringMessage.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Bugs,InheritedMessageCanInitiateSagaToo,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\InheritedMessageCanInitiateSagaToo.cs,CanCorrelateWithIncomingMessageWhichIsInherited,The following statement contains a magic number: counter.WaitForResetEvent(timeoutSeconds: 2);
Magic Number,Rebus.Tests.Bugs,OneWayClientMustSetRecipientWhenDeferring,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\OneWayClientMustSetRecipientWhenDeferring.cs,ItWorksWhenTheHeaderHasBeenSet,The following statement contains a magic number: gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(4));
Magic Number,Rebus.Tests.Bugs,SagaBaseClassCorrelationCheck,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\SagaBaseClassCorrelationCheck.cs,CanHitBothSagas,The following statement contains a magic number: await events.WaitUntil(q => q.Count == 2);
Magic Number,Rebus.Tests.Bugs,VerifyIsNewPropertyWhenExclusiveAccessIsConfigured,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\VerifyIsNewPropertyWhenExclusiveAccessIsConfigured.cs,WorksAsExpected,The following statement contains a magic number: const int count = 5;
Magic Number,Rebus.Tests.Bugs,MyExclusiveSaga,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\VerifyIsNewPropertyWhenExclusiveAccessIsConfigured.cs,Handle,The following statement contains a magic number: await Task.Delay(20);
Magic Number,Rebus.Tests.Bugs,VerifyThisParticularThingAboutSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\VerifyThisParticularThingAboutSecondLevelRetries.cs,ItWorks,The following statement contains a magic number: Configure.With(activator)                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "whatever"))                 .Timeouts(t => t.StoreInMemory())                 .Options(o =>                 {                     o.SimpleRetryStrategy(maxDeliveryAttempts: 2'                         secondLevelRetriesEnabled: true'                         errorQueueAddress: "poison");                      o.Decorate<IErrorHandler>(c => new MyErrorHandler(c.Get<IErrorHandler>()));                 })                 .Start();
Magic Number,Rebus.Tests.Bugs,VerifyThisParticularThingAboutSecondLevelRetries,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\VerifyThisParticularThingAboutSecondLevelRetries.cs,ItWorks,The following statement contains a magic number: hasDeferredMessage.WaitOrDie(TimeSpan.FromSeconds(5));
Magic Number,Rebus.Tests.Bugs,Handler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Bugs\VerifyThisParticularThingAboutSecondLevelRetries.cs,Handle,The following statement contains a magic number: await _bus.Advanced.TransportMessage.Defer(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Cancellation,VerifyLongMessageHandlerCanBeCancelled,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Cancellation\VerifyLongMessageHandlerCanBeCancelled.cs,ItWorks,The following statement contains a magic number: activator.Handle<string>(async (bus' context' message) =>             {                 var cancellationToken = useExtensionMethod                 ? context.GetCancellationToken()                 : context.IncomingStepContext.Load<CancellationToken>();                  handlerWasEntered.Set();                  await Task.Delay(TimeSpan.FromSeconds(10)' cancellationToken);             });
Magic Number,Rebus.Tests.Cancellation,VerifyLongMessageHandlerCanBeCancelled,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Cancellation\VerifyLongMessageHandlerCanBeCancelled.cs,ItWorks,The following statement contains a magic number: Assert.That(elapsedDisposingTheBus' Is.LessThan(TimeSpan.FromSeconds(2))'                  "Expected the bus to have shut down very quickly");
Magic Number,Rebus.Tests.Compression,TestCompressionIntegration,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Compression\TestCompressionIntegration.cs,DecompressionIsEnabledByDefault,The following statement contains a magic number: gotIt.WaitOrDie(TimeSpan.FromSeconds(10));
Magic Number,Rebus.Tests.Compression,TestCompressionIntegration,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Compression\TestCompressionIntegration.cs,ItWorksWithString,The following statement contains a magic number: gotIt.WaitOrDie(TimeSpan.FromSeconds(10));
Magic Number,Rebus.Tests.Compression,TestCompressionIntegration,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Compression\TestCompressionIntegration.cs,ItWorksWithComplexMessage,The following statement contains a magic number: gotIt.WaitOrDie(TimeSpan.FromSeconds(10));
Magic Number,Rebus.Tests.Compression,TestCompressionIntegration,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Compression\TestCompressionIntegration.cs,CreateBus,The following statement contains a magic number: var bus = Configure.With(activator)                 .Transport(t =>                 {                     if (string.IsNullOrWhiteSpace(inputQueueOrNull))                     {                         t.UseInMemoryTransportAsOneWayClient(_network);                     }                     else                     {                         t.UseInMemoryTransport(_network' inputQueueOrNull);                     }                 })                 .Options(o =>                 {                     o.LogPipeline();                      if (withCompressionEnabled)                     {                         o.EnableCompression(128);                     }                 })                 .Start();
Magic Number,Rebus.Tests.Compression,TestZipper,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Compression\TestZipper.cs,CanRoundtripBigBigString,The following statement contains a magic number: var bigString = string.Join("/"' Enumerable.Range(0' 1000000));
Magic Number,Rebus.Tests.Compression,TestZipper,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Compression\TestZipper.cs,CanRoundtripBigBigString,The following statement contains a magic number: Console.WriteLine($"{bigStringBytes.Length/1024} kB => {compressedBytes.Length/1024} kB");
Magic Number,Rebus.Tests.Compression,TestZipper,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Compression\TestZipper.cs,CanRoundtripBigBigString,The following statement contains a magic number: Console.WriteLine($"{bigStringBytes.Length/1024} kB => {compressedBytes.Length/1024} kB");
Magic Number,Rebus.Tests.Compression,TestZipper,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Compression\TestZipper.cs,WorksWithThisBadBoy,The following statement contains a magic number: var realisticObject = new ExecutePartialQueryRequest             {                 //BlobNames = Enumerable.Range(0' 1000).Select(i => "blob" + i).ToArray()'                 Query = new QueryModel                 {                     QuerySteps =                     {                         new QueryStep{EventType = "typeA"' QueryStepOperator = QueryStepOperator.Intersect}'                         new QueryStep{EventType = "typeB"' QueryStepOperator = QueryStepOperator.Except}'                     }                 }'                 SagaId = someId'                 WorkId = 23             };
Magic Number,Rebus.Tests.DataBus,SimpleTest,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\SimpleTest.cs,CanSendBigFile,The following statement contains a magic number: dataSuccessfullyCopied.WaitOrDie(TimeSpan.FromSeconds(5)' "Data was not successfully copied within 5 second timeout");
Magic Number,Rebus.Tests.DataBus,TestAutomaticClaimCheckWhenMessageIsBig,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestAutomaticClaimCheckWhenMessageIsBig.cs,SetUp,The following statement contains a magic number: Configure.With(_activator)                 .Transport(t => t.UseInMemoryTransport(_network' "automatic-claim-check"))                 .Options(o => o.LogPipeline(verbose: true))                 .Subscriptions(s => s.StoreInMemory(_subscriberStore))                 .DataBus(d =>                 {                     d.SendBigMessagesAsAttachments(bodySizeThresholdBytes: limit / 2);                      d.StoreInMemory(_dataStore);                 })                 .Options(o => FailIfMessageSizeExceeds(o' limit))                 .Start();
Magic Number,Rebus.Tests.DataBus,TestAutomaticClaimCheckWhenMessageIsBig,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestAutomaticClaimCheckWhenMessageIsBig.cs,WorksWithNormalSend,The following statement contains a magic number: gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.DataBus,TestAutomaticClaimCheckWhenMessageIsBig,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestAutomaticClaimCheckWhenMessageIsBig.cs,WorksWithPublishToo,The following statement contains a magic number: receivedBuSubscriber1.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.DataBus,TestAutomaticClaimCheckWhenMessageIsBig,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestAutomaticClaimCheckWhenMessageIsBig.cs,WorksWithPublishToo,The following statement contains a magic number: receivedBuSubscriber2.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.DataBus,TestFileSystemDataBusStorage,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestFileSystemDataBusStorage.cs,FixFileLockingIssuesWhenUpdatingLastReadTime,The following statement contains a magic number: var threads = Enumerable.Range(0' 10)                 .Select(i =>                 {                     var thread = new Thread(() =>                     {                         10.Times(() =>                         {                             try                             {                                 using (var source = _storage.Read(knownId).Result)                                 using (var destination = new MemoryStream())                                 {                                     source.CopyTo(destination);                                 }                             }                             catch (Exception exception)                             {                                 caughtExceptions.Enqueue(exception);                             }                         });                     });                      return thread;                 })                 .ToList();
Magic Number,Rebus.Tests.DataBus,TestFileSystemDataBusStorage,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestFileSystemDataBusStorage.cs,FixFileLockingIssuesWhenUpdatingLastReadTime,The following statement contains a magic number: var threads = Enumerable.Range(0' 10)                 .Select(i =>                 {                     var thread = new Thread(() =>                     {                         10.Times(() =>                         {                             try                             {                                 using (var source = _storage.Read(knownId).Result)                                 using (var destination = new MemoryStream())                                 {                                     source.CopyTo(destination);                                 }                             }                             catch (Exception exception)                             {                                 caughtExceptions.Enqueue(exception);                             }                         });                     });                      return thread;                 })                 .ToList();
Magic Number,Rebus.Tests.DataBus,TestFileSystemDataBusStorage,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\TestFileSystemDataBusStorage.cs,FixFileLockingIssuesWhenUpdatingLastReadTime,The following statement contains a magic number: Assert.Fail($@"Caught {caughtExceptions.Count} exceptions - here's the first 5:  {string.Join(Environment.NewLine + Environment.NewLine' caughtExceptions.Take(5))}");
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,AttachmentIds_Data_ReturnsIDs,The following statement contains a magic number: _inMemDataStore.Save("test1"' new byte[] {1' 2' 3});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,AttachmentIds_Data_ReturnsIDs,The following statement contains a magic number: _inMemDataStore.Save("test1"' new byte[] {1' 2' 3});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,AttachmentIds_Data_ReturnsIDs,The following statement contains a magic number: _inMemDataStore.Save("test2"' new byte[] {4' 5' 6}' new Dictionary<string' string> {{"x"' "y"}});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,AttachmentIds_Data_ReturnsIDs,The following statement contains a magic number: _inMemDataStore.Save("test2"' new byte[] {4' 5' 6}' new Dictionary<string' string> {{"x"' "y"}});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,AttachmentIds_Data_ReturnsIDs,The following statement contains a magic number: _inMemDataStore.Save("test2"' new byte[] {4' 5' 6}' new Dictionary<string' string> {{"x"' "y"}});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Contains_Data_ReturnsTrue,The following statement contains a magic number: _inMemDataStore.Save("test"' new byte[] {1' 2' 3});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Contains_Data_ReturnsTrue,The following statement contains a magic number: _inMemDataStore.Save("test"' new byte[] {1' 2' 3});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Contains_DeletedData_ReturnsFalse,The following statement contains a magic number: _inMemDataStore.Save("test"' new byte[] {1' 2' 3});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Contains_DeletedData_ReturnsFalse,The following statement contains a magic number: _inMemDataStore.Save("test"' new byte[] {1' 2' 3});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Delete_KnownId_DeletesData,The following statement contains a magic number: _inMemDataStore.Save("test"' new byte[] {1' 2' 3}' new Dictionary<string' string> {{"x"' "y"}});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Delete_KnownId_DeletesData,The following statement contains a magic number: _inMemDataStore.Save("test"' new byte[] {1' 2' 3}' new Dictionary<string' string> {{"x"' "y"}});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Reset_WithData_DeletesData,The following statement contains a magic number: _inMemDataStore.Save("test1"' new byte[] {1' 2' 3});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Reset_WithData_DeletesData,The following statement contains a magic number: _inMemDataStore.Save("test1"' new byte[] {1' 2' 3});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Reset_WithData_DeletesData,The following statement contains a magic number: _inMemDataStore.Save("test2"' new byte[] {4' 5' 6}' new Dictionary<string' string> {{"x"' "y"}});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Reset_WithData_DeletesData,The following statement contains a magic number: _inMemDataStore.Save("test2"' new byte[] {4' 5' 6}' new Dictionary<string' string> {{"x"' "y"}});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Reset_WithData_DeletesData,The following statement contains a magic number: _inMemDataStore.Save("test2"' new byte[] {4' 5' 6}' new Dictionary<string' string> {{"x"' "y"}});
Magic Number,Rebus.Tests.DataBus.InMem,InMemDataStoreTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\InMem\InMemDataStoreTests.cs,Reset_WithData_DeletesData,The following statement contains a magic number: Assert.That(_inMemDataStore.SizeBytes' Is.EqualTo(6));
Magic Number,Rebus.Tests.DataBus.Zip,TestZippingDataBusStorageDecorator,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\DataBus\Zip\TestZippingDataBusStorageDecorator.cs,GetRandomAmountOfRandomData,The following statement contains a magic number: var buffer = new byte[_random.Next(maxBufferSizeKb) * 1024];
Magic Number,Rebus.Tests.Encryption,TestCustomEncryption,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestCustomEncryption.cs,CheckEncryptedMessages,The following statement contains a magic number: gotMessage.WaitOrDie(TimeSpan.FromSeconds(3));
Magic Number,Rebus.Tests.Encryption,TestCustomEncryption,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestCustomEncryption.cs,CheckEncryptedMessages,The following statement contains a magic number: Assert.That(messages.Count' Is.EqualTo(2));
Magic Number,Rebus.Tests.Encryption,SillyEncryptor,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestCustomEncryption.cs,Encrypt,The following statement contains a magic number: return new EncryptedData(bytes' new byte[] { 1' 2' 3 });
Magic Number,Rebus.Tests.Encryption,SillyEncryptor,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestCustomEncryption.cs,Encrypt,The following statement contains a magic number: return new EncryptedData(bytes' new byte[] { 1' 2' 3 });
Magic Number,Rebus.Tests.Encryption,SillyEncryptor,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestCustomEncryption.cs,Decrypt,The following statement contains a magic number: !(encryptedData.Iv[0] == 1                       && encryptedData.Iv[1] == 2                       && encryptedData.Iv[2] == 3)
Magic Number,Rebus.Tests.Encryption,SillyEncryptor,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestCustomEncryption.cs,Decrypt,The following statement contains a magic number: !(encryptedData.Iv[0] == 1                       && encryptedData.Iv[1] == 2                       && encryptedData.Iv[2] == 3)
Magic Number,Rebus.Tests.Encryption,SillyEncryptor,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestCustomEncryption.cs,Decrypt,The following statement contains a magic number: !(encryptedData.Iv[0] == 1                       && encryptedData.Iv[1] == 2                       && encryptedData.Iv[2] == 3)
Magic Number,Rebus.Tests.Encryption,TestEncryption,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestEncryption.cs,SentMessageIsBasicallyUnreadable,The following statement contains a magic number: gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Encryption,TestTimeoutManagerStorageAndEncryption,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestTimeoutManagerStorageAndEncryption.cs,EncryptedMessageIsEncryptedInTimeoutStorage,The following statement contains a magic number: var longEnoughToNotCare = TimeSpan.FromSeconds(1000);
Magic Number,Rebus.Tests.Encryption,TestTimeoutManagerStorageAndEncryption,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Encryption\TestTimeoutManagerStorageAndEncryption.cs,EncryptedMessageIsEncryptedInTimeoutStorage,The following statement contains a magic number: await Task.Delay(10);
Magic Number,Rebus.Tests.Events,TestBusLifetimeEvents,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Events\TestBusLifetimeEvents.cs,RecordsTheEventsAsExpected,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Rebus.Tests.Events,TestBusLifetimeEvents,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Events\TestBusLifetimeEvents.cs,RecordsTheEventsAsExpected,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Rebus.Tests.Extensions,ConcurrentDictionaryExtensions,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\ConcurrentDictionaryExtensions.cs,WaitUntil,The following statement contains a magic number: await Task.Delay(100' cancellationTokenSource.Token);
Magic Number,Rebus.Tests.Extensions,FakeMessageContextScope,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\FakeMessageContextScope.cs,FakeMessageContextScope,The following statement contains a magic number: TransactionContext.Items[StepContext.StepContextKey] = new IncomingStepContext(new TransportMessage(new Dictionary<string' string>()' new byte[] { 1' 2' 3 })' TransactionContext);
Magic Number,Rebus.Tests.Extensions,FakeMessageContextScope,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Extensions\FakeMessageContextScope.cs,FakeMessageContextScope,The following statement contains a magic number: TransactionContext.Items[StepContext.StepContextKey] = new IncomingStepContext(new TransportMessage(new Dictionary<string' string>()' new byte[] { 1' 2' 3 })' TransactionContext);
Magic Number,Rebus.Tests.Integration,TestAsyncHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestAsyncHandler.cs,YeahItWorks,The following statement contains a magic number: finishedHandled.WaitOrDie(TimeSpan.FromSeconds(10));
Magic Number,Rebus.Tests.Integration,TestAsyncHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestAsyncHandler.cs,YeahItWorks,The following statement contains a magic number: Assert.That(events.Count' Is.EqualTo(4));
Magic Number,Rebus.Tests.Integration,TestAsyncHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestAsyncHandler.cs,YeahItWorks,The following statement contains a magic number: Assert.That(events[2]' Does.StartWith("event=3"));
Magic Number,Rebus.Tests.Integration,TestAsyncHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestAsyncHandler.cs,YeahItWorks,The following statement contains a magic number: Assert.That(events[3]' Does.StartWith("event=4"));
Magic Number,Rebus.Tests.Integration,TestAsyncHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestAsyncHandler.cs,AppendEvent,The following statement contains a magic number: await Task.Delay(10);
Magic Number,Rebus.Tests.Integration,TestCannotSendFailedMessageWrapper,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestCannotSendFailedMessageWrapper.cs,CannotSendFailedMessageWrapper,The following statement contains a magic number: couldNotSendMessage.WaitOrDie(TimeSpan.FromSeconds(5));
Magic Number,Rebus.Tests.Integration,TestCentralizedInMemSubscriptionStorage,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestCentralizedInMemSubscriptionStorage.cs,CanSubscribeEvenThoughWeHaveNotConfiguredAnyEndpointMappings,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Rebus.Tests.Integration,TestCentralizedInMemSubscriptionStorage,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestCentralizedInMemSubscriptionStorage.cs,CanSubscribeEvenThoughWeHaveNotConfiguredAnyEndpointMappings,The following statement contains a magic number: gotTheString.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Integration,TestConfigurationApi,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestConfigurationApi.cs,DisposesInjectedStuffWhenTheActivatorIsDisposed,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Integration,TestCorrelationIdFlow,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestCorrelationIdFlow.cs,CorrelationSequenceIsIncremented,The following statement contains a magic number: Assert.That(correlationSequenceNumbers' Is.EqualTo(new[] { 0' 1' 2 }));
Magic Number,Rebus.Tests.Integration,TestCorrelationIdFlow,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestCorrelationIdFlow.cs,MessageIdsAreDifferent,The following statement contains a magic number: Assert.That(messageIds.GroupBy(i => i).Count()' Is.EqualTo(2));
Magic Number,Rebus.Tests.Integration,TestCustomizedBackoffTime,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestCustomizedBackoffTime.cs,SetUp,The following statement contains a magic number: _rebusConfigurer = Configure.With(_activator)                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "test backoff"))                 .Options(o =>                 {                     o.SetBackoffTimes(TimeSpan.FromSeconds(0.2)' TimeSpan.FromSeconds(0.5)' TimeSpan.FromSeconds(1));                      o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                         var transportTap = new TransportTap(transport);                          transportTap.NoMessageReceived += () =>                         {                             var elapsedSinceStart = DateTime.UtcNow - _busStartTime;                             var elapsedSeconds = Math.Round(elapsedSinceStart.TotalSeconds' 1);                             _waitedSeconds.Enqueue(elapsedSeconds);                         };                          return transportTap;                     });                      o.SetMaxParallelism(10);                     o.SetNumberOfWorkers(1);                 });
Magic Number,Rebus.Tests.Integration,TestCustomizedBackoffTime,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestCustomizedBackoffTime.cs,SetUp,The following statement contains a magic number: _rebusConfigurer = Configure.With(_activator)                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "test backoff"))                 .Options(o =>                 {                     o.SetBackoffTimes(TimeSpan.FromSeconds(0.2)' TimeSpan.FromSeconds(0.5)' TimeSpan.FromSeconds(1));                      o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                         var transportTap = new TransportTap(transport);                          transportTap.NoMessageReceived += () =>                         {                             var elapsedSinceStart = DateTime.UtcNow - _busStartTime;                             var elapsedSeconds = Math.Round(elapsedSinceStart.TotalSeconds' 1);                             _waitedSeconds.Enqueue(elapsedSeconds);                         };                          return transportTap;                     });                      o.SetMaxParallelism(10);                     o.SetNumberOfWorkers(1);                 });
Magic Number,Rebus.Tests.Integration,TestCustomizedBackoffTime,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestCustomizedBackoffTime.cs,SetUp,The following statement contains a magic number: _rebusConfigurer = Configure.With(_activator)                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "test backoff"))                 .Options(o =>                 {                     o.SetBackoffTimes(TimeSpan.FromSeconds(0.2)' TimeSpan.FromSeconds(0.5)' TimeSpan.FromSeconds(1));                      o.Decorate<ITransport>(c =>                     {                         var transport = c.Get<ITransport>();                         var transportTap = new TransportTap(transport);                          transportTap.NoMessageReceived += () =>                         {                             var elapsedSinceStart = DateTime.UtcNow - _busStartTime;                             var elapsedSeconds = Math.Round(elapsedSinceStart.TotalSeconds' 1);                             _waitedSeconds.Enqueue(elapsedSeconds);                         };                          return transportTap;                     });                      o.SetMaxParallelism(10);                     o.SetNumberOfWorkers(1);                 });
Magic Number,Rebus.Tests.Integration,TestCustomizedBackoffTime,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestCustomizedBackoffTime.cs,ItWorks,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Rebus.Tests.Integration,TestDeferAndExplicitRouting,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestDeferAndExplicitRouting.cs,GreatName,The following statement contains a magic number: messageWasReceived.WaitOrDie(TimeSpan.FromSeconds(3));
Magic Number,Rebus.Tests.Integration,TestEncryptionAndCompressionTogether,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestEncryptionAndCompressionTogether.cs,ItWorks,The following statement contains a magic number: var hugePayload = string.Concat(Enumerable.Range(0' 128)                 .Select(i => string.Concat(Enumerable.Repeat(i.ToString()' 128))));
Magic Number,Rebus.Tests.Integration,TestEncryptionAndCompressionTogether,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestEncryptionAndCompressionTogether.cs,ItWorks,The following statement contains a magic number: var hugePayload = string.Concat(Enumerable.Range(0' 128)                 .Select(i => string.Concat(Enumerable.Repeat(i.ToString()' 128))));
Magic Number,Rebus.Tests.Integration,TestEncryptionAndCompressionTogether,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestEncryptionAndCompressionTogether.cs,ItWorks,The following statement contains a magic number: gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Integration,TestErrorOnReceive,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestErrorOnReceive.cs,BacksOffWhenExperiencingErrorOnReceive,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,Rebus.Tests.Integration,TestErrorOnReceive,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestErrorOnReceive.cs,BacksOffWhenExperiencingErrorOnReceive,The following statement contains a magic number: Assert.That(warnings' Is.LessThan(20));
Magic Number,Rebus.Tests.Integration,TestErrorsInPipeline,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestErrorsInPipeline.cs,SetUp,The following statement contains a magic number: var bus = Configure.With(_adapter)                 .Logging(l => l.Use(_listLoggerFactory))                 .Transport(t => t.UseInMemoryTransport(_network' "test"))                 .Options(o => o.SimpleRetryStrategy("error"' 3))                 .Start();
Magic Number,Rebus.Tests.Integration,TestErrorsInPipeline,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestErrorsInPipeline.cs,IncomingMessageHasNoHeaders,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Integration,TestErrorsInPipeline,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestErrorsInPipeline.cs,IncomingMessageCannotBeDeserialized,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Integration,TestErrorsInPipeline,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestErrorsInPipeline.cs,PrintLogs,The following statement contains a magic number: Console.WriteLine(string.Join(Environment.NewLine' _listLoggerFactory.Select(line => line.ToString().Limit(150))));
Magic Number,Rebus.Tests.Integration,TestFailFast,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFailFast.cs,ItWorks,The following statement contains a magic number: const int numberOfRetries = 5;
Magic Number,Rebus.Tests.Integration,TestFailFast,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFailFast.cs,ItUsesSimpleRetryStrategyWhenCustomException,The following statement contains a magic number: const int numberOfRetries = 5;
Magic Number,Rebus.Tests.Integration,TestFailFast,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFailFast.cs,CanConfigureCustomFailFastChecker,The following statement contains a magic number: const int numberOfRetries = 5;
Magic Number,Rebus.Tests.Integration,TestFailFastWhenMessageCannotBeDispatchedToAnyHandlers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFailFastWhenMessageCannotBeDispatchedToAnyHandlers.cs,OnlyDeliversMessageOnceWhenThereIsNoHandlerForIt,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Integration,TestFileSystemBasedTransportAndCompetingConsumers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFileSystemBasedTransportAndCompetingConsumers.cs,ItWorks,The following statement contains a magic number: await messageCounts.WaitUntil(d => d.Count >= messageCount' timeoutSeconds: 10);
Magic Number,Rebus.Tests.Integration,TestFileSystemBasedTransportAndCompetingConsumers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFileSystemBasedTransportAndCompetingConsumers.cs,StartConsumer,The following statement contains a magic number: Configure.With(activator)                 .Logging(l => l.Console(LogLevel.Info))                 .Transport(t => t.UseFileSystem(tempDirectory' "consumer").Prefetch(5))                 .Start();
Magic Number,Rebus.Tests.Integration,TestFileSystemDataBusCleanup,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFileSystemDataBusCleanup.cs,ItWorks_KeepLastFiveAttachments,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Rebus.Tests.Integration,TestFileSystemDataBusCleanup,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFileSystemDataBusCleanup.cs,ItWorks_KeepLastFiveAttachments,The following statement contains a magic number: counter.WaitForResetEvent(timeoutSeconds: 5);
Magic Number,Rebus.Tests.Integration,TestFileSystemDataBusCleanup,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFileSystemDataBusCleanup.cs,ItWorks_KeepLastFiveAttachments,The following statement contains a magic number: Assert.That(files.Length' Is.EqualTo(2)' $@"Expected       {_attachmentsBaseDirectory}  to contain 2 files (1 x .dat + 1 x .meta)' but found the following files:  {string.Join(Environment.NewLine' files.Select(filePath => $"    {Path.GetFileName(filePath)}"))}  ");
Magic Number,Rebus.Tests.Integration,TestFileSystemDataBusCleanup,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFileSystemDataBusCleanup.cs,ItWorks_DeleteEveryAttachment,The following statement contains a magic number: var counter = Using(new SharedCounter(initialValue: 3));
Magic Number,Rebus.Tests.Integration,TestFileSystemDataBusCleanup,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestFileSystemDataBusCleanup.cs,ItWorks_DeleteEveryAttachment,The following statement contains a magic number: counter.WaitForResetEvent(timeoutSeconds: 5);
Magic Number,Rebus.Tests.Integration,TestHandlerReordering,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestHandlerReordering.cs,CanReorderHandlers,The following statement contains a magic number: await events.WaitUntil(e => e.Count == 3);
Magic Number,Rebus.Tests.Integration,TestIdempotentSagas,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestIdempotentSagas.cs,ItWorks,The following statement contains a magic number: var messagesToSend = Enumerable                 .Range(0' total)                 .Select(id => new MyMessage                 {                     CorrelationId = "hej"'                     Id = id'                     Total = total'                     SendOutgoingMessage = id % 2 == 0                 })                 .ToList();
Magic Number,Rebus.Tests.Integration,TestIdempotentSagas,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestIdempotentSagas.cs,ItWorks,The following statement contains a magic number: allMessagesReceived.WaitOrDie(TimeSpan.FromSeconds(10));
Magic Number,Rebus.Tests.Integration,TestIdempotentSagas,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestIdempotentSagas.cs,ItWorks,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Integration,TestIdempotentSagas,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestIdempotentSagas.cs,ItWorks,The following statement contains a magic number: Assert.That(outgoingMessagesById.Count' Is.EqualTo(total / 2));
Magic Number,Rebus.Tests.Integration,TestIdempotentSagas,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestIdempotentSagas.cs,ItWorks,The following statement contains a magic number: Assert.That(outgoingMessagesById.Select(g => g.Key).OrderBy(id => id).ToArray()'                 Is.EqualTo(Enumerable.Range(0' total).Where(id => id % 2 == 0).ToArray())'                 "Didn't get the expected outgoing messages - expected an outgoing message for each ID whose mod 2 is zero");
Magic Number,Rebus.Tests.Integration,TestInMemDataBusCleanup,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestInMemDataBusCleanup.cs,ItWorks_KeepLastFiveAttachments,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Rebus.Tests.Integration,TestInMemDataBusCleanup,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestInMemDataBusCleanup.cs,ItWorks_KeepLastFiveAttachments,The following statement contains a magic number: counter.WaitForResetEvent(timeoutSeconds: 5);
Magic Number,Rebus.Tests.Integration,TestInMemDataBusCleanup,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestInMemDataBusCleanup.cs,ItWorks_DeleteEveryAttachment,The following statement contains a magic number: var counter = Using(new SharedCounter(initialValue: 3));
Magic Number,Rebus.Tests.Integration,TestInMemDataBusCleanup,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestInMemDataBusCleanup.cs,ItWorks_DeleteEveryAttachment,The following statement contains a magic number: counter.WaitForResetEvent(timeoutSeconds: 5);
Magic Number,Rebus.Tests.Integration,TestMessageDeferral,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestMessageDeferral.cs,CanDeferMessage_ToSelf,The following statement contains a magic number: var delay = TimeSpan.FromSeconds(5);
Magic Number,Rebus.Tests.Integration,TestMessageDeferral,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestMessageDeferral.cs,CanDeferMessage_ToSelf,The following statement contains a magic number: messageReceived.WaitOrDie(TimeSpan.FromSeconds(8));
Magic Number,Rebus.Tests.Integration,TestMessageDeferral,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestMessageDeferral.cs,CanDeferMessage_ToAnotherDestination,The following statement contains a magic number: var delay = TimeSpan.FromSeconds(5);
Magic Number,Rebus.Tests.Integration,TestMessageDeferral,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestMessageDeferral.cs,CanDeferMessage_ToAnotherDestination,The following statement contains a magic number: messageReceived.WaitOrDie(TimeSpan.FromSeconds(8));
Magic Number,Rebus.Tests.Integration,TestPolymorphicDispatch,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestPolymorphicDispatch.cs,WorksWithHandlerPipelineToo,The following statement contains a magic number: await events.WaitUntil(q => q.Count == 2);
Magic Number,Rebus.Tests.Integration,TestRequestReply,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRequestReply.cs,CanSendAndReceive,The following statement contains a magic number: gotMessage.WaitOrDie(TimeSpan.FromSeconds(30));
Magic Number,Rebus.Tests.Integration,TestRequestReply,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRequestReply.cs,SetsReplyToHeader,The following statement contains a magic number: gotMessage.WaitOrDie(TimeSpan.FromSeconds(5));
Magic Number,Rebus.Tests.Integration,TestRetry,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetry.cs,ItWorks,The following statement contains a magic number: const int numberOfRetries = 5;
Magic Number,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,OnlyLogsOneSingleLineWhenForwarding,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,OnlyLogsOneSingleLineWhenForwarding,The following statement contains a magic number: Console.WriteLine(string.Join(Environment.NewLine' significantStuff.Select(l => l.Text.Limit(140' singleLine: true))));
Magic Number,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,OnlyLogsOneSingleLineWhenForwarding,The following statement contains a magic number: Assert.That(significantStuff.Count' Is.EqualTo(1)' @"Only expected one single ERROR level log line with all the action - got this:   {0}"' string.Join(Environment.NewLine' _listLoggerFactory.Select(l => l.Text.Limit(150' singleLine: true))));
Magic Number,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,MakesOnlyOneSingleDeliveryAttempt,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,MakesOnlyOneSingleDeliveryAttemptWhenForwardingOnExceptionThatSatisfiesPredicate,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,PerformsTheUsualRetriesOnExceptionsThatDoNotSatisfyThePredicate,The following statement contains a magic number: _activator.Handle<ShouldFail>(async msg =>             {                 Interlocked.Increment(ref deliveryAttempts);                  throw new CustomException { ErrorCode = SecretErrorCode + 23 };             });
Magic Number,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,PerformsTheUsualRetriesOnExceptionsThatDoNotSatisfyThePredicate,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,PerformsTheUsualRetriesOnExceptionsThatDoNotSatisfyThePredicate,The following statement contains a magic number: Assert.That(deliveryAttempts' Is.EqualTo(5)' @"Expected the usual retries because we threw a CustomException that did not satisfy the predicate - here's what happened:  {0}"' string.Join(Environment.NewLine' _listLoggerFactory.Select(l => l.Text.Limit(150' singleLine: true))));
Magic Number,Rebus.Tests.Integration,TestRetryExceptionCustomization,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestRetryExceptionCustomization.cs,PerformsTheUsualRetriesOnExceptionsThatDoNotSatisfyThePredicate,The following statement contains a magic number: Assert.That(deliveryAttempts' Is.EqualTo(5)' @"Expected the usual retries because we threw a CustomException that did not satisfy the predicate - here's what happened:  {0}"' string.Join(Environment.NewLine' _listLoggerFactory.Select(l => l.Text.Limit(150' singleLine: true))));
Magic Number,Rebus.Tests.Integration,TestSaga,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSaga.cs,CanHitSaga,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Rebus.Tests.Integration,TestSaga,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSaga.cs,CanHitSaga,The following statement contains a magic number: Assert.That(_recordedCalls.Count' Is.EqualTo(9));
Magic Number,Rebus.Tests.Integration,TestSagaIsNew,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSagaIsNew.cs,CanCorrectlyDetermineWhetherSagaInstanceIsNew,The following statement contains a magic number: Assert.That(eventsPerCorrelationId.Count' Is.EqualTo(4));
Magic Number,Rebus.Tests.Integration,TestSagasAndPolymorphicCorrelation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSagasAndPolymorphicCorrelation.cs,WorksWithFailedAndInterfacesToo,The following statement contains a magic number: var counter = new SharedCounter(3);
Magic Number,Rebus.Tests.Integration,TestSagasAndPolymorphicCorrelation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSagasAndPolymorphicCorrelation.cs,WorksWithFailedAndInterfacesToo,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Rebus.Tests.Integration,TestSagasAndPolymorphicCorrelation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSagasAndPolymorphicCorrelation.cs,WorksWithFailedAndInterfacesToo,The following statement contains a magic number: counter.WaitForResetEvent(100);
Magic Number,Rebus.Tests.Integration,TestSagasAndPolymorphicCorrelation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSagasAndPolymorphicCorrelation.cs,CanCorrelateWithIncomingMessageWhichIsInherited,The following statement contains a magic number: var counter = new SharedCounter(3);
Magic Number,Rebus.Tests.Integration,TestShutdownWithPendingTasks,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestShutdownWithPendingTasks.cs,DoIt,The following statement contains a magic number: builtinHandlerActivator.Handle<string>(async _ =>             {                 gotMessage.Set();                  await Task.Delay(2000);                  allDone = true;             });
Magic Number,Rebus.Tests.Integration,TestShutdownWithPendingTasks,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestShutdownWithPendingTasks.cs,DoIt,The following statement contains a magic number: gotMessage.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Integration,TestSlowContinuations,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSlowContinuations.cs,TakeTime,The following statement contains a magic number: finishedHandlingMessage.WaitOrDie(TimeSpan.FromSeconds(5));
Magic Number,Rebus.Tests.Integration,TakeTimeHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestSlowContinuations.cs,Handle,The following statement contains a magic number: counter < 100
Magic Number,Rebus.Tests.Integration,TestTypeBasedRouting,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestTypeBasedRouting.cs,TypeBasedRoutingAndExtensionMethodsAndEverythingWorksAsItShould,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Integration,TestTypeBasedRouting,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestTypeBasedRouting.cs,TypeBasedRoutingAndExtensionMethodsAndEverythingWorksAsItShould,The following statement contains a magic number: _client1GotTheEvent.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Integration,TestTypeBasedRouting,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestTypeBasedRouting.cs,TypeBasedRoutingAndExtensionMethodsAndEverythingWorksAsItShouldAlsoWhenTypeIsNotInferred,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Integration,TestTypeBasedRouting,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestTypeBasedRouting.cs,TypeBasedRoutingAndExtensionMethodsAndEverythingWorksAsItShouldAlsoWhenTypeIsNotInferred,The following statement contains a magic number: _client1GotTheEvent.WaitOrDie(TimeSpan.FromSeconds(2)' "Looks like the publish topic was not correctly inferred!");
Magic Number,Rebus.Tests.Integration,TestWorkerAndParallelismConfiguration,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Integration\TestWorkerAndParallelismConfiguration.cs,NumberOfWorkersIsLimitedByMaxParallelism,The following statement contains a magic number: Configure.With(adapter)                     .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "worker-/parallelism-test"))                     .Options(o =>                     {                         o.SetMaxParallelism(1);                         o.SetNumberOfWorkers(10);                          o.Decorate<IWorkerFactory>(c =>                         {                             counter.SetWorkerFactory(c.Get<IWorkerFactory>());                              return counter;                         });                     })                     .Start();
Magic Number,Rebus.Tests.Logging,TestAbstractRebusLoggerFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Logging\TestAbstractRebusLoggerFactory.cs,CompareRenderingTimes,The following statement contains a magic number: 10.Times(() =>             {                 var result = renderMethod(messageTemplate' objs);                 Console.WriteLine($"'{messageTemplate}' + {string.Join("' "' objs.Select(o => $"'{o}'"))} => '{result}'");             });
Magic Number,Rebus.Tests.Logging,TestAbstractRebusLoggerFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Logging\TestAbstractRebusLoggerFactory.cs,GetScenarios,The following statement contains a magic number: return new[] {                 new InterpolationScenario(@"Hej ""El Duderino"""' "Hej {0}"' "El Duderino")'                 new InterpolationScenario(@"Hej ""El Duderino"""' "Hej {name}"' "El Duderino")'                 new InterpolationScenario(@"Hej ""El Duderino"" og ""Donny"""' "Hej {name} og {name2}"' "El Duderino"' "Donny")'                 new InterpolationScenario(@"Hej ""El Duderino"" og ""Donny"""' "Hej {name} og {name}"' "El Duderino"' "Donny")'                 new InterpolationScenario("The operation took 2.46 s"' "The operation took {ElapsedSeconds} s"' 2.46)'                 new InterpolationScenario($"The date today is {DateTime.Today:o}"' "The date today is {Date}"' DateTime.Today)'                 new InterpolationScenario("What happens when you forget the placeholder?"' "What happens when you forget the placeholder?"' DateTime.Today' TimeSpan.FromMinutes(1))'                 new InterpolationScenario("What 23 00:01:00 ??? ??? too many placeholders?"' "What {happens} {when} {there} {is} too many placeholders?"' 23' TimeSpan.FromMinutes(1))'                 new InterpolationScenario(@"Sending ""msg-A"" to [""queue-a""' ""queue-b""]"' "Sending {messageLabel} to {queueNames}"' "msg-A"' new[]{ "queue-a"' "queue-b" })'                 new InterpolationScenario("A number: 2.23"' "A number: {number:0.00}"' 2.22678976849765)'             };
Magic Number,Rebus.Tests.Logging,TestAbstractRebusLoggerFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Logging\TestAbstractRebusLoggerFactory.cs,GetScenarios,The following statement contains a magic number: return new[] {                 new InterpolationScenario(@"Hej ""El Duderino"""' "Hej {0}"' "El Duderino")'                 new InterpolationScenario(@"Hej ""El Duderino"""' "Hej {name}"' "El Duderino")'                 new InterpolationScenario(@"Hej ""El Duderino"" og ""Donny"""' "Hej {name} og {name2}"' "El Duderino"' "Donny")'                 new InterpolationScenario(@"Hej ""El Duderino"" og ""Donny"""' "Hej {name} og {name}"' "El Duderino"' "Donny")'                 new InterpolationScenario("The operation took 2.46 s"' "The operation took {ElapsedSeconds} s"' 2.46)'                 new InterpolationScenario($"The date today is {DateTime.Today:o}"' "The date today is {Date}"' DateTime.Today)'                 new InterpolationScenario("What happens when you forget the placeholder?"' "What happens when you forget the placeholder?"' DateTime.Today' TimeSpan.FromMinutes(1))'                 new InterpolationScenario("What 23 00:01:00 ??? ??? too many placeholders?"' "What {happens} {when} {there} {is} too many placeholders?"' 23' TimeSpan.FromMinutes(1))'                 new InterpolationScenario(@"Sending ""msg-A"" to [""queue-a""' ""queue-b""]"' "Sending {messageLabel} to {queueNames}"' "msg-A"' new[]{ "queue-a"' "queue-b" })'                 new InterpolationScenario("A number: 2.23"' "A number: {number:0.00}"' 2.22678976849765)'             };
Magic Number,Rebus.Tests.Logging,TestAbstractRebusLoggerFactory,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Logging\TestAbstractRebusLoggerFactory.cs,GetScenarios,The following statement contains a magic number: return new[] {                 new InterpolationScenario(@"Hej ""El Duderino"""' "Hej {0}"' "El Duderino")'                 new InterpolationScenario(@"Hej ""El Duderino"""' "Hej {name}"' "El Duderino")'                 new InterpolationScenario(@"Hej ""El Duderino"" og ""Donny"""' "Hej {name} og {name2}"' "El Duderino"' "Donny")'                 new InterpolationScenario(@"Hej ""El Duderino"" og ""Donny"""' "Hej {name} og {name}"' "El Duderino"' "Donny")'                 new InterpolationScenario("The operation took 2.46 s"' "The operation took {ElapsedSeconds} s"' 2.46)'                 new InterpolationScenario($"The date today is {DateTime.Today:o}"' "The date today is {Date}"' DateTime.Today)'                 new InterpolationScenario("What happens when you forget the placeholder?"' "What happens when you forget the placeholder?"' DateTime.Today' TimeSpan.FromMinutes(1))'                 new InterpolationScenario("What 23 00:01:00 ??? ??? too many placeholders?"' "What {happens} {when} {there} {is} too many placeholders?"' 23' TimeSpan.FromMinutes(1))'                 new InterpolationScenario(@"Sending ""msg-A"" to [""queue-a""' ""queue-b""]"' "Sending {messageLabel} to {queueNames}"' "msg-A"' new[]{ "queue-a"' "queue-b" })'                 new InterpolationScenario("A number: 2.23"' "A number: {number:0.00}"' 2.22678976849765)'             };
Magic Number,Rebus.Tests.Persistence.InMem,InMemorySagaStorageTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Persistence\InMem\InMemorySagaStorageTests.cs,Instances_WithData_ReturnsData,The following statement contains a magic number: Assert.That(instances' Has.Count.EqualTo(2));
Magic Number,Rebus.Tests.Pipeline,TestAbortMessagePipeline,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestAbortMessagePipeline.cs,CanAbortMessageProcessingBeforeTheHandlers,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Pipeline,TestAbortMessagePipeline,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestAbortMessagePipeline.cs,CanAbortMessageProcessing,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Pipeline,TestAbortMessagePipeline,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestAbortMessagePipeline.cs,CanAlsoNotAbortMessageProcessing,The following statement contains a magic number: await Task.Delay(1500);
Magic Number,Rebus.Tests.Pipeline,TestCompiledPipelineInvoker,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestCompiledPipelineInvoker.cs,CheckTiming,The following statement contains a magic number: var pipeline = Enumerable.Range(0' 15)                 .Select(stepNumber => new NamedStep($"step {stepNumber}"))                 .ToArray();
Magic Number,Rebus.Tests.Pipeline,TestCompiledPipelineInvoker,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestCompiledPipelineInvoker.cs,CheckTiming,The following statement contains a magic number: 1000000.Times(() =>             {                 var stepContext = new IncomingStepContext(new TransportMessage(new Dictionary<string' string>()' new byte[0])' GetFakeTransactionContext());                  invoker.Invoke(stepContext).Wait();             });
Magic Number,Rebus.Tests.Pipeline,TestCompiledPipelineInvoker_PlayAround,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestCompiledPipelineInvoker_PlayAround.cs,GetIncomingStepContext,The following statement contains a magic number: var transportMessage = new TransportMessage(new Dictionary<string' string>()' new byte[] { 1' 2' 3 });
Magic Number,Rebus.Tests.Pipeline,TestCompiledPipelineInvoker_PlayAround,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestCompiledPipelineInvoker_PlayAround.cs,GetIncomingStepContext,The following statement contains a magic number: var transportMessage = new TransportMessage(new Dictionary<string' string>()' new byte[] { 1' 2' 3 });
Magic Number,Rebus.Tests.Pipeline,TestCompiledPipelineInvoker_PlayAround,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestCompiledPipelineInvoker_PlayAround.cs,GetOutgoingStepContext,The following statement contains a magic number: var message = new Message(new Dictionary<string' string>()' new byte[] { 1' 2' 3 });
Magic Number,Rebus.Tests.Pipeline,TestCompiledPipelineInvoker_PlayAround,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestCompiledPipelineInvoker_PlayAround.cs,GetOutgoingStepContext,The following statement contains a magic number: var message = new Message(new Dictionary<string' string>()' new byte[] { 1' 2' 3 });
Magic Number,Rebus.Tests.Pipeline,TestDefaultPipelineInvoker,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestDefaultPipelineInvoker.cs,CheckTiming,The following statement contains a magic number: var pipeline = Enumerable.Range(0' 15)                 .Select(stepNumber => new NamedStep($"step {stepNumber}"))                 .ToArray();
Magic Number,Rebus.Tests.Pipeline,TestDefaultPipelineInvoker,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestDefaultPipelineInvoker.cs,CheckTiming,The following statement contains a magic number: 1000000.Times(() =>             {                 var stepContext = new IncomingStepContext(new TransportMessage(new Dictionary<string' string>()' new byte[0])' GetFakeTransactionContext());                  invoker.Invoke(stepContext).Wait();             });
Magic Number,Rebus.Tests.Pipeline,TestOrdinaryLogLevels,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestOrdinaryLogLevels.cs,DoesNotLogWarningsUnderNormalUse,The following statement contains a magic number: var counter = new SharedCounter(3);
Magic Number,Rebus.Tests.Pipeline,TestPipelineInvocation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestPipelineInvocation.cs,ComparePerf,The following statement contains a magic number: var iterations = 100000;
Magic Number,Rebus.Tests.Pipeline,TestPipelineInvocation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestPipelineInvocation.cs,ComparePerf,The following statement contains a magic number: var pipeline = CreateFakePipeline(10).ToArray();
Magic Number,Rebus.Tests.Pipeline,TestPipelineInvocation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestPipelineInvocation.cs,ComparePerf,The following statement contains a magic number: var body = new byte[] { 1' 2' 3 };
Magic Number,Rebus.Tests.Pipeline,TestPipelineInvocation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Pipeline\TestPipelineInvocation.cs,ComparePerf,The following statement contains a magic number: var body = new byte[] { 1' 2' 3 };
Magic Number,Rebus.Tests.Profiling,TestDispatchPerformance,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Profiling\TestDispatchPerformance.cs,RunTest,The following statement contains a magic number: gotAllMessages.WaitOrDie(TimeSpan.FromSeconds(30));
Magic Number,Rebus.Tests.Profiling,Step100,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Profiling\TestProfiler.cs,Process,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Rebus.Tests.Profiling,Step200,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Profiling\TestProfiler.cs,Process,The following statement contains a magic number: await Task.Delay(200);
Magic Number,Rebus.Tests.Profiling,Step300,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Profiling\TestProfiler.cs,Process,The following statement contains a magic number: await Task.Delay(300);
Magic Number,Rebus.Tests.Retry.PoisonQueues,TestPoisonQueueErrorHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Retry\PoisonQueues\TestPoisonQueueErrorHandler.cs,TruncatesErrorDetailsIfTheyAreTooLong,The following statement contains a magic number: _simpleRetryStrategySettings.ErrorDetailsHeaderMaxLength = 300;
Magic Number,Rebus.Tests.Retry.PoisonQueues,TestPoisonQueueErrorHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Retry\PoisonQueues\TestPoisonQueueErrorHandler.cs,TruncatesErrorDetailsIfTheyAreTooLong,The following statement contains a magic number: var exception = new IOException(new string('*'' 1024));
Magic Number,Rebus.Tests.Retry.PoisonQueues,TestPoisonQueueErrorHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Retry\PoisonQueues\TestPoisonQueueErrorHandler.cs,NewMessage,The following statement contains a magic number: return new TransportMessage(headers' new byte[] { 1' 2' 3 });
Magic Number,Rebus.Tests.Retry.PoisonQueues,TestPoisonQueueErrorHandler,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Retry\PoisonQueues\TestPoisonQueueErrorHandler.cs,NewMessage,The following statement contains a magic number: return new TransportMessage(headers' new byte[] { 1' 2' 3 });
Magic Number,Rebus.Tests.Routing,TestDefaultReturnAddress,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestDefaultReturnAddress.cs,AssignsDefaultReturnAddressOnSentMessage,The following statement contains a magic number: done.WaitOrDie(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Routing,TestHeaderBasedRouting,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestHeaderBasedRouting.cs,CanDistributeWork,The following statement contains a magic number: await _doneWork.WaitUntil(w => w.Count == numberOfMessages' timeoutSeconds: 20);
Magic Number,Rebus.Tests.Routing,TestRoutingSlip,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestRoutingSlip.cs,CheckHeaders,The following statement contains a magic number: routingSlipWasReturnedToSender.WaitOrDie(TimeSpan.FromSeconds(3));
Magic Number,Rebus.Tests.Routing,TestRoutingSlip,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestRoutingSlip.cs,CheckHeaders,The following statement contains a magic number: Assert.That(correlationIdValues' Is.EqualTo(Enumerable.Repeat(correlationIdValues.First()' 4)));
Magic Number,Rebus.Tests.Routing,TestRoutingSlip,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestRoutingSlip.cs,WorksGreatWithMutableMessagesToo,The following statement contains a magic number: routingSlipWasReturnedToSender.WaitOrDie(TimeSpan.FromSeconds(3));
Magic Number,Rebus.Tests.Routing,TestRoutingSlip,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestRoutingSlip.cs,CanRouteMessageAsExpected_NeverReturn,The following statement contains a magic number: done.WaitOrDie(TimeSpan.FromSeconds(3));
Magic Number,Rebus.Tests.Routing,TestRoutingSlip,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestRoutingSlip.cs,CanRouteMessageAsExpected_NeverReturn,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(0.5));
Magic Number,Rebus.Tests.Routing,TestRoutingSlip,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestRoutingSlip.cs,CanRouteMessageAsExpected_ReturnToSender,The following statement contains a magic number: routingSlipWasReturnedToSender.WaitOrDie(TimeSpan.FromSeconds(3));
Magic Number,Rebus.Tests.Routing,TestTransportMessageForwarding,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestTransportMessageForwarding.cs,CanForwardToMultipleRecipients,The following statement contains a magic number: Assert.That(transportMessages.Length' Is.EqualTo(2));
Magic Number,Rebus.Tests.Routing,TestTransportMessageForwarding,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestTransportMessageForwarding.cs,CanIgnoreMessageCompletely,The following statement contains a magic number: Assert.That(gotTheMessage.WaitOne(TimeSpan.FromSeconds(0.5))' Is.False);
Magic Number,Rebus.Tests.Routing,TestTransportMessageForwarding,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestTransportMessageForwarding.cs,GetFailingBus,The following statement contains a magic number: var bus = Configure.With(activator)                 .Transport(t => t.UseInMemoryTransport(network' "forwarder"))                 .Routing(t =>                 {                     t.AddTransportMessageForwarder(async transportMessage =>                     {                         deliveryAttempts++;                          if (deliveryAttempts < 10)                         {                             throw new RebusApplicationException("fake an error");                         }                          return ForwardAction.ForwardTo(recipientQueueName);                     }' errorBehavior);                 })                 .Options(o =>                 {                     o.SetNumberOfWorkers(1);                     o.SetMaxParallelism(1);                 })                 .Start();
Magic Number,Rebus.Tests.Routing,TestTransportMessageOperations,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestTransportMessageOperations.cs,CanForwardMessageToErrorQueue,The following statement contains a magic number: var sharedCounter = new SharedCounter(1) { Delay = TimeSpan.FromSeconds(0.1) };
Magic Number,Rebus.Tests.Routing,TestTransportMessageOperations,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestTransportMessageOperations.cs,CanDeferTransportMessage,The following statement contains a magic number: _forwarderActivator.Handle<string>(async (bus' str) =>             {                 if (!didDeferTheMessage)                 {                     Console.WriteLine("Got the message for the first time - deferring it!");                      await bus.Advanced.TransportMessage.Defer(TimeSpan.FromSeconds(2)' customHeaders);                      didDeferTheMessage = true;                      return;                 }                  Console.WriteLine("Got the message after it was deferred... nice!");                  counter.Decrement();             });
Magic Number,Rebus.Tests.Routing,TestTypeBasedRouter,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestTypeBasedRouter.cs,WorksWithMultipleRoutes,The following statement contains a magic number: Assert.That(GetDestinationForBody(78)' Is.EqualTo("IntDestination"));
Magic Number,Rebus.Tests.Routing,TestTypeBasedRouter,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Routing\TestTypeBasedRouter.cs,SupportsFallback,The following statement contains a magic number: Assert.That(GetDestinationForBody(87843784)' Is.EqualTo("fallback"));
Magic Number,Rebus.Tests.Sagas,TestConflictResolution,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestConflictResolution.cs,SetUp,The following statement contains a magic number: _bus = Configure.With(_builtinHandlerActivator)                 .Logging(l => l.Use(_loggerFactory))                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "will_experience_conflicts"))                 .Options(o =>                 {                     o.SetNumberOfWorkers(0);                     o.SetMaxParallelism(10);                 })                 .Sagas(s => s.StoreInMemory())                 .Timeouts(t => t.StoreInMemory())                 .Start();
Magic Number,Rebus.Tests.Sagas,TestConflictResolution,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestConflictResolution.cs,ItWorks,The following statement contains a magic number: const int messageCount = 3;
Magic Number,Rebus.Tests.Sagas,TestConflictResolution,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestConflictResolution.cs,ItWorks,The following statement contains a magic number: _bus.Advanced.Workers.SetNumberOfWorkers(10);
Magic Number,Rebus.Tests.Sagas,TestConflictResolution,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestConflictResolution.cs,ItWorks,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Sagas,TestConflictResolution,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestConflictResolution.cs,ItWorks,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Sagas,TestConflictResolution,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestConflictResolution.cs,ItWorks,The following statement contains a magic number: resetEvent.WaitOrDie(TimeSpan.FromSeconds(4)' "Did not receive the AllDone message!! One or more messages must have been moved to the error queue!");
Magic Number,Rebus.Tests.Sagas,MySaga,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestConflictResolution.cs,Handle,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Rebus.Tests.Sagas,MySaga,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestConflictResolution.cs,Handle,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Rebus.Tests.Sagas,TestHeaderCorrelation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestHeaderCorrelation.cs,CanCorrelateWithHeadersOfIncomingMessages,The following statement contains a magic number: var sharedCounter = new SharedCounter(5);
Magic Number,Rebus.Tests.Sagas,TestHeaderCorrelation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestHeaderCorrelation.cs,CanCorrelateWithHeadersOfIncomingMessages,The following statement contains a magic number: sharedCounter.WaitForResetEvent(timeoutSeconds: 2);
Magic Number,Rebus.Tests.Sagas,TestHeaderCorrelation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestHeaderCorrelation.cs,CanCorrelateWithHeadersOfIncomingMessagesByUsingContext,The following statement contains a magic number: var sharedCounter = new SharedCounter(5);
Magic Number,Rebus.Tests.Sagas,TestHeaderCorrelation,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestHeaderCorrelation.cs,CanCorrelateWithHeadersOfIncomingMessagesByUsingContext,The following statement contains a magic number: sharedCounter.WaitForResetEvent(timeoutSeconds: 2);
Magic Number,Rebus.Tests.Sagas,TestMarkAsComplete,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsComplete.cs,CanMarkSagaAsComplete,The following statement contains a magic number: await Task.Delay(400);
Magic Number,Rebus.Tests.Sagas,TestMarkAsComplete,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsComplete.cs,CanMarkSagaAsComplete,The following statement contains a magic number: await Task.Delay(400);
Magic Number,Rebus.Tests.Sagas,TestMarkAsComplete,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsComplete.cs,CanMarkSagaAsComplete,The following statement contains a magic number: await Task.Delay(400);
Magic Number,Rebus.Tests.Sagas,TestMarkAsComplete,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsComplete.cs,CanMarkSagaAsComplete,The following statement contains a magic number: Assert.That(registeredCounts.ToArray()' Is.EqualTo(new[] { 1' 2' 3' 4' 1 }));
Magic Number,Rebus.Tests.Sagas,TestMarkAsComplete,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsComplete.cs,CanMarkSagaAsComplete,The following statement contains a magic number: Assert.That(registeredCounts.ToArray()' Is.EqualTo(new[] { 1' 2' 3' 4' 1 }));
Magic Number,Rebus.Tests.Sagas,TestMarkAsComplete,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsComplete.cs,CanMarkSagaAsComplete,The following statement contains a magic number: Assert.That(registeredCounts.ToArray()' Is.EqualTo(new[] { 1' 2' 3' 4' 1 }));
Magic Number,Rebus.Tests.Sagas,TestMarkAsUnchanged,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsUnchanged.cs,CanMarkSagaAsUnchanged,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Sagas,TestMarkAsUnchanged,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsUnchanged.cs,CanMarkSagaAsUnchanged,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Sagas,TestMarkAsUnchanged,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsUnchanged.cs,CanMarkSagaAsUnchanged,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Sagas,TestMarkAsUnchanged,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsUnchanged.cs,CanMarkSagaAsUnchanged,The following statement contains a magic number: Assert.That(registeredRevisions.ToArray()' Is.EqualTo(new[] { 0' 0' 1' 2' 3' 4' 4' 5 }));
Magic Number,Rebus.Tests.Sagas,TestMarkAsUnchanged,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsUnchanged.cs,CanMarkSagaAsUnchanged,The following statement contains a magic number: Assert.That(registeredRevisions.ToArray()' Is.EqualTo(new[] { 0' 0' 1' 2' 3' 4' 4' 5 }));
Magic Number,Rebus.Tests.Sagas,TestMarkAsUnchanged,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsUnchanged.cs,CanMarkSagaAsUnchanged,The following statement contains a magic number: Assert.That(registeredRevisions.ToArray()' Is.EqualTo(new[] { 0' 0' 1' 2' 3' 4' 4' 5 }));
Magic Number,Rebus.Tests.Sagas,TestMarkAsUnchanged,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsUnchanged.cs,CanMarkSagaAsUnchanged,The following statement contains a magic number: Assert.That(registeredRevisions.ToArray()' Is.EqualTo(new[] { 0' 0' 1' 2' 3' 4' 4' 5 }));
Magic Number,Rebus.Tests.Sagas,TestMarkAsUnchanged,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestMarkAsUnchanged.cs,CanMarkSagaAsUnchanged,The following statement contains a magic number: Assert.That(registeredRevisions.ToArray()' Is.EqualTo(new[] { 0' 0' 1' 2' 3' 4' 4' 5 }));
Magic Number,Rebus.Tests.Sagas,TestSagaCorrelationPropertyNesting,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestSagaCorrelationPropertyNesting.cs,ItWorks,The following statement contains a magic number: var counter = new SharedCounter(5);
Magic Number,Rebus.Tests.Sagas,TestSagaCorrelationPropertyNesting,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestSagaCorrelationPropertyNesting.cs,ItWorks,The following statement contains a magic number: Assert.That(messagesBySagaId.Count' Is.EqualTo(2));
Magic Number,Rebus.Tests.Sagas,TestSagaCorrelationPropertyNesting,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestSagaCorrelationPropertyNesting.cs,ItWorks,The following statement contains a magic number: Assert.That(messagesBySagaId.Count(kvp => kvp.Value == 2)' Is.EqualTo(1));
Magic Number,Rebus.Tests.Sagas,TestSagaCorrelationPropertyNesting,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestSagaCorrelationPropertyNesting.cs,ItWorks,The following statement contains a magic number: Assert.That(messagesBySagaId.Count(kvp => kvp.Value == 3)' Is.EqualTo(1));
Magic Number,Rebus.Tests.Sagas,TestSagaInstanceLocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestSagaInstanceLocking.cs,SetUp,The following statement contains a magic number: _busStarter = Configure.With(_activator)                 .Logging(l => l.Use(_listLoggerFactory))                 .Transport(t => t.UseInMemoryTransport(_network' "in-process locking"))                 .Sagas(s =>                 {                     s.StoreInMemory();                     s.EnforceExclusiveAccess();                 })                 .Options(o =>                 {                     o.SimpleRetryStrategy(maxDeliveryAttempts: 0);                     o.SetNumberOfWorkers(1);                     o.SetMaxParallelism(20);                 })                 .Create();
Magic Number,Rebus.Tests.Sagas,TestSagaInstanceLocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestSagaInstanceLocking.cs,NotASingleConcurrencyExceptionPlease,The following statement contains a magic number: sagaWasInitiated.WaitOrDie(TimeSpan.FromSeconds(2)' "Saga was not properly initiated. That was weird.");
Magic Number,Rebus.Tests.Sagas,TestSagaInstanceLocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestSagaInstanceLocking.cs,NotASingleConcurrencyExceptionPlease,The following statement contains a magic number: await Task.Delay(300);
Magic Number,Rebus.Tests.Sagas,TestSagaInstanceLocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestSagaInstanceLocking.cs,NotASingleConcurrencyExceptionPlease,The following statement contains a magic number: sagaWasMarkedAsComplete.WaitOrDie(TimeSpan.FromSeconds(10 * messageCount + 5)'                     @"The saga was not completed within timeout.   This is most likely a sign that too many ConcurrencyExceptions  forced one or more messages into the error queue");
Magic Number,Rebus.Tests.Sagas,TestSagaInstanceLocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestSagaInstanceLocking.cs,NotASingleConcurrencyExceptionPlease,The following statement contains a magic number: sagaWasMarkedAsComplete.WaitOrDie(TimeSpan.FromSeconds(10 * messageCount + 5)'                     @"The saga was not completed within timeout.   This is most likely a sign that too many ConcurrencyExceptions  forced one or more messages into the error queue");
Magic Number,Rebus.Tests.Sagas.TestIdCorrelation,Scenario1,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestIdCorrelation\Scenario1.cs,CanInitiateSagaAndOverrideItsId,The following statement contains a magic number: var counter = new SharedCounter(5);
Magic Number,Rebus.Tests.Sagas.TestIdCorrelation,Scenario1,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Sagas\TestIdCorrelation\Scenario1.cs,CanInitiateSagaAndOverrideItsId,The following statement contains a magic number: Assert.That(sagaInstances.Count' Is.EqualTo(2));
Magic Number,Rebus.Tests.Serialization,TestJsonSerializer,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Serialization\TestJsonSerializer.cs,CutsLongJsonIncludedInDeserializationExceptionIfItIsTooLong,The following statement contains a magic number: var embeddedObjects = Enumerable.Range(0' 300)                 .Select(n => new EmbeddedObject($"HEJ MED DIG MIN VEN - DET HER ER BESKED {n}"));
Magic Number,Rebus.Tests.Serialization,TestJsonSerializer,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Serialization\TestJsonSerializer.cs,BreakMessage,The following statement contains a magic number: transportMessage.Body[index] = 84;
Magic Number,Rebus.Tests.Serialization,TestJsonSerializer,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Serialization\TestJsonSerializer.cs,BreakMessage,The following statement contains a magic number: index < 2000
Magic Number,Rebus.Tests.Synchronous,TestAsyncHelpers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestAsyncHelpers.cs,AnAsynchronousMethod,The following statement contains a magic number: await Task.Delay(200);
Magic Number,Rebus.Tests.Synchronous,TestSyncBus,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBus.cs,CanDoItSyncWithoutBlocking,The following statement contains a magic number: Assert.That(thread.Join(1000)' Is.True' "thread did not finish within timeout");
Magic Number,Rebus.Tests.Synchronous,TestSyncBus,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBus.cs,CanDoItSyncWithoutBlocking,The following statement contains a magic number: messageWasProperlyHandled.WaitOrDie(timeout: TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Synchronous,TestSyncBus,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBus.cs,SendOperationsEnlistInTheSameTransactionContext,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Rebus.Tests.Synchronous,TestSyncBusNoBlocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusNoBlocking.cs,DoesNotBlockOnSend,The following statement contains a magic number: gotMessage.WaitOrDie(TimeSpan.FromSeconds(3));
Magic Number,Rebus.Tests.Synchronous,TestSyncBusNoBlocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusNoBlocking.cs,DoesNotBlockOnCompletingTransactionContext,The following statement contains a magic number: aspNet.Post(s =>                 {                     using (var scope = new RebusTransactionScope())                     {                         try                         {                             // enlist some other async thing                             scope.TransactionContext.OnCommitted(async _ =>                             {                                 Console.WriteLine("waiting....");                                 await Task.Delay(100);                                 Console.WriteLine("waiting....");                                 await Task.Delay(100);                                 Console.WriteLine("waiting....");                                 await Task.Delay(100);                             });                              // enlist an operation in the context                             bus.SendLocal("HEJ MED DIG MIN VEN");                              scope.Complete();                         }                         finally                         {                             AmbientTransactionContext.SetCurrent(null);                         }                     }                 }' null);
Magic Number,Rebus.Tests.Synchronous,TestSyncBusNoBlocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusNoBlocking.cs,DoesNotBlockOnCompletingTransactionContext,The following statement contains a magic number: aspNet.Post(s =>                 {                     using (var scope = new RebusTransactionScope())                     {                         try                         {                             // enlist some other async thing                             scope.TransactionContext.OnCommitted(async _ =>                             {                                 Console.WriteLine("waiting....");                                 await Task.Delay(100);                                 Console.WriteLine("waiting....");                                 await Task.Delay(100);                                 Console.WriteLine("waiting....");                                 await Task.Delay(100);                             });                              // enlist an operation in the context                             bus.SendLocal("HEJ MED DIG MIN VEN");                              scope.Complete();                         }                         finally                         {                             AmbientTransactionContext.SetCurrent(null);                         }                     }                 }' null);
Magic Number,Rebus.Tests.Synchronous,TestSyncBusNoBlocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusNoBlocking.cs,DoesNotBlockOnCompletingTransactionContext,The following statement contains a magic number: aspNet.Post(s =>                 {                     using (var scope = new RebusTransactionScope())                     {                         try                         {                             // enlist some other async thing                             scope.TransactionContext.OnCommitted(async _ =>                             {                                 Console.WriteLine("waiting....");                                 await Task.Delay(100);                                 Console.WriteLine("waiting....");                                 await Task.Delay(100);                                 Console.WriteLine("waiting....");                                 await Task.Delay(100);                             });                              // enlist an operation in the context                             bus.SendLocal("HEJ MED DIG MIN VEN");                              scope.Complete();                         }                         finally                         {                             AmbientTransactionContext.SetCurrent(null);                         }                     }                 }' null);
Magic Number,Rebus.Tests.Synchronous,TestSyncBusNoBlocking,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusNoBlocking.cs,DoesNotBlockOnCompletingTransactionContext,The following statement contains a magic number: gotMessage.WaitOrDie(TimeSpan.FromSeconds(3));
Magic Number,Rebus.Tests.Synchronous,AspNetSimulatorSynchronizationContext,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusNoBlocking.cs,Run,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Rebus.Tests.Synchronous,AspNetSimulatorSynchronizationContext,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusNoBlocking.cs,Dispose,The following statement contains a magic number: !_workerThread.Join(1000)
Magic Number,Rebus.Tests.Synchronous,DelayOperationsTransportDecorator,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusNoBlocking.cs,Send,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Rebus.Tests.Synchronous,DelayOperationsTransportDecorator,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Synchronous\TestSyncBusNoBlocking.cs,Send,The following statement contains a magic number: counter < 10
Magic Number,Rebus.Tests.Threading,TestParallelOperationsManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Threading\TestParallelOperationsManager.cs,DoesNotAllowMoreThanMaxParallelismToContinue,The following statement contains a magic number: var manager = new ParallelOperationsManager(3);
Magic Number,Rebus.Tests.Threading,TestParallelOperationsManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Threading\TestParallelOperationsManager.cs,ReleasesOperationAsExpected,The following statement contains a magic number: var manager = new ParallelOperationsManager(3);
Magic Number,Rebus.Tests.Threading,TestParallelOperationsManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Threading\TestParallelOperationsManager.cs,ReleasingOperationThatCouldNotContinueDoesNotAffectAnything,The following statement contains a magic number: var manager = new ParallelOperationsManager(2);
Magic Number,Rebus.Tests.Timeouts,TestDeferCounter,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestDeferCounter.cs,DeferredMessageHasDeferCountOf1,The following statement contains a magic number: await bus.Defer(TimeSpan.FromSeconds(0.001)' "HEJ MED DIG MIN VEN");
Magic Number,Rebus.Tests.Timeouts,TestDeferCounter,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestDeferCounter.cs,DeferCountIsIncremented,The following statement contains a magic number: const int howManyTimes = 3;
Magic Number,Rebus.Tests.Timeouts,TestDeferCounter,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestDeferCounter.cs,DeferCountIsIncremented,The following statement contains a magic number: _activator.Handle<string>(async (bus' context' str) =>             {                 dispatchCount++;                  Console.WriteLine($"Message has been dispatched {dispatchCount} times now!");                                  var headers = context.Headers;                 var count = int.Parse(headers.GetValue(Headers.DeferCount));                  if (count == howManyTimes)                 {                     done.Set();                     return;                 }                  await bus.Advanced.TransportMessage.Defer(TimeSpan.FromSeconds(0.001));             });
Magic Number,Rebus.Tests.Timeouts,TestDeferCounter,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestDeferCounter.cs,DeferCountIsIncremented,The following statement contains a magic number: await deferBus.DeferLocal(TimeSpan.FromSeconds(0.001)' "HEJ MED DIG MIN VEN");
Magic Number,Rebus.Tests.Timeouts,TestDeferCounter,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestDeferCounter.cs,DeferCountIsIncremented,The following statement contains a magic number: done.WaitOrDie(TimeSpan.FromSeconds(7)'                  errorMessage: $"Message was not dispatched {howManyTimes} times within 7s timeout");
Magic Number,Rebus.Tests.Timeouts,TestExternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestExternalTimeoutManager.cs,ItWorksEvenThoughDeferredMessageIsAccidentallyReceived,The following statement contains a magic number: var headers = new Dictionary<string' string>             {                 {Headers.DeferredUntil' DateTimeOffset.Now.Add(TimeSpan.FromSeconds(5)).ToIso8601DateTimeOffset()}'                 {Headers.DeferredRecipient' _queueName}             };
Magic Number,Rebus.Tests.Timeouts,TestExternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestExternalTimeoutManager.cs,ItWorksEvenThoughDeferredMessageIsAccidentallyReceived,The following statement contains a magic number: _gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(8.5)' "Message was not received within 8'5 seconds (which it should have been since it was only deferred 5 seconds)");
Magic Number,Rebus.Tests.Timeouts,TestExternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestExternalTimeoutManager.cs,ItWorksEvenThoughDeferredMessageIsAccidentallyReceived,The following statement contains a magic number: Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromSeconds(4.5))' "It must take more than 5 second to get the message back (although we allow for a little bit of tolerance in this test....)");
Magic Number,Rebus.Tests.Timeouts,TestExternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestExternalTimeoutManager.cs,ItWorks,The following statement contains a magic number: await _bus.DeferLocal(TimeSpan.FromSeconds(5)' "hej med dig min ven!");
Magic Number,Rebus.Tests.Timeouts,TestExternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestExternalTimeoutManager.cs,ItWorks,The following statement contains a magic number: _gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(8.5)' "Message was not received within 8'5 seconds (which it should have been since it was only deferred 5 seconds)");
Magic Number,Rebus.Tests.Timeouts,TestExternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestExternalTimeoutManager.cs,ItWorks,The following statement contains a magic number: Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromSeconds(5))' "It must take more than 5 second to get the message back");
Magic Number,Rebus.Tests.Timeouts,TestInternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestInternalTimeoutManager.cs,WorksOutOfTheBoxWithInternalTimeoutManager_WhenInMemTimeoutsIsConfigure,The following statement contains a magic number: await activator.Bus.DeferLocal(TimeSpan.FromSeconds(5)' "hej med dig min ven!");
Magic Number,Rebus.Tests.Timeouts,TestInternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestInternalTimeoutManager.cs,WorksOutOfTheBoxWithInternalTimeoutManager_WhenInMemTimeoutsIsConfigure,The following statement contains a magic number: gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(6.5)'                     "Message was not received within 6'5 seconds (which it should have been since it was only deferred 5 seconds)");
Magic Number,Rebus.Tests.Timeouts,TestInternalTimeoutManager,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timeouts\TestInternalTimeoutManager.cs,WorksOutOfTheBoxWithInternalTimeoutManager_WhenInMemTimeoutsIsConfigure,The following statement contains a magic number: Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromSeconds(5))'                     "It must take more than 5 second to get the message back");
Magic Number,Rebus.Tests.Timers,CompareAsyncTasks<TTaskFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\CompareAsyncTasks.cs,CheckTimerDrift,The following statement contains a magic number: const int testDurationSeconds = 10;
Magic Number,Rebus.Tests.Timers,CompareAsyncTasks<TTaskFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\CompareAsyncTasks.cs,CheckTimerDrift,The following statement contains a magic number: counter.WaitForResetEvent(timeoutSeconds: 15);
Magic Number,Rebus.Tests.Timers,TestAsyncTask<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\TestAsyncTask.cs,CanCancelTaskFromCancellationTokenSource,The following statement contains a magic number: var task = _factory.CreateTask(                 interval: TimeSpan.FromSeconds(1)'                 action: async () =>                 {                     Console.WriteLine($"Task function called {DateTimeOffset.Now}");                     calls++;                      if (calls == 3)                     {                         Console.WriteLine($"Got 3 calls now' cancelling task {DateTimeOffset.Now}");                         cancellationTokenSource.Cancel();                     }                 }             );
Magic Number,Rebus.Tests.Timers,TestAsyncTask<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\TestAsyncTask.cs,CanCancelTaskFromCancellationTokenSource,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(4)' CancellationToken.None);
Magic Number,Rebus.Tests.Timers,TestAsyncTask<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\TestAsyncTask.cs,AsyncTaskMayBeStoppedBeforeBeingInvoked,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Timers,TestAsyncTask<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\TestAsyncTask.cs,CanActuallyStopTaskWithLongInterval,The following statement contains a magic number: var task = _factory.CreateTask(TimeSpan.FromMinutes(4.5)' async () => { Console.WriteLine("INVOKED!!!"); });
Magic Number,Rebus.Tests.Timers,TestAsyncTask<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\TestAsyncTask.cs,DoesNotDieOnTransientErrors,The following statement contains a magic number: var task = _factory.CreateTask(TimeSpan.FromMilliseconds(400)' async () =>             {                 if (throwException)                 {                     throw new Exception("but you told me to do it!");                 }                  taskWasCompleted = true;             });
Magic Number,Rebus.Tests.Timers,TestAsyncTask<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\TestAsyncTask.cs,WorksWithSomeKindOfAccuracy,The following statement contains a magic number: var task = _factory.CreateTask(TimeSpan.FromSeconds(0.2)'                 async () =>                 {                     events.Enqueue(stopwatch.Elapsed);                 });
Magic Number,Rebus.Tests.Timers,TestAsyncTask<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\TestAsyncTask.cs,WorksWithSomeKindOfAccuracy,The following statement contains a magic number: await Task.Delay(1199);
Magic Number,Rebus.Tests.Timers,TestAsyncTask<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\TestAsyncTask.cs,WorksWithSomeKindOfAccuracy,The following statement contains a magic number: Assert.That(events.Count' Is.GreaterThanOrEqualTo(3)' "TPL-based tasks are wildly inaccurate and can sometimes add 2-300 ms per Task.Delay");
Magic Number,Rebus.Tests.Timers,TestAsyncTask<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Timers\TestAsyncTask.cs,WorksWithSomeKindOfAccuracy,The following statement contains a magic number: Assert.That(events.Count' Is.LessThanOrEqualTo(8));
Magic Number,Rebus.Tests.Time,FakeRebusTime,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Time\FakeRebusTime.cs,FakeIt,The following statement contains a magic number: _fakeTimeFactory = () =>             {                 var timeToReturn = time;                 if (driftSlightly)                 {                     time = time.AddTicks(17);                 }                  return timeToReturn;             };
Magic Number,Rebus.Tests.Transactions,TestUnitOfWork,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transactions\TestUnitOfWork.cs,HandlesExceptionOnCommitAsOrdinaryException,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Transactions,TestUnitOfWork,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transactions\TestUnitOfWork.cs,HandlesExceptionOnCommitAsOrdinaryException,The following statement contains a magic number: Console.WriteLine(string.Join(Environment.NewLine' lines.Select(line => line.ToString().Limit(200))));
Magic Number,Rebus.Tests.Transactions,TestUnitOfWork,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transactions\TestUnitOfWork.cs,HandlesExceptionOnCommitAsOrdinaryException,The following statement contains a magic number: Assert.That(warnings' Is.EqualTo(5)' "Expected exactly 5 warnings: One for each failed delivery attempt");
Magic Number,Rebus.Tests.Transport.InMem,InMemNetworkInspectionTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transport\InMem\InMemNetworkInspectionTests.cs,GetMessages_QueueWithMessages_ReturnsMessages,The following statement contains a magic number: Assert.That(messages.Count' Is.EqualTo(2));
Magic Number,Rebus.Tests.Transport.InMem,TestInMemTransport,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transport\InMem\TestInMemTransport.cs,VeryBasicTransactionThing,The following statement contains a magic number: await transport.Send(                     destinationAddress: destinationQueueName'                     message: new TransportMessage(headers' new byte[] { 1' 2' 3 })'                     context: scope.TransactionContext                 );
Magic Number,Rebus.Tests.Transport.InMem,TestInMemTransport,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Transport\InMem\TestInMemTransport.cs,VeryBasicTransactionThing,The following statement contains a magic number: await transport.Send(                     destinationAddress: destinationQueueName'                     message: new TransportMessage(headers' new byte[] { 1' 2' 3 })'                     context: scope.TransactionContext                 );
Magic Number,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,WaitDoesPerformDoesPause,The following statement contains a magic number: var backoffStrategy = new DefaultBackoffStrategy(new[] 		    { 			    TimeSpan.FromMilliseconds(500) 		    }' new Options());
Magic Number,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,WaitDoesPerformDoesPause,The following statement contains a magic number: Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromMilliseconds(450)).And.LessThan(TimeSpan.FromMilliseconds(550)));
Magic Number,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,WaitDoesPerformDoesPause,The following statement contains a magic number: Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromMilliseconds(450)).And.LessThan(TimeSpan.FromMilliseconds(550)));
Magic Number,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,WaitAsyncDoesPause,The following statement contains a magic number: var backoffStrategy = new DefaultBackoffStrategy(new[] 		    { 			    TimeSpan.FromMilliseconds(500) 		    }' new Options());
Magic Number,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,WaitAsyncDoesPause,The following statement contains a magic number: Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromMilliseconds(450)).And.LessThan(TimeSpan.FromMilliseconds(550)));
Magic Number,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,WaitAsyncDoesPause,The following statement contains a magic number: Assert.That(stopwatch.Elapsed' Is.GreaterThan(TimeSpan.FromMilliseconds(450)).And.LessThan(TimeSpan.FromMilliseconds(550)));
Magic Number,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,BacksOffAsItShould,The following statement contains a magic number: var backoffStrategy = new DefaultBackoffStrategy(new[]             {                 TimeSpan.FromMilliseconds(100)'                  TimeSpan.FromMilliseconds(500)'                  TimeSpan.FromMilliseconds(1000)'              }' new Options());
Magic Number,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,BacksOffAsItShould,The following statement contains a magic number: var backoffStrategy = new DefaultBackoffStrategy(new[]             {                 TimeSpan.FromMilliseconds(100)'                  TimeSpan.FromMilliseconds(500)'                  TimeSpan.FromMilliseconds(1000)'              }' new Options());
Magic Number,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,BacksOffAsItShould,The following statement contains a magic number: var backoffStrategy = new DefaultBackoffStrategy(new[]             {                 TimeSpan.FromMilliseconds(100)'                  TimeSpan.FromMilliseconds(500)'                  TimeSpan.FromMilliseconds(1000)'              }' new Options());
Magic Number,Rebus.Tests.Workers,TestDefaultBackoffStrategy,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestDefaultBackoffStrategy.cs,BacksOffAsItShould,The following statement contains a magic number: stopwatch.Elapsed < TimeSpan.FromSeconds(5)
Magic Number,Rebus.Tests.Workers,TestSetNumberOfWorkers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestSetNumberOfWorkers.cs,SetUp,The following statement contains a magic number: Configure.With(_activator)                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' "set-number-of-workers"))                 .Options(o =>                 {                     o.SetMaxParallelism(10);                     o.SetNumberOfWorkers(1);                 })                 .Start();
Magic Number,Rebus.Tests.Workers,TestSetNumberOfWorkers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestSetNumberOfWorkers.cs,CanChangeNumberOfWorkersWhileRunning,The following statement contains a magic number: workers.SetNumberOfWorkers(5);
Magic Number,Rebus.Tests.Workers,TestSetNumberOfWorkers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TestSetNumberOfWorkers.cs,CanChangeNumberOfWorkersWhileRunning,The following statement contains a magic number: Assert.That(workers.Count' Is.EqualTo(5));
Magic Number,Rebus.Tests.Workers,ThreadWorkerIntegrationTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\ThreadWorkerIntegrationTests.cs,SetUp,The following statement contains a magic number: _bus = Configure.With(_handlerActivator)                 .Routing(r => r.TypeBased().Map<string>(InputQueueName))                 .Transport(t => t.UseInMemoryTransport(new InMemNetwork()' InputQueueName))                 .Options(o => o.SetNumberOfWorkers(1))                 .Logging(l => l.Trace())                 .Options(o => o.SetWorkerShutdownTimeout(TimeSpan.FromSeconds(5))) // new option we are testing against                 .Start();
Magic Number,Rebus.Tests.Workers,ThreadWorkerIntegrationTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\ThreadWorkerIntegrationTests.cs,Dispose_WaitsDefinedTimeout_WhenPendingTasksTakeLonger,The following statement contains a magic number: _handlerActivator.Handle<string>(async str =>             {                 startedHandle.Set();                  await Task.Delay(TimeSpan.FromSeconds(10));             });
Magic Number,Rebus.Tests.Workers,ThreadWorkerIntegrationTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\ThreadWorkerIntegrationTests.cs,Dispose_WaitsDefinedTimeout_WhenPendingTasksTakeLonger,The following statement contains a magic number: Assert.That(timer.Elapsed' Is.GreaterThan(TimeSpan.FromSeconds(4)).And.LessThan(TimeSpan.FromSeconds(6)));
Magic Number,Rebus.Tests.Workers,ThreadWorkerIntegrationTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\ThreadWorkerIntegrationTests.cs,Dispose_WaitsDefinedTimeout_WhenPendingTasksTakeLonger,The following statement contains a magic number: Assert.That(timer.Elapsed' Is.GreaterThan(TimeSpan.FromSeconds(4)).And.LessThan(TimeSpan.FromSeconds(6)));
Magic Number,Rebus.Tests.Workers,ThreadWorkerIntegrationTests,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\ThreadWorkerIntegrationTests.cs,Dispose_WaitsForTaskToComplete_WhenItTakesLessThanDefinedTimeout,The following statement contains a magic number: var taskTakingTime = TimeSpan.FromSeconds(5);
Magic Number,Rebus.Tests.Workers,TryUsingTaskParallelLibraryToReceiveMessages,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\TryUsingTaskParallelLibraryToReceiveMessages.cs,CheckThreads,The following statement contains a magic number: counter.WaitForResetEvent(timeoutSeconds: 15);
Magic Number,Rebus.Tests.Workers,VerifyFastShutdownWithTplWorkers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\VerifyFastShutdownWithTplWorkers.cs,CanStopQuicklyWhenCancellationTokenIsUsed,The following statement contains a magic number: activator.Handle<string>(async (bus' context' str) =>             {                 messageIsBeingHandled.Set();                  var cancellationToken = context.IncomingStepContext.Load<CancellationToken>();                  await Task.Delay(TimeSpan.FromSeconds(10)' cancellationToken);             });
Magic Number,Rebus.Tests.Workers,VerifyFastShutdownWithTplWorkers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\VerifyFastShutdownWithTplWorkers.cs,CanStopQuicklyWhenCancellationTokenIsUsed,The following statement contains a magic number: messageIsBeingHandled.WaitOrDie(timeout: TimeSpan.FromSeconds(2));
Magic Number,Rebus.Tests.Workers,VerifyFastShutdownWithTplWorkers,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests\Workers\VerifyFastShutdownWithTplWorkers.cs,CanStopQuicklyWhenCancellationTokenIsUsed,The following statement contains a magic number: Assert.That(stopwatch.Elapsed' Is.LessThan(TimeSpan.FromSeconds(2)));
