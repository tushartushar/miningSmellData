Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Rebus.Tests.Contracts.Utilities,ListLogger,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Utilities\ListLoggerFactory.cs,ListLogger,The method has 5 parameters. Parameters: loggedLines' type' outputToConsole' detailed' loggerFactory
Long Identifier,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The length of the parameter dateTimeOffsetCorrelationValue is 30.
Long Identifier,Rebus.Tests.Contracts.Sagas,TestCorrelationProperty,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\TestCorrelationProperty.cs,,The length of the parameter AllowedCorrelationPropertyTypes is 31.
Long Identifier,Rebus.Tests.Contracts.Subscriptions,BasicSubscriptionOperations<TSubscriptionStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Subscriptions\BasicSubscriptionOperations.cs,CanSubscribeAndUnsubscribe,The length of the parameter subscriberCountBeforeUnsubscribing is 34.
Long Identifier,Rebus.Tests.Contracts.Subscriptions,BasicSubscriptionOperations<TSubscriptionStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Subscriptions\BasicSubscriptionOperations.cs,CanSubscribeAndUnsubscribe,The length of the parameter subscriberCountAfterUnsubscribing is 33.
Long Identifier,Rebus.Tests.Contracts.Timeouts,BasicStoreAndRetrieveOperations<TTimeoutManagerFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Timeouts\BasicStoreAndRetrieveOperations.cs,TimeoutsAreNotReturnedUntilTheyAreActuallyDue,The length of the parameter dueTimeoutsFurtherIntoInTheFuture is 33.
Long Identifier,Rebus.Tests.Contracts.Transports,BasicSendReceive<TTransportFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\BasicSendReceive.cs,MultipleSentMessagesCanBeRolledBack,The length of the parameter commitAndExpectTheMessagesToBeSent is 34.
Long Statement,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,MultipleRegistrationsException,The length of the statement  "            }' "Expected that the second call to SetBus on the container adapter with another bus instance would throw an exception");" is 122.
Long Statement,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,DoesNotDoubleResolveBecauseOfLazyEnumerableEvaluation,The length of the statement  "            Assert.That(createdInstances' Is.EqualTo(new[] { 0 })' "Expected that one single instance (with # 0) would have been created");" is 127.
Long Statement,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,DoesNotDoubleResolveBecauseOfLazyEnumerableEvaluation,The length of the statement  "            Assert.That(disposedInstances' Is.EqualTo(new[] { 0 })' "Expected that one single instance (with # 0) would have been disposed");" is 129.
Long Statement,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,CanGetDecoratedBus,The length of the statement  "            Assert.That(busReturnedFromConfiguration' Is.TypeOf<TestBusDecorator>()' "Expected the bus returned from Configure(...).(...).Start() to be of type TestBusDecorator");" is 167.
Long Statement,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,CanGetDecoratedBus,The length of the statement  "            Assert.That(busReturnedFromContainer' Is.TypeOf<TestBusDecorator>()' "Expected the bus returned from the container to be of type TestBuDecorator");" is 147.
Long Statement,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,CanSetBusAndDisposeItAfterwards,The length of the statement  "                Console.WriteLine($"The handler activator {activator} is not a container adapter (i.e. an implementation of IContainerAdapter)");" is 129.
Long Statement,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,ResolvesHandlersPolymorphically_ConcreteCaseWithFailedMessage,The length of the statement  "                const string message = @"Expected that a single SecondLevelDeliveryHandler instance would have been returned because it implements IHandleMessages<IFailed<FailedMessage>> and we resolved handlers for a FailedMessageWrapper<FailedMessage>";" is 239.
Long Statement,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,ResolvesHandlersPolymorphically,The length of the statement  "                const string message = @"Expected that a single BaseMessageHandler instance would have been returned because it implements IHandleMessages<BaseMessage> and we resolved handlers for a DerivedMessage";" is 199.
Long Statement,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,ResolvingWithoutRegistrationYieldsEmptySequence,The length of the statement  "                Assert.That(handlers.Count' Is.EqualTo(0)' "Did not expected any handlers to be returned because none were registered");" is 120.
Long Statement,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,CanRegisterHandler,The length of the statement  "                const string message = "Expected one single SomeStringHandler instance to be returned' because that's what was registered";" is 123.
Long Statement,Rebus.Tests.Contracts.Activation,RealContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\RealContainerTests.cs,BusIsDisposedAfterUse,The length of the statement  "            Assert.That(wasDisposed' Is.True' "The registered DisposableCallbacker was not disposed' which indicates that the bus probably wasn't either");" is 143.
Long Statement,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The length of the statement  "            var ids3 = _management.Query(readTime: new TimeRange(from: new DateTime(2019' 03' 01)' to: new DateTime(2019' 05' 01))).InOrder().ToList();" is 139.
Long Statement,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The length of the statement  "            var ids3 = _management.Query(saveTime: new TimeRange(from: new DateTime(2019' 03' 01)' to: new DateTime(2019' 05' 01))).InOrder().ToList();" is 139.
Long Statement,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,UpdatesTimeOfLastRead,The length of the statement  "                $"Expected that the '{MetadataKeys.ReadTime}' metadata value '{readTimeMetadata}' would equal {justSomeTime} when passed to DateTimeOffset.Parse(...)");" is 152.
Long Statement,Rebus.Tests.Contracts.Extensions,TestEx,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Extensions\TestEx.cs,WaitForNextMessage,The length of the statement  "                throw new TimeoutException($"Did not receive message from transport with address '{transport.Address}' within {timeoutSeconds} s timeout");" is 139.
Long Statement,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,IncludesTypeAsFindCriteria_CorrelationByCustomProperty,The length of the statement  "            await _sagaStorage.Insert(new Data1 { Id = Guid.NewGuid()' CorrelationId = knownCorrelationId }' correlationProperties);" is 120.
Long Statement,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,GetsNullWhenValueDoesNotExist,The length of the statement  "            await _sagaStorage.Insert(new TestSagaData { Id = Guid.NewGuid()' CorrelationId = "existing" }' _noCorrelationProperties);" is 122.
Long Statement,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,RevisionIsIncrementedOnPassedInInstanceWhenDeleting,The length of the statement  "            Assert.That(revisionAfterInsert' Is.EqualTo(0)' "Expected revision after first INSERT to be 0 because this is the first revision");" is 131.
Long Statement,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,RevisionIsIncrementedOnPassedInInstanceWhenDeleting,The length of the statement  "            Assert.That(revisionAfterUpdate' Is.EqualTo(1)' "Expected revision after UPDATE to be 1 because is has now been saved as REV 1");" is 129.
Long Statement,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,RevisionIsIncrementedOnPassedInInstanceWhenDeleting,The length of the statement  "            Assert.That(revisionAfterDelete' Is.EqualTo(2)' "Expceted revision after DELETE to be 2 because it's the best bet revision number to use even though it has most likely been deleted for good from the underlying storage");" is 220.
Long Statement,Rebus.Tests.Contracts.Sagas,ConcurrencyHandling<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\ConcurrencyHandling.cs,ThrowsWhenRevisionDoesNotMatchExpected,The length of the statement  "            var aggregateException = Assert.Throws<AggregateException>(() => _sagaStorage.Update(loadedData2' _noCorrelationProperties).Wait());" is 132.
Long Statement,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaData,The length of the statement  "            Assert.That(allSnapshots.OrderBy(s => s.SagaData.Revision).Select(s => s.SagaData.Revision)' Is.EqualTo(new[] { 0' 1' 2 })'" is 123.
Long Statement,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaDataAlsoWhenImmediatelyMarkingAsComplete,The length of the statement  "            Assert.That(allSnapshots.All(s => s.SagaData.Revision == 0)' "Not all revisions were initial!: {0}"' allSnapshots.Select(s => s.SagaData.Revision));" is 148.
Long Statement,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaDataAlsoWhenImmediatelyMarkingAsComplete,The length of the statement  "            Assert.That(allSnapshots.Select(s => s.SagaData.Id).Distinct().Count()' Is.EqualTo(3)' "Expected three different saga IDs!");" is 125.
Long Statement,Rebus.Tests.Contracts.Sagas,TestCorrelationProperty,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\TestCorrelationProperty.cs,Validate,The length of the statement  "            throw new ArgumentException($"Cannot correlate with the '{PropertyName}' property on the '{SagaDataType.Name}' saga data type - only allowed types are: {string.Join("' "' AllowedCorrelationPropertyTypes.Select(t => t.Name))}");" is 227.
Long Statement,Rebus.Tests.Contracts.Serialization,BasicSerializationTests<TSerializerFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Serialization\BasicSerializationTests.cs,CanRoundtripSomeBasicValues,The length of the statement  "                Console.WriteLine($"Serialization of '{originalMessage.GetType()}' instance is not supported by {_serializer.GetType()}");" is 122.
Long Statement,Rebus.Tests.Contracts.Timeouts,BasicStoreAndRetrieveOperations<TTimeoutManagerFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Timeouts\BasicStoreAndRetrieveOperations.cs,TimeoutsAreNotRemovedIfTheyAreNotMarkedAsComplete,The length of the statement  "                Assert.That(dueTimeoutsInTheFuture.Count' Is.EqualTo(1)' "Did not get the expected number of timeouts - debug info: {0}"' _factory.GetDebugInfo());" is 147.
Long Statement,Rebus.Tests.Contracts.Timeouts,BasicStoreAndRetrieveOperations<TTimeoutManagerFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Timeouts\BasicStoreAndRetrieveOperations.cs,TimeoutsAreNotRemovedIfTheyAreNotMarkedAsComplete,The length of the statement  "                Assert.That(dueTimeoutsInTheFuture.Count' Is.EqualTo(1)' "Did not get the expected number of timeouts - debug info: {0}"' _factory.GetDebugInfo());" is 147.
Long Statement,Rebus.Tests.Contracts.Timeouts,BasicStoreAndRetrieveOperations<TTimeoutManagerFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Timeouts\BasicStoreAndRetrieveOperations.cs,TimeoutsAreNotRemovedIfTheyAreNotMarkedAsComplete,The length of the statement  "                Assert.That(dueTimeoutsInTheFuture.Count' Is.EqualTo(0)' "Did not get the expected number of timeouts - debug info: {0}"' _factory.GetDebugInfo());" is 147.
Long Statement,Rebus.Tests.Contracts.Transports,BasicSendReceive<TTransportFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\BasicSendReceive.cs,MultipleSentMessagesCanBeRolledBack,The length of the statement  "                Assert.That(receivedMessages.Count' Is.EqualTo(2)' "Two messages were sent' so we expected two messages to be received");" is 121.
Long Statement,Rebus.Tests.Contracts.Transports,BasicSendReceive<TTransportFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\BasicSendReceive.cs,MultipleSentMessagesCanBeRolledBack,The length of the statement  "                    $@"Expected that the messages 'hej1' and 'hej2' would have been received' but instead we got this: {string.Join("' "' receivedMessages)}");" is 139.
Long Statement,Rebus.Tests.Contracts.Transports,BasicSendReceive<TTransportFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\BasicSendReceive.cs,MultipleSentMessagesCanBeRolledBack,The length of the statement  "                Assert.That(allMessages.Count' Is.EqualTo(0)' "The transaction was not completed' so we didn't expect any messages to have been sent");" is 135.
Long Statement,Rebus.Tests.Contracts.Transports,TestManyMessages<TBusFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\TestManyMessages.cs,GenerateErrorText,The length of the statement  "                $"The following IDs were received != 1 times: {string.Join("' "' idCounts.Where(kvp => kvp.Value != 1).OrderBy(kvp => kvp.Value).Select(kvp => $"{kvp.Key} (x {kvp.Value})"))}";" is 176.
Empty Catch Block,Rebus.Tests.Contracts,FileDeleter,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\FixtureBase.cs,Dispose,The method has an empty catch block.
Magic Number,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,IntegrationTest,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,ResolvesHandlersPolymorphically_MultipleHandlers,The following statement contains a magic number: Assert.That(handlers.Count' Is.EqualTo(2)' message);
Magic Number,Rebus.Tests.Contracts.Activation,ContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\ContainerTests.cs,ResolvedHandlerIsDisposed,The following statement contains a magic number: await DisposableHandler.Events.WaitUntil(c => c.Count == 2);
Magic Number,Rebus.Tests.Contracts.Activation,RealContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\RealContainerTests.cs,CanInjectSyncBus,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Rebus.Tests.Contracts.Activation,RealContainerTests<TActivationContext>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Activation\RealContainerTests.cs,CanInjectMessageContext,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 01' 01)' "id1");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 02' 01)' "id2");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 02' 01)' "id2");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 03' 01)' "id3");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 03' 01)' "id3");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 04' 01)' "id4");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 04' 01)' "id4");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 05' 01)' "id5");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 05' 01)' "id5");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: var ids1 = _management.Query(readTime: new TimeRange(from: new DateTime(2019' 02' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: var ids1 = _management.Query(readTime: new TimeRange(from: new DateTime(2019' 02' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: var ids2 = _management.Query(readTime: new TimeRange(from: new DateTime(2019' 03' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: var ids2 = _management.Query(readTime: new TimeRange(from: new DateTime(2019' 03' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: var ids3 = _management.Query(readTime: new TimeRange(from: new DateTime(2019' 03' 01)' to: new DateTime(2019' 05' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: var ids3 = _management.Query(readTime: new TimeRange(from: new DateTime(2019' 03' 01)' to: new DateTime(2019' 05' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: var ids3 = _management.Query(readTime: new TimeRange(from: new DateTime(2019' 03' 01)' to: new DateTime(2019' 05' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_ReadTime,The following statement contains a magic number: var ids3 = _management.Query(readTime: new TimeRange(from: new DateTime(2019' 03' 01)' to: new DateTime(2019' 05' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 01' 01)' "id1");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 02' 01)' "id2");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 02' 01)' "id2");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 03' 01)' "id3");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 03' 01)' "id3");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 04' 01)' "id4");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 04' 01)' "id4");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 05' 01)' "id5");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: await CreateAttachment(new DateTime(2019' 05' 01)' "id5");
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: var ids1 = _management.Query(saveTime: new TimeRange(from: new DateTime(2019' 02' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: var ids1 = _management.Query(saveTime: new TimeRange(from: new DateTime(2019' 02' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: var ids2 = _management.Query(saveTime: new TimeRange(from: new DateTime(2019' 03' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: var ids2 = _management.Query(saveTime: new TimeRange(from: new DateTime(2019' 03' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: var ids3 = _management.Query(saveTime: new TimeRange(from: new DateTime(2019' 03' 01)' to: new DateTime(2019' 05' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: var ids3 = _management.Query(saveTime: new TimeRange(from: new DateTime(2019' 03' 01)' to: new DateTime(2019' 05' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: var ids3 = _management.Query(saveTime: new TimeRange(from: new DateTime(2019' 03' 01)' to: new DateTime(2019' 05' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanQueryByTimeStamps_SaveTime,The following statement contains a magic number: var ids3 = _management.Query(saveTime: new TimeRange(from: new DateTime(2019' 03' 01)' to: new DateTime(2019' 05' 01))).InOrder().ToList();
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,UpdatesTimeOfLastRead,The following statement contains a magic number: var justSomeTime = new DateTimeOffset(new DateTime(2016' 1' 1));
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanGetStandardMetada,The following statement contains a magic number: var fakeTime = new DateTimeOffset(new DateTime(2016' 6' 17));
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanGetStandardMetada,The following statement contains a magic number: var fakeTime = new DateTimeOffset(new DateTime(2016' 6' 17));
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanGetStandardMetada,The following statement contains a magic number: var fakeTime = new DateTimeOffset(new DateTime(2016' 6' 17));
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanGetStandardMetada,The following statement contains a magic number: var data = new byte[] { 1' 2' 3 };
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanGetStandardMetada,The following statement contains a magic number: var data = new byte[] { 1' 2' 3 };
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanSaveAndLoadBiggerPieceOfData,The following statement contains a magic number: var originalData = string.Join("/"' Enumerable.Range(0' 10000));
Magic Number,Rebus.Tests.Contracts.DataBus,GeneralDataBusStorageTests<TDataStorageFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\DataBus\GeneralDataBusStorageTests.cs,CanLoadSaveDataMultipleTimes,The following statement contains a magic number: 100.Times(() =>             {                 AssertCanRead(knownId' originalData).Wait();             });
Magic Number,Rebus.Tests.Contracts.Extensions,FakeMessageContextScope,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Extensions\FakeMessageContextScope.cs,FakeMessageContextScope,The following statement contains a magic number: TransactionContext.Items[StepContext.StepContextKey] = new IncomingStepContext(new TransportMessage(new Dictionary<string' string>()' new byte[] { 1' 2' 3 })' TransactionContext);
Magic Number,Rebus.Tests.Contracts.Extensions,FakeMessageContextScope,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Extensions\FakeMessageContextScope.cs,FakeMessageContextScope,The following statement contains a magic number: TransactionContext.Items[StepContext.StepContextKey] = new IncomingStepContext(new TransportMessage(new Dictionary<string' string>()' new byte[] { 1' 2' 3 })' TransactionContext);
Magic Number,Rebus.Tests.Contracts.Extensions,TestEx,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Extensions\TestEx.cs,GetMedianBy,The following statement contains a magic number: var medianIndex = list.Count / 2;
Magic Number,Rebus.Tests.Contracts.Extensions,TestEx,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Extensions\TestEx.cs,WaitForNextMessage,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Rebus.Tests.Contracts.Extensions,TestEx,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Extensions\TestEx.cs,WaitForNextMessageFrom,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Rebus.Tests.Contracts.Extensions,TestEx,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Extensions\TestEx.cs,Limit,The following statement contains a magic number: line.Length + 3 <= maxNumberOfChars
Magic Number,Rebus.Tests.Contracts.Extensions,TestEx,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Extensions\TestEx.cs,Limit,The following statement contains a magic number: return line.Substring(0' maxNumberOfChars - 3) + "...";
Magic Number,Rebus.Tests.Contracts.Extensions,TestEx,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Extensions\TestEx.cs,WaitUntil,The following statement contains a magic number: var timeout = TimeSpan.FromSeconds(timeoutSeconds.GetValueOrDefault(5));
Magic Number,Rebus.Tests.Contracts.Extensions,TestEx,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Extensions\TestEx.cs,WaitUntil,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(100));
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,RevisionIsIncrementedOnEachUpdate,The following statement contains a magic number: Assert.That(loadedSagaData1.Revision' Is.EqualTo(2));
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,RevisionIsIncrementedOnEachUpdate,The following statement contains a magic number: Assert.That(loadedSagaData2.Revision' Is.EqualTo(2));
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,RevisionIsIncrementedOnPassedInInstanceWhenDeleting,The following statement contains a magic number: Assert.That(revisionAfterDelete' Is.EqualTo(2)' "Expceted revision after DELETE to be 2 because it's the best bet revision number to use even though it has most likely been deleted for good from the underlying storage");
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var dateTimeCorrelationValue = new DateTime(1979' 3' 19);
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var dateTimeCorrelationValue = new DateTime(1979' 3' 19);
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var dateTimeCorrelationValue = new DateTime(1979' 3' 19);
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var dateTimeOffsetCorrelationValue = new DateTimeOffset(1979' 3' 19' 20' 0' 0' TimeSpan.FromHours(2));
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var dateTimeOffsetCorrelationValue = new DateTimeOffset(1979' 3' 19' 20' 0' 0' TimeSpan.FromHours(2));
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var dateTimeOffsetCorrelationValue = new DateTimeOffset(1979' 3' 19' 20' 0' 0' TimeSpan.FromHours(2));
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var dateTimeOffsetCorrelationValue = new DateTimeOffset(1979' 3' 19' 20' 0' 0' TimeSpan.FromHours(2));
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var dateTimeOffsetCorrelationValue = new DateTimeOffset(1979' 3' 19' 20' 0' 0' TimeSpan.FromHours(2));
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var decimalCorrelationValue = 23M;
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var intCorrelationValue = 8;
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var byteCorrelationValue = (byte)64;
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var shortCorrelationValue = (short)78;
Magic Number,Rebus.Tests.Contracts.Sagas,BasicLoadAndSaveAndFindOperations<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\BasicLoadAndSaveAndFindOperations.cs,CorrelateByDifferentPropertyTypes,The following statement contains a magic number: var longCorrelationValue = 2323232L;
Magic Number,Rebus.Tests.Contracts.Sagas,SagaIntegrationTests<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaIntegrationTests.cs,DoesNotChokeWhenCorrelatingMultipleMessagesWithTheSameCorrelationProperty,The following statement contains a magic number: done.WaitOrDie(TimeSpan.FromSeconds(5));
Magic Number,Rebus.Tests.Contracts.Sagas,SagaIntegrationTests<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaIntegrationTests.cs,CanFinishSaga,The following statement contains a magic number: activator.Register(() => new TestSaga(events' 3));
Magic Number,Rebus.Tests.Contracts.Sagas,SagaIntegrationTests<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaIntegrationTests.cs,CanFinishSaga,The following statement contains a magic number: const int millisecondsDelay = 500;
Magic Number,Rebus.Tests.Contracts.Sagas,SagaIntegrationTests<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaIntegrationTests.cs,CanFinishSaga,The following statement contains a magic number: await bus.SendLocal(new SagaMessage { Id = 70 });
Magic Number,Rebus.Tests.Contracts.Sagas,SagaIntegrationTests<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaIntegrationTests.cs,CanFinishSaga,The following statement contains a magic number: await bus.SendLocal(new SagaMessage { Id = 70 });
Magic Number,Rebus.Tests.Contracts.Sagas,SagaIntegrationTests<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaIntegrationTests.cs,CanFinishSaga,The following statement contains a magic number: await bus.SendLocal(new SagaMessage { Id = 70 });
Magic Number,Rebus.Tests.Contracts.Sagas,SagaIntegrationTests<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaIntegrationTests.cs,CanFinishSaga,The following statement contains a magic number: await bus.SendLocal(new SagaMessage { Id = 70 });
Magic Number,Rebus.Tests.Contracts.Sagas,SagaIntegrationTests<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaIntegrationTests.cs,CanFinishSaga,The following statement contains a magic number: await bus.SendLocal(new SagaMessage { Id = 70 });
Magic Number,Rebus.Tests.Contracts.Sagas,SagaIntegrationTests<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaIntegrationTests.cs,CanFinishSaga,The following statement contains a magic number: await Task.Delay(3 * millisecondsDelay);
Magic Number,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,DoesNotFailWhenSagaDataCouldNotBeFound,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaData,The following statement contains a magic number: var sharedCounter = new SharedCounter(3' "Message counter")             {                 Delay = TimeSpan.FromSeconds(2)             };
Magic Number,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaData,The following statement contains a magic number: var sharedCounter = new SharedCounter(3' "Message counter")             {                 Delay = TimeSpan.FromSeconds(2)             };
Magic Number,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaData,The following statement contains a magic number: sharedCounter.WaitForResetEvent(timeoutSeconds: 10);
Magic Number,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaData,The following statement contains a magic number: Assert.That(allSnapshots.Count' Is.EqualTo(3));
Magic Number,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaData,The following statement contains a magic number: Assert.That(allSnapshots.OrderBy(s => s.SagaData.Revision).Select(s => s.SagaData.Revision)' Is.EqualTo(new[] { 0' 1' 2 })'                 "Expected the three initial revisions");
Magic Number,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaDataAlsoWhenImmediatelyMarkingAsComplete,The following statement contains a magic number: var sharedCounter = new SharedCounter(3' "Message counter")             {                 Delay = TimeSpan.FromSeconds(1)             };
Magic Number,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaDataAlsoWhenImmediatelyMarkingAsComplete,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaDataAlsoWhenImmediatelyMarkingAsComplete,The following statement contains a magic number: Assert.That(allSnapshots.Count' Is.EqualTo(3));
Magic Number,Rebus.Tests.Contracts.Sagas,SagaSnapshotStorageTest<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\SagaSnapshotStorageTest.cs,CreatesSnapshotOfSagaDataAlsoWhenImmediatelyMarkingAsComplete,The following statement contains a magic number: Assert.That(allSnapshots.Select(s => s.SagaData.Id).Distinct().Count()' Is.EqualTo(3)' "Expected three different saga IDs!");
Magic Number,Rebus.Tests.Contracts.Sagas,TestSagaCorrelation<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\TestSagaCorrelation.cs,YeahItWorks,The following statement contains a magic number: await activator.Bus.SendLocal(new Initiate             {                 AGuid = new Guid("BAA06058-B34E-4699-8463-E0CBA73E925C")'                 AString = "hej"'                 AnInt = 23             });
Magic Number,Rebus.Tests.Contracts.Sagas,TestSagaCorrelation<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\TestSagaCorrelation.cs,YeahItWorks,The following statement contains a magic number: await events.WaitUntil(e => e.Count >= 4);
Magic Number,Rebus.Tests.Contracts.Sagas,TestSagaCorrelation<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\TestSagaCorrelation.cs,YeahItWorks,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Rebus.Tests.Contracts.Sagas,TestSagaCorrelation<TFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Sagas\TestSagaCorrelation.cs,YeahItWorks,The following statement contains a magic number: Assert.That(events.Count' Is.EqualTo(4));
Magic Number,Rebus.Tests.Contracts.Serialization,BasicSerializationTests<TSerializerFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Serialization\BasicSerializationTests.cs,CountNumberOfObjectRoundtrips,The following statement contains a magic number: var objectContainer = new RootObject             {                 BigObjects = Enumerable                 .Range(0' 100)                     .Select(i => new BigObject                     {                         Integer = i'                         String = $"This is string number {i}"                     })                     .ToList()             };
Magic Number,Rebus.Tests.Contracts.Serialization.Default,TestDynamicCapabilityOfDefaultSerializer,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Serialization\Default\TestDynamicJil.cs,DispatchesDynamicMessageWhenDotNetTypeCannotBeFound,The following statement contains a magic number: gotTheMessage.WaitOrDie(TimeSpan.FromSeconds(5));
Magic Number,Rebus.Tests.Contracts.Timeouts,BasicStoreAndRetrieveOperations<TTimeoutManagerFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Timeouts\BasicStoreAndRetrieveOperations.cs,TimeoutsAreNotReturnedUntilTheyAreActuallyDue,The following statement contains a magic number: var evenFurtherIntoTheFuture = DateTimeOffset.Now.AddMinutes(8);
Magic Number,Rebus.Tests.Contracts.Transports,BasicSendReceive<TTransportFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\BasicSendReceive.cs,MultipleSentMessagesCanBeRolledBack,The following statement contains a magic number: Assert.That(receivedMessages.Count' Is.EqualTo(2)' "Two messages were sent' so we expected two messages to be received");
Magic Number,Rebus.Tests.Contracts.Transports,BasicSendReceive<TTransportFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\BasicSendReceive.cs,GetAll,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Rebus.Tests.Contracts.Transports,BasicSendReceive<TTransportFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\BasicSendReceive.cs,GetAll,The following statement contains a magic number: receivedNulls < 5
Magic Number,Rebus.Tests.Contracts.Transports,MessageExpiration<TTransportFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\MessageExpiration.cs,ReceivesNonExpiredMessage,The following statement contains a magic number: await Task.Delay(5000);
Magic Number,Rebus.Tests.Contracts.Transports,MessageExpiration<TTransportFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\MessageExpiration.cs,DoesNotReceiveExpiredMessage,The following statement contains a magic number: const int millisecondsDelay = 7000;
Magic Number,Rebus.Tests.Contracts.Transports,MessageExpiration<TTransportFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\MessageExpiration.cs,ReceivesAlmostExpiredMessage,The following statement contains a magic number: await Task.Delay(3000);
Magic Number,Rebus.Tests.Contracts.Transports,TestManyMessages<TBusFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\TestManyMessages.cs,SendAndReceiveManyMessages,The following statement contains a magic number: var timeout = TimeSpan.FromSeconds(messageCount * 0.01 + 100);
Magic Number,Rebus.Tests.Contracts.Transports,TestManyMessages<TBusFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\TestManyMessages.cs,SendAndReceiveManyMessages,The following statement contains a magic number: var timeout = TimeSpan.FromSeconds(messageCount * 0.01 + 100);
Magic Number,Rebus.Tests.Contracts.Transports,TestManyMessages<TBusFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\TestManyMessages.cs,SendAndReceiveManyMessages,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Rebus.Tests.Contracts.Transports,TestManyMessages<TBusFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\TestManyMessages.cs,BuildPrintTimer,The following statement contains a magic number: return new Timer(                 (object o) => { Console.WriteLine($"Sent: {sentMessages}' Received: {receivedMessages}"); }' null'                 TimeSpan.FromMilliseconds(5000)' TimeSpan.FromMilliseconds(5000));
Magic Number,Rebus.Tests.Contracts.Transports,TestManyMessages<TBusFactory>,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Transports\TestManyMessages.cs,BuildPrintTimer,The following statement contains a magic number: return new Timer(                 (object o) => { Console.WriteLine($"Sent: {sentMessages}' Received: {receivedMessages}"); }' null'                 TimeSpan.FromMilliseconds(5000)' TimeSpan.FromMilliseconds(5000));
Magic Number,Rebus.Tests.Contracts.Utilities,DeleteHelper,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Utilities\DeleteHelper.cs,DeleteDirectory,The following statement contains a magic number: var timeout = TimeSpan.FromSeconds(10);
Magic Number,Rebus.Tests.Contracts.Utilities,SharedCounter,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Utilities\SharedCounter.cs,SharedCounter,The following statement contains a magic number: _statusTimer = new Timer((object o) => {                 Console.WriteLine("Counter '{0}' - value: {1} (initial: {2}' waited: {3:0.#} s)"'                 _name' _counter' _initialValue' _stopwatch.Elapsed.TotalSeconds);                                 }' null' TimeSpan.FromMilliseconds(1000)' TimeSpan.FromMilliseconds(1000));
Magic Number,Rebus.Tests.Contracts.Utilities,SharedCounter,C:\research\architectureSmells\repos\rebus-org_Rebus\Rebus.Tests.Contracts\Utilities\SharedCounter.cs,SharedCounter,The following statement contains a magic number: _statusTimer = new Timer((object o) => {                 Console.WriteLine("Counter '{0}' - value: {1} (initial: {2}' waited: {3:0.#} s)"'                 _name' _counter' _initialValue' _stopwatch.Elapsed.TotalSeconds);                                 }' null' TimeSpan.FromMilliseconds(1000)' TimeSpan.FromMilliseconds(1000));
